Implementation smell,Namespace,Class,File,Method,Description
Long Method,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The method has 104 lines of code.
Long Method,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The method has 316 lines of code.
Long Method,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The method has 161 lines of code.
Complex Method,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,Cyclomatic complexity of the method is 22
Complex Method,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,Cyclomatic complexity of the method is 11
Complex Method,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,Cyclomatic complexity of the method is 8
Complex Method,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,MultipleBlockSequencer,Cyclomatic complexity of the method is 13
Complex Method,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,Cyclomatic complexity of the method is 13
Complex Method,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AddExtraCodeWords,Cyclomatic complexity of the method is 21
Complex Method,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,Cyclomatic complexity of the method is 13
Complex Method,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,Cyclomatic complexity of the method is 13
Complex Method,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,Cyclomatic complexity of the method is 16
Complex Method,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,Cyclomatic complexity of the method is 11
Complex Method,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,Cyclomatic complexity of the method is 30
Complex Method,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,Cyclomatic complexity of the method is 8
Complex Method,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,Cyclomatic complexity of the method is 28
Complex Method,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,Cyclomatic complexity of the method is 12
Complex Method,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,Cyclomatic complexity of the method is 38
Long Identifier,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The length of the parameter numberErrorCorrectionCodeWords is 30.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The length of the statement  "	//also' keep in mind that the purpose of this operation is to get the remainder when the message polynomial is divided by g(x) aka the generator polynoimials " is 157.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The length of the statement  "	for (int currentPosition = totalCodeWords - 1; messagePolynomial.Count > numberErrorCorrectionCodeWords; currentPosition--) { " is 125.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The length of the statement  "	//cycles through the elements of the generator polynomial (ten is added so it doesnt have to be added at every step later) " is 122.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The length of the statement  "	//after getting the above i wanted to cry' as it is only 9 LINES OF CODE and the amount of time i spent is pityfull........  " is 123.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The length of the statement  "	//all of the outgoing bits have to be XOR'd with a mask that apparently prevents the rare case of an ALL zero string from being outputted " is 137.
Long Statement,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The length of the statement  "	//im just going to leave the understanding of this one to the people with the PhD's (or just accept that this bit stream does what they say it does) " is 148.
Long Statement,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DataEncodeSwitch,The length of the statement  "	//tempBoolQueue = newBCH.BCHmain(tempBoolQueue' qrAssistance.QueueToDataCodeWords(tempBoolQueue)' errorCorrectionLevel); " is 120.
Long Statement,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,MultipleBlockSequencer,The length of the statement  "			foreach (int thisInt in newBCH.BCHmain (codeWordBlocks [i]' BchErrorLibrary [version - 1' errorCorrectionLevel] / numBlocks)) { " is 127.
Long Statement,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The length of the statement  "	///is almost filled by the data stream (within 4 from the capacity)' only the amount needed to fill the stream length are added " is 127.
Long Statement,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The length of the statement  "				//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes " is 125.
Long Statement,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The length of the statement  "						//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions " is 125.
Long Statement,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The length of the statement  "				((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255)); " is 160.
Long Statement,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The length of the statement  "	versionNum = qrAssistance.DetermineBestVersionAndErrorCorrection (encodingType' DetermineErrorCorrection ()' out errorCorrectionLevel); " is 135.
Long Statement,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The length of the statement  "	//17 is the base + 2 for the border plus 4 times the version number as the square increases by 4 for each version increase " is 122.
Long Statement,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The length of the statement  "	myCanvas.Save (System.Environment.CurrentDirectory.ToString () + "\\magic.png"' System.Drawing.Imaging.ImageFormat.Png); " is 120.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "			//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection " is 120.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "				//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row " is 137.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "				//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes " is 139.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "				//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added " is 151.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "				if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) { " is 121.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "				if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) { " is 129.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "					//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again " is 141.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The length of the statement  "			//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change" " is 148.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The length of the statement  "				//this method is slightly different than the one that is used by the standard but i have found it to have the same result in ALL cases " is 134.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The length of the statement  "				if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y])) " is 155.
Long Statement,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The length of the statement  "			//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid " is 139.
Long Statement,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The length of the statement  "		/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH" is 127.
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BchErrorCorrection,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BchErrorCorrection,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BchErrorCorrection,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The following statement contains a magic number: for (int currentPosition = totalCodeWords - 1; messagePolynomial.Count > numberErrorCorrectionCodeWords; currentPosition--) {  	//this will eliminate the case where the previous XORing creates two zeros and only one is removed  	//see the else statement for the solution to this problem  	if (messagePolynomial [currentPosition] != 0) {  		//this is the exponent of "a" which will be multiplied by the exponents of "a" in the generator polynomial  		int tempInt = Log [messagePolynomial [currentPosition]];  		//cycles through all elements of the generator polynomial applying the value of the antiLog   		for (int k = currentPosition; k >= generatorPolynomial.Count - numberErrorCorrectionCodeWords - 1; k--) {  			//the "a"'s are multiplied' as we are determining the new exponents we can simply add them  			generatorPolynomial [k] += tempInt;  			//if the new exponent is larger than 255 it must be modded by 255  			generatorPolynomial [k] %= 255;  		}  		//convert BACK to real integers  		for (int i = generatorPolynomial.Count - 1; i >= generatorPolynomial.Count - numberErrorCorrectionCodeWords - 1; i--)  			generatorPolynomial [i] = ALog [generatorPolynomial [i]];  		//XOR's the converted generator polynomial with the message polynomial  		//effectively eliminating the first term of the generator polynomial because they are (or should be) the same  		for (int i = generatorPolynomial.Count - 1; i >= generatorPolynomial.Count - numberErrorCorrectionCodeWords; i--)  			generatorPolynomial [i] ^= messagePolynomial [i];  		/// <summary>  		/// this next section of code is kinda a switch-a-roo that prepares all of the lists  		/// for the next round. i tried to optimize this code as i think there has to be a simplier way  		/// but my attempts have failed. i end up with crazy negative numbers so i will just let it be  		/// </summary>  		//the first term of the generator polynomial is removed because it is a zero  		generatorPolynomial.RemoveAt (currentPosition);  		//the messagepolynomial is reset so it can be filled with the contents of the generator polynomial  		messagePolynomial.Clear ();  		//the generator polynomial is then copied into the message polynomial for the next rotation  		foreach (int thisInt in generatorPolynomial)  			messagePolynomial.Add (thisInt);  		//the "0" element is removed from the generator polynomial shifting the entire contents down by one and   		//preserving the exponent on x as the array index >:D  		tempGenList.RemoveAt (0);  		//reset the generator polynomial so it can be replaced for the next round  		generatorPolynomial.Clear ();  		//the modified generator polynomial is replaced with the original  		foreach (int thisInt in tempGenList)  			generatorPolynomial.Add (thisInt);  	}  	//double zero case  	else {  		//removes the zero and sets all of the lists as if nothing happened  		messagePolynomial.RemoveAt (currentPosition);  		generatorPolynomial.RemoveAt (0);  		tempGenList.RemoveAt (0);  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The following statement contains a magic number: if (messagePolynomial [currentPosition] != 0) {  	//this is the exponent of "a" which will be multiplied by the exponents of "a" in the generator polynomial  	int tempInt = Log [messagePolynomial [currentPosition]];  	//cycles through all elements of the generator polynomial applying the value of the antiLog   	for (int k = currentPosition; k >= generatorPolynomial.Count - numberErrorCorrectionCodeWords - 1; k--) {  		//the "a"'s are multiplied' as we are determining the new exponents we can simply add them  		generatorPolynomial [k] += tempInt;  		//if the new exponent is larger than 255 it must be modded by 255  		generatorPolynomial [k] %= 255;  	}  	//convert BACK to real integers  	for (int i = generatorPolynomial.Count - 1; i >= generatorPolynomial.Count - numberErrorCorrectionCodeWords - 1; i--)  		generatorPolynomial [i] = ALog [generatorPolynomial [i]];  	//XOR's the converted generator polynomial with the message polynomial  	//effectively eliminating the first term of the generator polynomial because they are (or should be) the same  	for (int i = generatorPolynomial.Count - 1; i >= generatorPolynomial.Count - numberErrorCorrectionCodeWords; i--)  		generatorPolynomial [i] ^= messagePolynomial [i];  	/// <summary>  	/// this next section of code is kinda a switch-a-roo that prepares all of the lists  	/// for the next round. i tried to optimize this code as i think there has to be a simplier way  	/// but my attempts have failed. i end up with crazy negative numbers so i will just let it be  	/// </summary>  	//the first term of the generator polynomial is removed because it is a zero  	generatorPolynomial.RemoveAt (currentPosition);  	//the messagepolynomial is reset so it can be filled with the contents of the generator polynomial  	messagePolynomial.Clear ();  	//the generator polynomial is then copied into the message polynomial for the next rotation  	foreach (int thisInt in generatorPolynomial)  		messagePolynomial.Add (thisInt);  	//the "0" element is removed from the generator polynomial shifting the entire contents down by one and   	//preserving the exponent on x as the array index >:D  	tempGenList.RemoveAt (0);  	//reset the generator polynomial so it can be replaced for the next round  	generatorPolynomial.Clear ();  	//the modified generator polynomial is replaced with the original  	foreach (int thisInt in tempGenList)  		generatorPolynomial.Add (thisInt);  }  //double zero case  else {  	//removes the zero and sets all of the lists as if nothing happened  	messagePolynomial.RemoveAt (currentPosition);  	generatorPolynomial.RemoveAt (0);  	tempGenList.RemoveAt (0);  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The following statement contains a magic number: for (int k = currentPosition; k >= generatorPolynomial.Count - numberErrorCorrectionCodeWords - 1; k--) {  	//the "a"'s are multiplied' as we are determining the new exponents we can simply add them  	generatorPolynomial [k] += tempInt;  	//if the new exponent is larger than 255 it must be modded by 255  	generatorPolynomial [k] %= 255;  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,BCHmain,The following statement contains a magic number: generatorPolynomial [k] %= 255;  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: foreach (bool thisBool in qrAssistance.BitsWithPadding (errorCorrectionLevel' 2)) {  	//add to the queue for later use  	outQueue.Enqueue (thisBool);  	//add to the generator polynomial for later use  	generatorPolynomial [generatorBoolCounter] = thisBool;  	generatorBoolCounter++;  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: foreach (bool thisBool in qrAssistance.BitsWithPadding (maskPattern' 3)) {  	//add to the queue for later use  	outQueue.Enqueue (thisBool);  	//add to the generator polynomial for later use  	generatorPolynomial [generatorBoolCounter] = thisBool;  	generatorBoolCounter++;  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 14; i >= 10; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 10;  		for (int k = 10; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 14; i >= 10; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 10;  		for (int k = 10; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 14; i >= 10; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 10;  		for (int k = 10; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 14; i >= 10; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 10;  		for (int k = 10; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: if (generatorPolynomial [i] == true) {  	int quotientExponent = i - 10;  	for (int k = 10; k >= 0; k--)  		//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   		//while getting a remained was XOR in this case  		generatorPolynomial [k + quotientExponent] ^= gOfX [k];  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: if (generatorPolynomial [i] == true) {  	int quotientExponent = i - 10;  	for (int k = 10; k >= 0; k--)  		//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   		//while getting a remained was XOR in this case  		generatorPolynomial [k + quotientExponent] ^= gOfX [k];  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int k = 10; k >= 0; k--)  	//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   	//while getting a remained was XOR in this case  	generatorPolynomial [k + quotientExponent] ^= gOfX [k];  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 9; i >= 0; i--)  	outQueue.Enqueue (generatorPolynomial [i]);  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,FormatInformation,The following statement contains a magic number: for (int i = 0; i <= 14; i++)  	//cycles through the whole queue XORIN' it all with the bit stream  	outQueue.Enqueue (outQueue.Dequeue () ^ XORMaskStream [i]);  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: foreach (bool thisBool in qrAssistance.BitsWithPadding (version' 6)) {  	outQueue.Enqueue (thisBool);  	generatorPolynomial [generatorPolynomialCounter] = thisBool;  	generatorPolynomialCounter++;  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int i = 17; i >= 12; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 12;  		for (int k = 12; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int i = 17; i >= 12; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 12;  		for (int k = 12; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int i = 17; i >= 12; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 12;  		for (int k = 12; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int i = 17; i >= 12; i--) {  	//then if the polynomial that is currently being looked at ISNT zero  	if (generatorPolynomial [i] == true) {  		int quotientExponent = i - 12;  		for (int k = 12; k >= 0; k--)  			//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   			//while getting a remained was XOR in this case  			generatorPolynomial [k + quotientExponent] ^= gOfX [k];  	}  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: if (generatorPolynomial [i] == true) {  	int quotientExponent = i - 12;  	for (int k = 12; k >= 0; k--)  		//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   		//while getting a remained was XOR in this case  		generatorPolynomial [k + quotientExponent] ^= gOfX [k];  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: if (generatorPolynomial [i] == true) {  	int quotientExponent = i - 12;  	for (int k = 12; k >= 0; k--)  		//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   		//while getting a remained was XOR in this case  		generatorPolynomial [k + quotientExponent] ^= gOfX [k];  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int k = 12; k >= 0; k--)  	//XOR is magical' it took me about 4 minutes exactly to realize the operation that was actually being done   	//while getting a remained was XOR in this case  	generatorPolynomial [k + quotientExponent] ^= gOfX [k];  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,VersionInformation,The following statement contains a magic number: for (int i = 11; i >= 0; i--)  	outQueue.Enqueue (generatorPolynomial [i]);  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclareLogsAndAntiLogs,The following statement contains a magic number: for (i = 1; i < GF; i++) {  	ALog [i] = ALog [i - 1] * 2;  	if (ALog [i] >= GF)  		ALog [i] ^= PP;  	Log [ALog [i]] = i;  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclareLogsAndAntiLogs,The following statement contains a magic number: ALog [i] = ALog [i - 1] * 2;  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: if (PolynomialsInAntiLog.ContainsKey (7) != true) {  	PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  		87'  		229'  		146'  		149'  		238'  		102'  		21  	}));  	PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  		251'  		67'  		46'  		61'  		118'  		70'  		64'  		94'  		32'  		45  	}));  	PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  		74'  		152'  		176'  		100'  		86'  		100'  		106'  		104'  		130'  		218'  		206'  		140'  		78  	}));  	PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  		8'  		183'  		61'  		91'  		202'  		37'  		51'  		58'  		58'  		237'  		140'  		124'  		5'  		99'  		105  	}));  	PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  		120'  		104'  		107'  		109'  		102'  		161'  		76'  		3'  		91'  		191'  		147'  		169'  		182'  		194'  		225'  		120  	}));  	PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  		43'  		139'  		206'  		78'  		43'  		239'  		123'  		206'  		214'  		147'  		24'  		99'  		150'  		39'  		243'  		163'  		136  	}));  	PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  		215'  		234'  		158'  		94'  		184'  		97'  		118'  		170'  		79'  		187'  		152'  		148'  		252'  		179'  		5'  		98'  		96'  		153  	}));  	PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  		17'  		60'  		79'  		50'  		61'  		163'  		26'  		187'  		202'  		180'  		221'  		225'  		83'  		239'  		156'  		164'  		212'  		212'  		188'  		190  	}));  	PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  		210'  		171'  		247'  		242'  		93'  		230'  		14'  		109'  		221'  		53'  		200'  		74'  		8'  		172'  		98'  		80'  		219'  		134'  		160'  		105'  		165'  		231  	}));  	PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  		229'  		121'  		135'  		48'  		211'  		117'  		251'  		126'  		159'  		180'  		169'  		152'  		192'  		226'  		228'  		218'  		111'  		0'  		117'  		232'  		87'  		96'  		227'  		21  	}));  	PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  		173'  		125'  		158'  		2'  		103'  		182'  		118'  		17'  		145'  		201'  		111'  		28'  		165'  		53'  		161'  		21'  		245'  		142'  		13'  		102'  		48'  		227'  		153'  		145'  		218'  		70  	}));  	PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  		168'  		223'  		200'  		104'  		224'  		234'  		108'  		180'  		110'  		190'  		195'  		147'  		205'  		27'  		232'  		201'  		21'  		43'  		245'  		87'  		42'  		195'  		212'  		119'  		242'  		37'  		9'  		123  	}));  	PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  		10'  		6'  		106'  		190'  		249'  		167'  		4'  		67'  		209'  		138'  		138'  		32'  		242'  		123'  		89'  		27'  		120'  		185'  		80'  		156'  		38'  		69'  		171'  		60'  		28'  		222'  		80'  		52'  		254'  		185'  		220'  		241  	}));  	PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  		200'  		183'  		98'  		16'  		172'  		31'  		246'  		234'  		60'  		152'  		115'  		0'  		167'  		152'  		113'  		248'  		238'  		107'  		18'  		63'  		218'  		37'  		87'  		210'  		105'  		177'  		120'  		74'  		121'  		196'  		117'  		251'  		113'  		233'  		30'  		120  	}));  }  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (7' new List<int> (new int[] {  	87'  	229'  	146'  	149'  	238'  	102'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (10' new List<int> (new int[] {  	251'  	67'  	46'  	61'  	118'  	70'  	64'  	94'  	32'  	45  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (13' new List<int> (new int[] {  	74'  	152'  	176'  	100'  	86'  	100'  	106'  	104'  	130'  	218'  	206'  	140'  	78  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (15' new List<int> (new int[] {  	8'  	183'  	61'  	91'  	202'  	37'  	51'  	58'  	58'  	237'  	140'  	124'  	5'  	99'  	105  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (16' new List<int> (new int[] {  	120'  	104'  	107'  	109'  	102'  	161'  	76'  	3'  	91'  	191'  	147'  	169'  	182'  	194'  	225'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (17' new List<int> (new int[] {  	43'  	139'  	206'  	78'  	43'  	239'  	123'  	206'  	214'  	147'  	24'  	99'  	150'  	39'  	243'  	163'  	136  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (18' new List<int> (new int[] {  	215'  	234'  	158'  	94'  	184'  	97'  	118'  	170'  	79'  	187'  	152'  	148'  	252'  	179'  	5'  	98'  	96'  	153  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (20' new List<int> (new int[] {  	17'  	60'  	79'  	50'  	61'  	163'  	26'  	187'  	202'  	180'  	221'  	225'  	83'  	239'  	156'  	164'  	212'  	212'  	188'  	190  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (22' new List<int> (new int[] {  	210'  	171'  	247'  	242'  	93'  	230'  	14'  	109'  	221'  	53'  	200'  	74'  	8'  	172'  	98'  	80'  	219'  	134'  	160'  	105'  	165'  	231  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (24' new List<int> (new int[] {  	229'  	121'  	135'  	48'  	211'  	117'  	251'  	126'  	159'  	180'  	169'  	152'  	192'  	226'  	228'  	218'  	111'  	0'  	117'  	232'  	87'  	96'  	227'  	21  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (26' new List<int> (new int[] {  	173'  	125'  	158'  	2'  	103'  	182'  	118'  	17'  	145'  	201'  	111'  	28'  	165'  	53'  	161'  	21'  	245'  	142'  	13'  	102'  	48'  	227'  	153'  	145'  	218'  	70  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (28' new List<int> (new int[] {  	168'  	223'  	200'  	104'  	224'  	234'  	108'  	180'  	110'  	190'  	195'  	147'  	205'  	27'  	232'  	201'  	21'  	43'  	245'  	87'  	42'  	195'  	212'  	119'  	242'  	37'  	9'  	123  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (32' new List<int> (new int[] {  	10'  	6'  	106'  	190'  	249'  	167'  	4'  	67'  	209'  	138'  	138'  	32'  	242'  	123'  	89'  	27'  	120'  	185'  	80'  	156'  	38'  	69'  	171'  	60'  	28'  	222'  	80'  	52'  	254'  	185'  	220'  	241  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,BchErrorCorrection,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\BchErrorCorrection.cs,DeclarePolynomials,The following statement contains a magic number: PolynomialsInAntiLog.Add (36' new List<int> (new int[] {  	200'  	183'  	98'  	16'  	172'  	31'  	246'  	234'  	60'  	152'  	115'  	0'  	167'  	152'  	113'  	248'  	238'  	107'  	18'  	63'  	218'  	37'  	87'  	210'  	105'  	177'  	120'  	74'  	121'  	196'  	117'  	251'  	113'  	233'  	30'  	120  }));  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DataEncodeQR,The following statement contains a magic number: squareSize = qrVersion * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DataEncodeQR,The following statement contains a magic number: squareSize = qrVersion * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DataEncodeQR,The following statement contains a magic number: squareSize = qrVersion * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DataEncodeSwitch,The following statement contains a magic number: if (ecodementType == 3)  	tempBoolQueue = AlphaNumericEncoding (message);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: foreach (bool thisBool in qrAssistance.BitsWithPadding (2' 4)) {  	outQueue.Enqueue (thisBool);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: foreach (bool thisBool in qrAssistance.BitsWithPadding (2' 4)) {  	outQueue.Enqueue (thisBool);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 10)  	characterLengthIndex = 9;  else if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 10)  	characterLengthIndex = 9;  else if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 10)  	characterLengthIndex = 9;  else if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 10)  	characterLengthIndex = 9;  else if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 10)  	characterLengthIndex = 9;  else if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: characterLengthIndex = 9;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (version < 27)  	characterLengthIndex = 11;  else  	characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: characterLengthIndex = 11;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: characterLengthIndex = 13;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < messageLength; i++) {  	//if the character being input is actually in the dictionary..  	if (alphaNumericDictionary.ContainsKey (message.Substring (0' 1)))  		messageDecoded.Add (alphaNumericDictionary [message.Substring (0' 1)]);  	//if the character was not found in the dictionary' a space in put in its place (no rhyme intended)  	else  		messageDecoded.Add (36);  	message = message.Substring (1);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (alphaNumericDictionary.ContainsKey (message.Substring (0' 1)))  	messageDecoded.Add (alphaNumericDictionary [message.Substring (0' 1)]);  //if the character was not found in the dictionary' a space in put in its place (no rhyme intended)  else  	messageDecoded.Add (36);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: messageDecoded.Add (36);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < messageDecoded.Count; i += 2) {  	int currentStream;  	int streamLength;  	//two characters are converted into 11 bit streams' sometimes there is an odd character left at the end  	if (i == messageDecoded.Count - 1) {  		currentStream = messageDecoded [i];  		//stream changes to 6 when there is only one character being converted  		streamLength = 6;  	}  	else {  		//the stream = the current character x 45 + the next character  		currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  		streamLength = 11;  	}  	//adds the current data value into the data stream  	foreach (bool thisBool in qrAssistance.BitsWithPadding (currentStream' streamLength)) {  		outQueue.Enqueue (thisBool);  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < messageDecoded.Count; i += 2) {  	int currentStream;  	int streamLength;  	//two characters are converted into 11 bit streams' sometimes there is an odd character left at the end  	if (i == messageDecoded.Count - 1) {  		currentStream = messageDecoded [i];  		//stream changes to 6 when there is only one character being converted  		streamLength = 6;  	}  	else {  		//the stream = the current character x 45 + the next character  		currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  		streamLength = 11;  	}  	//adds the current data value into the data stream  	foreach (bool thisBool in qrAssistance.BitsWithPadding (currentStream' streamLength)) {  		outQueue.Enqueue (thisBool);  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < messageDecoded.Count; i += 2) {  	int currentStream;  	int streamLength;  	//two characters are converted into 11 bit streams' sometimes there is an odd character left at the end  	if (i == messageDecoded.Count - 1) {  		currentStream = messageDecoded [i];  		//stream changes to 6 when there is only one character being converted  		streamLength = 6;  	}  	else {  		//the stream = the current character x 45 + the next character  		currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  		streamLength = 11;  	}  	//adds the current data value into the data stream  	foreach (bool thisBool in qrAssistance.BitsWithPadding (currentStream' streamLength)) {  		outQueue.Enqueue (thisBool);  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < messageDecoded.Count; i += 2) {  	int currentStream;  	int streamLength;  	//two characters are converted into 11 bit streams' sometimes there is an odd character left at the end  	if (i == messageDecoded.Count - 1) {  		currentStream = messageDecoded [i];  		//stream changes to 6 when there is only one character being converted  		streamLength = 6;  	}  	else {  		//the stream = the current character x 45 + the next character  		currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  		streamLength = 11;  	}  	//adds the current data value into the data stream  	foreach (bool thisBool in qrAssistance.BitsWithPadding (currentStream' streamLength)) {  		outQueue.Enqueue (thisBool);  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: i += 2
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (i == messageDecoded.Count - 1) {  	currentStream = messageDecoded [i];  	//stream changes to 6 when there is only one character being converted  	streamLength = 6;  }  else {  	//the stream = the current character x 45 + the next character  	currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  	streamLength = 11;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (i == messageDecoded.Count - 1) {  	currentStream = messageDecoded [i];  	//stream changes to 6 when there is only one character being converted  	streamLength = 6;  }  else {  	//the stream = the current character x 45 + the next character  	currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  	streamLength = 11;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (i == messageDecoded.Count - 1) {  	currentStream = messageDecoded [i];  	//stream changes to 6 when there is only one character being converted  	streamLength = 6;  }  else {  	//the stream = the current character x 45 + the next character  	currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  	streamLength = 11;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: streamLength = 6;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: currentStream = messageDecoded [i] * 45 + messageDecoded [i + 1];  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: streamLength = 11;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (outQueue.Count < numberOfCodeWords [version - 1' errorCorrectionLevel] * 8 - 4) {  	//adding of the four bits that are mentioned above  	for (int i = 0; i < 4; i++)  		outQueue.Enqueue (false);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (outQueue.Count < numberOfCodeWords [version - 1' errorCorrectionLevel] * 8 - 4) {  	//adding of the four bits that are mentioned above  	for (int i = 0; i < 4; i++)  		outQueue.Enqueue (false);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: if (outQueue.Count < numberOfCodeWords [version - 1' errorCorrectionLevel] * 8 - 4) {  	//adding of the four bits that are mentioned above  	for (int i = 0; i < 4; i++)  		outQueue.Enqueue (false);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AlphaNumericEncoding,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	outQueue.Enqueue (false);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AddExtraCodeWords,The following statement contains a magic number: for (int i = 0; i < numberOfCodeWords [version - 1' errorCorrectionLevel] - outQueueCount / 8; i++) {  	//XOR switching' gotta love it ;)  	switch (switchBool) {  	//236 is added  	case false:  		outQueue.Enqueue (true);  		outQueue.Enqueue (true);  		outQueue.Enqueue (true);  		outQueue.Enqueue (false);  		outQueue.Enqueue (true);  		outQueue.Enqueue (true);  		outQueue.Enqueue (false);  		outQueue.Enqueue (false);  		break;  	//17 is added  	case true:  		outQueue.Enqueue (false);  		outQueue.Enqueue (false);  		outQueue.Enqueue (false);  		outQueue.Enqueue (true);  		outQueue.Enqueue (false);  		outQueue.Enqueue (false);  		outQueue.Enqueue (false);  		outQueue.Enqueue (true);  		break;  	}  	switchBool ^= true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumn = squareSize - 2; collumn > 1; collumn -= 2) {  	//this determines the direction of the collumn' up or down  	if ((collumn + 1) % 4 != 0) {  		//up sequence  		//row start counting from the bottom to top  		for (int row = squareSize - 1; row > 0; row--) {  			//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  			for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  				//confirms there is still data to still write' otherwise BAIL.  				if (theQueue.Count == 0)  					return theData;  				//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  				//this lead to it only drawing one collumn making all of the collumns after it  				//simple fix is to shift it when its evaluating this collumn by one to the left  				if (collumn <= 8 && collumn > 1) {  					//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  					if (voidSpace [collumn - collumMultiplier - 1' row] == false)  						//writes the data in the corrected collumn  						theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  				}  				else//confirms the current space is writable  				if (voidSpace [collumn - collumMultiplier' row] == false)  					//writes the data in the correct spot  					theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  			}  		}  	}  	//for when the collumn is going down  	else {  		//only thing changed here is the row loop' it counts up' not down  		for (int row = 1; row < squareSize; row++) {  			for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  				if (theQueue.Count == 0)  					return theData;  				if (collumn <= 8 && collumn > 1) {  					if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  						theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  					}  				}  				else//see? the same.  				if (voidSpace [collumn - collumnMultiplier' row] == false) {  					theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  					//i actually spelt collumnMultiplier different. did you notice?  				}  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: collumn -= 2
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if ((collumn + 1) % 4 != 0) {  	//up sequence  	//row start counting from the bottom to top  	for (int row = squareSize - 1; row > 0; row--) {  		//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  		for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  			//confirms there is still data to still write' otherwise BAIL.  			if (theQueue.Count == 0)  				return theData;  			//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  			//this lead to it only drawing one collumn making all of the collumns after it  			//simple fix is to shift it when its evaluating this collumn by one to the left  			if (collumn <= 8 && collumn > 1) {  				//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  				if (voidSpace [collumn - collumMultiplier - 1' row] == false)  					//writes the data in the corrected collumn  					theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  			}  			else//confirms the current space is writable  			if (voidSpace [collumn - collumMultiplier' row] == false)  				//writes the data in the correct spot  				theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  		}  	}  }  //for when the collumn is going down  else {  	//only thing changed here is the row loop' it counts up' not down  	for (int row = 1; row < squareSize; row++) {  		for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  			if (theQueue.Count == 0)  				return theData;  			if (collumn <= 8 && collumn > 1) {  				if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  					theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  				}  			}  			else//see? the same.  			if (voidSpace [collumn - collumnMultiplier' row] == false) {  				theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  				//i actually spelt collumnMultiplier different. did you notice?  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if ((collumn + 1) % 4 != 0) {  	//up sequence  	//row start counting from the bottom to top  	for (int row = squareSize - 1; row > 0; row--) {  		//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  		for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  			//confirms there is still data to still write' otherwise BAIL.  			if (theQueue.Count == 0)  				return theData;  			//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  			//this lead to it only drawing one collumn making all of the collumns after it  			//simple fix is to shift it when its evaluating this collumn by one to the left  			if (collumn <= 8 && collumn > 1) {  				//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  				if (voidSpace [collumn - collumMultiplier - 1' row] == false)  					//writes the data in the corrected collumn  					theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  			}  			else//confirms the current space is writable  			if (voidSpace [collumn - collumMultiplier' row] == false)  				//writes the data in the correct spot  				theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  		}  	}  }  //for when the collumn is going down  else {  	//only thing changed here is the row loop' it counts up' not down  	for (int row = 1; row < squareSize; row++) {  		for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  			if (theQueue.Count == 0)  				return theData;  			if (collumn <= 8 && collumn > 1) {  				if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  					theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  				}  			}  			else//see? the same.  			if (voidSpace [collumn - collumnMultiplier' row] == false) {  				theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  				//i actually spelt collumnMultiplier different. did you notice?  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if ((collumn + 1) % 4 != 0) {  	//up sequence  	//row start counting from the bottom to top  	for (int row = squareSize - 1; row > 0; row--) {  		//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  		for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  			//confirms there is still data to still write' otherwise BAIL.  			if (theQueue.Count == 0)  				return theData;  			//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  			//this lead to it only drawing one collumn making all of the collumns after it  			//simple fix is to shift it when its evaluating this collumn by one to the left  			if (collumn <= 8 && collumn > 1) {  				//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  				if (voidSpace [collumn - collumMultiplier - 1' row] == false)  					//writes the data in the corrected collumn  					theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  			}  			else//confirms the current space is writable  			if (voidSpace [collumn - collumMultiplier' row] == false)  				//writes the data in the correct spot  				theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  		}  	}  }  //for when the collumn is going down  else {  	//only thing changed here is the row loop' it counts up' not down  	for (int row = 1; row < squareSize; row++) {  		for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  			if (theQueue.Count == 0)  				return theData;  			if (collumn <= 8 && collumn > 1) {  				if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  					theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  				}  			}  			else//see? the same.  			if (voidSpace [collumn - collumnMultiplier' row] == false) {  				theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  				//i actually spelt collumnMultiplier different. did you notice?  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if ((collumn + 1) % 4 != 0) {  	//up sequence  	//row start counting from the bottom to top  	for (int row = squareSize - 1; row > 0; row--) {  		//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  		for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  			//confirms there is still data to still write' otherwise BAIL.  			if (theQueue.Count == 0)  				return theData;  			//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  			//this lead to it only drawing one collumn making all of the collumns after it  			//simple fix is to shift it when its evaluating this collumn by one to the left  			if (collumn <= 8 && collumn > 1) {  				//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  				if (voidSpace [collumn - collumMultiplier - 1' row] == false)  					//writes the data in the corrected collumn  					theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  			}  			else//confirms the current space is writable  			if (voidSpace [collumn - collumMultiplier' row] == false)  				//writes the data in the correct spot  				theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  		}  	}  }  //for when the collumn is going down  else {  	//only thing changed here is the row loop' it counts up' not down  	for (int row = 1; row < squareSize; row++) {  		for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  			if (theQueue.Count == 0)  				return theData;  			if (collumn <= 8 && collumn > 1) {  				if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  					theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  				}  			}  			else//see? the same.  			if (voidSpace [collumn - collumnMultiplier' row] == false) {  				theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  				//i actually spelt collumnMultiplier different. did you notice?  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if ((collumn + 1) % 4 != 0) {  	//up sequence  	//row start counting from the bottom to top  	for (int row = squareSize - 1; row > 0; row--) {  		//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  		for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  			//confirms there is still data to still write' otherwise BAIL.  			if (theQueue.Count == 0)  				return theData;  			//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  			//this lead to it only drawing one collumn making all of the collumns after it  			//simple fix is to shift it when its evaluating this collumn by one to the left  			if (collumn <= 8 && collumn > 1) {  				//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  				if (voidSpace [collumn - collumMultiplier - 1' row] == false)  					//writes the data in the corrected collumn  					theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  			}  			else//confirms the current space is writable  			if (voidSpace [collumn - collumMultiplier' row] == false)  				//writes the data in the correct spot  				theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  		}  	}  }  //for when the collumn is going down  else {  	//only thing changed here is the row loop' it counts up' not down  	for (int row = 1; row < squareSize; row++) {  		for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  			if (theQueue.Count == 0)  				return theData;  			if (collumn <= 8 && collumn > 1) {  				if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  					theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  				}  			}  			else//see? the same.  			if (voidSpace [collumn - collumnMultiplier' row] == false) {  				theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  				//i actually spelt collumnMultiplier different. did you notice?  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int row = squareSize - 1; row > 0; row--) {  	//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  	for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  		//confirms there is still data to still write' otherwise BAIL.  		if (theQueue.Count == 0)  			return theData;  		//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  		//this lead to it only drawing one collumn making all of the collumns after it  		//simple fix is to shift it when its evaluating this collumn by one to the left  		if (collumn <= 8 && collumn > 1) {  			//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  			if (voidSpace [collumn - collumMultiplier - 1' row] == false)  				//writes the data in the corrected collumn  				theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  		}  		else//confirms the current space is writable  		if (voidSpace [collumn - collumMultiplier' row] == false)  			//writes the data in the correct spot  			theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int row = squareSize - 1; row > 0; row--) {  	//multiplier is a fancy term for move over one in the collumn that is 2 wide so each pixel can be assessed as the row changes  	for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  		//confirms there is still data to still write' otherwise BAIL.  		if (theQueue.Count == 0)  			return theData;  		//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  		//this lead to it only drawing one collumn making all of the collumns after it  		//simple fix is to shift it when its evaluating this collumn by one to the left  		if (collumn <= 8 && collumn > 1) {  			//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  			if (voidSpace [collumn - collumMultiplier - 1' row] == false)  				//writes the data in the corrected collumn  				theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  		}  		else//confirms the current space is writable  		if (voidSpace [collumn - collumMultiplier' row] == false)  			//writes the data in the correct spot  			theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  	//confirms there is still data to still write' otherwise BAIL.  	if (theQueue.Count == 0)  		return theData;  	//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  	//this lead to it only drawing one collumn making all of the collumns after it  	//simple fix is to shift it when its evaluating this collumn by one to the left  	if (collumn <= 8 && collumn > 1) {  		//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  		if (voidSpace [collumn - collumMultiplier - 1' row] == false)  			//writes the data in the corrected collumn  			theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  	}  	else//confirms the current space is writable  	if (voidSpace [collumn - collumMultiplier' row] == false)  		//writes the data in the correct spot  		theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumMultiplier = 0; collumMultiplier < 2; collumMultiplier++) {  	//confirms there is still data to still write' otherwise BAIL.  	if (theQueue.Count == 0)  		return theData;  	//there was a glitch where the sequencer would determine the horizontal alternating pattern as an obstical  	//this lead to it only drawing one collumn making all of the collumns after it  	//simple fix is to shift it when its evaluating this collumn by one to the left  	if (collumn <= 8 && collumn > 1) {  		//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  		if (voidSpace [collumn - collumMultiplier - 1' row] == false)  			//writes the data in the corrected collumn  			theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  	}  	else//confirms the current space is writable  	if (voidSpace [collumn - collumMultiplier' row] == false)  		//writes the data in the correct spot  		theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if (collumn <= 8 && collumn > 1) {  	//confirms the current space is writable in the adjusted collumn (possibily of tracker squares being there in higher versions  	if (voidSpace [collumn - collumMultiplier - 1' row] == false)  		//writes the data in the corrected collumn  		theData [collumn - collumMultiplier - 1' row] = theQueue.Dequeue ();  }  else//confirms the current space is writable  if (voidSpace [collumn - collumMultiplier' row] == false)  	//writes the data in the correct spot  	theData [collumn - collumMultiplier' row] = theQueue.Dequeue ();  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int row = 1; row < squareSize; row++) {  	for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  		if (theQueue.Count == 0)  			return theData;  		if (collumn <= 8 && collumn > 1) {  			if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  				theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  			}  		}  		else//see? the same.  		if (voidSpace [collumn - collumnMultiplier' row] == false) {  			theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  			//i actually spelt collumnMultiplier different. did you notice?  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int row = 1; row < squareSize; row++) {  	for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  		if (theQueue.Count == 0)  			return theData;  		if (collumn <= 8 && collumn > 1) {  			if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  				theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  			}  		}  		else//see? the same.  		if (voidSpace [collumn - collumnMultiplier' row] == false) {  			theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  			//i actually spelt collumnMultiplier different. did you notice?  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  	if (theQueue.Count == 0)  		return theData;  	if (collumn <= 8 && collumn > 1) {  		if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  			theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  		}  	}  	else//see? the same.  	if (voidSpace [collumn - collumnMultiplier' row] == false) {  		theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  		//i actually spelt collumnMultiplier different. did you notice?  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: for (int collumnMultiplier = 0; collumnMultiplier < 2; collumnMultiplier++) {  	if (theQueue.Count == 0)  		return theData;  	if (collumn <= 8 && collumn > 1) {  		if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  			theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  		}  	}  	else//see? the same.  	if (voidSpace [collumn - collumnMultiplier' row] == false) {  		theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  		//i actually spelt collumnMultiplier different. did you notice?  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,QrSequencer,The following statement contains a magic number: if (collumn <= 8 && collumn > 1) {  	if (voidSpace [collumn - collumnMultiplier - 1' row] == false) {  		theData [collumn - collumnMultiplier - 1' row] = theQueue.Dequeue ();  	}  }  else//see? the same.  if (voidSpace [collumn - collumnMultiplier' row] == false) {  	theData [collumn - collumnMultiplier' row] = theQueue.Dequeue ();  	//i actually spelt collumnMultiplier different. did you notice?  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: if (!alphaNumericDictionary.ContainsKey ("0")) {  	alphaNumericDictionary.Add ("0"' 0);  	alphaNumericDictionary.Add ("1"' 1);  	alphaNumericDictionary.Add ("2"' 2);  	alphaNumericDictionary.Add ("3"' 3);  	alphaNumericDictionary.Add ("4"' 4);  	alphaNumericDictionary.Add ("5"' 5);  	alphaNumericDictionary.Add ("6"' 6);  	alphaNumericDictionary.Add ("7"' 7);  	alphaNumericDictionary.Add ("8"' 8);  	alphaNumericDictionary.Add ("9"' 9);  	alphaNumericDictionary.Add ("A"' 10);  	alphaNumericDictionary.Add ("B"' 11);  	alphaNumericDictionary.Add ("C"' 12);  	alphaNumericDictionary.Add ("D"' 13);  	alphaNumericDictionary.Add ("E"' 14);  	alphaNumericDictionary.Add ("F"' 15);  	alphaNumericDictionary.Add ("G"' 16);  	alphaNumericDictionary.Add ("H"' 17);  	alphaNumericDictionary.Add ("I"' 18);  	alphaNumericDictionary.Add ("J"' 19);  	alphaNumericDictionary.Add ("K"' 20);  	alphaNumericDictionary.Add ("L"' 21);  	alphaNumericDictionary.Add ("M"' 22);  	alphaNumericDictionary.Add ("N"' 23);  	alphaNumericDictionary.Add ("O"' 24);  	//SOMEONE P'D IN THE DICTIONARY..  	alphaNumericDictionary.Add ("P"' 25);  	//-____________________-  	alphaNumericDictionary.Add ("Q"' 26);  	alphaNumericDictionary.Add ("R"' 27);  	alphaNumericDictionary.Add ("S"' 28);  	alphaNumericDictionary.Add ("T"' 29);  	alphaNumericDictionary.Add ("U"' 30);  	alphaNumericDictionary.Add ("V"' 31);  	alphaNumericDictionary.Add ("W"' 32);  	alphaNumericDictionary.Add ("X"' 33);  	alphaNumericDictionary.Add ("Y"' 34);  	alphaNumericDictionary.Add ("Z"' 35);  	alphaNumericDictionary.Add (" "' 36);  	alphaNumericDictionary.Add ("$"' 37);  	alphaNumericDictionary.Add ("%"' 38);  	alphaNumericDictionary.Add ("*"' 39);  	alphaNumericDictionary.Add ("+"' 40);  	alphaNumericDictionary.Add ("-"' 41);  	alphaNumericDictionary.Add ("."' 42);  	alphaNumericDictionary.Add ("/"' 43);  	alphaNumericDictionary.Add (":"' 44);  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("2"' 2);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("3"' 3);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("4"' 4);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("5"' 5);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("6"' 6);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("7"' 7);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("8"' 8);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("9"' 9);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("A"' 10);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("B"' 11);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("C"' 12);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("D"' 13);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("E"' 14);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("F"' 15);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("G"' 16);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("H"' 17);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("I"' 18);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("J"' 19);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("K"' 20);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("L"' 21);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("M"' 22);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("N"' 23);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("O"' 24);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("P"' 25);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("Q"' 26);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("R"' 27);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("S"' 28);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("T"' 29);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("U"' 30);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("V"' 31);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("W"' 32);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("X"' 33);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("Y"' 34);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("Z"' 35);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add (" "' 36);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("$"' 37);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("%"' 38);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("*"' 39);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("+"' 40);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("-"' 41);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("."' 42);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add ("/"' 43);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,SetUpDictionary,The following statement contains a magic number: alphaNumericDictionary.Add (":"' 44);  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = 0; x < 9; x++) {  	for (int y = 0; y < 9; y++) {  		//top left square  		theData [x' y] = true;  		//because there is a reflection when x=y' the x and y can be swapped  		//other two squares  		theData [squareSize - x - 1' y] = true;  		theData [y' squareSize - x - 1] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = 0; x < 9; x++) {  	for (int y = 0; y < 9; y++) {  		//top left square  		theData [x' y] = true;  		//because there is a reflection when x=y' the x and y can be swapped  		//other two squares  		theData [squareSize - x - 1' y] = true;  		theData [y' squareSize - x - 1] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = 0; y < 9; y++) {  	//top left square  	theData [x' y] = true;  	//because there is a reflection when x=y' the x and y can be swapped  	//other two squares  	theData [squareSize - x - 1' y] = true;  	theData [y' squareSize - x - 1] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	theData [multiX' 7] = true;  	theData [7' multiX] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	theData [multiX' 7] = true;  	theData [7' multiX] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	theData [multiX' 7] = true;  	theData [7' multiX] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	theData [multiX' 7] = true;  	theData [7' multiX] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [multiX' 7] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [7' multiX] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (version > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  			//versions 7-13 have 6 squares  			if (version > 6 && version < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  				//set to true for the blank void space  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  				theData [7 + x' centerPoint2 + y + 1] = true;  				theData [centerPoint2 + x + 1' 7 + y] = true;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (version > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  		//versions 7-13 have 6 squares  		if (version > 6 && version < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  			//set to true for the blank void space  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  			theData [7 + x' centerPoint2 + y + 1] = true;  			theData [centerPoint2 + x + 1' 7 + y] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  	//versions 7-13 have 6 squares  	if (version > 6 && version < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  		//set to true for the blank void space  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  		theData [7 + x' centerPoint2 + y + 1] = true;  		theData [centerPoint2 + x + 1' 7 + y] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  	//versions 7-13 have 6 squares  	if (version > 6 && version < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  		//set to true for the blank void space  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  		theData [7 + x' centerPoint2 + y + 1] = true;  		theData [centerPoint2 + x + 1' 7 + y] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  	//versions 7-13 have 6 squares  	if (version > 6 && version < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  		//set to true for the blank void space  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  		theData [7 + x' centerPoint2 + y + 1] = true;  		theData [centerPoint2 + x + 1' 7 + y] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = true;  	//versions 7-13 have 6 squares  	if (version > 6 && version < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  		//set to true for the blank void space  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  		theData [7 + x' centerPoint2 + y + 1] = true;  		theData [centerPoint2 + x + 1' 7 + y] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6 && version < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  	//set to true for the blank void space  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  	theData [7 + x' centerPoint2 + y + 1] = true;  	theData [centerPoint2 + x + 1' 7 + y] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6 && version < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  	//set to true for the blank void space  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  	theData [7 + x' centerPoint2 + y + 1] = true;  	theData [centerPoint2 + x + 1' 7 + y] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6 && version < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  	//set to true for the blank void space  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  	theData [7 + x' centerPoint2 + y + 1] = true;  	theData [centerPoint2 + x + 1' 7 + y] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6 && version < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = true;  	//set to true for the blank void space  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = true;  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = true;  	theData [7 + x' centerPoint2 + y + 1] = true;  	theData [centerPoint2 + x + 1' 7 + y] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [7 + x' centerPoint2 + y + 1] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [centerPoint2 + x + 1' 7 + y] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6) {  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			theData [squareSize - 12 + x' y + 1] = true;  			theData [y + 1' squareSize - 12 + x] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6) {  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			theData [squareSize - 12 + x' y + 1] = true;  			theData [y + 1' squareSize - 12 + x] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6) {  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			theData [squareSize - 12 + x' y + 1] = true;  			theData [y + 1' squareSize - 12 + x] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6) {  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			theData [squareSize - 12 + x' y + 1] = true;  			theData [y + 1' squareSize - 12 + x] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: if (version > 6) {  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			theData [squareSize - 12 + x' y + 1] = true;  			theData [y + 1' squareSize - 12 + x] = true;  		}  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		theData [squareSize - 12 + x' y + 1] = true;  		theData [y + 1' squareSize - 12 + x] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		theData [squareSize - 12 + x' y + 1] = true;  		theData [y + 1' squareSize - 12 + x] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		theData [squareSize - 12 + x' y + 1] = true;  		theData [y + 1' squareSize - 12 + x] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		theData [squareSize - 12 + x' y + 1] = true;  		theData [y + 1' squareSize - 12 + x] = true;  	}  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	theData [squareSize - 12 + x' y + 1] = true;  	theData [y + 1' squareSize - 12 + x] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	theData [squareSize - 12 + x' y + 1] = true;  	theData [y + 1' squareSize - 12 + x] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	theData [squareSize - 12 + x' y + 1] = true;  	theData [y + 1' squareSize - 12 + x] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [squareSize - 12 + x' y + 1] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [y + 1' squareSize - 12 + x] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	theData [9' i] = true;  	theData [i' 9] = true;  	theData [9' squareSize - i] = true;  	theData [squareSize - i - 1' 9] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	theData [9' i] = true;  	theData [i' 9] = true;  	theData [9' squareSize - i] = true;  	theData [squareSize - i - 1' 9] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	theData [9' i] = true;  	theData [i' 9] = true;  	theData [9' squareSize - i] = true;  	theData [squareSize - i - 1' 9] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	theData [9' i] = true;  	theData [i' 9] = true;  	theData [9' squareSize - i] = true;  	theData [squareSize - i - 1' 9] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: for (int i = 1; i < 9; i++) {  	theData [9' i] = true;  	theData [i' 9] = true;  	theData [9' squareSize - i] = true;  	theData [squareSize - i - 1' 9] = true;  }  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' i] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [i' 9] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' squareSize - i] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [squareSize - i - 1' 9] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' 9] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' 9] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' squareSize - 9] = true;  
Magic Number,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,DrawVoidSpace,The following statement contains a magic number: theData [9' squareSize - 9] = true;  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempX = 0; tempX < pixelDensity; tempX++) {  	for (int tempY = 0; tempY < pixelDensity; tempY++) {  		//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  		//then draws all of the pixels that will need to be drawn according to the density  		((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempX = 0; tempX < pixelDensity; tempX++) {  	for (int tempY = 0; tempY < pixelDensity; tempY++) {  		//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  		//then draws all of the pixels that will need to be drawn according to the density  		((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempX = 0; tempX < pixelDensity; tempX++) {  	for (int tempY = 0; tempY < pixelDensity; tempY++) {  		//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  		//then draws all of the pixels that will need to be drawn according to the density  		((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempX = 0; tempX < pixelDensity; tempX++) {  	for (int tempY = 0; tempY < pixelDensity; tempY++) {  		//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  		//then draws all of the pixels that will need to be drawn according to the density  		((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempY = 0; tempY < pixelDensity; tempY++) {  	//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  	//then draws all of the pixels that will need to be drawn according to the density  	((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempY = 0; tempY < pixelDensity; tempY++) {  	//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  	//then draws all of the pixels that will need to be drawn according to the density  	((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempY = 0; tempY < pixelDensity; tempY++) {  	//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  	//then draws all of the pixels that will need to be drawn according to the density  	((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: for (int tempY = 0; tempY < pixelDensity; tempY++) {  	//starts at the target pixel from the original data' multiplies it by the pixel density to find its starting point  	//then draws all of the pixels that will need to be drawn according to the density  	((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: ((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: ((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: ((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,SetPixel,The following statement contains a magic number: ((Bitmap)myCanvas).SetPixel (x * pixelDensity + tempX' y * pixelDensity + tempY' Color.FromArgb (255' blockColour * 255' blockColour * 255' blockColour * 255));  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following statement contains a magic number: squareSize = 17 + 2 + 4 * versionNum;  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following statement contains a magic number: squareSize = 17 + 2 + 4 * versionNum;  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following statement contains a magic number: squareSize = 17 + 2 + 4 * versionNum;  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following statement contains a magic number: switch (errorCorrectionLevel) {  case 2:  	bchLVL.Text = "EC: H";  	break;  case 3:  	bchLVL.Text = "EC: Q";  	break;  case 0:  	bchLVL.Text = "EC: M";  	break;  case 1:  	bchLVL.Text = "EC: L";  	break;  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following statement contains a magic number: switch (errorCorrectionLevel) {  case 2:  	bchLVL.Text = "EC: H";  	break;  case 3:  	bchLVL.Text = "EC: Q";  	break;  case 0:  	bchLVL.Text = "EC: M";  	break;  case 1:  	bchLVL.Text = "EC: L";  	break;  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: if (debugModeChkBox.Checked == false) {  	switch (qrStringIn.Text.Length) {  	case 9:  		//tempString += " ";  		break;  	case 48:  		tempString += " ";  		break;  	case 66:  		//tempString += " ";  		break;  	case 106:  		tempString += "  ";  		break;  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: if (debugModeChkBox.Checked == false) {  	switch (qrStringIn.Text.Length) {  	case 9:  		//tempString += " ";  		break;  	case 48:  		tempString += " ";  		break;  	case 66:  		//tempString += " ";  		break;  	case 106:  		tempString += "  ";  		break;  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: if (debugModeChkBox.Checked == false) {  	switch (qrStringIn.Text.Length) {  	case 9:  		//tempString += " ";  		break;  	case 48:  		tempString += " ";  		break;  	case 66:  		//tempString += " ";  		break;  	case 106:  		tempString += "  ";  		break;  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: if (debugModeChkBox.Checked == false) {  	switch (qrStringIn.Text.Length) {  	case 9:  		//tempString += " ";  		break;  	case 48:  		tempString += " ";  		break;  	case 66:  		//tempString += " ";  		break;  	case 106:  		tempString += "  ";  		break;  	}  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: switch (qrStringIn.Text.Length) {  case 9:  	//tempString += " ";  	break;  case 48:  	tempString += " ";  	break;  case 66:  	//tempString += " ";  	break;  case 106:  	tempString += "  ";  	break;  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: switch (qrStringIn.Text.Length) {  case 9:  	//tempString += " ";  	break;  case 48:  	tempString += " ";  	break;  case 66:  	//tempString += " ";  	break;  case 106:  	tempString += "  ";  	break;  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: switch (qrStringIn.Text.Length) {  case 9:  	//tempString += " ";  	break;  case 48:  	tempString += " ";  	break;  case 66:  	//tempString += " ";  	break;  case 106:  	tempString += "  ";  	break;  }  
Magic Number,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following statement contains a magic number: switch (qrStringIn.Text.Length) {  case 9:  	//tempString += " ";  	break;  case 48:  	tempString += " ";  	break;  case 66:  	//tempString += " ";  	break;  case 106:  	tempString += "  ";  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,BestMask,The following statement contains a magic number: maskArray [8] = (bool['])theData.Clone ();  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,BestMask,The following statement contains a magic number: maskArray [8] = DrawAllBasics (new bool[squareSize' squareSize]' errorCorrection' 0);  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,BestMask,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//mask a copy of the data with the current mask  	maskArray [i] = Masker ((bool['])theData.Clone ()' i);  	//draw all of the remaining elements  	maskArray [i] = DrawAllBasics (maskArray [i]' errorCorrection' i);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,BestMask,The following statement contains a magic number: for (int i = 1; i < 8; i++) {  	if (penatlyScores [i] < penatlyScores [BestMask])  		BestMask = i;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//adds the first element of the line to both strings  		//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  		//since the grid can be viewed as a reflection' x and y can just be flipped  		switch (theData [i] [x' 1]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [1' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//this cycles through each line of data  		for (int y = 2; y < squareSize - 1; y++) {  			//adds the next element in the sequence  			switch (theData [i] [x' y]) {  			case true:  				verticalString += "1";  				break;  			case false:  				verticalString += "0";  				break;  			}  			switch (theData [i] [y' x]) {  			case true:  				horizontalString += "1";  				break;  			case false:  				horizontalString += "0";  				break;  			}  			//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  			//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  			//the most recent bit the first bit of the new sequence  			//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  			if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  				if (verticalString.Length - 1 >= 5) {  					penaltyScores [i] += 3 + (verticalString.Length - 6);  				}  				verticalString = verticalString.Substring (verticalString.Length - 1);  			}  			//if the current element is different than the last element  			if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  				//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  				if (horizontalString.Length - 1 >= 5) {  					//add the right amount of points  					penaltyScores [i] += 3 + (horizontalString.Length - 6);  				}  				//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  				horizontalString = horizontalString.Substring (horizontalString.Length - 1);  			}  		}  		//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  		//this will catch that and add the right amount of points  		if (horizontalString.Length >= 5)  			penaltyScores [i] += horizontalString.Length - 2;  		if (verticalString.Length >= 5)  			penaltyScores [i] += verticalString.Length - 2;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//adds the first element of the line to both strings  	//the first element had to be added before the loop other wise two elements wouldn't be present for the change detection  	//since the grid can be viewed as a reflection' x and y can just be flipped  	switch (theData [i] [x' 1]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [1' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//this cycles through each line of data  	for (int y = 2; y < squareSize - 1; y++) {  		//adds the next element in the sequence  		switch (theData [i] [x' y]) {  		case true:  			verticalString += "1";  			break;  		case false:  			verticalString += "0";  			break;  		}  		switch (theData [i] [y' x]) {  		case true:  			horizontalString += "1";  			break;  		case false:  			horizontalString += "0";  			break;  		}  		//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  		//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  		//the most recent bit the first bit of the new sequence  		//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  		if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  			if (verticalString.Length - 1 >= 5) {  				penaltyScores [i] += 3 + (verticalString.Length - 6);  			}  			verticalString = verticalString.Substring (verticalString.Length - 1);  		}  		//if the current element is different than the last element  		if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  			//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  			if (horizontalString.Length - 1 >= 5) {  				//add the right amount of points  				penaltyScores [i] += 3 + (horizontalString.Length - 6);  			}  			//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  			horizontalString = horizontalString.Substring (horizontalString.Length - 1);  		}  	}  	//obviously at the end of the row' there could be more than 5 bits in row but the previous method may not pick up on it because there is no "change"  	//this will catch that and add the right amount of points  	if (horizontalString.Length >= 5)  		penaltyScores [i] += horizontalString.Length - 2;  	if (verticalString.Length >= 5)  		penaltyScores [i] += verticalString.Length - 2;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: for (int y = 2; y < squareSize - 1; y++) {  	//adds the next element in the sequence  	switch (theData [i] [x' y]) {  	case true:  		verticalString += "1";  		break;  	case false:  		verticalString += "0";  		break;  	}  	switch (theData [i] [y' x]) {  	case true:  		horizontalString += "1";  		break;  	case false:  		horizontalString += "0";  		break;  	}  	//the purpose to this function is to detect change in the sequence but at the same time keep track of how many bits are the same in a row  	//as the sequence cycles' it collects like bits' once a different bits appears' it counts how many of the same appeared in a row' and makes  	//the most recent bit the first bit of the new sequence  	//scoring goes as followed: if the bits are more than 5 in length' 3 points are added and for each bit after the first five' an addition point is added  	if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  		if (verticalString.Length - 1 >= 5) {  			penaltyScores [i] += 3 + (verticalString.Length - 6);  		}  		verticalString = verticalString.Substring (verticalString.Length - 1);  	}  	//if the current element is different than the last element  	if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  		//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  		if (horizontalString.Length - 1 >= 5) {  			//add the right amount of points  			penaltyScores [i] += 3 + (horizontalString.Length - 6);  		}  		//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  		horizontalString = horizontalString.Substring (horizontalString.Length - 1);  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  	if (verticalString.Length - 1 >= 5) {  		penaltyScores [i] += 3 + (verticalString.Length - 6);  	}  	verticalString = verticalString.Substring (verticalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  	if (verticalString.Length - 1 >= 5) {  		penaltyScores [i] += 3 + (verticalString.Length - 6);  	}  	verticalString = verticalString.Substring (verticalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  	if (verticalString.Length - 1 >= 5) {  		penaltyScores [i] += 3 + (verticalString.Length - 6);  	}  	verticalString = verticalString.Substring (verticalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Substring (verticalString.Length - 2' 1) != verticalString.Substring (verticalString.Length - 1' 1)) {  	if (verticalString.Length - 1 >= 5) {  		penaltyScores [i] += 3 + (verticalString.Length - 6);  	}  	verticalString = verticalString.Substring (verticalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Length - 1 >= 5) {  	penaltyScores [i] += 3 + (verticalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Length - 1 >= 5) {  	penaltyScores [i] += 3 + (verticalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Length - 1 >= 5) {  	penaltyScores [i] += 3 + (verticalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += 3 + (verticalString.Length - 6);  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += 3 + (verticalString.Length - 6);  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  	//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  	if (horizontalString.Length - 1 >= 5) {  		//add the right amount of points  		penaltyScores [i] += 3 + (horizontalString.Length - 6);  	}  	//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  	horizontalString = horizontalString.Substring (horizontalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  	//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  	if (horizontalString.Length - 1 >= 5) {  		//add the right amount of points  		penaltyScores [i] += 3 + (horizontalString.Length - 6);  	}  	//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  	horizontalString = horizontalString.Substring (horizontalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  	//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  	if (horizontalString.Length - 1 >= 5) {  		//add the right amount of points  		penaltyScores [i] += 3 + (horizontalString.Length - 6);  	}  	//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  	horizontalString = horizontalString.Substring (horizontalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Substring (horizontalString.Length - 2' 1) != horizontalString.Substring (horizontalString.Length - 1' 1)) {  	//if the sequence is 5 or more in lenth (not including the last bit which is different than the sequence)  	if (horizontalString.Length - 1 >= 5) {  		//add the right amount of points  		penaltyScores [i] += 3 + (horizontalString.Length - 6);  	}  	//clear the string and make it the same as the most recently added bit (which is the different one) so the whole process can be started again  	horizontalString = horizontalString.Substring (horizontalString.Length - 1);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Length - 1 >= 5) {  	//add the right amount of points  	penaltyScores [i] += 3 + (horizontalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Length - 1 >= 5) {  	//add the right amount of points  	penaltyScores [i] += 3 + (horizontalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Length - 1 >= 5) {  	//add the right amount of points  	penaltyScores [i] += 3 + (horizontalString.Length - 6);  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += 3 + (horizontalString.Length - 6);  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += 3 + (horizontalString.Length - 6);  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Length >= 5)  	penaltyScores [i] += horizontalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (horizontalString.Length >= 5)  	penaltyScores [i] += horizontalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += horizontalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Length >= 5)  	penaltyScores [i] += verticalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: if (verticalString.Length >= 5)  	penaltyScores [i] += verticalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following statement contains a magic number: penaltyScores [i] += verticalString.Length - 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		for (int y = 1; y < squareSize - 1; y++) {  			//the gist of this -> if a 2x2 square of the idential colour is found'   			//with the current object being evaluted as the top left corner of the square'  			//add three to the mask's penatly score  			//this method is slightly different than the one that is used by the standard but i have found it to have the same result in ALL cases  			if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y]))  				penaltyScores [i] += 3;  		}  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		for (int y = 1; y < squareSize - 1; y++) {  			//the gist of this -> if a 2x2 square of the idential colour is found'   			//with the current object being evaluted as the top left corner of the square'  			//add three to the mask's penatly score  			//this method is slightly different than the one that is used by the standard but i have found it to have the same result in ALL cases  			if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y]))  				penaltyScores [i] += 3;  		}  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	for (int y = 1; y < squareSize - 1; y++) {  		//the gist of this -> if a 2x2 square of the idential colour is found'   		//with the current object being evaluted as the top left corner of the square'  		//add three to the mask's penatly score  		//this method is slightly different than the one that is used by the standard but i have found it to have the same result in ALL cases  		if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y]))  			penaltyScores [i] += 3;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: for (int y = 1; y < squareSize - 1; y++) {  	//the gist of this -> if a 2x2 square of the idential colour is found'   	//with the current object being evaluted as the top left corner of the square'  	//add three to the mask's penatly score  	//this method is slightly different than the one that is used by the standard but i have found it to have the same result in ALL cases  	if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y]))  		penaltyScores [i] += 3;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: if ((theData [i] [x + 1' y] == theData [i] [x' y]) && (theData [i] [x' y + 1] == theData [i] [x' y]) && (theData [i] [x + 1' y + 1] == theData [i] [x' y]))  	penaltyScores [i] += 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenaltyScoreTwo,The following statement contains a magic number: penaltyScores [i] += 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//collect the data' in a mirror image this is grabing each row' the top and the bottom  		for (int y = 1; y < squareSize - 1; y++) {  			verticalString += theData [i] [x' y];  			horizontalString += theData [i] [y' x];  		}  		//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  		//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  		if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  		if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//collect the data' in a mirror image this is grabing each row' the top and the bottom  		for (int y = 1; y < squareSize - 1; y++) {  			verticalString += theData [i] [x' y];  			horizontalString += theData [i] [y' x];  		}  		//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  		//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  		if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  		if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//collect the data' in a mirror image this is grabing each row' the top and the bottom  		for (int y = 1; y < squareSize - 1; y++) {  			verticalString += theData [i] [x' y];  			horizontalString += theData [i] [y' x];  		}  		//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  		//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  		if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  		if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//collect the data' in a mirror image this is grabing each row' the top and the bottom  		for (int y = 1; y < squareSize - 1; y++) {  			verticalString += theData [i] [x' y];  			horizontalString += theData [i] [y' x];  		}  		//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  		//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  		if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  		if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	//cycling through the x and y  	for (int x = 1; x < squareSize - 1; x++) {  		string horizontalString = ""' verticalString = "";  		//collect the data' in a mirror image this is grabing each row' the top and the bottom  		for (int y = 1; y < squareSize - 1; y++) {  			verticalString += theData [i] [x' y];  			horizontalString += theData [i] [y' x];  		}  		//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  		//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  		if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  			penaltyScores [i] += 40;  		if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  		if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  			penaltyScores [i] += 40;  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//collect the data' in a mirror image this is grabing each row' the top and the bottom  	for (int y = 1; y < squareSize - 1; y++) {  		verticalString += theData [i] [x' y];  		horizontalString += theData [i] [y' x];  	}  	//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  	//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  	if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  	if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//collect the data' in a mirror image this is grabing each row' the top and the bottom  	for (int y = 1; y < squareSize - 1; y++) {  		verticalString += theData [i] [x' y];  		horizontalString += theData [i] [y' x];  	}  	//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  	//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  	if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  	if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//collect the data' in a mirror image this is grabing each row' the top and the bottom  	for (int y = 1; y < squareSize - 1; y++) {  		verticalString += theData [i] [x' y];  		horizontalString += theData [i] [y' x];  	}  	//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  	//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  	if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  	if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: for (int x = 1; x < squareSize - 1; x++) {  	string horizontalString = ""' verticalString = "";  	//collect the data' in a mirror image this is grabing each row' the top and the bottom  	for (int y = 1; y < squareSize - 1; y++) {  		verticalString += theData [i] [x' y];  		horizontalString += theData [i] [y' x];  	}  	//if the row/collumn contains any of these sequences' 40 points are added to the penatly score  	//these patterns are that of a tracker square pattern' for obvious reasons we do not want these patterns occuring in the middle of the grid  	if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  		penaltyScores [i] += 40;  	if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  	if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  		penaltyScores [i] += 40;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: if (verticalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  	penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: if (horizontalString.Contains ("FalseFalseFalseFalseTrueFalseTrueTrueTrueFalseTrue"))  	penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: if (horizontalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  	penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: if (verticalString.Contains ("TrueFalseTrueTrueTrueFalseTrueFalseFalseFalseFalse"))  	penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreThree,The following statement contains a magic number: penaltyScores [i] += 40;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: for (int i = 0; i <= 7; i++) {  	double numBlackSquares = 0;  	double pointScore;  	//counts all of the black squares  	foreach (bool thisBool in theData [i]) {  		if (thisBool == true)  			numBlackSquares++;  	}  	//this is the number of black squares divided by the total number of squares in the symbol  	//multiplied by 100' this is a percentage?  	pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  	pointScore -= 50;  	//make pointScore ALWAYS positive  	if (pointScore < 0)  		pointScore *= -1;  	//remove anything after the decimal (yes i know just converting it to an int would work' but i like it this way)  	pointScore -= pointScore % 1;  	//it has to be divided by 5 then multiplied' not times by 2 like logic says  	pointScore = (pointScore / 5) * 10;  	//add the points to the total!  	penaltyScores [i] += (int)pointScore;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore = (numBlackSquares / Math.Pow (squareSize - 2' 2)) * 100;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore -= 50;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore = (pointScore / 5) * 10;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreFour,The following statement contains a magic number: pointScore = (pointScore / 5) * 10;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int x = 0; x < squareSize - 2; x++) {  	for (int y = 0; y < squareSize - 2; y++) {  		double tempVal = -1;  		switch (maskMode) {  		case 0:  			tempVal = (x + y) % 2;  			break;  		case 1:  			tempVal = y % 2;  			break;  		case 2:  			tempVal = x % 3;  			break;  		case 3:  			tempVal = (x + y) % 3;  			break;  		case 4:  			tempVal = ((y / 2) + (x / 3)) % 2;  			break;  		case 5:  			tempVal = (y * x) % 2 + (x * y) % 3;  			break;  		case 6:  			tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  			break;  		case 7:  			tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  			break;  		}  		if (tempVal == 0)  			theData [x + 1' y + 1] ^= true;  		else if (tempVal != -1)  			theData [x + 1' y + 1] ^= false;  		//+1 due to the border' -2 was taken off the forLoop for account for the total border  	}  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: for (int y = 0; y < squareSize - 2; y++) {  	double tempVal = -1;  	switch (maskMode) {  	case 0:  		tempVal = (x + y) % 2;  		break;  	case 1:  		tempVal = y % 2;  		break;  	case 2:  		tempVal = x % 3;  		break;  	case 3:  		tempVal = (x + y) % 3;  		break;  	case 4:  		tempVal = ((y / 2) + (x / 3)) % 2;  		break;  	case 5:  		tempVal = (y * x) % 2 + (x * y) % 3;  		break;  	case 6:  		tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  		break;  	case 7:  		tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  		break;  	}  	if (tempVal == 0)  		theData [x + 1' y + 1] ^= true;  	else if (tempVal != -1)  		theData [x + 1' y + 1] ^= false;  	//+1 due to the border' -2 was taken off the forLoop for account for the total border  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = (x + y) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = y % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = x % 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = (x + y) % 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y / 2) + (x / 3)) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y / 2) + (x / 3)) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y / 2) + (x / 3)) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = (y * x) % 2 + (x * y) % 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = (y * x) % 2 + (x * y) % 3;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following statement contains a magic number: tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTrackerSquares,The following statement contains a magic number: for (int x = 0; x < 9; x++) {  	for (int y = 0; y < 9; y++) {  		//because there is a reflection when x=y' the x and y can be swapped  		theData [x' y] = trackerSquare [x' y];  		theData [squareSize - x - 1' y] = trackerSquare [x' y];  		theData [y' squareSize - x - 1] = trackerSquare [x' y];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTrackerSquares,The following statement contains a magic number: for (int x = 0; x < 9; x++) {  	for (int y = 0; y < 9; y++) {  		//because there is a reflection when x=y' the x and y can be swapped  		theData [x' y] = trackerSquare [x' y];  		theData [squareSize - x - 1' y] = trackerSquare [x' y];  		theData [y' squareSize - x - 1] = trackerSquare [x' y];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTrackerSquares,The following statement contains a magic number: for (int y = 0; y < 9; y++) {  	//because there is a reflection when x=y' the x and y can be swapped  	theData [x' y] = trackerSquare [x' y];  	theData [squareSize - x - 1' y] = trackerSquare [x' y];  	theData [y' squareSize - x - 1] = trackerSquare [x' y];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	bool pixelColour;  	//changes proper  	if (multiX % 2 == 0)  		pixelColour = false;  	else  		pixelColour = true;  	theData [multiX' 7] = pixelColour;  	theData [7' multiX] = pixelColour;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	bool pixelColour;  	//changes proper  	if (multiX % 2 == 0)  		pixelColour = false;  	else  		pixelColour = true;  	theData [multiX' 7] = pixelColour;  	theData [7' multiX] = pixelColour;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	bool pixelColour;  	//changes proper  	if (multiX % 2 == 0)  		pixelColour = false;  	else  		pixelColour = true;  	theData [multiX' 7] = pixelColour;  	theData [7' multiX] = pixelColour;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	bool pixelColour;  	//changes proper  	if (multiX % 2 == 0)  		pixelColour = false;  	else  		pixelColour = true;  	theData [multiX' 7] = pixelColour;  	theData [7' multiX] = pixelColour;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: for (int multiX = 9; multiX < squareSize - 9; multiX++) {  	bool pixelColour;  	//changes proper  	if (multiX % 2 == 0)  		pixelColour = false;  	else  		pixelColour = true;  	theData [multiX' 7] = pixelColour;  	theData [7' multiX] = pixelColour;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: if (multiX % 2 == 0)  	pixelColour = false;  else  	pixelColour = true;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: theData [multiX' 7] = pixelColour;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawTimingLines,The following statement contains a magic number: theData [7' multiX] = pixelColour;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int x = -2; x < 3; x++) {  	for (int y = -2; y < 3; y++) {  		//version 1 has no square' versions 2-6 have 1 square  		if (versionNum > 1) {  			//one is added due to the border  			theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			//versions 7-13 have 6 squares  			if (versionNum > 6 && versionNum < 14) {  				//draws all of the squares using all combinations of centerpoints and set points   				//(excluding ones that would be under tracker squares)  				theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  				theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: for (int y = -2; y < 3; y++) {  	//version 1 has no square' versions 2-6 have 1 square  	if (versionNum > 1) {  		//one is added due to the border  		theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		//versions 7-13 have 6 squares  		if (versionNum > 6 && versionNum < 14) {  			//draws all of the squares using all combinations of centerpoints and set points   			//(excluding ones that would be under tracker squares)  			theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  			theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 1) {  	//one is added due to the border  	theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	//versions 7-13 have 6 squares  	if (versionNum > 6 && versionNum < 14) {  		//draws all of the squares using all combinations of centerpoints and set points   		//(excluding ones that would be under tracker squares)  		theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  		theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint1 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: if (versionNum > 6 && versionNum < 14) {  	//draws all of the squares using all combinations of centerpoints and set points   	//(excluding ones that would be under tracker squares)  	theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  	theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' centerPoint1 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint1 + x + 1' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [7 + x' centerPoint2 + y + 1] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawAlignmentSquares,The following statement contains a magic number: theData [centerPoint2 + x + 1' 7 + y] = alignmentSquare [x + 2' y + 2];  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (versionNum >= 7) {  	Queue<bool> boolQueue = newBCH.VersionInformation ();  	for (int y = 0; y < 6; y++) {  		for (int x = 0; x < 3; x++) {  			if (boolQueue.Count > 0) {  				bool tempBool = boolQueue.Dequeue ();  				theData [squareSize - 12 + x' y + 1] = tempBool;  				theData [y + 1' squareSize - 12 + x] = tempBool;  			}  			else {  				theData [squareSize - 12 + x' y + 1] = false;  				theData [y + 1' squareSize - 12 + x] = false;  			}  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int y = 0; y < 6; y++) {  	for (int x = 0; x < 3; x++) {  		if (boolQueue.Count > 0) {  			bool tempBool = boolQueue.Dequeue ();  			theData [squareSize - 12 + x' y + 1] = tempBool;  			theData [y + 1' squareSize - 12 + x] = tempBool;  		}  		else {  			theData [squareSize - 12 + x' y + 1] = false;  			theData [y + 1' squareSize - 12 + x] = false;  		}  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	if (boolQueue.Count > 0) {  		bool tempBool = boolQueue.Dequeue ();  		theData [squareSize - 12 + x' y + 1] = tempBool;  		theData [y + 1' squareSize - 12 + x] = tempBool;  	}  	else {  		theData [squareSize - 12 + x' y + 1] = false;  		theData [y + 1' squareSize - 12 + x] = false;  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	if (boolQueue.Count > 0) {  		bool tempBool = boolQueue.Dequeue ();  		theData [squareSize - 12 + x' y + 1] = tempBool;  		theData [y + 1' squareSize - 12 + x] = tempBool;  	}  	else {  		theData [squareSize - 12 + x' y + 1] = false;  		theData [y + 1' squareSize - 12 + x] = false;  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	if (boolQueue.Count > 0) {  		bool tempBool = boolQueue.Dequeue ();  		theData [squareSize - 12 + x' y + 1] = tempBool;  		theData [y + 1' squareSize - 12 + x] = tempBool;  	}  	else {  		theData [squareSize - 12 + x' y + 1] = false;  		theData [y + 1' squareSize - 12 + x] = false;  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	if (boolQueue.Count > 0) {  		bool tempBool = boolQueue.Dequeue ();  		theData [squareSize - 12 + x' y + 1] = tempBool;  		theData [y + 1' squareSize - 12 + x] = tempBool;  	}  	else {  		theData [squareSize - 12 + x' y + 1] = false;  		theData [y + 1' squareSize - 12 + x] = false;  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	if (boolQueue.Count > 0) {  		bool tempBool = boolQueue.Dequeue ();  		theData [squareSize - 12 + x' y + 1] = tempBool;  		theData [y + 1' squareSize - 12 + x] = tempBool;  	}  	else {  		theData [squareSize - 12 + x' y + 1] = false;  		theData [y + 1' squareSize - 12 + x] = false;  	}  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (boolQueue.Count > 0) {  	bool tempBool = boolQueue.Dequeue ();  	theData [squareSize - 12 + x' y + 1] = tempBool;  	theData [y + 1' squareSize - 12 + x] = tempBool;  }  else {  	theData [squareSize - 12 + x' y + 1] = false;  	theData [y + 1' squareSize - 12 + x] = false;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (boolQueue.Count > 0) {  	bool tempBool = boolQueue.Dequeue ();  	theData [squareSize - 12 + x' y + 1] = tempBool;  	theData [y + 1' squareSize - 12 + x] = tempBool;  }  else {  	theData [squareSize - 12 + x' y + 1] = false;  	theData [y + 1' squareSize - 12 + x] = false;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (boolQueue.Count > 0) {  	bool tempBool = boolQueue.Dequeue ();  	theData [squareSize - 12 + x' y + 1] = tempBool;  	theData [y + 1' squareSize - 12 + x] = tempBool;  }  else {  	theData [squareSize - 12 + x' y + 1] = false;  	theData [y + 1' squareSize - 12 + x] = false;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: if (boolQueue.Count > 0) {  	bool tempBool = boolQueue.Dequeue ();  	theData [squareSize - 12 + x' y + 1] = tempBool;  	theData [y + 1' squareSize - 12 + x] = tempBool;  }  else {  	theData [squareSize - 12 + x' y + 1] = false;  	theData [y + 1' squareSize - 12 + x] = false;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: theData [squareSize - 12 + x' y + 1] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: theData [y + 1' squareSize - 12 + x] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: theData [squareSize - 12 + x' y + 1] = false;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawVersionData,The following statement contains a magic number: theData [y + 1' squareSize - 12 + x] = false;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' i + 1] = forBool;  	theData [squareSize - i - 2' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' i + 1] = forBool;  	theData [squareSize - i - 2' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' i + 1] = forBool;  	theData [squareSize - i - 2' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' i + 1] = forBool;  	theData [squareSize - i - 2' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' i + 1] = forBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - i - 2' 9] = forBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - i - 2' 9] = forBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' 8] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' 8] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - 8' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - 8' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - 9' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [squareSize - 9' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [8' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [8' 9] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' squareSize - 8] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' squareSize - 8] = tempBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 6; i > 0; i--) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' squareSize - 1 - i] = forBool;  	theData [i' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 6; i > 0; i--) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' squareSize - 1 - i] = forBool;  	theData [i' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: for (int i = 6; i > 0; i--) {  	bool forBool = boolQueue.Dequeue ();  	theData [9' squareSize - 1 - i] = forBool;  	theData [i' 9] = forBool;  }  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [9' squareSize - 1 - i] = forBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DrawFormatData,The following statement contains a magic number: theData [i' 9] = forBool;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DarkModule,The following statement contains a magic number: theData [9' squareSize - 9] = true;  
Magic Number,QR_Code_Encoder,QrCodeElements,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrCodeElements.cs,DarkModule,The following statement contains a magic number: theData [9' squareSize - 9] = true;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: squareSize = versionNumIn * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: switch (errorCorrectionActual) {  case 2:  	errorCorrectionLogical = 0;  	break;  case 3:  	errorCorrectionLogical = 1;  	break;  case 0:  	errorCorrectionLogical = 2;  	break;  case 1:  	errorCorrectionLogical = 3;  	break;  }  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: switch (errorCorrectionActual) {  case 2:  	errorCorrectionLogical = 0;  	break;  case 3:  	errorCorrectionLogical = 1;  	break;  case 0:  	errorCorrectionLogical = 2;  	break;  case 1:  	errorCorrectionLogical = 3;  	break;  }  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: switch (errorCorrectionActual) {  case 2:  	errorCorrectionLogical = 0;  	break;  case 3:  	errorCorrectionLogical = 1;  	break;  case 0:  	errorCorrectionLogical = 2;  	break;  case 1:  	errorCorrectionLogical = 3;  	break;  }  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: switch (errorCorrectionActual) {  case 2:  	errorCorrectionLogical = 0;  	break;  case 3:  	errorCorrectionLogical = 1;  	break;  case 0:  	errorCorrectionLogical = 2;  	break;  case 1:  	errorCorrectionLogical = 3;  	break;  }  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: errorCorrectionLogical = 2;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following statement contains a magic number: errorCorrectionLogical = 3;  
Magic Number,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,EncodeTheData,The following statement contains a magic number: theData = thisQr.DataEncodeSwitch (message' 3);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QrEncodeHelper,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QrEncodeHelper,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QrEncodeHelper,The following statement contains a magic number: squareSize = version * 4 + 17 + 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: for (int i = padding - 1; i >= 0; i--) {  	if (toBool == 0)  		outQueue.Enqueue (false);  	else if (Math.Pow (2' i) <= toBool) {  		outQueue.Enqueue (true);  		toBool -= (int)Math.Pow (2' i);  	}  	else  		outQueue.Enqueue (false);  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: for (int i = padding - 1; i >= 0; i--) {  	if (toBool == 0)  		outQueue.Enqueue (false);  	else if (Math.Pow (2' i) <= toBool) {  		outQueue.Enqueue (true);  		toBool -= (int)Math.Pow (2' i);  	}  	else  		outQueue.Enqueue (false);  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: if (toBool == 0)  	outQueue.Enqueue (false);  else if (Math.Pow (2' i) <= toBool) {  	outQueue.Enqueue (true);  	toBool -= (int)Math.Pow (2' i);  }  else  	outQueue.Enqueue (false);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: if (toBool == 0)  	outQueue.Enqueue (false);  else if (Math.Pow (2' i) <= toBool) {  	outQueue.Enqueue (true);  	toBool -= (int)Math.Pow (2' i);  }  else  	outQueue.Enqueue (false);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: if (Math.Pow (2' i) <= toBool) {  	outQueue.Enqueue (true);  	toBool -= (int)Math.Pow (2' i);  }  else  	outQueue.Enqueue (false);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: if (Math.Pow (2' i) <= toBool) {  	outQueue.Enqueue (true);  	toBool -= (int)Math.Pow (2' i);  }  else  	outQueue.Enqueue (false);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsWithPadding,The following statement contains a magic number: toBool -= (int)Math.Pow (2' i);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsToDemical,The following statement contains a magic number: for (int i = theQueue.Count; i > 0; i--) {  	if (theQueue.Peek () == true)  		intExport += (int)Math.Pow (2' i - 1);  	theQueue.Dequeue ();  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsToDemical,The following statement contains a magic number: if (theQueue.Peek () == true)  	intExport += (int)Math.Pow (2' i - 1);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,BitsToDemical,The following statement contains a magic number: intExport += (int)Math.Pow (2' i - 1);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: for (int i = 0; i < tempBoolList.Count / 8; i++) {  	//temp queue for conversion  	Queue<bool> tempBoolQueue = new Queue<bool> ();  	//cycle through the 8 in the group  	for (int k = 0; k < 8; k++) {  		//add the current item (using the multiplier) to the queue  		tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  	}  	//add the converted codeword to the list for exportation  	outIntList.Add (BitsToDemical (tempBoolQueue));  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: for (int i = 0; i < tempBoolList.Count / 8; i++) {  	//temp queue for conversion  	Queue<bool> tempBoolQueue = new Queue<bool> ();  	//cycle through the 8 in the group  	for (int k = 0; k < 8; k++) {  		//add the current item (using the multiplier) to the queue  		tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  	}  	//add the converted codeword to the list for exportation  	outIntList.Add (BitsToDemical (tempBoolQueue));  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: for (int i = 0; i < tempBoolList.Count / 8; i++) {  	//temp queue for conversion  	Queue<bool> tempBoolQueue = new Queue<bool> ();  	//cycle through the 8 in the group  	for (int k = 0; k < 8; k++) {  		//add the current item (using the multiplier) to the queue  		tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  	}  	//add the converted codeword to the list for exportation  	outIntList.Add (BitsToDemical (tempBoolQueue));  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: for (int k = 0; k < 8; k++) {  	//add the current item (using the multiplier) to the queue  	tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: for (int k = 0; k < 8; k++) {  	//add the current item (using the multiplier) to the queue  	tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,QueueToDataCodeWords,The following statement contains a magic number: tempBoolQueue.Enqueue (tempBoolList [i * 8 + k]);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 26) {  	//high  	if (messageLength < 11)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 21)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 1;  }  else if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 11)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 11)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 11)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 11)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 11)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 17)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 21)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 48) {  	//quality  	if (messageLength < 30)  		errorCorrectionLevel = 3;  	//medium  	else if (messageLength < 39)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 2;  }  else if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 30)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 39)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 30)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 39)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 30)  	errorCorrectionLevel = 3;  //medium  else if (messageLength < 39)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 39)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 78) {  	//medium  	if (messageLength < 62)  		errorCorrectionLevel = 0;  	else  		//low  		errorCorrectionLevel = 1;  	return 3;  }  else if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 62)  	errorCorrectionLevel = 0;  else  	//low  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 115) {  	//medium  	//if (messageLength < 91)  	//errorCorrectionLevel = 0;  	//else   	//low  	errorCorrectionLevel = 1;  	return 4;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 4;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 15) {  	//high  	if (messageLength < 9)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 17)  		errorCorrectionLevel = 3;  	else  		//medium  		errorCorrectionLevel = 0;  	return 1;  }  else if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 9)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 9)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 9)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 9)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 17)  	errorCorrectionLevel = 3;  else  	//medium  	errorCorrectionLevel = 0;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 28) {  	//high  	if (messageLength < 19)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 30)  		errorCorrectionLevel = 3;  	return 2;  }  else if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 19)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 19)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 19)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 19)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 30)  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 45) {  	//high  	if (messageLength < 34)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 3;  }  else if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 34)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 34)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 34)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 66) {  	//high  	if (messageLength < 51)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 4;  }  /* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 51)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 51)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 51)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 4;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109) {  	//high  	if (messageLength < 85)  		errorCorrectionLevel = 2;  	//quality  	else if (messageLength < 109)  		errorCorrectionLevel = 3;  	else if (messageLength < 150)  		//medium  		errorCorrectionLevel = 0;  	else  		errorCorrectionLevel = 1;  	return 6;  }  else if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 85)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 85)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 85)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 85)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 85)  	errorCorrectionLevel = 2;  //quality  else if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 109)  	errorCorrectionLevel = 3;  else if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 150)  	//medium  	errorCorrectionLevel = 0;  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 6;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 224) {  	//high  	if (messageLength < 94)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 1;  	return 7;  }  else if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 94)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 94)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 1;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 7;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 143) {  	//high  	if (messageLength < 123)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 8;  }  else if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 123)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 123)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 123)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 8;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 174) {  	//high  	if (messageLength < 144)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 9;  }  else if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 144)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 144)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 144)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 9;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 200) {  	//high  	if (messageLength < 175)  		errorCorrectionLevel = 2;  	//quality  	else  		errorCorrectionLevel = 3;  	return 10;  }  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 175)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 175)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: if (messageLength < 175)  	errorCorrectionLevel = 2;  //quality  else  	errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 2;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: errorCorrectionLevel = 3;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following statement contains a magic number: return 10;  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,AddCodewordsToQueue,The following statement contains a magic number: foreach (int thisInt in intList)  	foreach (bool thisBool in BitsWithPadding (thisInt' 8))  		outQueue.Enqueue (thisBool);  
Magic Number,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,AddCodewordsToQueue,The following statement contains a magic number: foreach (bool thisBool in BitsWithPadding (thisInt' 8))  	outQueue.Enqueue (thisBool);  
Missing Default,QR_Code_Encoder,DataEncodeQR,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\DataEncodeQR.cs,AddExtraCodeWords,The following switch statement is missing a default case: switch (switchBool) {  //236 is added  case false:  	outQueue.Enqueue (true);  	outQueue.Enqueue (true);  	outQueue.Enqueue (true);  	outQueue.Enqueue (false);  	outQueue.Enqueue (true);  	outQueue.Enqueue (true);  	outQueue.Enqueue (false);  	outQueue.Enqueue (false);  	break;  //17 is added  case true:  	outQueue.Enqueue (false);  	outQueue.Enqueue (false);  	outQueue.Enqueue (false);  	outQueue.Enqueue (true);  	outQueue.Enqueue (false);  	outQueue.Enqueue (false);  	outQueue.Enqueue (false);  	outQueue.Enqueue (true);  	break;  }  
Missing Default,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,UpdateQrCode,The following switch statement is missing a default case: switch (errorCorrectionLevel) {  case 2:  	bchLVL.Text = "EC: H";  	break;  case 3:  	bchLVL.Text = "EC: Q";  	break;  case 0:  	bchLVL.Text = "EC: M";  	break;  case 1:  	bchLVL.Text = "EC: L";  	break;  }  
Missing Default,QR_Code_Encoder,frmMain,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Form1.cs,tempInvalidQrWorkAround,The following switch statement is missing a default case: switch (qrStringIn.Text.Length) {  case 9:  	//tempString += " ";  	break;  case 48:  	tempString += " ";  	break;  case 66:  	//tempString += " ";  	break;  case 106:  	tempString += "  ";  	break;  }  
Missing Default,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following switch statement is missing a default case: switch (theData [i] [x' 1]) {  case true:  	verticalString += "1";  	break;  case false:  	verticalString += "0";  	break;  }  
Missing Default,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following switch statement is missing a default case: switch (theData [i] [1' x]) {  case true:  	horizontalString += "1";  	break;  case false:  	horizontalString += "0";  	break;  }  
Missing Default,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following switch statement is missing a default case: switch (theData [i] [x' y]) {  case true:  	verticalString += "1";  	break;  case false:  	verticalString += "0";  	break;  }  
Missing Default,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,PenanltyScoreOne,The following switch statement is missing a default case: switch (theData [i] [y' x]) {  case true:  	horizontalString += "1";  	break;  case false:  	horizontalString += "0";  	break;  }  
Missing Default,QR_Code_Encoder,Mask,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\Mask.cs,Masker,The following switch statement is missing a default case: switch (maskMode) {  case 0:  	tempVal = (x + y) % 2;  	break;  case 1:  	tempVal = y % 2;  	break;  case 2:  	tempVal = x % 3;  	break;  case 3:  	tempVal = (x + y) % 3;  	break;  case 4:  	tempVal = ((y / 2) + (x / 3)) % 2;  	break;  case 5:  	tempVal = (y * x) % 2 + (x * y) % 3;  	break;  case 6:  	tempVal = ((y * x) % 2 + (x * y) % 3) % 2;  	break;  case 7:  	tempVal = ((y + x) % 2 + (x * y) % 3) % 2;  	break;  }  
Missing Default,QR_Code_Encoder,QrEncode,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncode.cs,QrEncode,The following switch statement is missing a default case: switch (errorCorrectionActual) {  case 2:  	errorCorrectionLogical = 0;  	break;  case 3:  	errorCorrectionLogical = 1;  	break;  case 0:  	errorCorrectionLogical = 2;  	break;  case 1:  	errorCorrectionLogical = 3;  	break;  }  
Missing Default,QR_Code_Encoder,QrEncodeHelper,C:\repos\gagichce_QR-Code-Generator\QR Code Encoder\QR Code Encoder\QrEncodeHelper.cs,DetermineBestVersionAndErrorCorrection,The following switch statement is missing a default case: switch (encodingSwitch) {  //this mode gives the most amount of characters available' and does also NOT function so do not use it  case false:  	//version 1  	if (messageLength < 26) {  		//high  		if (messageLength < 11)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 21)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 1;  	}  	else if (messageLength < 48) {  		//quality  		if (messageLength < 30)  			errorCorrectionLevel = 3;  		//medium  		else if (messageLength < 39)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 2;  	}  	else if (messageLength < 78) {  		//medium  		if (messageLength < 62)  			errorCorrectionLevel = 0;  		else  			//low  			errorCorrectionLevel = 1;  		return 3;  	}  	else if (messageLength < 115) {  		//medium  		//if (messageLength < 91)  		//errorCorrectionLevel = 0;  		//else   		//low  		errorCorrectionLevel = 1;  		return 4;  	}  	break;  //highest or best error correction possible  //this is also a mess' it works' just accept it and move on  case true:  	//version 1  	if (messageLength < 15) {  		//high  		if (messageLength < 9)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 17)  			errorCorrectionLevel = 3;  		else  			//medium  			errorCorrectionLevel = 0;  		return 1;  	}  	else if (messageLength < 28) {  		//high  		if (messageLength < 19)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 30)  			errorCorrectionLevel = 3;  		return 2;  	}  	else if (messageLength < 45) {  		//high  		if (messageLength < 34)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 3;  	}  	else if (messageLength < 66) {  		//high  		if (messageLength < 51)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 4;  	}  	/* this version currently does not work' please come back later or give us a call at BLAHBLAHBLAH-BLAHBLAHBLAH-BLAHBLAHBLAHBLAH                     else if (messageLength < 84)                     {                         //high                         if (messageLength < 65)                             errorCorrectionLevel = 2;                         //quality                         else                             errorCorrectionLevel = 3;                         return 5;                     }*/else if (messageLength < 109) {  		//high  		if (messageLength < 85)  			errorCorrectionLevel = 2;  		//quality  		else if (messageLength < 109)  			errorCorrectionLevel = 3;  		else if (messageLength < 150)  			//medium  			errorCorrectionLevel = 0;  		else  			errorCorrectionLevel = 1;  		return 6;  	}  	else if (messageLength < 224) {  		//high  		if (messageLength < 94)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 1;  		return 7;  	}  	else if (messageLength < 143) {  		//high  		if (messageLength < 123)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 8;  	}  	else if (messageLength < 174) {  		//high  		if (messageLength < 144)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 9;  	}  	else if (messageLength < 200) {  		//high  		if (messageLength < 175)  			errorCorrectionLevel = 2;  		//quality  		else  			errorCorrectionLevel = 3;  		return 10;  	}  	break;  }  
