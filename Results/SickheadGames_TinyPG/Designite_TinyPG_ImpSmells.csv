Implementation smell,Namespace,Class,File,Method,Description
Long Method,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The method has 175 lines of code.
Long Method,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The method has 161 lines of code.
Long Method,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The method has 166 lines of code.
Long Method,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The method has 606 lines of code.
Long Method,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The method has 119 lines of code.
Long Method,TinyPG.Highlighter,Scanner,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Scanner.cs,Scanner,The method has 133 lines of code.
Complex Method,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,Cyclomatic complexity of the method is 8
Complex Method,TinyPG.Compiler,Grammar,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Grammar.cs,SetupDirectives,Cyclomatic complexity of the method is 15
Complex Method,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalStart,Cyclomatic complexity of the method is 12
Complex Method,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,Cyclomatic complexity of the method is 9
Complex Method,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,Cyclomatic complexity of the method is 11
Complex Method,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,Cyclomatic complexity of the method is 8
Long Parameter List,TinyPG,ParseError,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\ParseTree.cs,ParseError,The method has 7 parameters. Parameters: message' code' file' line' col' pos' length
Long Parameter List,TinyPG.Highlighter,ParseError,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\ParseTree.cs,ParseError,The method has 7 parameters. Parameters: message' code' file' line' col' pos' length
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter aboutTinyParserGeneratorToolStripMenuItem is 41.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter expressionEvaluatorToolStripMenuItem is 36.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter viewParseTreeCodeToolStripMenuItem is 34.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter expressionEvaluatorToolStripMenuItem1 is 37.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter theTinyPGGrammarToolStripMenuItem is 33.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter theTinyPGGrammarV10ToolStripMenuItem is 36.
Long Identifier,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,,The length of the parameter theTinyPGGrammarHighlighterV12ToolStripMenuItem is 47.
Long Statement,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateParseMethod,The length of the statement  "            sb.AppendLine("        private void Parse" + s.Name + "(ParseNode parent)" + Helper.AddComment("NonTerminalSymbol: " + s.Name)); " is 128.
Long Statement,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateParseMethod,The length of the statement  "            sb.AppendLine("            ParseNode node = parent.CreateNode(scanner.GetToken(TokenType." + s.Name + ")' \"" + s.Name + "\");"); " is 129.
Long Statement,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "tok = scanner.Scan(TokenType." + r.Symbol.Name + ");" + Helper.AddComment("Terminal Rule: " + r.Symbol.Name)); " is 134.
Long Statement,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "    tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected \" + TokenType." + r.Symbol.Name + ".ToString()' 0x1001' tok));"); " is 204.
Long Statement,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "        tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected " + expectedTokens + ".\"' 0x0002' tok));"); " is 186.
Long Statement,TinyPG.CodeGenerators.CSharp,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParseTreeGenerator.cs,Generate,The length of the statement  "                evalmethods.AppendLine("        protected virtual object Eval" + s.Name + "(ParseTree tree' params object[] paramlist)"); " is 121.
Long Statement,TinyPG.CodeGenerators.CSharp,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParseTreeGenerator.cs,Generate,The length of the statement  "                string inodes = "public List<IParseNode> INodes {get { return nodes.ConvertAll<IParseNode>( new Converter<ParseNode' IParseNode>( delegate(ParseNode n) { return (IParseNode)n; })); }}\r\n\r\n"; " is 193.
Long Statement,TinyPG.CodeGenerators.CSharp,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParseTreeGenerator.cs,FormatCodeBlock,The length of the statement  "                codeblock = codeblock.Substring(0' match.Captures[0].Index) + replacement + codeblock.Substring(match.Captures[0].Index + match.Captures[0].Length); " is 148.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateParseMethod,The length of the statement  "            sb.AppendLine("        Private Sub Parse" + s.Name + "(ByVal parent As ParseNode)" + Helper.AddComment("'"' "NonTerminalSymbol: " + s.Name)); " is 141.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateParseMethod,The length of the statement  "            sb.AppendLine("            Dim node As ParseNode = parent.CreateNode(m_scanner.GetToken(TokenType." + s.Name + ")' \"" + s.Name + "\")"); " is 137.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "tok = m_scanner.Scan(TokenType." + r.Symbol.Name + ")" + Helper.AddComment("'"' "Terminal Rule: " + r.Symbol.Name)); " is 140.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "    m_tree.Errors.Add(New ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected \" + TokenType." + r.Symbol.Name + ".ToString()' &H1001' tok))"); " is 205.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "Parse" + r.Symbol.Name + "(node)" + Helper.AddComment("'"' "NonTerminal Rule: " + r.Symbol.Name)); " is 122.
Long Statement,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The length of the statement  "                    sb.AppendLine(Indent + "        m_tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found.\"' &H0002' tok))"); " is 154.
Long Statement,TinyPG.CodeGenerators.VBNet,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParseTreeGenerator.cs,Generate,The length of the statement  "                evalmethods.AppendLine("        Protected Overridable Function Eval" + s.Name + "(ByVal tree As ParseTree' ByVal ParamArray paramlist As Object()) As Object"); " is 159.
Long Statement,TinyPG.CodeGenerators.VBNet,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParseTreeGenerator.cs,Generate,The length of the statement  "                                    + "                Return Nodes.ConvertAll(Of IParseNode)(New Converter(Of ParseNode' IParseNode)(AddressOf Node2INode))\r\n" " is 125.
Long Statement,TinyPG.CodeGenerators.VBNet,ParseTreeGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParseTreeGenerator.cs,FormatCodeBlock,The length of the statement  "                codeblock = codeblock.Substring(0' match.Captures[0].Index) + replacement + codeblock.Substring(match.Captures[0].Index + match.Captures[0].Length); " is 148.
Long Statement,TinyPG.Compiler,Compiler,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Compiler.cs,Run,The length of the statement  "            object parserinstance = (IParser)assembly.CreateInstance("TinyPG.Debug.Parser"' true' BindingFlags.CreateInstance' null' new object[] { scannerinstance }' null' null); " is 167.
Long Statement,TinyPG.Compiler,Compiler,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Compiler.cs,Run,The length of the statement  "            object treeinstance = parsertype.InvokeMember("Parse"' BindingFlags.InvokeMethod' null' parserinstance' new object[] { input' string.Empty }); " is 142.
Long Statement,TinyPG.Compiler,Compiler,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Compiler.cs,Run,The length of the statement  "            List<IParseError> errors = (List<IParseError>)treetype.InvokeMember("Errors"' BindingFlags.GetField' null' treeinstance' null); " is 127.
Long Statement,TinyPG.Compiler,Compiler,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Compiler.cs,Run,The length of the statement  "                object highlighterinstance = assembly.CreateInstance("TinyPG.Debug.TextHighlighter"' true' BindingFlags.CreateInstance' null' new object[] { textHighlight' scannerinstance' parserinstance }' null' null); " is 203.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalStart,The length of the statement  "                            terminal = new TerminalSymbol(n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text' (string)n.Nodes[n.Nodes.Count - 1].Nodes[2].Nodes[0].Token.Text); " is 143.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalStart,The length of the statement  "                            tree.Errors.Add(new ParseError("regular expression for '" + n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text + "' results in error: " + ex.Message' 0x1020' n.Nodes[0])); " is 167.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The length of the statement  "            List<string> languages = new List<string>(new string[] { "c#"' "cs"' "csharp"' "vb"' "vb.net"' "vbnet"' "visualbasic" }); " is 121.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                tree.Errors.Add(new ParseError("Attribute already defined for this symbol: " + node.Nodes[1].Token.Text' 0x1039' node.Nodes[1])); " is 129.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                        tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node)); " is 122.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                        tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node)); " is 122.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                        tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1])); " is 136.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                            tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0])); " is 166.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                        tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node)); " is 122.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The length of the statement  "                        tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node)); " is 122.
Long Statement,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,ValidateCodeBlock,The length of the statement  "                    tree.Errors.Add(new ParseError("Variable $" + match.Groups["var"].Value + " cannot be matched."' 0x1016' node.Token.File' node.Token.StartPos + match.Groups["var"].Index' node.Token.StartPos + match.Groups["var"].Index' match.Groups["var"].Length)); " is 249.
Long Statement,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The length of the statement  "                    WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart)); " is 138.
Long Statement,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The length of the statement  "                        WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart)); " is 138.
Long Statement,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,OnResizeEnd,The length of the statement  "            if (_dockExtender.Overlay.Visible == true && _dockExtender.Overlay.DockHostControl != null) //ok found new docking position " is 123.
Long Statement,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,DockFloaty,The length of the statement  "            if (_dockState.Splitter != null && _dockState.OrgDockStyle != DockStyle.Fill && _dockState.OrgDockStyle != DockStyle.None) " is 122.
Long Statement,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,OnPaintBackground,The length of the statement  "                brush = new LinearGradientBrush(r' SystemColors.ActiveCaption' SystemColors.GradientActiveCaption' LinearGradientMode.Vertical); " is 128.
Long Statement,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,OnPaintBackground,The length of the statement  "                brush = new LinearGradientBrush(r' SystemColors.InactiveCaption' SystemColors.GradientInactiveCaption' LinearGradientMode.Vertical); " is 132.
Long Statement,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The length of the statement  "                    brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical); " is 143.
Long Statement,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The length of the statement  "                    brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical); " is 121.
Long Statement,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RegExControl)); " is 132.
Long Statement,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The length of the statement  "            this.textExpression.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 147.
Long Statement,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The length of the statement  "            this.textExpression.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The length of the statement  "            this.textBox.Font = new System.Drawing.Font("Courier New"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 148.
Long Statement,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The length of the statement  "            this.statusText.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,MainForm_Load,The length of the statement  "            textHighlighter = new TinyPG.Highlighter.TextHighlighter(textEditor' highlighterScanner' new TinyPG.Highlighter.Parser(highlighterScanner)); " is 140.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,openToolStripMenuItem_Click,The length of the statement  "                DialogResult r = MessageBox.Show(this' "You will lose current changes' continue?"' "Lose changes"' MessageBoxButtons.OKCancel); " is 127.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_STRING] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_STRING]; " is 142.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_SYMBOL] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_SYMBOL]; " is 142.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_COMMENTBLOCK] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_COMMENTBLOCK]; " is 154.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_COMMENTLINE] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_COMMENTLINE]; " is 152.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_KEYWORD] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_KEYWORD]; " is 144.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_NONKEYWORD] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.VB_NONKEYWORD]; " is 150.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_STRING] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_STRING]; " is 142.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_SYMBOL] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_SYMBOL]; " is 142.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_COMMENTBLOCK] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_COMMENTBLOCK]; " is 154.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_COMMENTLINE] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_COMMENTLINE]; " is 152.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_KEYWORD] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_KEYWORD]; " is 144.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,SetHighlighterLanguage,The length of the statement  "                        highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.DOTNET_NONKEYWORD] = highlighterScanner.Patterns[TinyPG.Highlighter.TokenType.CS_NONKEYWORD]; " is 150.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N))); " is 138.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O))); " is 139.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S))); " is 139.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.regexToolToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.R))); " is 144.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.outputToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.P))); " is 141.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.parsetreeToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.T))); " is 144.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.expressionEvaluatorToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.E))); " is 154.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.expressionEvaluatorToolStripMenuItem.Click += new System.EventHandler(this.expressionEvaluatorToolStripMenuItem_Click); " is 124.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.viewParseTreeCodeToolStripMenuItem.Click += new System.EventHandler(this.viewParseTreeCodeToolStripMenuItem_Click); " is 120.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.aboutTinyParserGeneratorToolStripMenuItem.Click += new System.EventHandler(this.aboutTinyParserGeneratorToolStripMenuItem_Click); " is 134.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.expressionEvaluatorToolStripMenuItem1.Click += new System.EventHandler(this.expressionEvaluatorToolStripMenuItem1_Click); " is 126.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.theTinyPGGrammarHighlighterV12ToolStripMenuItem.Click += new System.EventHandler(this.theTinyPGGrammarHighlighterV12ToolStripMenuItem_Click); " is 146.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.theTinyPGGrammarV10ToolStripMenuItem.Click += new System.EventHandler(this.theTinyPGGrammarV10ToolStripMenuItem_Click); " is 124.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.textEditor.Font = new System.Drawing.Font("Consolas"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 148.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.textOutput.Font = new System.Drawing.Font("Consolas"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.headerOutput.Font = new System.Drawing.Font("Segoe UI"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 147.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.textInput.Font = new System.Drawing.Font("Consolas"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 144.
Long Statement,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The length of the statement  "            this.headerEvaluator.Font = new System.Drawing.Font("Segoe UI"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseStart,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.EOF.ToString()' 0x1001' tok)); " is 146.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseDirective,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVEOPEN.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseDirective,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.IDENTIFIER.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseDirective,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVECLOSE.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseNameValue,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.IDENTIFIER.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseNameValue,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ASSIGN.ToString()' 0x1001' tok)); " is 149.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseNameValue,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.STRING.ToString()' 0x1001' tok)); " is 149.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.SQUAREOPEN.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.IDENTIFIER.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.BRACKETOPEN.ToString()' 0x1001' tok)); " is 154.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.BRACKETCLOSE.ToString()' 0x1001' tok)); " is 155.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.SQUARECLOSE.ToString()' 0x1001' tok)); " is 154.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseParams,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.COMMA.ToString()' 0x1001' tok)); " is 148.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseParam,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.INTEGER.ToString()' 0x1001' tok)); " is 150.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseParam,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOUBLE.ToString()' 0x1001' tok)); " is 149.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseParam,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.STRING.ToString()' 0x1001' tok)); " is 149.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseParam,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.HEX.ToString()' 0x1001' tok)); " is 146.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseProduction,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.IDENTIFIER.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseProduction,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ARROW.ToString()' 0x1001' tok)); " is 148.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseProduction,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.CODEBLOCK.ToString()' 0x1001' tok)); " is 152.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseProduction,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.SEMICOLON.ToString()' 0x1001' tok)); " is 152.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseRule,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.STRING.ToString()' 0x1001' tok)); " is 149.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseSubrule,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.PIPE.ToString()' 0x1001' tok)); " is 147.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseSymbol,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.IDENTIFIER.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseSymbol,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.BRACKETOPEN.ToString()' 0x1001' tok)); " is 154.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseSymbol,The length of the statement  "                        tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.BRACKETCLOSE.ToString()' 0x1001' tok)); " is 155.
Long Statement,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseSymbol,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.UNARYOPER.ToString()' 0x1001' tok)); " is 152.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseStart,The length of the statement  "            tok = scanner.LookAhead(TokenType.GRAMMARCOMMENTLINE' TokenType.GRAMMARCOMMENTBLOCK' TokenType.ATTRIBUTEOPEN' TokenType.GRAMMARSTRING' TokenType.GRAMMARARROW' TokenType.GRAMMARNONKEYWORD' TokenType.GRAMMARKEYWORD' TokenType.GRAMMARSYMBOL' TokenType.CODEBLOCKOPEN' TokenType.DIRECTIVEOPEN); " is 289.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseStart,The length of the statement  "                tok = scanner.LookAhead(TokenType.GRAMMARCOMMENTLINE' TokenType.GRAMMARCOMMENTBLOCK' TokenType.ATTRIBUTEOPEN' TokenType.GRAMMARSTRING' TokenType.GRAMMARARROW' TokenType.GRAMMARNONKEYWORD' TokenType.GRAMMARKEYWORD' TokenType.GRAMMARSYMBOL' TokenType.CODEBLOCKOPEN' TokenType.DIRECTIVEOPEN); " is 289.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseStart,The length of the statement  "            tok = scanner.LookAhead(TokenType.GRAMMARCOMMENTLINE' TokenType.GRAMMARCOMMENTBLOCK' TokenType.ATTRIBUTEOPEN' TokenType.GRAMMARSTRING' TokenType.GRAMMARARROW' TokenType.GRAMMARNONKEYWORD' TokenType.GRAMMARKEYWORD' TokenType.GRAMMARSYMBOL' TokenType.CODEBLOCKOPEN' TokenType.DIRECTIVEOPEN); " is 289.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseStart,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.EOF.ToString()' 0x1001' tok)); " is 146.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCommentBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARCOMMENTLINE.ToString()' 0x1001' tok)); " is 161.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCommentBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARCOMMENTBLOCK.ToString()' 0x1001' tok)); " is 162.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVEOPEN.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "            tok = scanner.LookAhead(TokenType.WHITESPACE' TokenType.DIRECTIVEKEYWORD' TokenType.DIRECTIVESYMBOL' TokenType.DIRECTIVENONKEYWORD' TokenType.DIRECTIVESTRING); " is 159.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                tok = scanner.LookAhead(TokenType.WHITESPACE' TokenType.DIRECTIVEKEYWORD' TokenType.DIRECTIVESYMBOL' TokenType.DIRECTIVENONKEYWORD' TokenType.DIRECTIVESTRING); " is 159.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.WHITESPACE.ToString()' 0x1001' tok)); " is 153.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVEKEYWORD.ToString()' 0x1001' tok)); " is 159.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVESYMBOL.ToString()' 0x1001' tok)); " is 158.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVENONKEYWORD.ToString()' 0x1001' tok)); " is 162.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVESTRING.ToString()' 0x1001' tok)); " is 158.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "            tok = scanner.LookAhead(TokenType.WHITESPACE' TokenType.DIRECTIVEKEYWORD' TokenType.DIRECTIVESYMBOL' TokenType.DIRECTIVENONKEYWORD' TokenType.DIRECTIVESTRING); " is 159.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DIRECTIVECLOSE.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                tok = scanner.LookAhead(TokenType.GRAMMARSTRING' TokenType.GRAMMARARROW' TokenType.GRAMMARNONKEYWORD' TokenType.GRAMMARKEYWORD' TokenType.GRAMMARSYMBOL); " is 153.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARSTRING.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARARROW.ToString()' 0x1001' tok)); " is 155.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARNONKEYWORD.ToString()' 0x1001' tok)); " is 160.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARKEYWORD.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.GRAMMARSYMBOL.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseGrammarBlock,The length of the statement  "                tok = scanner.LookAhead(TokenType.GRAMMARSTRING' TokenType.GRAMMARARROW' TokenType.GRAMMARNONKEYWORD' TokenType.GRAMMARKEYWORD' TokenType.GRAMMARSYMBOL); " is 153.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseAttributeBlock,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ATTRIBUTEOPEN.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseAttributeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ATTRIBUTEKEYWORD.ToString()' 0x1001' tok)); " is 159.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseAttributeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ATTRIBUTENONKEYWORD.ToString()' 0x1001' tok)); " is 162.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseAttributeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ATTRIBUTESYMBOL.ToString()' 0x1001' tok)); " is 158.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseAttributeBlock,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.ATTRIBUTECLOSE.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.CODEBLOCKOPEN.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "            tok = scanner.LookAhead(TokenType.DOTNET_COMMENTLINE' TokenType.DOTNET_COMMENTBLOCK' TokenType.DOTNET_TYPES' TokenType.DOTNET_KEYWORD' TokenType.DOTNET_SYMBOL' TokenType.DOTNET_STRING' TokenType.DOTNET_NONKEYWORD); " is 214.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                tok = scanner.LookAhead(TokenType.DOTNET_COMMENTLINE' TokenType.DOTNET_COMMENTBLOCK' TokenType.DOTNET_TYPES' TokenType.DOTNET_KEYWORD' TokenType.DOTNET_SYMBOL' TokenType.DOTNET_STRING' TokenType.DOTNET_NONKEYWORD); " is 214.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_COMMENTLINE.ToString()' 0x1001' tok)); " is 161.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_COMMENTBLOCK.ToString()' 0x1001' tok)); " is 162.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_TYPES.ToString()' 0x1001' tok)); " is 155.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_KEYWORD.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_SYMBOL.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_STRING.ToString()' 0x1001' tok)); " is 156.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                            tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.DOTNET_NONKEYWORD.ToString()' 0x1001' tok)); " is 160.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "            tok = scanner.LookAhead(TokenType.DOTNET_COMMENTLINE' TokenType.DOTNET_COMMENTBLOCK' TokenType.DOTNET_TYPES' TokenType.DOTNET_KEYWORD' TokenType.DOTNET_SYMBOL' TokenType.DOTNET_STRING' TokenType.DOTNET_NONKEYWORD); " is 214.
Long Statement,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The length of the statement  "                    tree.Errors.Add(new ParseError("Unexpected token '" + tok.Text.Replace("\n"' "") + "' found. Expected " + TokenType.CODEBLOCKCLOSE.ToString()' 0x1001' tok)); " is 157.
Long Statement,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The length of the statement  "                    canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1); " is 130.
Long Statement,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,AddRtfHeader,The length of the statement  "            sb.Insert(0' @"{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Consolas;}}{\colortbl;\red0\green128\blue0;\red0\green128\blue0;\red255\green0\blue0;\red128\green0\blue255;\red128\green0\blue128;\red128\green0\blue128;\red43\green145\blue202;\red0\green0\blue255;\red255\green0\blue0;\red0\green0\blue255;\red43\green145\blue202;\red0\green128\blue0;\red0\green128\blue0;\red163\green21\blue21;\red0\green128\blue0;\red0\green128\blue0;\red163\green21\blue21;\red0\green128\blue0;\red0\green128\blue0;\red163\green21\blue21;\red128\green0\blue128;\red128\green0\blue128;\red0\green0\blue255;\red128\green0\blue128;\red163\green21\blue21;}\viewkind4\uc1\pard\lang1033\f0\fs20"); " is 674.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The conditional expression  "(e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40)"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The conditional expression  "(e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The conditional expression  "(((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control)"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The conditional expression  "((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control)"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The conditional expression  "e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The conditional expression  "(e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40)"  is complex.
Complex Conditional,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The conditional expression  "e.KeyValue == 32 || e.KeyValue == 27 || e.KeyValue == 13 || e.KeyValue == 9"  is complex.
Complex Conditional,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25"  is complex.
Complex Conditional,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25"  is complex.
Complex Conditional,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25"  is complex.
Complex Conditional,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The conditional expression  "ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25"  is complex.
Complex Conditional,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,TextHighlighter_SwitchContext,The conditional expression  "e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.DOTNET_COMMENTBLOCK                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.DOTNET_COMMENTLINE                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.DOTNET_STRING                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.GRAMMARSTRING                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.DIRECTIVESTRING                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.GRAMMARCOMMENTBLOCK                  || e.NewContext.Token.Type == TinyPG.Highlighter.TokenType.GRAMMARCOMMENTLINE"  is complex.
Complex Conditional,TinyPG,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Parser.cs,ParseAttribute,The conditional expression  "tok.Type == TokenType.INTEGER                      || tok.Type == TokenType.DOUBLE                      || tok.Type == TokenType.STRING                      || tok.Type == TokenType.HEX"  is complex.
Complex Conditional,TinyPG,Scanner,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Scanner.cs,LookAhead,The conditional expression  "m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len ))"  is complex.
Complex Conditional,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseStart,The conditional expression  "tok.Type == TokenType.GRAMMARCOMMENTLINE                  || tok.Type == TokenType.GRAMMARCOMMENTBLOCK                  || tok.Type == TokenType.ATTRIBUTEOPEN                  || tok.Type == TokenType.GRAMMARSTRING                  || tok.Type == TokenType.GRAMMARARROW                  || tok.Type == TokenType.GRAMMARNONKEYWORD                  || tok.Type == TokenType.GRAMMARKEYWORD                  || tok.Type == TokenType.GRAMMARSYMBOL                  || tok.Type == TokenType.CODEBLOCKOPEN                  || tok.Type == TokenType.DIRECTIVEOPEN"  is complex.
Complex Conditional,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseDirectiveBlock,The conditional expression  "tok.Type == TokenType.WHITESPACE                  || tok.Type == TokenType.DIRECTIVEKEYWORD                  || tok.Type == TokenType.DIRECTIVESYMBOL                  || tok.Type == TokenType.DIRECTIVENONKEYWORD                  || tok.Type == TokenType.DIRECTIVESTRING"  is complex.
Complex Conditional,TinyPG.Highlighter,Parser,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Parser.cs,ParseCodeBlock,The conditional expression  "tok.Type == TokenType.DOTNET_COMMENTLINE                  || tok.Type == TokenType.DOTNET_COMMENTBLOCK                  || tok.Type == TokenType.DOTNET_TYPES                  || tok.Type == TokenType.DOTNET_KEYWORD                  || tok.Type == TokenType.DOTNET_SYMBOL                  || tok.Type == TokenType.DOTNET_STRING                  || tok.Type == TokenType.DOTNET_NONKEYWORD"  is complex.
Complex Conditional,TinyPG.Highlighter,Scanner,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\Scanner.cs,LookAhead,The conditional expression  "m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len ))"  is complex.
Empty Catch Block,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,ViewFile,The method has an empty catch block.
Empty Catch Block,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,LoadConfig,The method has an empty catch block.
Empty Catch Block,TinyPG,SyntaxChecker,C:\repos\SickheadGames_TinyPG\TinyPG\SyntaxChecker.cs,Start,The method has an empty catch block.
Magic Number,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateParseMethod,The following statement contains a magic number: foreach (Rule rule in s.Rules)              {                  sb.AppendLine(GenerateProductionRuleCode(s.Rules[0]' 3));              }
Magic Number,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The following statement contains a magic number: switch (r.Type)              {                  case RuleType.Terminal:                      // expecting terminal' so scan it.                      sb.AppendLine(Indent + "tok = scanner.Scan(TokenType." + r.Symbol.Name + ");" + Helper.AddComment("Terminal Rule: " + r.Symbol.Name));                      sb.AppendLine(Indent + "n = node.CreateNode(tok' tok.ToString() );");                      sb.AppendLine(Indent + "node.Token.UpdateRange(tok);");                      sb.AppendLine(Indent + "node.Nodes.Add(n);");                      sb.AppendLine(Indent + "if (tok.Type != TokenType." + r.Symbol.Name + ") {");                      sb.AppendLine(Indent + "    tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected \" + TokenType." + r.Symbol.Name + ".ToString()' 0x1001' tok));");                      sb.AppendLine(Indent + "    return;");                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.NonTerminal:                      sb.AppendLine(Indent + "Parse" + r.Symbol.Name + "(node);" + Helper.AddComment("NonTerminal Rule: " + r.Symbol.Name));                      break;                  case RuleType.Concat:                      foreach (Rule rule in r.Rules)                      {                          sb.AppendLine();                          sb.AppendLine(Indent + Helper.AddComment("Concat Rule"));                          sb.Append(GenerateProductionRuleCode(rule' indent));                      }                      break;                  case RuleType.ZeroOrMore:                      firsts = r.GetFirstTerminals();                      i = 0;                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("ZeroOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "while (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")");                      sb.AppendLine(Indent + "{");                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("ZeroOrMore Rule"));                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.OneOrMore:                      sb.AppendLine(Indent + "do {" + Helper.AddComment("OneOrMore Rule"));                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "    tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("OneOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "} while (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("OneOrMore Rule"));                      break;                  case RuleType.Option:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("Option Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "if (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")");                      sb.AppendLine(Indent + "{");                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.Choice:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = scanner.LookAhead(");                      var tokens = new List<string>();                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                            tokens.Add(s.Name);                      }                      string expectedTokens;                      if (tokens.Count == 1)                          expectedTokens = tokens[0];                      else if (tokens.Count == 2)                          expectedTokens = tokens[0] + " or " + tokens[1];                      else                      {                          expectedTokens = string.Join("' "' tokens.GetRange(0' tokens.Count - 1).ToArray());                          expectedTokens += "' or " + tokens[tokens.Count - 1];                      }                      sb.AppendLine(");" + Helper.AddComment("Choice Rule"));                        sb.AppendLine(Indent + "switch (tok.Type)");                      sb.AppendLine(Indent + "{" + Helper.AddComment("Choice Rule"));                      foreach (Rule rule in r.Rules)                      {                          foreach (TerminalSymbol s in rule.GetFirstTerminals())                          {                              sb.AppendLine(Indent + "    case TokenType." + s.Name + ":");                          }                          sb.Append(GenerateProductionRuleCode(rule' indent + 2));                          sb.AppendLine(Indent + "        break;");                      }                      sb.AppendLine(Indent + "    default:");                      sb.AppendLine(Indent + "        tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected " + expectedTokens + ".\"' 0x0002' tok));");                      sb.AppendLine(Indent + "        break;");                      sb.AppendLine(Indent + "}" + Helper.AddComment("Choice Rule"));                      break;                  default:                      break;              }
Magic Number,TinyPG.CodeGenerators.CSharp,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ParserGenerator.cs,GenerateProductionRuleCode,The following statement contains a magic number: switch (r.Type)              {                  case RuleType.Terminal:                      // expecting terminal' so scan it.                      sb.AppendLine(Indent + "tok = scanner.Scan(TokenType." + r.Symbol.Name + ");" + Helper.AddComment("Terminal Rule: " + r.Symbol.Name));                      sb.AppendLine(Indent + "n = node.CreateNode(tok' tok.ToString() );");                      sb.AppendLine(Indent + "node.Token.UpdateRange(tok);");                      sb.AppendLine(Indent + "node.Nodes.Add(n);");                      sb.AppendLine(Indent + "if (tok.Type != TokenType." + r.Symbol.Name + ") {");                      sb.AppendLine(Indent + "    tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected \" + TokenType." + r.Symbol.Name + ".ToString()' 0x1001' tok));");                      sb.AppendLine(Indent + "    return;");                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.NonTerminal:                      sb.AppendLine(Indent + "Parse" + r.Symbol.Name + "(node);" + Helper.AddComment("NonTerminal Rule: " + r.Symbol.Name));                      break;                  case RuleType.Concat:                      foreach (Rule rule in r.Rules)                      {                          sb.AppendLine();                          sb.AppendLine(Indent + Helper.AddComment("Concat Rule"));                          sb.Append(GenerateProductionRuleCode(rule' indent));                      }                      break;                  case RuleType.ZeroOrMore:                      firsts = r.GetFirstTerminals();                      i = 0;                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("ZeroOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "while (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")");                      sb.AppendLine(Indent + "{");                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("ZeroOrMore Rule"));                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.OneOrMore:                      sb.AppendLine(Indent + "do {" + Helper.AddComment("OneOrMore Rule"));                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "    tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("OneOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "} while (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("OneOrMore Rule"));                      break;                  case RuleType.Option:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(");" + Helper.AddComment("Option Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "if (tok.Type == TokenType." + s.Name);                          else                              sb.Append("\r\n" + Indent + "    || tok.Type == TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")");                      sb.AppendLine(Indent + "{");                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                      sb.AppendLine(Indent + "}");                      break;                  case RuleType.Choice:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = scanner.LookAhead(");                      var tokens = new List<string>();                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                            tokens.Add(s.Name);                      }                      string expectedTokens;                      if (tokens.Count == 1)                          expectedTokens = tokens[0];                      else if (tokens.Count == 2)                          expectedTokens = tokens[0] + " or " + tokens[1];                      else                      {                          expectedTokens = string.Join("' "' tokens.GetRange(0' tokens.Count - 1).ToArray());                          expectedTokens += "' or " + tokens[tokens.Count - 1];                      }                      sb.AppendLine(");" + Helper.AddComment("Choice Rule"));                        sb.AppendLine(Indent + "switch (tok.Type)");                      sb.AppendLine(Indent + "{" + Helper.AddComment("Choice Rule"));                      foreach (Rule rule in r.Rules)                      {                          foreach (TerminalSymbol s in rule.GetFirstTerminals())                          {                              sb.AppendLine(Indent + "    case TokenType." + s.Name + ":");                          }                          sb.Append(GenerateProductionRuleCode(rule' indent + 2));                          sb.AppendLine(Indent + "        break;");                      }                      sb.AppendLine(Indent + "    default:");                      sb.AppendLine(Indent + "        tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected " + expectedTokens + ".\"' 0x0002' tok));");                      sb.AppendLine(Indent + "        break;");                      sb.AppendLine(Indent + "}" + Helper.AddComment("Choice Rule"));                      break;                  default:                      break;              }
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: int counter = 2;
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_NONE_"' 3' "= 0'"' 5));
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_NONE_"' 3' "= 0'"' 5));
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_UNDETERMINED_"' 3' "= 1'"' 5));
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_UNDETERMINED_"' 3' "= 1'"' 5));
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (Symbol s in Grammar.GetNonTerminals())              {                  tokentype.AppendLine(Helper.Outline(s.Name' 3' "= " + String.Format("{0:d}'"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (Symbol s in Grammar.GetNonTerminals())              {                  tokentype.AppendLine(Helper.Outline(s.Name' 3' "= " + String.Format("{0:d}'"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol s in Grammar.GetTerminals())              {                  regexps.Append("            regex = new Regex(" + s.Expression.ToString() + "' RegexOptions.Compiled");                    if (s.Attributes.ContainsKey("IgnoreCase"))                      regexps.Append(" | RegexOptions.IgnoreCase");                    regexps.Append(");\r\n");                    regexps.Append("            Patterns.Add(TokenType." + s.Name + "' regex);\r\n");                  regexps.Append("            Tokens.Add(TokenType." + s.Name + ");\r\n\r\n");                    if (first) first = false;                  else tokentype.AppendLine("'");                    tokentype.Append(Helper.Outline(s.Name' 3' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol s in Grammar.GetTerminals())              {                  regexps.Append("            regex = new Regex(" + s.Expression.ToString() + "' RegexOptions.Compiled");                    if (s.Attributes.ContainsKey("IgnoreCase"))                      regexps.Append(" | RegexOptions.IgnoreCase");                    regexps.Append(");\r\n");                    regexps.Append("            Patterns.Add(TokenType." + s.Name + "' regex);\r\n");                  regexps.Append("            Tokens.Add(TokenType." + s.Name + ");\r\n\r\n");                    if (first) first = false;                  else tokentype.AppendLine("'");                    tokentype.Append(Helper.Outline(s.Name' 3' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.CSharp,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CSharp\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(@""{{\cf" + colorindex + @" "");");                  tokens.AppendLine(Helper.Indent(6) + "break;");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateParseMethod,The following statement contains a magic number: foreach (Rule rule in s.Rules)              {                  sb.AppendLine(GenerateProductionRuleCode(s.Rules[0]' 3));              }
Magic Number,TinyPG.CodeGenerators.VBNet,ParserGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ParserGenerator.cs,GenerateProductionRuleCode,The following statement contains a magic number: switch (r.Type)              {                  case RuleType.Terminal:                      // expecting terminal' so scan it.                      sb.AppendLine(Indent + "tok = m_scanner.Scan(TokenType." + r.Symbol.Name + ")" + Helper.AddComment("'"' "Terminal Rule: " + r.Symbol.Name));                      sb.AppendLine(Indent + "n = node.CreateNode(tok' tok.ToString() )");                      sb.AppendLine(Indent + "node.Token.UpdateRange(tok)");                      sb.AppendLine(Indent + "node.Nodes.Add(n)");                      sb.AppendLine(Indent + "If tok.Type <> TokenType." + r.Symbol.Name + " Then");                      sb.AppendLine(Indent + "    m_tree.Errors.Add(New ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found. Expected \" + TokenType." + r.Symbol.Name + ".ToString()' &H1001' tok))");                      sb.AppendLine(Indent + "    Return\r\n");                      sb.AppendLine(Indent + "End If\r\n");                      break;                  case RuleType.NonTerminal:                      sb.AppendLine(Indent + "Parse" + r.Symbol.Name + "(node)" + Helper.AddComment("'"' "NonTerminal Rule: " + r.Symbol.Name));                      break;                  case RuleType.Concat:                      foreach (Rule rule in r.Rules)                      {                          sb.AppendLine();                          sb.AppendLine(Indent + Helper.AddComment("'"' "Concat Rule"));                          sb.Append(GenerateProductionRuleCode(rule' indent));                      }                      break;                  case RuleType.ZeroOrMore:                      firsts = r.GetFirstTerminals();                      i = 0;                      sb.Append(Indent + "tok = m_scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")" + Helper.AddComment("'"' "ZeroOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append(Indent + "While tok.Type = TokenType." + s.Name);                          else                              sb.Append(" Or tok.Type = TokenType." + s.Name);                          i++;                      }                      sb.AppendLine("");                          foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      sb.Append(Indent + "tok = m_scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")" + Helper.AddComment("'"' "ZeroOrMore Rule"));                      sb.AppendLine(Indent + "End While");                      break;                  case RuleType.OneOrMore:                      sb.AppendLine(Indent + "Do" + Helper.AddComment("'"' "OneOrMore Rule"));                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                        i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "    tok = m_scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")" + Helper.AddComment("'"' "OneOrMore Rule"));                        i = 0;                      foreach (TerminalSymbol s in r.GetFirstTerminals())                      {                          if (i == 0)                              sb.Append(Indent + "Loop While tok.Type = TokenType." + s.Name);                          else                              sb.Append(" Or tok.Type = TokenType." + s.Name);                          i++;                      }                      sb.AppendLine("" + Helper.AddComment("'"' "OneOrMore Rule"));                      break;                  case RuleType.Option:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = m_scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")" + Helper.AddComment("'"' "Option Rule"));                        i = 0;                      foreach (TerminalSymbol s in r.GetFirstTerminals())                      {                          if (i == 0)                              sb.Append(Indent + "If tok.Type = TokenType." + s.Name);                          else                              sb.Append(" Or tok.Type = TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(" Then");                        foreach (Rule rule in r.Rules)                      {                          sb.Append(GenerateProductionRuleCode(rule' indent + 1));                      }                      sb.AppendLine(Indent + "End If");                      break;                  case RuleType.Choice:                      i = 0;                      firsts = r.GetFirstTerminals();                      sb.Append(Indent + "tok = m_scanner.LookAhead(");                      foreach (TerminalSymbol s in firsts)                      {                          if (i == 0)                              sb.Append("TokenType." + s.Name);                          else                              sb.Append("' TokenType." + s.Name);                          i++;                      }                      sb.AppendLine(")" + Helper.AddComment("'"' "Choice Rule"));                        sb.AppendLine(Indent + "Select Case tok.Type");                      sb.AppendLine(Indent + "" + Helper.AddComment("'"' "Choice Rule"));                      foreach (Rule rule in r.Rules)                      {                          foreach (TerminalSymbol s in rule.GetFirstTerminals())                          {                              sb.AppendLine(Indent + "    Case TokenType." + s.Name + "");                              sb.Append(GenerateProductionRuleCode(rule' indent + 2));                          }                      }                      sb.AppendLine(Indent + "    Case Else");                      sb.AppendLine(Indent + "        m_tree.Errors.Add(new ParseError(\"Unexpected token '\" + tok.Text.Replace(\"\\n\"' \"\") + \"' found.\"' &H0002' tok))");                      sb.AppendLine(Indent + "        Exit Select");                      sb.AppendLine(Indent + "End Select" + Helper.AddComment("'"' "Choice Rule"));                      break;                  default:                      break;              }
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: int counter = 2;
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_NONE_"' 2' "= 0"' 5));
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_NONE_"' 2' "= 0"' 5));
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_UNDETERMINED_"' 2' "= 1"' 5));
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: tokentype.AppendLine(Helper.Outline("_UNDETERMINED_"' 2' "= 1"' 5));
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (Symbol s in Grammar.GetNonTerminals())              {                  tokentype.AppendLine(Helper.Outline(s.Name' 2' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (Symbol s in Grammar.GetNonTerminals())              {                  tokentype.AppendLine(Helper.Outline(s.Name' 2' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol s in Grammar.GetTerminals())              {                  string vbexpr = s.Expression.ToString();                  if (vbexpr.StartsWith("@"))                      vbexpr = vbexpr.Substring(1);                  regexps.Append("            regex = new Regex(" + vbexpr + "' RegexOptions.Compiled)\r\n");                  regexps.Append("            Patterns.Add(TokenType." + s.Name + "' regex)\r\n");                  regexps.Append("            Tokens.Add(TokenType." + s.Name + ")\r\n\r\n");                    if (first) first = false;                  else tokentype.AppendLine("");                    tokentype.Append(Helper.Outline(s.Name' 2' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,ScannerGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\ScannerGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol s in Grammar.GetTerminals())              {                  string vbexpr = s.Expression.ToString();                  if (vbexpr.StartsWith("@"))                      vbexpr = vbexpr.Substring(1);                  regexps.Append("            regex = new Regex(" + vbexpr + "' RegexOptions.Compiled)\r\n");                  regexps.Append("            Patterns.Add(TokenType." + s.Name + "' regex)\r\n");                  regexps.Append("            Tokens.Add(TokenType." + s.Name + ")\r\n\r\n");                    if (first) first = false;                  else tokentype.AppendLine("");                    tokentype.Append(Helper.Outline(s.Name' 2' "= " + String.Format("{0:d}"' counter)' 5));                  counter++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.CodeGenerators.VBNet,TextHighlighterGenerator,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\VBNet\TextHighlighterGenerator.cs,Generate,The following statement contains a magic number: foreach (TerminalSymbol t in Grammar.GetTerminals())              {                  if (!t.Attributes.ContainsKey("Color"))                      continue;                    tokens.AppendLine(Helper.Indent(5) + "Case TokenType." + t.Name + ":");                  tokens.AppendLine(Helper.Indent(6) + @"sb.Append(""{{\cf" + colorindex + @" "")");                  tokens.AppendLine(Helper.Indent(6) + "Exit Select");                    int red = 0;                  int green = 0;                  int blue = 0;                  int len = t.Attributes["Color"].Length;                  if (len == 1)                  {                      if (t.Attributes["Color"][0] is long)                      {                          int v = Convert.ToInt32(t.Attributes["Color"][0]);                          red = (v >> 16) & 255;                          green = (v >> 8) & 255;                          blue = v & 255;                      }                  }                  else if (len == 3)                  {                      if (t.Attributes["Color"][0] is int || t.Attributes["Color"][0] is long)                          red = Convert.ToInt32(t.Attributes["Color"][0]) & 255;                      if (t.Attributes["Color"][1] is int || t.Attributes["Color"][1] is long)                          green = Convert.ToInt32(t.Attributes["Color"][1]) & 255;                      if (t.Attributes["Color"][2] is int || t.Attributes["Color"][2] is long)                          blue = Convert.ToInt32(t.Attributes["Color"][2]) & 255;                  }                    colors.Append(String.Format(@"\red{0}\green{1}\blue{2};"' red' green' blue));                  colorindex++;              }
Magic Number,TinyPG.Compiler,Compiler,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Compiler.cs,Run,The following statement contains a magic number: if (textHighlight != null && errors.Count == 0)              {                  // try highlight the input text                  object highlighterinstance = assembly.CreateInstance("TinyPG.Debug.TextHighlighter"' true' BindingFlags.CreateInstance' null' new object[] { textHighlight' scannerinstance' parserinstance }' null' null);                  if (highlighterinstance != null)                  {                      output += "Highlighting input..." + "\r\n";                      Type highlightertype = highlighterinstance.GetType();                      // highlight the input text only once                      highlightertype.InvokeMember("HighlightText"' BindingFlags.InvokeMethod' null' highlighterinstance' null);                        // let this thread sleep so background thread can highlight the text                      System.Threading.Thread.Sleep(20);                        // dispose of the highlighter object                      highlightertype.InvokeMember("Dispose"' BindingFlags.InvokeMethod' null' highlighterinstance' null);                  }              }
Magic Number,TinyPG.Compiler,NonTerminalSymbol,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\NonTerminalSymbol.cs,DetermineFirstTerminals,The following statement contains a magic number: if (visitCount > 10)                   return containsEmpty;
Magic Number,TinyPG.Compiler,NonTerminalSymbol,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\NonTerminalSymbol.cs,PrintProduction,The following statement contains a magic number: return Helper.Outline(Name' 0' " -> " + p' 4);
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalStart,The following statement contains a magic number: foreach (ParseNode n in Nodes)              {                  if (n.Token.Type == TokenType.Directive)                  {                      EvalDirective(tree' new object[] { g' n });                  }                  if (n.Token.Type == TokenType.ExtProduction)                  {                        if (n.Nodes[n.Nodes.Count - 1].Nodes[2].Nodes[0].Token.Type == TokenType.STRING)                      {                          try                          {                              terminal = new TerminalSymbol(n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text' (string)n.Nodes[n.Nodes.Count - 1].Nodes[2].Nodes[0].Token.Text);                              for (int i = 0; i < n.Nodes.Count - 1; i++)                              {                                  if (n.Nodes[i].Token.Type == TokenType.Attribute)                                      EvalAttribute(tree' new object[] { g' terminal' n.Nodes[i] });                              }                            }                          catch (Exception ex)                          {                              tree.Errors.Add(new ParseError("regular expression for '" + n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text + "' results in error: " + ex.Message' 0x1020' n.Nodes[0]));                              continue;                          }                            if (terminal.Name == "Start")                              tree.Errors.Add(new ParseError("'Start' symbol cannot be a regular expression."' 0x1021' n.Nodes[0]));                            if (g.Symbols.Find(terminal.Name) == null)                              g.Symbols.Add(terminal);                          else                              tree.Errors.Add(new ParseError("Terminal already declared: " + terminal.Name' 0x1022' n.Nodes[0]));                        }                      else                      {                          NonTerminalSymbol nts = new NonTerminalSymbol(n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text);                          if (g.Symbols.Find(nts.Name) == null)                              g.Symbols.Add(nts);                          else                              tree.Errors.Add(new ParseError("Non terminal already declared: " + nts.Name' 0x1023' n.Nodes[0]));                            for (int i = 0; i < n.Nodes.Count - 1; i++)                          {                              if (n.Nodes[i].Token.Type == TokenType.Attribute)                                  EvalAttribute(tree' new object[] { g' nts' n.Nodes[i] });                          }                            if (nts.Name == "Start")                              StartFound = true;                      }                  }              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalStart,The following statement contains a magic number: foreach (ParseNode n in Nodes)              {                  if (n.Token.Type == TokenType.Directive)                  {                      EvalDirective(tree' new object[] { g' n });                  }                  if (n.Token.Type == TokenType.ExtProduction)                  {                        if (n.Nodes[n.Nodes.Count - 1].Nodes[2].Nodes[0].Token.Type == TokenType.STRING)                      {                          try                          {                              terminal = new TerminalSymbol(n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text' (string)n.Nodes[n.Nodes.Count - 1].Nodes[2].Nodes[0].Token.Text);                              for (int i = 0; i < n.Nodes.Count - 1; i++)                              {                                  if (n.Nodes[i].Token.Type == TokenType.Attribute)                                      EvalAttribute(tree' new object[] { g' terminal' n.Nodes[i] });                              }                            }                          catch (Exception ex)                          {                              tree.Errors.Add(new ParseError("regular expression for '" + n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text + "' results in error: " + ex.Message' 0x1020' n.Nodes[0]));                              continue;                          }                            if (terminal.Name == "Start")                              tree.Errors.Add(new ParseError("'Start' symbol cannot be a regular expression."' 0x1021' n.Nodes[0]));                            if (g.Symbols.Find(terminal.Name) == null)                              g.Symbols.Add(terminal);                          else                              tree.Errors.Add(new ParseError("Terminal already declared: " + terminal.Name' 0x1022' n.Nodes[0]));                        }                      else                      {                          NonTerminalSymbol nts = new NonTerminalSymbol(n.Nodes[n.Nodes.Count - 1].Nodes[0].Token.Text);                          if (g.Symbols.Find(nts.Name) == null)                              g.Symbols.Add(nts);                          else                              tree.Errors.Add(new ParseError("Non terminal already declared: " + nts.Name' 0x1023' n.Nodes[0]));                            for (int i = 0; i < n.Nodes.Count - 1; i++)                          {                              if (n.Nodes[i].Token.Type == TokenType.Attribute)                                  EvalAttribute(tree' new object[] { g' nts' n.Nodes[i] });                          }                            if (nts.Name == "Start")                              StartFound = true;                      }                  }              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: GrammarNode node = (GrammarNode)paramlist[2];
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: string value = node.Nodes[2].Token.Text.Substring(1' node.Nodes[2].Token.Text.Length - 2);
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: string value = node.Nodes[2].Token.Text.Substring(1' node.Nodes[2].Token.Text.Length - 2);
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: string value = node.Nodes[2].Token.Text.Substring(1' node.Nodes[2].Token.Text.Length - 2);
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: switch (directive.Name)              {                  case "TinyPG":                      names.Add("Namespace");                      names.Add("OutputPath");                      names.Add("TemplatePath");                      names.Add("Language");                        if (key == "TemplatePath")                          if (grammer.GetTemplatePath() == null)                              tree.Errors.Add(new ParseError("Template path '" + value + "' does not exist"' 0x1060' node.Nodes[2]));                        if (key == "OutputPath")                          if (grammer.GetOutputPath() == null)                              tree.Errors.Add(new ParseError("Output path '" + value + "' does not exist"' 0x1061' node.Nodes[2]));                        if (key == "Language")                          if (!languages.Contains(value.ToLower(CultureInfo.InvariantCulture)))                              tree.Errors.Add(new ParseError("Language '" + value + "' is not supported"' 0x1062' node.Nodes[2]));                      break;                  case "Parser":                  case "Scanner":                  case "ParseTree":                  case "TextHighlighter":                      names.Add("Generate");                      names.Add("FileName");                      break;                  default:                      return null;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: switch (directive.Name)              {                  case "TinyPG":                      names.Add("Namespace");                      names.Add("OutputPath");                      names.Add("TemplatePath");                      names.Add("Language");                        if (key == "TemplatePath")                          if (grammer.GetTemplatePath() == null)                              tree.Errors.Add(new ParseError("Template path '" + value + "' does not exist"' 0x1060' node.Nodes[2]));                        if (key == "OutputPath")                          if (grammer.GetOutputPath() == null)                              tree.Errors.Add(new ParseError("Output path '" + value + "' does not exist"' 0x1061' node.Nodes[2]));                        if (key == "Language")                          if (!languages.Contains(value.ToLower(CultureInfo.InvariantCulture)))                              tree.Errors.Add(new ParseError("Language '" + value + "' is not supported"' 0x1062' node.Nodes[2]));                      break;                  case "Parser":                  case "Scanner":                  case "ParseTree":                  case "TextHighlighter":                      names.Add("Generate");                      names.Add("FileName");                      break;                  default:                      return null;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalNameValue,The following statement contains a magic number: switch (directive.Name)              {                  case "TinyPG":                      names.Add("Namespace");                      names.Add("OutputPath");                      names.Add("TemplatePath");                      names.Add("Language");                        if (key == "TemplatePath")                          if (grammer.GetTemplatePath() == null)                              tree.Errors.Add(new ParseError("Template path '" + value + "' does not exist"' 0x1060' node.Nodes[2]));                        if (key == "OutputPath")                          if (grammer.GetOutputPath() == null)                              tree.Errors.Add(new ParseError("Output path '" + value + "' does not exist"' 0x1061' node.Nodes[2]));                        if (key == "Language")                          if (!languages.Contains(value.ToLower(CultureInfo.InvariantCulture)))                              tree.Errors.Add(new ParseError("Language '" + value + "' is not supported"' 0x1062' node.Nodes[2]));                      break;                  case "Parser":                  case "Scanner":                  case "ParseTree":                  case "TextHighlighter":                      names.Add("Generate");                      names.Add("FileName");                      break;                  default:                      return null;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: GrammarNode node = (GrammarNode)paramlist[2];
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: switch (node.Nodes[1].Token.Text)              {                  case "Skip":                      if (symbol is TerminalSymbol)                          grammar.SkipSymbols.Add(symbol);                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "Color":                      if (symbol is NonTerminalSymbol)                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                        if (symbol.Attributes["Color"].Length != 1 && symbol.Attributes["Color"].Length != 3)                          tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1]));                        for (int i = 0; i < symbol.Attributes["Color"].Length; i++)                      {                          if (symbol.Attributes["Color"][i] is string)                          {                              tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0]));                              break;                          }                      }                      break;                  case "IgnoreCase":                      if (!(symbol is TerminalSymbol))                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "FileAndLine":                      if (symbol is TerminalSymbol)                      {                          grammar.SkipSymbols.Add(symbol);                          grammar.FileAndLine = symbol;                      }                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  default:                      tree.Errors.Add(new ParseError("Attribute not supported: " + node.Nodes[1].Token.Text' 0x1036' node.Nodes[1]));                      break;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: switch (node.Nodes[1].Token.Text)              {                  case "Skip":                      if (symbol is TerminalSymbol)                          grammar.SkipSymbols.Add(symbol);                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "Color":                      if (symbol is NonTerminalSymbol)                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                        if (symbol.Attributes["Color"].Length != 1 && symbol.Attributes["Color"].Length != 3)                          tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1]));                        for (int i = 0; i < symbol.Attributes["Color"].Length; i++)                      {                          if (symbol.Attributes["Color"][i] is string)                          {                              tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0]));                              break;                          }                      }                      break;                  case "IgnoreCase":                      if (!(symbol is TerminalSymbol))                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "FileAndLine":                      if (symbol is TerminalSymbol)                      {                          grammar.SkipSymbols.Add(symbol);                          grammar.FileAndLine = symbol;                      }                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  default:                      tree.Errors.Add(new ParseError("Attribute not supported: " + node.Nodes[1].Token.Text' 0x1036' node.Nodes[1]));                      break;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: switch (node.Nodes[1].Token.Text)              {                  case "Skip":                      if (symbol is TerminalSymbol)                          grammar.SkipSymbols.Add(symbol);                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "Color":                      if (symbol is NonTerminalSymbol)                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                        if (symbol.Attributes["Color"].Length != 1 && symbol.Attributes["Color"].Length != 3)                          tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1]));                        for (int i = 0; i < symbol.Attributes["Color"].Length; i++)                      {                          if (symbol.Attributes["Color"][i] is string)                          {                              tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0]));                              break;                          }                      }                      break;                  case "IgnoreCase":                      if (!(symbol is TerminalSymbol))                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "FileAndLine":                      if (symbol is TerminalSymbol)                      {                          grammar.SkipSymbols.Add(symbol);                          grammar.FileAndLine = symbol;                      }                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  default:                      tree.Errors.Add(new ParseError("Attribute not supported: " + node.Nodes[1].Token.Text' 0x1036' node.Nodes[1]));                      break;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: switch (node.Nodes[1].Token.Text)              {                  case "Skip":                      if (symbol is TerminalSymbol)                          grammar.SkipSymbols.Add(symbol);                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "Color":                      if (symbol is NonTerminalSymbol)                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                        if (symbol.Attributes["Color"].Length != 1 && symbol.Attributes["Color"].Length != 3)                          tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1]));                        for (int i = 0; i < symbol.Attributes["Color"].Length; i++)                      {                          if (symbol.Attributes["Color"][i] is string)                          {                              tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0]));                              break;                          }                      }                      break;                  case "IgnoreCase":                      if (!(symbol is TerminalSymbol))                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "FileAndLine":                      if (symbol is TerminalSymbol)                      {                          grammar.SkipSymbols.Add(symbol);                          grammar.FileAndLine = symbol;                      }                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  default:                      tree.Errors.Add(new ParseError("Attribute not supported: " + node.Nodes[1].Token.Text' 0x1036' node.Nodes[1]));                      break;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalAttribute,The following statement contains a magic number: switch (node.Nodes[1].Token.Text)              {                  case "Skip":                      if (symbol is TerminalSymbol)                          grammar.SkipSymbols.Add(symbol);                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "Color":                      if (symbol is NonTerminalSymbol)                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                        if (symbol.Attributes["Color"].Length != 1 && symbol.Attributes["Color"].Length != 3)                          tree.Errors.Add(new ParseError("Attribute " + node.Nodes[1].Token.Text + " has too many or missing parameters"' 0x103A' node.Nodes[1]));                        for (int i = 0; i < symbol.Attributes["Color"].Length; i++)                      {                          if (symbol.Attributes["Color"][i] is string)                          {                              tree.Errors.Add(new ParseError("Parameter " + node.Nodes[3].Nodes[i * 2].Nodes[0].Token.Text + " is of incorrect type"' 0x103A' node.Nodes[3].Nodes[i * 2].Nodes[0]));                              break;                          }                      }                      break;                  case "IgnoreCase":                      if (!(symbol is TerminalSymbol))                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  case "FileAndLine":                      if (symbol is TerminalSymbol)                      {                          grammar.SkipSymbols.Add(symbol);                          grammar.FileAndLine = symbol;                      }                      else                          tree.Errors.Add(new ParseError("Attribute for non-terminal rule not allowed: " + node.Nodes[1].Token.Text' 0x1035' node));                      break;                  default:                      tree.Errors.Add(new ParseError("Attribute not supported: " + node.Nodes[1].Token.Text' 0x1036' node.Nodes[1]));                      break;              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalParams,The following statement contains a magic number: if (node.Nodes.Count < 4) return null;
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalParams,The following statement contains a magic number: if (node.Nodes[3].Token.Type != TokenType.Params) return null;
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalParams,The following statement contains a magic number: GrammarNode parms = (GrammarNode)node.Nodes[3];
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalParams,The following statement contains a magic number: for (int i = 0; i < parms.Nodes.Count; i += 2)              {                  objects.Add(EvalParam(tree' new object[] { parms.Nodes[i] }));              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalParam,The following statement contains a magic number: try              {                  switch (node.Nodes[0].Token.Type)                  {                      case TokenType.STRING:                          return node.Nodes[0].Token.Text;                      case TokenType.INTEGER:                          return Convert.ToInt32(node.Nodes[0].Token.Text);                      case TokenType.HEX:                          return long.Parse(node.Nodes[0].Token.Text.Substring(2)' System.Globalization.NumberStyles.HexNumber);                      default:                          tree.Errors.Add(new ParseError("Attribute parameter is not a valid value: " + node.Token.Text' 0x1037' node));                          break;                  }              }              catch (Exception)              {                  tree.Errors.Add(new ParseError("Attribute parameter is not a valid value: " + node.Token.Text' 0x1038' node));              }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalProduction,The following statement contains a magic number: if (Nodes[2].Nodes[0].Token.Type == TokenType.STRING)              {                  TerminalSymbol term = g.Symbols.Find(Nodes[0].Token.Text) as TerminalSymbol;                  if (term == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1040' Nodes[0]));              }              else              {                  NonTerminalSymbol nts = g.Symbols.Find(Nodes[0].Token.Text) as NonTerminalSymbol;                  if (nts == null)                      tree.Errors.Add(new ParseError("Symbol '" + Nodes[0].Token.Text + "' is not declared. "' 0x1041' Nodes[0]));                  Rule r = (Rule)Nodes[2].Eval(tree' g' nts);                  if (nts != null)                      nts.Rules.Add(r);                    if (Nodes[3].Token.Type == TokenType.CODEBLOCK)                  {                      string codeblock = Nodes[3].Token.Text;                      nts.CodeBlock = codeblock;                      ValidateCodeBlock(tree' nts' Nodes[3]);                        // beautify the codeblock format                      codeblock = codeblock.Substring(1' codeblock.Length - 3).Trim();                      nts.CodeBlock = codeblock;                    }                }
Magic Number,TinyPG.Compiler,GrammarNode,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\GrammarTree.cs,EvalSubrule,The following statement contains a magic number: for (int i = 0; i < Nodes.Count; i += 2)              {                  Rule rule = (Rule)Nodes[i].Eval(tree' paramlist);                  choiceRule.Rules.Add(rule);              }
Magic Number,TinyPG.Compiler,TerminalSymbol,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\TerminalSymbol.cs,PrintProduction,The following statement contains a magic number: return Helper.Outline(Name' 0' " -> " + Expression + ";"' 4);
Magic Number,System.Text,Helper,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Helper.cs,Outline,The following statement contains a magic number: r = r.PadRight((indent2 * 4)%256' ' ');
Magic Number,System.Text,Helper,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\Helper.cs,Outline,The following statement contains a magic number: r = r.PadRight((indent2 * 4)%256' ' ');
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (e.KeyValue == 32)              {                  if (e.Control)                  {                      e.Handled = true;                      e.SuppressKeyPress = true;                  }                    if (suppress > 0)                      suppress--;              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (e.Control && e.KeyValue != 32)                  suppress = 2;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (e.Control && e.KeyValue != 32)                  suppress = 2;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (e.KeyValue == 27 && this.Visible)                  suppress = 2;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (e.KeyValue == 27 && this.Visible)                  suppress = 2;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (this.Visible)              {                  // PgUp' PgDn' Up' Down                  if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                  {                      this.SendKey((char)e.KeyValue);                      e.Handled = true;                  }              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (this.Visible)              {                  // PgUp' PgDn' Up' Down                  if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                  {                      this.SendKey((char)e.KeyValue);                      e.Handled = true;                  }              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (this.Visible)              {                  // PgUp' PgDn' Up' Down                  if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                  {                      this.SendKey((char)e.KeyValue);                      e.Handled = true;                  }              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,editor_KeyDown,The following statement contains a magic number: if (this.Visible)              {                  // PgUp' PgDn' Up' Down                  if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                  {                      this.SendKey((char)e.KeyValue);                      e.Handled = true;                  }              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,textEditor_KeyUp,The following statement contains a magic number: try              {                  if ((e.KeyValue == 32 && !e.Control) || e.KeyValue == 13 || e.KeyValue == 27)                  {                      this.Visible = false;                  }                  else if ((((e.KeyValue > 64 && e.KeyValue < 91)) && !e.Control) || (e.KeyValue == 32 && e.Control))                  {                      if (!this.Visible)                      {                            int line = textEditor.GetFirstCharIndexOfCurrentLine();                          string t = Helper.Reverse(textEditor.Text.Substring(line' textEditor.SelectionStart - line));                                                    // scan the line of text for any of these characters. these mark the beginning of the word                          int i = t.IndexOfAny(" \r\n\t.;:\\/?><-=~`[]{}+!#$%^&*()".ToCharArray());                          if (i < 0) i = t.Length;                          autocompletestart = textEditor.SelectionStart - i;                          textEditor.Text.IndexOfAny(" \t\r\n".ToCharArray());                          Point p = textEditor.GetPositionFromCharIndex(autocompletestart);                          p = textEditor.PointToScreen(p);                          p.X -= 8;                          p.Y += 22;                            // only show autocompletion dialog if user has typed in the first characters' or if                           // the user pressed CTRL-Space explicitly                          if (((textEditor.SelectionStart - autocompletestart) > 0 && (suppress <= 0)) || (e.KeyValue == 32 && e.Control))                          {                              this.Location = p;                              this.Visible = this.Enabled; // only display if enabled                              textEditor.Focus();                          }                      }                        //pre-select a word from the list that begins with the typed characters                      WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                    }                  else if (this.Visible)                  {                      if (e.KeyValue == 9 && !e.Alt && !e.Control && !e.Shift) // tab key                      {                          SelectCurrentWord();                          e.Handled = true;                      }                                            if (textEditor.SelectionStart < autocompletestart)                          this.Visible = false;                         if ((e.KeyValue == 33) || (e.KeyValue == 34) || (e.KeyValue == 38) || (e.KeyValue == 40))                      {                          return;                      }                      if (this.Visible)                          WordList.SelectedIndex = WordList.FindString(textEditor.Text.Substring(autocompletestart' textEditor.SelectionStart - autocompletestart));                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 32 || e.KeyValue == 27 || e.KeyValue == 13 || e.KeyValue == 9)                  this.Visible = false;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 32 || e.KeyValue == 27 || e.KeyValue == 13 || e.KeyValue == 9)                  this.Visible = false;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 32 || e.KeyValue == 27 || e.KeyValue == 13 || e.KeyValue == 9)                  this.Visible = false;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 32 || e.KeyValue == 27 || e.KeyValue == 13 || e.KeyValue == 9)                  this.Visible = false;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 9 || e.KeyValue == 13)                  SelectCurrentWord();
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,AutoComplete_KeyUp,The following statement contains a magic number: if (e.KeyValue == 9 || e.KeyValue == 13)                  SelectCurrentWord();
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,InitializeComponent,The following statement contains a magic number: this.WordList.ItemHeight = 15;
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,InitializeComponent,The following statement contains a magic number: this.WordList.Size = new System.Drawing.Size(303' 137);
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,InitializeComponent,The following statement contains a magic number: this.WordList.Size = new System.Drawing.Size(303' 137);
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(303' 141);
Magic Number,TinyPG.Controls,AutoComplete,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\AutoComplete.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(303' 141);
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(178' 122);
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(178' 122);
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,OnMove,The following statement contains a magic number: if (pc.Y < -21 || pc.Y > 0) return;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (_dockState.Container.Equals(_dockState.Handle))              {                  sz.Width += 18;                  sz.Height += 28;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (_dockState.Container.Equals(_dockState.Handle))              {                  sz.Width += 18;                  sz.Height += 28;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (sz.Width > 600) sz.Width = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (sz.Width > 600) sz.Width = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (sz.Height > 600) sz.Height = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,Float,The following statement contains a magic number: if (sz.Height > 600) sz.Height = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,GetDockingArea,The following statement contains a magic number: int borderwidth = (r.Width - rc.Width) / 2;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                    _dockExtender.Overlay.Dock = DockStyle.Left; // dock to left              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                    _dockExtender.Overlay.Dock = DockStyle.Left; // dock to left              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                    _dockExtender.Overlay.Dock = DockStyle.Left; // dock to left              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx > 0 && rx < ry && rx < 0.25 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                    _dockExtender.Overlay.Dock = DockStyle.Left; // dock to left              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                  r.X = rc.X + rc.Width - r.Width;                  _dockExtender.Overlay.Dock = DockStyle.Right;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                  r.X = rc.X + rc.Width - r.Width;                  _dockExtender.Overlay.Dock = DockStyle.Right;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                  r.X = rc.X + rc.Width - r.Width;                  _dockExtender.Overlay.Dock = DockStyle.Right;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (rx < 1 && rx > ry && rx > 0.75 && ry < 0.75 && ry > 0.25)              {                  r.Width = r.Width / 2;                  if (r.Width > this.Width)                      r.Width = this.Width;                  r.X = rc.X + rc.Width - r.Width;                  _dockExtender.Overlay.Dock = DockStyle.Right;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  _dockExtender.Overlay.Dock = DockStyle.Top;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  _dockExtender.Overlay.Dock = DockStyle.Top;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  _dockExtender.Overlay.Dock = DockStyle.Top;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry > 0 && ry < rx && ry < 0.25 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  _dockExtender.Overlay.Dock = DockStyle.Top;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  r.Y = rc.Y + rc.Height - r.Height;                  _dockExtender.Overlay.Dock = DockStyle.Bottom;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  r.Y = rc.Y + rc.Height - r.Height;                  _dockExtender.Overlay.Dock = DockStyle.Bottom;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  r.Y = rc.Y + rc.Height - r.Height;                  _dockExtender.Overlay.Dock = DockStyle.Bottom;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,SetOverlay,The following statement contains a magic number: if (ry < 1 && ry > rx && ry > 0.75 && rx < 0.75 && rx > 0.25)              {                  r.Height = r.Height / 2;                  if (r.Height > this.Height)                      r.Height = this.Height;                  r.Y = rc.Y + rc.Height - r.Height;                  _dockExtender.Overlay.Dock = DockStyle.Bottom;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (_dockState.Container.Equals(_dockState.Handle))              {                  sz.Width += 18;                  sz.Height += 28;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (_dockState.Container.Equals(_dockState.Handle))              {                  sz.Width += 18;                  sz.Height += 28;              }
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (sz.Width > 600) sz.Width = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (sz.Width > 600) sz.Width = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (sz.Height > 600) sz.Height = 600;
Magic Number,TinyPG.Controls,Floaty,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Floaty.cs,MakeFloatable,The following statement contains a magic number: if (sz.Height > 600) sz.Height = 600;
Magic Number,TinyPG.Controls,Overlay,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\DockExtender\Overlay.cs,InitializeComponent,The following statement contains a magic number: this.Opacity = 0.3;
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,IsHighlighted,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,IsHighlighted,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,IsHighlighted,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,IsHighlighted,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,IsHighlighted,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Rectangle box = new Rectangle(Width - 20' (Height - 15) / 2' 16' 14);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p1 = new Point(Width - 16' (Height-8)/2);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p1 = new Point(Width - 16' (Height-8)/2);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p1 = new Point(Width - 16' (Height-8)/2);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p2 = new Point(p1.X + 7' p1.Y+7);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p2 = new Point(p1.X + 7' p1.Y+7);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p3 = new Point(p1.X + 7' p1.Y);
Magic Number,TinyPG.Controls,HeaderLabel,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\HeaderExtender.cs,PaintCloseButton,The following statement contains a magic number: Point p4 = new Point(p1.X' p1.Y + 7);
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (index == SelectedIndex)              {                  brush = SystemBrushes.ControlLightLight;                  if (Alignment == TabAlignment.Top)                  {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 5;                  }                  else                   {                      r.X -= 2;                      r.Y -= 2;                      r.Width += 2;                      r.Height += 4;                  }              }              else              {                  if (Alignment == TabAlignment.Top)                  {                      r.Y += 0;                      r.Height += 1;                  }                  else                  {                      r.Y -= 2;                      r.Height += 2;                  }                    if (highlight)                      brush = new LinearGradientBrush(r' ControlPaint.LightLight(SystemColors.Highlight)' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);                  else                      brush = new LinearGradientBrush(r' SystemColors.ControlLight' SystemColors.ButtonHighlight' LinearGradientMode.Vertical);              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,DrawTabPage,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  graphics.FillRectangle(brush' r);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top+r.Height-1);                  points[1] = new Point(r.Left' r.Top);                  points[2] = new Point(r.Left+r.Width' r.Top);                  points[3] = new Point(r.Left + r.Width' r.Top+r.Height-1);                    graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width-textwidth)/2' r.Top + 2);              }              else if (Alignment == TabAlignment.Bottom)              {                  graphics.FillRectangle(brush' r.Left+1' r.Top+1' r.Width-1' r.Height-1);                  Point[] points = new Point[4];                  points[0] = new Point(r.Left' r.Top);                  points[1] = new Point(r.Left' r.Top + r.Height - 1);                  points[2] = new Point(r.Left + r.Width' r.Top + r.Height - 1);                  points[3] = new Point(r.Left + r.Width' r.Top);                  graphics.DrawLines(Pens.Gray' points);                  graphics.DrawString(page.Text' this.Font' Brushes.Black' r.Left + (r.Width - textwidth) / 2' r.Top + 2);                  if (index == SelectedIndex)                  {                      graphics.DrawLine(Pens.White' r.Left + 1' r.Top' r.Left + r.Width - 1' r.Top);                  }              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TabControlEx,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TabControlEx.cs,OnPaint,The following statement contains a magic number: if (Alignment == TabAlignment.Top)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 23' Width - 2' Height - 2));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 21' Width - 2' Height - 23));              }              else if (Alignment == TabAlignment.Bottom)              {                  e.Graphics.FillRectangle(SystemBrushes.ControlLightLight' new Rectangle(0' 0' Width' Height - 20));                  e.Graphics.DrawRectangle(SystemPens.ControlDarkDark' new Rectangle(0' 0' Width - 2' Height - 22));              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,Textbox_MouseMove,The following statement contains a magic number: foreach (Word w in MarkedWords)              {                  if (w.Start <= i && w.Start + w.Length > i)                  {                      Point p = Textbox.GetPositionFromCharIndex(w.Start);                      p.Y += 18;                        ToolTip.Show(w.ToolTip' (IWin32Window)Textbox' p);                      found = true;                  }              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: if (word.Length == 0)              {                  p1.X -= 5;                  p2.X += 5;              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: if (word.Length == 0)              {                  p1.X -= 5;                  p2.X += 5;              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: p1.Y += Textbox.Font.Height - 2;
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: for (int x = p1.X + 2; x < p2.X + 2; x += 2)              {                  Point p = up ? new Point(x' p1.Y + 2) : new Point(x' p1.Y);                  points.Add(p);                  up = !up;              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: for (int x = p1.X + 2; x < p2.X + 2; x += 2)              {                  Point p = up ? new Point(x' p1.Y + 2) : new Point(x' p1.Y);                  points.Add(p);                  up = !up;              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: for (int x = p1.X + 2; x < p2.X + 2; x += 2)              {                  Point p = up ? new Point(x' p1.Y + 2) : new Point(x' p1.Y);                  points.Add(p);                  up = !up;              }
Magic Number,TinyPG.Controls,TextMarker,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\TextMarker.cs,MarkWord,The following statement contains a magic number: for (int x = p1.X + 2; x < p2.X + 2; x += 2)              {                  Point p = up ? new Point(x' p1.Y + 2) : new Point(x' p1.Y);                  points.Add(p);                  up = !up;              }
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Splitter.Location = new System.Drawing.Point(0' 421);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Splitter.Size = new System.Drawing.Size(331' 5);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Splitter.Size = new System.Drawing.Size(331' 5);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Splitter.TabIndex = 11;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(0' 426);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(331' 57);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(331' 57);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 12;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textMatches.Location = new System.Drawing.Point(0' 20);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textMatches.Size = new System.Drawing.Size(331' 37);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textMatches.Size = new System.Drawing.Size(331' 37);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textMatches.TabIndex = 6;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(331' 20);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(331' 20);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 7;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkIgnoreCase.Location = new System.Drawing.Point(8' 46);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkIgnoreCase.Location = new System.Drawing.Point(8' 46);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkIgnoreCase.Size = new System.Drawing.Size(86' 19);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkIgnoreCase.Size = new System.Drawing.Size(86' 19);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkIgnoreCase.TabIndex = 6;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMultiline.Location = new System.Drawing.Point(8' 30);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMultiline.Location = new System.Drawing.Point(8' 30);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMultiline.Size = new System.Drawing.Size(73' 19);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMultiline.Size = new System.Drawing.Size(73' 19);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.checkMultiline.TabIndex = 5;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textExpression.Location = new System.Drawing.Point(96' 8);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textExpression.Location = new System.Drawing.Point(96' 8);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textExpression.Size = new System.Drawing.Size(220' 26);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textExpression.Size = new System.Drawing.Size(220' 26);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Location = new System.Drawing.Point(0' 68);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size(331' 353);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size(331' 353);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.textBox.TabIndex = 9;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(331' 68);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(331' 68);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 8;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.statusText.Location = new System.Drawing.Point(93' 35);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.statusText.Location = new System.Drawing.Point(93' 35);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.statusText.Size = new System.Drawing.Size(223' 30);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.statusText.Size = new System.Drawing.Size(223' 30);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.statusText.TabIndex = 7;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 6);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 6);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(87' 21);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(87' 21);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 4;
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(331' 483);
Magic Number,TinyPG.Controls,RegExControl,C:\repos\SickheadGames_TinyPG\TinyPG\Controls\RegexControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(331' 483);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,textEditor_TextChanged,The following statement contains a magic number: TextChangedTimer.Interval = 3000;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,regexToolToolStripMenuItem_Click,The following statement contains a magic number: tabOutput.SelectedIndex = 2;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip.Size = new System.Drawing.Size(1037' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip.Size = new System.Drawing.Size(1037' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.newToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(152' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(152' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(152' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(152' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(155' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.regexToolToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.regexToolToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.outputToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.outputToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.parsetreeToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.parsetreeToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.expressionEvaluatorToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.expressionEvaluatorToolStripMenuItem.Size = new System.Drawing.Size(221' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(46' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(46' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.parseToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.parseToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuToolsGenerate.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuToolsGenerate.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(179' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(179' 6);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewParserToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewParserToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewScannerToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewScannerToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewParseTreeCodeToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.viewParseTreeCodeToolStripMenuItem.Size = new System.Drawing.Size(182' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTinyParserGeneratorToolStripMenuItem.Size = new System.Drawing.Size(223' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTinyParserGeneratorToolStripMenuItem.Size = new System.Drawing.Size(223' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.examplesToolStripMenuItem.Size = new System.Drawing.Size(223' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.examplesToolStripMenuItem.Size = new System.Drawing.Size(223' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.expressionEvaluatorToolStripMenuItem1.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.expressionEvaluatorToolStripMenuItem1.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.codeblocksToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.codeblocksToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarHighlighterV12ToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarHighlighterV12ToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarV10ToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.theTinyPGGrammarV10ToolStripMenuItem.Size = new System.Drawing.Size(275' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Location = new System.Drawing.Point(0' 624);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(1037' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(1037' 22);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLabel.Size = new System.Drawing.Size(751' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLabel.Size = new System.Drawing.Size(751' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel1.Size = new System.Drawing.Size(20' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel1.Size = new System.Drawing.Size(20' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLine.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusLine.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel2.Size = new System.Drawing.Size(25' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel2.Size = new System.Drawing.Size(25' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusCol.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusCol.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel4.Size = new System.Drawing.Size(26' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel4.Size = new System.Drawing.Size(26' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusPos.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusPos.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel3.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel3.Size = new System.Drawing.Size(50' 17);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textEditor.Location = new System.Drawing.Point(0' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textEditor.Size = new System.Drawing.Size(712' 417);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textEditor.Size = new System.Drawing.Size(712' 417);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textEditor.TabIndex = 3;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterBottom.Location = new System.Drawing.Point(0' 441);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterBottom.Size = new System.Drawing.Size(712' 5);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterBottom.Size = new System.Drawing.Size(712' 5);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterBottom.TabIndex = 5;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterRight.Location = new System.Drawing.Point(712' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterRight.Location = new System.Drawing.Point(712' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterRight.Size = new System.Drawing.Size(5' 600);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterRight.Size = new System.Drawing.Size(5' 600);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitterRight.TabIndex = 7;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutput.Location = new System.Drawing.Point(717' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutput.Location = new System.Drawing.Point(717' 24);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutput.Size = new System.Drawing.Size(320' 600);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutput.Size = new System.Drawing.Size(320' 600);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutput.TabIndex = 8;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.Location = new System.Drawing.Point(0' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.Padding = new System.Drawing.Point(10' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.Padding = new System.Drawing.Point(10' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.Size = new System.Drawing.Size(320' 580);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.Size = new System.Drawing.Size(320' 580);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabOutput.TabIndex = 6;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textOutput.Location = new System.Drawing.Point(3' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textOutput.Location = new System.Drawing.Point(3' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textOutput.Size = new System.Drawing.Size(306' 548);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textOutput.Size = new System.Drawing.Size(306' 548);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textOutput.TabIndex = 6;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvParsetree.Location = new System.Drawing.Point(3' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvParsetree.Location = new System.Drawing.Point(3' 3);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvParsetree.Size = new System.Drawing.Size(306' 548);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvParsetree.Size = new System.Drawing.Size(306' 548);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 4);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.TabIndex = 2;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.regExControl.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.regExControl.Size = new System.Drawing.Size(312' 554);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.regExControl.TabIndex = 12;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerOutput.Size = new System.Drawing.Size(320' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerOutput.Size = new System.Drawing.Size(320' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerOutput.TabIndex = 7;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelInput.Location = new System.Drawing.Point(0' 446);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelInput.Size = new System.Drawing.Size(712' 178);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelInput.Size = new System.Drawing.Size(712' 178);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.panelInput.TabIndex = 9;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textInput.Location = new System.Drawing.Point(0' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textInput.Size = new System.Drawing.Size(712' 158);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textInput.Size = new System.Drawing.Size(712' 158);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.textInput.TabIndex = 2;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerEvaluator.Size = new System.Drawing.Size(712' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerEvaluator.Size = new System.Drawing.Size(712' 20);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.headerEvaluator.TabIndex = 3;
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1037' 646);
Magic Number,TinyPG,MainForm,C:\repos\SickheadGames_TinyPG\TinyPG\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1037' 646);
Magic Number,TinyPG,ParseTree,C:\repos\SickheadGames_TinyPG\TinyPG\Compiler\ParseTree.cs,PrintNode,The following statement contains a magic number: foreach (ParseNode n in node.Nodes)                  PrintNode(sb' n' indent + 2);
Magic Number,TinyPG,SyntaxChecker,C:\repos\SickheadGames_TinyPG\TinyPG\SyntaxChecker.cs,Start,The following statement contains a magic number: while (!disposing)              {                  System.Threading.Thread.Sleep(250);                  if (!textchanged)                       continue;                    textchanged = false;                    scanner.Init(text);                  SyntaxTree = parser.Parse(text' ""' new GrammarTree());                  if (SyntaxTree.Errors.Count > 0)                      SyntaxTree.Errors.Clear();                    try                  {                      if (Grammar == null)                          Grammar = (Grammar)SyntaxTree.Eval();                      else                      {                            lock (Grammar)                          {                              Grammar = (Grammar)SyntaxTree.Eval();                          }                      }                  }                  catch (Exception)                  {                                       }                    if (textchanged)                      continue;                    lock (marker)                  {                      marker.Clear();                      foreach (ParseError err in SyntaxTree.Errors)                      {                          marker.AddWord(err.Position' err.Length' System.Drawing.Color.Red' err.Message);                      }                  }                    if (UpdateSyntax != null)                      UpdateSyntax.Invoke(this' new EventArgs());              }
Magic Number,TinyPG.Highlighter,ParseTree,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\ParseTree.cs,PrintNode,The following statement contains a magic number: foreach (ParseNode n in node.Nodes)                  PrintNode(sb' n' indent + 2);
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The following statement contains a magic number: if (UndoList.Count > 7)              {                  bool canRemove = true;                  UndoItem nextItem = ua;                  for (int i = 0; i < 6; i++)                  {                      UndoItem prevItem = UndoList[UndoList.Count - 2 - i];                      canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1);                      nextItem = prevItem;                  }                  if (canRemove)                  {                      UndoList.RemoveRange(UndoList.Count - 6' 5);                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The following statement contains a magic number: if (UndoList.Count > 7)              {                  bool canRemove = true;                  UndoItem nextItem = ua;                  for (int i = 0; i < 6; i++)                  {                      UndoItem prevItem = UndoList[UndoList.Count - 2 - i];                      canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1);                      nextItem = prevItem;                  }                  if (canRemove)                  {                      UndoList.RemoveRange(UndoList.Count - 6' 5);                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The following statement contains a magic number: if (UndoList.Count > 7)              {                  bool canRemove = true;                  UndoItem nextItem = ua;                  for (int i = 0; i < 6; i++)                  {                      UndoItem prevItem = UndoList[UndoList.Count - 2 - i];                      canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1);                      nextItem = prevItem;                  }                  if (canRemove)                  {                      UndoList.RemoveRange(UndoList.Count - 6' 5);                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The following statement contains a magic number: if (UndoList.Count > 7)              {                  bool canRemove = true;                  UndoItem nextItem = ua;                  for (int i = 0; i < 6; i++)                  {                      UndoItem prevItem = UndoList[UndoList.Count - 2 - i];                      canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1);                      nextItem = prevItem;                  }                  if (canRemove)                  {                      UndoList.RemoveRange(UndoList.Count - 6' 5);                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Do,The following statement contains a magic number: if (UndoList.Count > 7)              {                  bool canRemove = true;                  UndoItem nextItem = ua;                  for (int i = 0; i < 6; i++)                  {                      UndoItem prevItem = UndoList[UndoList.Count - 2 - i];                      canRemove &= (Math.Abs(prevItem.Text.Length - nextItem.Text.Length) <= 1 && Math.Abs(prevItem.Position - nextItem.Position) <= 1);                      nextItem = prevItem;                  }                  if (canRemove)                  {                      UndoList.RemoveRange(UndoList.Count - 6' 5);                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,textbox_KeyDown,The following statement contains a magic number: if (e.KeyValue == 89 && e.Control) // CTRL-Y                  Redo();
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,textbox_KeyDown,The following statement contains a magic number: if (e.KeyValue == 90 && e.Control) // CTRL-Z                  Undo();
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Unicode,The following statement contains a magic number: for (i = 0; i <= sb.Length - 1; i++)              {                  char c = sb[i];                                    if ((int)c < 127)                  {                      uc.Append(c);                  }                  else                  {                      uc.Append("\\u" + ((int)c).ToString() + "?");                  }              }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,AutoHighlightStart,The following statement contains a magic number: while (!isDisposing)              {                  bool _textchanged;                  lock (treelock)                  {                      _textchanged = textChanged;                      if (textChanged)                      {                          textChanged = false;                          _currenttext = currentText;                      }                  }                  if (!_textchanged)                  {                      Thread.Sleep(200);                      continue;                  }                    _tree = (ParseTree)Parser.Parse(_currenttext' string.Empty);                  lock (treelock)                  {                      if (textChanged)                          continue;                      else                          Tree = _tree; // assign new tree                  }                                    Textbox.Invoke(new MethodInvoker(HighlightTextInternal));                }
Magic Number,TinyPG.Highlighter,TextHighlighter,C:\repos\SickheadGames_TinyPG\TinyPG\Highlighter\TextHighlighter.cs,Dispose,The following statement contains a magic number: threadAutoHighlight.Join(1000);
Missing Default,TinyPG.CodeGenerators,CodeGeneratorFactory,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CodeGeneratorFactory.cs,CreateGenerator,The following switch statement is missing a default case: switch (generator)                      {                          case "Parser":                              return new VBNet.ParserGenerator();                          case "Scanner":                              return new VBNet.ScannerGenerator();                          case "ParseTree":                              return new VBNet.ParseTreeGenerator();                          case "TextHighlighter":                              return new VBNet.TextHighlighterGenerator();                      }
Missing Default,TinyPG.CodeGenerators,CodeGeneratorFactory,C:\repos\SickheadGames_TinyPG\TinyPG\CodeGenerators\CodeGeneratorFactory.cs,CreateGenerator,The following switch statement is missing a default case: switch (generator)                      {                          case "Parser":                              return new CSharp.ParserGenerator();                          case "Scanner":                              return new CSharp.ScannerGenerator();                          case "ParseTree":                              return new CSharp.ParseTreeGenerator();                          case "TextHighlighter":                              return new CSharp.TextHighlighterGenerator();                      }
