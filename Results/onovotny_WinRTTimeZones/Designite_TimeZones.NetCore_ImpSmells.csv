Implementation smell,Namespace,Class,File,Method,Description
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,FindTimeZoneDate,The following statement contains a magic number: if (encoded.Month != 0)              {                  st.Month = encoded.Month;                  st.Day = 1;                  st.Year = year;                  st.Hour = encoded.Hour;                    // Get the day of th week for the first day of the month                  var dt = new DateTime(st.Year' st.Month' st.Day);                  var dayOfWeek = (int)dt.DayOfWeek;                    // get the week offset                  var weekOfMonth = encoded.Day;                  var day = 1;                      // first part of week?                  if (dayOfWeek <= encoded.DayOfWeek)                  {                      // figure out the day of the month                      day = 1 + ((weekOfMonth - 1)*7 + (encoded.DayOfWeek - dayOfWeek));                  }                  else                  {                      // Figure out the day of hte month                      day = 1 + (weekOfMonth*7 - (dayOfWeek - encoded.DayOfWeek));                  }                    // could be too long                  if (weekOfMonth == 5)                  {                      // Fix                      while (day > 31)                          day -= 7;                  }                    // Fill in the rest                  st.Day = (short)day;                  st.DayOfWeek = encoded.DayOfWeek;              }
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,FindTimeZoneDate,The following statement contains a magic number: if (encoded.Month != 0)              {                  st.Month = encoded.Month;                  st.Day = 1;                  st.Year = year;                  st.Hour = encoded.Hour;                    // Get the day of th week for the first day of the month                  var dt = new DateTime(st.Year' st.Month' st.Day);                  var dayOfWeek = (int)dt.DayOfWeek;                    // get the week offset                  var weekOfMonth = encoded.Day;                  var day = 1;                      // first part of week?                  if (dayOfWeek <= encoded.DayOfWeek)                  {                      // figure out the day of the month                      day = 1 + ((weekOfMonth - 1)*7 + (encoded.DayOfWeek - dayOfWeek));                  }                  else                  {                      // Figure out the day of hte month                      day = 1 + (weekOfMonth*7 - (dayOfWeek - encoded.DayOfWeek));                  }                    // could be too long                  if (weekOfMonth == 5)                  {                      // Fix                      while (day > 31)                          day -= 7;                  }                    // Fill in the rest                  st.Day = (short)day;                  st.DayOfWeek = encoded.DayOfWeek;              }
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,FindTimeZoneDate,The following statement contains a magic number: if (encoded.Month != 0)              {                  st.Month = encoded.Month;                  st.Day = 1;                  st.Year = year;                  st.Hour = encoded.Hour;                    // Get the day of th week for the first day of the month                  var dt = new DateTime(st.Year' st.Month' st.Day);                  var dayOfWeek = (int)dt.DayOfWeek;                    // get the week offset                  var weekOfMonth = encoded.Day;                  var day = 1;                      // first part of week?                  if (dayOfWeek <= encoded.DayOfWeek)                  {                      // figure out the day of the month                      day = 1 + ((weekOfMonth - 1)*7 + (encoded.DayOfWeek - dayOfWeek));                  }                  else                  {                      // Figure out the day of hte month                      day = 1 + (weekOfMonth*7 - (dayOfWeek - encoded.DayOfWeek));                  }                    // could be too long                  if (weekOfMonth == 5)                  {                      // Fix                      while (day > 31)                          day -= 7;                  }                    // Fill in the rest                  st.Day = (short)day;                  st.DayOfWeek = encoded.DayOfWeek;              }
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,FindTimeZoneDate,The following statement contains a magic number: if (encoded.Month != 0)              {                  st.Month = encoded.Month;                  st.Day = 1;                  st.Year = year;                  st.Hour = encoded.Hour;                    // Get the day of th week for the first day of the month                  var dt = new DateTime(st.Year' st.Month' st.Day);                  var dayOfWeek = (int)dt.DayOfWeek;                    // get the week offset                  var weekOfMonth = encoded.Day;                  var day = 1;                      // first part of week?                  if (dayOfWeek <= encoded.DayOfWeek)                  {                      // figure out the day of the month                      day = 1 + ((weekOfMonth - 1)*7 + (encoded.DayOfWeek - dayOfWeek));                  }                  else                  {                      // Figure out the day of hte month                      day = 1 + (weekOfMonth*7 - (dayOfWeek - encoded.DayOfWeek));                  }                    // could be too long                  if (weekOfMonth == 5)                  {                      // Fix                      while (day > 31)                          day -= 7;                  }                    // Fill in the rest                  st.Day = (short)day;                  st.DayOfWeek = encoded.DayOfWeek;              }
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,FindTimeZoneDate,The following statement contains a magic number: if (encoded.Month != 0)              {                  st.Month = encoded.Month;                  st.Day = 1;                  st.Year = year;                  st.Hour = encoded.Hour;                    // Get the day of th week for the first day of the month                  var dt = new DateTime(st.Year' st.Month' st.Day);                  var dayOfWeek = (int)dt.DayOfWeek;                    // get the week offset                  var weekOfMonth = encoded.Day;                  var day = 1;                      // first part of week?                  if (dayOfWeek <= encoded.DayOfWeek)                  {                      // figure out the day of the month                      day = 1 + ((weekOfMonth - 1)*7 + (encoded.DayOfWeek - dayOfWeek));                  }                  else                  {                      // Figure out the day of hte month                      day = 1 + (weekOfMonth*7 - (dayOfWeek - encoded.DayOfWeek));                  }                    // could be too long                  if (weekOfMonth == 5)                  {                      // Fix                      while (day > 31)                          day -= 7;                  }                    // Fill in the rest                  st.Day = (short)day;                  st.DayOfWeek = encoded.DayOfWeek;              }
Magic Number,TimeZones.Internal,TimeZoneInfoEx,C:\repos\onovotny_WinRTTimeZones\TimeZones.WinRT.Shared\Internal\TimeZoneInfoEx.cs,GetLocalTimeZone,The following statement contains a magic number: if (type == 0 || type == 1 || type == 2)              {                  // get the time zone key here and return a cached instance                  return FindSystemTimeZoneById(tzi.TimeZoneKeyName);              }
