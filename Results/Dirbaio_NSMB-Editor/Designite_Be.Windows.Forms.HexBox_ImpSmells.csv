Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Be.Windows.Forms,DynamicFileByteProvider,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\DynamicFileByteProvider.cs,WriteByte,Cyclomatic complexity of the method is 12
Complex Method,Be.Windows.Forms,DynamicFileByteProvider,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\DynamicFileByteProvider.cs,InsertBytes,Cyclomatic complexity of the method is 8
Complex Method,Be.Windows.Forms,DynamicFileByteProvider,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\DynamicFileByteProvider.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,_vScrollBar_Scroll,Cyclomatic complexity of the method is 33
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,OnPaintBackground,Cyclomatic complexity of the method is 10
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,Cyclomatic complexity of the method is 18
Long Parameter List,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintHexStringSelected,The method has 5 parameters.
Long Statement,Be.Windows.Forms,BuiltInContextMenu,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		_cutToolStripMenuItem = new ToolStripMenuItem (CutMenuItemTextInternal' CutMenuItemImage' new EventHandler (CutMenuItem_Click)); " is 128.
Long Statement,Be.Windows.Forms,BuiltInContextMenu,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		_copyToolStripMenuItem = new ToolStripMenuItem (CopyMenuItemTextInternal' CopyMenuItemImage' new EventHandler (CopyMenuItem_Click)); " is 132.
Long Statement,Be.Windows.Forms,BuiltInContextMenu,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		_pasteToolStripMenuItem = new ToolStripMenuItem (PasteMenuItemTextInternal' PasteMenuItemImage' new EventHandler (PasteMenuItem_Click)); " is 136.
Long Statement,Be.Windows.Forms,BuiltInContextMenu,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\BuiltInContextMenu.cs,CheckBuiltInContextMenu,The length of the statement  "		_selectAllToolStripMenuItem = new ToolStripMenuItem (SelectAllMenuItemTextInternal' SelectAllMenuItemImage' new EventHandler (SelectAllMenuItem_Click)); " is 152.
Long Statement,Be.Windows.Forms,DynamicFileByteProvider,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\DynamicFileByteProvider.cs,WriteByte,The length of the statement  "			suffixBlock = new FileDataBlock (fileBlock.FileOffset + index - blockOffset + 1' fileBlock.Length - (index - blockOffset + 1)); " is 127.
Long Statement,Be.Windows.Forms,DynamicFileByteProvider,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\DynamicFileByteProvider.cs,InsertBytes,The length of the statement  "		// If the insertion point is at the start of a file block' and the previous block is a memory block' append it to that block. " is 125.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateScrollSize,The length of the statement  "		long scrollmax = (long)Math.Ceiling ((double)(_byteProvider.Length + 1) / (double)_iHexMaxHBytes - (double)_iHexMaxVBytes); " is 123.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintHexAndStringView,The length of the statement  "	bool isStringKeyInterpreterActive = _keyInterpreter != null && _keyInterpreter.GetType () == typeof(StringKeyInterpreter); " is 122.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height); " is 167.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height); " is 180.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "						Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1))); " is 174.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height); " is 158.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height); " is 171.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height); " is 177.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "						Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1))); " is 178.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height); " is 148.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		_recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height); " is 122.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "	_recHex = new Rectangle (_recLineInfo.X + _recLineInfo.Width' _recLineInfo.Y' _recContent.Width - _recLineInfo.Width' _recContent.Height); " is 138.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		_recStringView = new Rectangle (_recHex.X + _recHex.Width' _recHex.Y' (int)(_charSize.Width * _iHexMaxHBytes)' _recHex.Height); " is 127.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,ConvertHexToByte,The length of the statement  "	bool isByte = byte.TryParse (hex' System.Globalization.NumberStyles.HexNumber' System.Threading.Thread.CurrentThread.CurrentCulture' out b); " is 140.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateScrollSize,The conditional expression  "VScrollBarVisible && _byteProvider != null && _byteProvider.Length > 0 && _iHexMaxHBytes != 0"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,CreateCaret,The conditional expression  "_byteProvider == null || _keyInterpreter == null || _caretVisible || !this.Focused"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "_keyInterpreter != null && Focused && _bytePos != -1 && Enabled"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentByteSign,The conditional expression  "rec.Top < 0 || rec.Left < 0 || rec.Width <= 0 || rec.Height <= 0"  is complex.
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,HexBox,The following statement contains a magic number: _thumbTrackTimer.Interval = 50;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: if (_scrollVmax < max)  	return (int)value;  else {  	double valperc = (double)value / (double)_scrollVmax * (double)100;  	int res = (int)Math.Floor ((double)max / (double)100 * valperc);  	res = (int)Math.Max (_scrollVmin' res);  	res = (int)Math.Min (_scrollVmax' res);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: if (_scrollVmax < max)  	return (int)value;  else {  	double valperc = (double)value / (double)_scrollVmax * (double)100;  	int res = (int)Math.Floor ((double)max / (double)100 * valperc);  	res = (int)Math.Max (_scrollVmin' res);  	res = (int)Math.Min (_scrollVmax' res);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (_scrollVmax < max) {  	return (long)value;  } else {  	double valperc = (double)value / (double)max * (double)100;  	long res = (int)Math.Floor ((double)_scrollVmax / (double)100 * valperc);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (_scrollVmax < max) {  	return (long)value;  } else {  	double valperc = (double)value / (double)max * (double)100;  	long res = (int)Math.Floor ((double)_scrollVmax / (double)100 * valperc);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: byteCharaterPos = (iX % 3);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,Find,The following statement contains a magic number: for (long pos = startIndex; pos < _byteProvider.Length; pos++) {  	if (_abortFind)  		return -2;  	if (pos % 1000 == 0)  		// for performance reasons: DoEvents only 1 times per 1000 loops  		Application.DoEvents ();  	if (_byteProvider.ReadByte (pos) != bytes [match]) {  		pos -= match;  		match = 0;  		_findingPos = pos;  		continue;  	}  	match++;  	if (match == bytesLength) {  		long bytePos = pos - bytesLength + 1;  		Select (bytePos' bytesLength);  		ScrollByteIntoView (_bytePos + _selectionLength);  		ScrollByteIntoView (_bytePos);  		return bytePos;  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,Find,The following statement contains a magic number: for (long pos = startIndex; pos < _byteProvider.Length; pos++) {  	if (_abortFind)  		return -2;  	if (pos % 1000 == 0)  		// for performance reasons: DoEvents only 1 times per 1000 loops  		Application.DoEvents ();  	if (_byteProvider.ReadByte (pos) != bytes [match]) {  		pos -= match;  		match = 0;  		_findingPos = pos;  		continue;  	}  	match++;  	if (match == bytesLength) {  		long bytePos = pos - bytesLength + 1;  		Select (bytePos' bytesLength);  		ScrollByteIntoView (_bytePos + _selectionLength);  		ScrollByteIntoView (_bytePos);  		return bytePos;  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,Find,The following statement contains a magic number: if (_abortFind)  	return -2;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,Find,The following statement contains a magic number: return -2;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,Find,The following statement contains a magic number: if (pos % 1000 == 0)  	// for performance reasons: DoEvents only 1 times per 1000 loops  	Application.DoEvents ();  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = (startByte + (_iHexMaxHBytes) * i) + _lineInfoOffset;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' System.Threading.Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = (startByte + (_iHexMaxHBytes) * i) + _lineInfoOffset;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' System.Threading.Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = (startByte + (_iHexMaxHBytes) * i) + _lineInfoOffset;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' System.Threading.Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: if (nulls > -1) {  	formattedInfo = new string ('0'' 8 - info.Length) + info;  } else {  	formattedInfo = new string ('~'' 8);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: if (nulls > -1) {  	formattedInfo = new string ('0'' 8 - info.Length) + info;  } else {  	formattedInfo = new string ('~'' 8);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: formattedInfo = new string ('0'' 8 - info.Length) + info;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: formattedInfo = new string ('~'' 8);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			int lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		Size s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		int lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	Size s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	Rectangle r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	int lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	Rectangle singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	Rectangle firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	Rectangle lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine > 1) {  	Rectangle betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  	if (betweenLines.IntersectsWith (_recHex)) {  		betweenLines.Intersect (_recHex);  		PaintCurrentByteSign (g' betweenLines);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (_lineInfoVisible) {  	_recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height);  } else {  	_recLineInfo = Rectangle.Empty;  	_recLineInfo.X = marginLeft;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	int hmax = (int)Math.Floor ((double)_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	int hmax = (int)Math.Floor ((double)_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	int hmax = (int)Math.Floor ((double)_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (hmax > 1)  	SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  else  	SetHorizontalByteCount (hmax);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\Dirbaio_NSMB-Editor\Be.Windows.Forms.HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  
