Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.AspNetCore.Http.Internal.Tests,BindingAddressTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Internal\BindingAddressTests.cs,UrlsAreParsedCorrectly,The method has 6 parameters. Parameters: url' scheme' host' port' pathBase' toString
Long Identifier,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,,The length of the parameter MultipartContentTypeWithSpecialCharacters is 41.
Long Identifier,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,,The length of the parameter MultipartFormEndWithSpecialCharacters is 37.
Long Identifier,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,,The length of the parameter MultipartFormFileSpecialCharacters is 34.
Long Identifier,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,,The length of the parameter MultipartFormWithEncodedFilename is 32.
Long Identifier,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,,The length of the parameter MultipartFormWithSpecialCharacters is 34.
Long Statement,Microsoft.AspNetCore.Http.Authentication.Internal,DefaultAuthenticationManagerTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Authentication\DefaultAuthenticationManagerTests.cs,SignInWithNoAuthMiddlewareThrows,The length of the statement  "            await Assert.ThrowsAsync<InvalidOperationException>(() => context.Authentication.SignInAsync("Foo"' new ClaimsPrincipal())); " is 124.
Long Statement,Microsoft.AspNetCore.Http,HeaderDictionaryTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\HeaderDictionaryTests.cs,WriteActionsThrowWhenReadOnly,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => headers.Add(new KeyValuePair<string' StringValues>("header1"' "value1"))); " is 121.
Long Statement,Microsoft.AspNetCore.Http,HeaderDictionaryTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\HeaderDictionaryTests.cs,WriteActionsThrowWhenReadOnly,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => headers.Remove(new KeyValuePair<string' StringValues>("header1"' "value1"))); " is 124.
Long Statement,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,ReadFormAsync_MultipartWithEncodedFilename_ReturnsParsedFormCollection,The length of the statement  "            Assert.Equal(@"form-data; name=""myfile1""; filename=""temp.html""; filename*=utf-8''t%c3%a9mp.html"' file.ContentDisposition); " is 127.
Long Statement,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,ReadFormAsync_ValueCountLimitExceeded_Throw,The length of the statement  "            IFormFeature formFeature = new FormFeature(context.Request' new FormOptions() { BufferBody = bufferRequest' ValueCountLimit = 2 }); " is 131.
Long Statement,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,ReadFormAsync_ValueCountLimitExceededWithFiles_Throw,The length of the statement  "            IFormFeature formFeature = new FormFeature(context.Request' new FormOptions() { BufferBody = bufferRequest' ValueCountLimit = 2 }); " is 131.
Long Statement,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,WriteCanBeCancelledViaProvidedCancellationToken,The length of the statement  "            await Assert.ThrowsAsync<TaskCanceledException>(async () => await pipeWriter.WriteAsync(Encoding.ASCII.GetBytes("data")' cts.Token)); " is 133.
Long Statement,Microsoft.AspNetCore.Http.Tests,PooledMemory,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\TestMemoryPool.cs,Pin,The length of the statement  "                        return new MemoryHandle(Unsafe.Add<byte>(((void*)handle.AddrOfPinnedObject())' elementIndex + segment.Offset)' handle' this); " is 125.
Magic Number,Microsoft.AspNetCore.Http,DefaultHttpContextTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\DefaultHttpContextTests.cs,GetOnSessionProperty_ReturnsAvailableSession,The following statement contains a magic number: Assert.Equal(3' context.Session.Keys.Count());
Magic Number,Microsoft.AspNetCore.Http,DefaultHttpContextTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\DefaultHttpContextTests.cs,UpdateFeatures_ClearsCachedFeatures,The following statement contains a magic number: Assert.Equal(3' features.Count());
Magic Number,Microsoft.AspNetCore.Http,DefaultHttpContextTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\DefaultHttpContextTests.cs,UpdateFeatures_ClearsCachedFeatures,The following statement contains a magic number: Assert.NotEqual(3' features.Count());
Magic Number,Microsoft.AspNetCore.Http,DefaultHttpContextTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\DefaultHttpContextTests.cs,UpdateFeatures_ClearsCachedFeatures,The following statement contains a magic number: Assert.Equal(3' newFeatures.Count());
Magic Number,Microsoft.AspNetCore.Http,DefaultHttpContextTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\DefaultHttpContextTests.cs,UpdateFeatures_ClearsCachedFeatures,The following statement contains a magic number: Assert.NotEqual(3' newFeatures.Count());
Magic Number,Microsoft.AspNetCore.Http,HeaderDictionaryTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\HeaderDictionaryTests.cs,WriteActionsThrowWhenReadOnly,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => headers.ContentLength = 12);
Magic Number,Microsoft.AspNetCore.Http,HttpContextAccessorTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\HttpContextAccessorTests.cs,HttpContextAccessor_GettingHttpContextReturnsHttpContext,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,ReadFormAsync_ValueCountLimitExceeded_Throw,The following statement contains a magic number: IFormFeature formFeature = new FormFeature(context.Request' new FormOptions() { BufferBody = bufferRequest' ValueCountLimit = 2 });
Magic Number,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,ReadFormAsync_ValueCountLimitExceededWithFiles_Throw,The following statement contains a magic number: IFormFeature formFeature = new FormFeature(context.Request' new FormOptions() { BufferBody = bufferRequest' ValueCountLimit = 2 });
Magic Number,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,CompareStreams,The following statement contains a magic number: byte[] bytesA = new byte[1024]' bytesB = new byte[1024];
Magic Number,Microsoft.AspNetCore.Http.Features,FormFeatureTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Features\FormFeatureTests.cs,CompareStreams,The following statement contains a magic number: byte[] bytesA = new byte[1024]' bytesB = new byte[1024];
Magic Number,Microsoft.AspNetCore.Http.Tests,FlushResultCancellationTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\FlushResultCancellationTests.cs,FlushAsyncCancellationDeadlock,The following statement contains a magic number: awaiter.OnCompleted(                  () => {                      // We are on cancellation thread and need to wait until another FlushAsync call                      // takes pipe state lock                      e.Wait();                        // Make sure we had enough time to reach _cancellationTokenRegistration.Dispose                      Thread.Sleep(100);                        // Try to take pipe state lock                      buffer.FlushAsync();                  });
Magic Number,Microsoft.AspNetCore.Http.Tests,FlushResultCancellationTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\FlushResultCancellationTests.cs,FlushAsyncCancellationDeadlock,The following statement contains a magic number: bool completed = Task.WhenAll(cancellationTask' blockingTask).Wait(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.AspNetCore.Http.Tests,FlushResultCancellationTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\FlushResultCancellationTests.cs,FlushAsyncWithNewCancellationTokenNotAffectedByPrevious,The following statement contains a magic number: PipeWriter buffer = Writer.WriteEmpty(10);
Magic Number,Microsoft.AspNetCore.Http.Tests,FlushResultCancellationTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\FlushResultCancellationTests.cs,FlushAsyncWithNewCancellationTokenNotAffectedByPrevious,The following statement contains a magic number: buffer = Writer.WriteEmpty(10);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeTest,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeTest.cs,PipeTest,The following statement contains a magic number: Writer = new StreamPipeWriter(MemoryStream' 4096' new TestMemoryPool());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteWithOffsetAndLength,The following statement contains a magic number: var array = new byte[] { 1' 2' 3 };
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteWithOffsetAndLength,The following statement contains a magic number: var array = new byte[] { 1' 2' 3 };
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteIntoHeadlessBuffer,The following statement contains a magic number: Writer.Write(new byte[] { 1' 2' 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteIntoHeadlessBuffer,The following statement contains a magic number: Writer.Write(new byte[] { 1' 2' 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteIntoHeadlessBuffer,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteIntoHeadlessBuffer,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanGetNewMemoryWhenSizeTooLarge,The following statement contains a magic number: var memoryLarge = Writer.GetMemory(10000);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanGetNewSpanWhenNoAdvanceWhenSizeTooLarge,The following statement contains a magic number: var secondSpan = Writer.GetSpan(8000);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteMultipleTimes,The following statement contains a magic number: Writer.Write(new byte[] { 2 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteMultipleTimes,The following statement contains a magic number: Writer.Write(new byte[] { 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteMultipleTimes,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,CanWriteMultipleTimes,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,EnsureAllocatesSpan,The following statement contains a magic number: var span = Writer.GetSpan(10);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,EnsureAllocatesSpan,The following statement contains a magic number: Assert.True(span.Length >= 10);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: int initialLength = Writer.GetSpan(3).Length;
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: Writer.Write(new byte[] { 1' 2' 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: Writer.Write(new byte[] { 1' 2' 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: Assert.Equal(initialLength - 3' span.Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,PipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\PipeWriterTests.cs,SlicesSpanAndAdvancesAfterWrite,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,ResponseCookiesTest,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\ResponseCookiesTest.cs,DeleteCookieWithCookieOptionsShouldKeepPropertiesOfCookieOptions,The following statement contains a magic number: var time = new DateTimeOffset(2000' 1' 1' 1' 1' 1' 1' TimeSpan.Zero);
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CanWriteAsyncMultipleTimesIntoSameBlock,The following statement contains a magic number: await Writer.WriteAsync(new byte[] { 2 });
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CanWriteAsyncMultipleTimesIntoSameBlock,The following statement contains a magic number: await Writer.WriteAsync(new byte[] { 3 });
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CanWriteAsyncMultipleTimesIntoSameBlock,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CanWriteAsyncMultipleTimesIntoSameBlock,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 3 }' Read());
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,FlushAsyncReturnsCanceledIfCanceledBeforeFlushMultipleTimes,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,FlushAsyncReturnsCanceledInterleaved,The following statement contains a magic number: i < 5
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: var writeSize = 16;
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: var task = Task.Run(async () =>                  {                      try                      {                          // Create two Segments                          // First one will succeed to write' other one will hang.                          for (var j = 0; j < 2; j++)                          {                              Writer.Write(expectedData);                          }                            var flushTask = Writer.FlushAsync();                          tcs.SetResult(0);                          flushResult = await flushTask;                      }                      catch (Exception ex)                      {                          Console.WriteLine(ex.Message);                          throw ex;                      }                  });
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: i < 10
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: Assert.Equal(16 * 10' ReadWithoutFlush().Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: Assert.Equal(16 * 10' ReadWithoutFlush().Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: Assert.Equal(16 * 10 * 2' Read().Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: Assert.Equal(16 * 10 * 2' Read().Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,StreamPipeWriterTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,CancelPendingFlushLostOfCancellationsNoDataLost,The following statement contains a magic number: Assert.Equal(16 * 10 * 2' Read().Length);
Magic Number,Microsoft.AspNetCore.Http.Tests,HangingStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,WriteAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Http.Tests,HangingStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,FlushAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Http.Tests,HangingStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,ReadAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Http.Tests,SingleWriteStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,WriteAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Http.Tests,SingleWriteStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,WriteAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Http.Tests,CannotFlushStream,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\StreamPipeWriterTests.cs,FlushAsync,The following statement contains a magic number: await Task.Delay(30000' cancellationToken);
Magic Number,Microsoft.AspNetCore.Builder.Internal,ApplicationBuilderTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Internal\ApplicationBuilderTests.cs,BuildReturnsCallableDelegate,The following statement contains a magic number: Assert.Equal(404' httpContext.Response.StatusCode);
Magic Number,Microsoft.AspNetCore.Http.Internal,DefaultHttpRequestTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Internal\DefaultHttpRequestTests.cs,Query_GetAndSet,The following statement contains a magic number: Assert.Equal(2' query1.Count);
Magic Number,Microsoft.AspNetCore.Http.Internal,DefaultHttpRequestTests,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\test\Microsoft.AspNetCore.Http.Tests\Internal\DefaultHttpRequestTests.cs,Cookies_GetAndSet,The following statement contains a magic number: Assert.Equal(2' cookies1.Count);
