Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The method has 119 lines of code.
Long Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,GetSetCookieLength,The method has 161 lines of code.
Complex Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,Cyclomatic complexity of the method is 24
Complex Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,GetContentRangeLength,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,CookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CookieHeaderValue.cs,GetCookieValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,AreEqualCollections,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Net.Http.Headers,HttpHeaderParser<T>,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpHeaderParser.cs,TryParseValues,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,MediaTypeHeaderValueComparer,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\MediaTypeHeaderValueComparer.cs,Compare,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Net.Http.Headers,RangeItemHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeItemHeaderValue.cs,GetRangeItemLength,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,AppendToStringBuilder,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,GetSetCookieLength,Cyclomatic complexity of the method is 25
Complex Method,Microsoft.Net.Http.Headers,StringWithQualityHeaderValueComparer,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\StringWithQualityHeaderValueComparer.cs,Compare,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryGetRangeLength,The method has 5 parameters. Parameters: input' current' fromLength' toStartIndex' toLength
Long Parameter List,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,The method has 9 parameters. Parameters: input' unit' fromStartIndex' fromLength' toStartIndex' toLength' lengthStartIndex' lengthLength' parsedValue
Long Parameter List,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,The method has 7 parameters. Parameters: input' startIndex' openChar' closeChar' supportsNesting' nestedCount' length
Long Identifier,Microsoft.Net.Http.Headers,HeaderNames,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderNames.cs,,The length of the parameter ContentSecurityPolicyReportOnly is 31.
Long Identifier,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,CountAndCheckCharactersNeedingBackslashesWhenEncoding,The length of the parameter numberOfCharactersNeedingEscaping is 33.
Long Statement,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,Parse,The length of the statement  "            // Cache-Control is unusual because there are no required values so the parser will succeed for an empty string' but still return null. " is 135.
Long Statement,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TryParse,The length of the statement  "            // Cache-Control is unusual because there are no required values so the parser will succeed for an empty string' but still return null. " is 135.
Long Statement,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,GetHashCode,The length of the statement  "            return StringSegmentComparer.OrdinalIgnoreCase.GetHashCode(_dispositionType) ^ NameValueHeaderValue.GetHashCode(_parameters); " is 125.
Long Statement,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,The length of the statement  "            if ((fromLength > 0) && !HeaderUtilities.TryParseNonNegativeInt64(input.Subsegment(fromStartIndex' fromLength)' out from)) " is 122.
Long Statement,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,ContainsCacheDirective,The length of the statement  "                        && string.Compare(cacheControlDirectives[i]' current' targetDirectives' 0' tokenLength' StringComparison.OrdinalIgnoreCase) == 0) " is 129.
Long Statement,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64FromHeaderValue,The length of the statement  "            if (TryParseNonNegativeInt64(new StringSegment(headerValue' startIndex' HttpRuleParser.GetNumberLength(headerValue' startIndex' false))' out result)) " is 149.
Long Statement,Microsoft.Net.Http.Headers,RangeItemHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeItemHeaderValue.cs,GetRangeItemLength,The length of the statement  "            if ((fromLength > 0) && !HeaderUtilities.TryParseNonNegativeInt64(input.Subsegment(fromStartIndex' fromLength)' out from)) " is 122.
Long Statement,Microsoft.Net.Http.Headers,SetCookieHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,AppendToStringBuilder,The length of the statement  "                AppendSegment(builder' MaxAgeToken' HeaderUtilities.FormatNonNegativeInt64((long)MaxAge.GetValueOrDefault().TotalSeconds)); " is 123.
Complex Conditional,Microsoft.Net.Http.Headers,BaseHeaderParser<T>,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\BaseHeaderParser.cs,TryParseValue,The conditional expression  "(separatorFound && !SupportsMultipleValues) || (!separatorFound && (current < value.Length))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,Equals,The conditional expression  "(_noCache != other._noCache) || (_noStore != other._noStore) || (_maxAge != other._maxAge) ||                  (_sharedMaxAge != other._sharedMaxAge) || (_maxStale != other._maxStale) ||                  (_maxStaleLimit != other._maxStaleLimit) || (_minFresh != other._minFresh) ||                  (_noTransform != other._noTransform) || (_onlyIfCached != other._onlyIfCached) ||                  (_public != other._public) || (_private != other._private) ||                  (_mustRevalidate != other._mustRevalidate) || (_proxyRevalidate != other._proxyRevalidate)"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The conditional expression  "parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,Encode5987,The conditional expression  "!HttpRuleParser.IsTokenChar(c) || c == '*' || c == '\'' || c == '%'"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsEscapedAscii,The conditional expression  "!(((digit >= '0') && (digit <= '9'))                  || ((digit >= 'A') && (digit <= 'F'))                  || ((digit >= 'a') && (digit <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsEscapedAscii,The conditional expression  "!(((next >= '0') && (next <= '9'))                  || ((next >= 'A') && (next <= 'F'))                  || ((next >= 'a') && (next <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The conditional expression  "!(((digit >= '0') && (digit <= '9'))                  || ((digit >= 'A') && (digit <= 'F'))                  || ((digit >= 'a') && (digit <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The conditional expression  "!(((next >= '0') && (next <= '9'))                  || ((next >= 'A') && (next <= 'F'))                  || ((next >= 'a') && (next <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,CookieHeaderParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CookieHeaderParser.cs,TryParseValue,The conditional expression  "(separatorFound && !SupportsMultipleValues) || (!separatorFound && (current < value.Length))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,AreEqualCollections,The conditional expression  "((comparer == null) && xItem.Equals(yItem)) ||                              ((comparer != null) && comparer.Equals(xItem' yItem))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,RangeConditionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeConditionHeaderValue.cs,GetRangeConditionLength,The conditional expression  "(firstChar == '\"') || (((firstChar == 'w') || (firstChar == 'W')) && (secondChar == '/'))"  is complex.
Empty Catch Block,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Empty Catch Block,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.GetValueOrDefault().GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.GetValueOrDefault().GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.GetValueOrDefault().GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.GetValueOrDefault().GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.GetValueOrDefault().GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.GetValueOrDefault().GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.GetValueOrDefault().GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.GetValueOrDefault().GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.GetValueOrDefault().GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.GetValueOrDefault().GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.GetValueOrDefault().GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.GetValueOrDefault().GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,The following statement contains a magic number: (valueString.Length < 3) || (valueString[0] != '\"') || (valueString[valueString.Length - 1] != '\"')
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,GetDate,The following statement contains a magic number: dateString = dateString.Subsegment(1' dateString.Length - 2);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,EncodeAndQuoteMime,The following statement contains a magic number: result = result.Subsegment(1' result.Length - 2);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: !IsQuoted(processedInput) || processedInput.Length < 10
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: var bytes = Convert.FromBase64String(parts[3].ToString());
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexEscape,The following statement contains a magic number: builder.Append(HexUpperChars[(c & 0xf0) >> 4]);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecode5987,The following statement contains a magic number: parts.Length != 3
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecode5987,The following statement contains a magic number: var dataString = parts[2];
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsHexEncoding,The following statement contains a magic number: (pattern.Length - index) < 3
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsHexEncoding,The following statement contains a magic number: (pattern[index] == '%') && IsEscapedAscii(pattern[index + 1]' pattern[index + 2])
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: var ret = UnEscapeAscii(pattern[index + 1]' pattern[index + 2]);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: index += 3;
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: (pattern[index] == '%')                  && (pattern.Length - index >= 3)
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: var res = (digit <= '9')                  ? ((int)digit - (int)'0')                  : (((digit <= 'F')                  ? ((int)digit - (int)'A')                  : ((int)digit - (int)'a'))                     + 10);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: return (byte)((res << 4) + ((next <= '9')                      ? ((int)next - (int)'0')                      : (((next <= 'F')                          ? ((int)next - (int)'A')                          : ((int)next - (int)'a'))                         + 10)));
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: return (byte)((res << 4) + ((next <= '9')                      ? ((int)next - (int)'0')                      : (((next <= 'F')                          ? ((int)next - (int)'A')                          : ((int)next - (int)'a'))                         + 10)));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year / 1000));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 1000 / 100));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 1000 / 100));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 100 / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 100 / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendNumber,The following statement contains a magic number: target.Append(GetAsciiChar(number / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendNumber,The following statement contains a magic number: target.Append(GetAsciiChar(number % 10));
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt32,The following statement contains a magic number: (result = result * 10 + digit) < 0
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt32,The following statement contains a magic number: ch < end && (digit = (ushort)(*ch - 0x30)) <= 9
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64,The following statement contains a magic number: (result = result * 10 + digit) < 0
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64,The following statement contains a magic number: ch < end && (digit = (ushort)(*ch - 0x30)) <= 9
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,The following statement contains a magic number: decPart = decPart * 10 + ch - '0';
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,The following statement contains a magic number: decPow *= 10;
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,FormatNonNegativeInt64,The following statement contains a magic number: var quotient = value / 10;
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,FormatNonNegativeInt64,The following statement contains a magic number: charBuffer[--position] = (char)(0x30 + (value - quotient * 10));
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,RemoveQuotes,The following statement contains a magic number: input = input.Subsegment(1' input.Length - 2);
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,IsQuoted,The following statement contains a magic number: return !StringSegment.IsNullOrEmpty(input) && input.Length >= 2 && input[0] == '"' && input[input.Length - 1] == '"';
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,EscapeAsQuotedString,The following statement contains a magic number: var stringBuilder = new InplaceStringBuilder(input.Length + backSlashCount + 2);
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: var tokenChars = new bool[128];
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: i < 127
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,IsTokenChar,The following statement contains a magic number: character > 127
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: char spaceOrTab = input[current + 2];
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: current += 3;
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: (current + 2 < input.Length) && (input[current + 1] == LF)
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: (startIndex + 2 > input.Length) || (input[startIndex + 1] > 127)
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: (startIndex + 2 > input.Length) || (input[startIndex + 1] > 127)
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: length = 2;
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,The following statement contains a magic number: (current + 2 < input.Length) &&                      (GetQuotedPairLength(input' current' out quotedPairLength) == HttpParseResult.Parsed)
