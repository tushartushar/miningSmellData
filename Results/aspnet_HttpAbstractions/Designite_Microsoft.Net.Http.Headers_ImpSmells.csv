Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The method has 119 lines of code.
Long Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,GetSetCookieLength,The method has 155 lines of code.
Complex Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,GetContentRangeLength,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,CookieHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CookieHeaderValue.cs,GetCookieValue,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,AreEqualCollections,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Net.Http.Headers,HttpHeaderParser<T>,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpHeaderParser.cs,TryParseValues,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,RangeItemHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeItemHeaderValue.cs,GetRangeItemLength,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,AppendToStringBuilder,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Net.Http.Headers,SetCookieHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\SetCookieHeaderValue.cs,GetSetCookieLength,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryGetRangeLength,The method has 5 parameters. Parameters: input' current' fromLength' toStartIndex' toLength
Long Parameter List,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,The method has 9 parameters. Parameters: input' unit' fromStartIndex' fromLength' toStartIndex' toLength' lengthStartIndex' lengthLength' parsedValue
Long Parameter List,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,The method has 7 parameters. Parameters: input' startIndex' openChar' closeChar' supportsNesting' nestedCount' length
Long Identifier,Microsoft.Net.Http.Headers,HeaderNames,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderNames.cs,,The length of the parameter ContentSecurityPolicyReportOnly is 31.
Long Identifier,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,CountAndCheckCharactersNeedingBackslashesWhenEncoding,The length of the parameter numberOfCharactersNeedingEscaping is 33.
Long Statement,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,Parse,The length of the statement  "            // Cache-Control is unusual because there are no required values so the parser will succeed for an empty string' but still return null. " is 135.
Long Statement,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TryParse,The length of the statement  "            // Cache-Control is unusual because there are no required values so the parser will succeed for an empty string' but still return null. " is 135.
Long Statement,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,GetHashCode,The length of the statement  "            return StringSegmentComparer.OrdinalIgnoreCase.GetHashCode(_dispositionType) ^ NameValueHeaderValue.GetHashCode(_parameters); " is 125.
Long Statement,Microsoft.Net.Http.Headers,ContentRangeHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentRangeHeaderValue.cs,TryCreateContentRange,The length of the statement  "            if ((fromLength > 0) && !HeaderUtilities.TryParseNonNegativeInt64(input.Subsegment(fromStartIndex' fromLength)' out from)) " is 122.
Long Statement,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,ContainsCacheDirective,The length of the statement  "                        && string.Compare(cacheControlDirectives[i]' current' targetDirectives' 0' tokenLength' StringComparison.OrdinalIgnoreCase) == 0) " is 129.
Long Statement,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64FromHeaderValue,The length of the statement  "            if (TryParseNonNegativeInt64(new StringSegment(headerValue' startIndex' HttpRuleParser.GetNumberLength(headerValue' startIndex' false))' out result)) " is 149.
Long Statement,Microsoft.Net.Http.Headers,RangeItemHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeItemHeaderValue.cs,GetRangeItemLength,The length of the statement  "            if ((fromLength > 0) && !HeaderUtilities.TryParseNonNegativeInt64(input.Subsegment(fromStartIndex' fromLength)' out from)) " is 122.
Complex Conditional,Microsoft.Net.Http.Headers,BaseHeaderParser<T>,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\BaseHeaderParser.cs,TryParseValue,The conditional expression  "(separatorFound && !SupportsMultipleValues) || (!separatorFound && (current < value.Length))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,Equals,The conditional expression  "(_noCache != other._noCache) || (_noStore != other._noStore) || (_maxAge != other._maxAge) ||                  (_sharedMaxAge != other._sharedMaxAge) || (_maxStale != other._maxStale) ||                  (_maxStaleLimit != other._maxStaleLimit) || (_minFresh != other._minFresh) ||                  (_noTransform != other._noTransform) || (_onlyIfCached != other._onlyIfCached) ||                  (_public != other._public) || (_private != other._private) ||                  (_mustRevalidate != other._mustRevalidate) || (_proxyRevalidate != other._proxyRevalidate)"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The conditional expression  "parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,Encode5987,The conditional expression  "!HttpRuleParser.IsTokenChar(c) || c == '*' || c == '\'' || c == '%'"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsEscapedAscii,The conditional expression  "!(((digit >= '0') && (digit <= '9'))                  || ((digit >= 'A') && (digit <= 'F'))                  || ((digit >= 'a') && (digit <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsEscapedAscii,The conditional expression  "!(((next >= '0') && (next <= '9'))                  || ((next >= 'A') && (next <= 'F'))                  || ((next >= 'a') && (next <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The conditional expression  "!(((digit >= '0') && (digit <= '9'))                  || ((digit >= 'A') && (digit <= 'F'))                  || ((digit >= 'a') && (digit <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The conditional expression  "!(((next >= '0') && (next <= '9'))                  || ((next >= 'A') && (next <= 'F'))                  || ((next >= 'a') && (next <= 'f')))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,CookieHeaderParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CookieHeaderParser.cs,TryParseValue,The conditional expression  "(separatorFound && !SupportsMultipleValues) || (!separatorFound && (current < value.Length))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,AreEqualCollections,The conditional expression  "((comparer == null) && xItem.Equals(yItem)) ||                              ((comparer != null) && comparer.Equals(xItem' yItem))"  is complex.
Complex Conditional,Microsoft.Net.Http.Headers,RangeConditionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\RangeConditionHeaderValue.cs,GetRangeConditionLength,The conditional expression  "(firstChar == '\"') || (((firstChar == 'w') || (firstChar == 'W')) && (secondChar == '/'))"  is complex.
Empty Catch Block,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Empty Catch Block,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The method has an empty catch block.
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: int result = _noCache.GetHashCode() ^ (_noStore.GetHashCode() << 1) ^ (_maxStale.GetHashCode() << 2) ^                  (_noTransform.GetHashCode() << 3) ^ (_onlyIfCached.GetHashCode() << 4) ^                  (_public.GetHashCode() << 5) ^ (_private.GetHashCode() << 6) ^                  (_mustRevalidate.GetHashCode() << 7) ^ (_proxyRevalidate.GetHashCode() << 8);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,GetHashCode,The following statement contains a magic number: result = result ^ (_maxAge.HasValue ? _maxAge.Value.GetHashCode() ^ 1 : 0) ^                  (_sharedMaxAge.HasValue ? _sharedMaxAge.Value.GetHashCode() ^ 2 : 0) ^                  (_maxStaleLimit.HasValue ? _maxStaleLimit.Value.GetHashCode() ^ 4 : 0) ^                  (_minFresh.HasValue ? _minFresh.Value.GetHashCode() ^ 8 : 0);
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetCacheControlValues,The following statement contains a magic number: for (var i = 0; i < nameValueList.Count; i++)              {                  var nameValue = nameValueList[i];                  var name = nameValue.Name;                  var success = true;                    switch (name.Length)                  {                      case 6:                          if (StringSegment.Equals(PublicString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._public);                          }                          else                          {                              goto default;                          }                          break;                        case 7:                          if (StringSegment.Equals(MaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._maxAge);                          }                          else if(StringSegment.Equals(PrivateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._private' ref cc._privateHeaders);                          }                          else                          {                              goto default;                          }                          break;                        case 8:                          if (StringSegment.Equals(NoCacheString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetOptionalTokenList(nameValue' ref cc._noCache' ref cc._noCacheHeaders);                          }                          else if (StringSegment.Equals(NoStoreString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noStore);                          }                          else if (StringSegment.Equals(SharedMaxAgeString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._sharedMaxAge);                          }                          else                          {                              goto default;                          }                          break;                        case 9:                          if (StringSegment.Equals(MaxStaleString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = ((nameValue.Value == null) || TrySetTimeSpan(nameValue' ref cc._maxStaleLimit));                              if (success)                              {                                  cc._maxStale = true;                              }                          }                          else if (StringSegment.Equals(MinFreshString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTimeSpan(nameValue' ref cc._minFresh);                          }                          else                          {                              goto default;                          }                          break;                        case 12:                          if (StringSegment.Equals(NoTransformString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._noTransform);                          }                          else                          {                              goto default;                          }                          break;                        case 14:                          if (StringSegment.Equals(OnlyIfCachedString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._onlyIfCached);                          }                          else                          {                              goto default;                          }                          break;                        case 15:                          if (StringSegment.Equals(MustRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._mustRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        case 16:                          if (StringSegment.Equals(ProxyRevalidateString' name' StringComparison.OrdinalIgnoreCase))                          {                              success = TrySetTokenOnlyValue(nameValue' ref cc._proxyRevalidate);                          }                          else                          {                              goto default;                          }                          break;                        default:                          cc.Extensions.Add(nameValue); // success is always true                          break;                  }                    if (!success)                  {                      return false;                  }              }
Magic Number,Microsoft.Net.Http.Headers,CacheControlHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\CacheControlHeaderValue.cs,TrySetOptionalTokenList,The following statement contains a magic number: if ((valueString.Length < 3) || (valueString[0] != '\"') || (valueString[valueString.Length - 1] != '\"'))              {                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,GetDate,The following statement contains a magic number: if (dateParameter != null)              {                  var dateString = dateParameter.Value;                  // Should have quotes' remove them.                  if (IsQuoted(dateString))                  {                      dateString = dateString.Subsegment(1' dateString.Length - 2);                  }                  DateTimeOffset date;                  if (HttpRuleParser.TryStringToDate(dateString' out date))                  {                      return date;                  }              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,EncodeAndQuoteMime,The following statement contains a magic number: if (IsQuoted(result))              {                  result = result.Subsegment(1' result.Length - 2);                  needsQuotes = true;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (!IsQuoted(processedInput) || processedInput.Length < 10)              {                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase))              {                  // Not encoded.                  // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase))              {                  // Not encoded.                  // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: if (parts.Length != 5 || parts[0] != "\"=" || parts[4] != "=\""                  || !parts[2].Equals("b"' StringComparison.OrdinalIgnoreCase))              {                  // Not encoded.                  // This does not support multi-line encoding.                  // Only base64 encoding is supported' not quoted printable                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecodeMime,The following statement contains a magic number: try              {                  var encoding = Encoding.GetEncoding(parts[1].ToString());                  var bytes = Convert.FromBase64String(parts[3].ToString());                  output = encoding.GetString(bytes' 0' bytes.Length);                  return true;              }              catch (ArgumentException)              {                  // Unknown encoding or bad characters              }              catch (FormatException)              {                  // Bad base64 decoding              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexEscape,The following statement contains a magic number: builder.Append(HexUpperChars[(c & 0xf0) >> 4]);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecode5987,The following statement contains a magic number: if (parts.Length != 3)              {                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,TryDecode5987,The following statement contains a magic number: try              {                  var encoding = Encoding.GetEncoding(parts[0].ToString());                    var dataString = parts[2];                  unescapedBytes = ArrayPool<byte>.Shared.Rent(dataString.Length);                  var unescapedBytesCount = 0;                  for (var index = 0; index < dataString.Length; index++)                  {                      if (IsHexEncoding(dataString' index)) // %FF                      {                          // Unescape and cache bytes' multi-byte characters must be decoded all at once                          unescapedBytes[unescapedBytesCount++] = HexUnescape(dataString' ref index);                          index--; // HexUnescape did +=3; Offset the for loop's ++                      }                      else                      {                          if (unescapedBytesCount > 0)                          {                              // Decode any previously cached bytes                              decoded.Append(encoding.GetString(unescapedBytes' 0' unescapedBytesCount));                              unescapedBytesCount = 0;                          }                          decoded.Append(dataString[index]); // Normal safe character                      }                  }                    if (unescapedBytesCount > 0)                  {                      // Decode any previously cached bytes                      decoded.Append(encoding.GetString(unescapedBytes' 0' unescapedBytesCount));                  }              }              catch (ArgumentException)              {                  return false; // Unknown encoding or bad characters              }              finally              {                  if (unescapedBytes != null)                  {                      ArrayPool<byte>.Shared.Return(unescapedBytes);                  }              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsHexEncoding,The following statement contains a magic number: if ((pattern.Length - index) < 3)              {                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,IsHexEncoding,The following statement contains a magic number: if ((pattern[index] == '%') && IsEscapedAscii(pattern[index + 1]' pattern[index + 2]))              {                  return true;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: if ((pattern[index] == '%')                  && (pattern.Length - index >= 3))              {                  var ret = UnEscapeAscii(pattern[index + 1]' pattern[index + 2]);                  index += 3;                  return ret;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: if ((pattern[index] == '%')                  && (pattern.Length - index >= 3))              {                  var ret = UnEscapeAscii(pattern[index + 1]' pattern[index + 2]);                  index += 3;                  return ret;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,HexUnescape,The following statement contains a magic number: if ((pattern[index] == '%')                  && (pattern.Length - index >= 3))              {                  var ret = UnEscapeAscii(pattern[index + 1]' pattern[index + 2]);                  index += 3;                  return ret;              }
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: var res = (digit <= '9')                  ? ((int)digit - (int)'0')                  : (((digit <= 'F')                  ? ((int)digit - (int)'A')                  : ((int)digit - (int)'a'))                     + 10);
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: return (byte)((res << 4) + ((next <= '9')                      ? ((int)next - (int)'0')                      : (((next <= 'F')                          ? ((int)next - (int)'A')                          : ((int)next - (int)'a'))                         + 10)));
Magic Number,Microsoft.Net.Http.Headers,ContentDispositionHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\ContentDispositionHeaderValue.cs,UnEscapeAscii,The following statement contains a magic number: return (byte)((res << 4) + ((next <= '9')                      ? ((int)next - (int)'0')                      : (((next <= 'F')                          ? ((int)next - (int)'A')                          : ((int)next - (int)'a'))                         + 10)));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year / 1000));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 1000 / 100));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 1000 / 100));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 100 / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 100 / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendYear,The following statement contains a magic number: target.Append(GetAsciiChar(year % 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendNumber,The following statement contains a magic number: target.Append(GetAsciiChar(number / 10));
Magic Number,Microsoft.Net.Http.Headers,DateTimeFormatter,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\DateTimeFormatter.cs,AppendNumber,The following statement contains a magic number: target.Append(GetAsciiChar(number % 10));
Magic Number,Microsoft.Net.Http.Headers,EntityTagHeaderValue,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\EntityTagHeaderValue.cs,GetEntityTagLength,The following statement contains a magic number: if (firstChar == '*')              {                  // We have '*' value' indicating "any" ETag.                  parsedValue = Any;                  current++;              }              else              {                  // The RFC defines 'W/' as prefix' but we'll be flexible and also accept lower-case 'w'.                  if ((firstChar == 'W') || (firstChar == 'w'))                  {                      current++;                      // We need at least 3 more chars: the '/' character followed by two quotes.                      if ((current + 2 >= input.Length) || (input[current] != '/'))                      {                          return 0;                      }                      isWeak = true;                      current++; // we have a weak-entity tag.                      current = current + HttpRuleParser.GetWhitespaceLength(input' current);                  }                    var tagStartIndex = current;                  var tagLength = 0;                  if (HttpRuleParser.GetQuotedStringLength(input' current' out tagLength) != HttpParseResult.Parsed)                  {                      return 0;                  }                    parsedValue = new EntityTagHeaderValue();                  if (tagLength == input.Length)                  {                      // Most of the time we'll have strong ETags without leading/trailing whitespaces.                      Contract.Assert(startIndex == 0);                      Contract.Assert(!isWeak);                      parsedValue._tag = input;                      parsedValue._isWeak = false;                  }                  else                  {                      parsedValue._tag = input.Subsegment(tagStartIndex' tagLength);                      parsedValue._isWeak = isWeak;                  }                    current = current + tagLength;              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt32,The following statement contains a magic number: fixed (char* ptr = value.Buffer)              {                  var ch = (ushort*)ptr + value.Offset;                  var end = ch + value.Length;                    ushort digit = 0;                  while (ch < end && (digit = (ushort)(*ch - 0x30)) <= 9)                  {                      // Check for overflow                      if ((result = result * 10 + digit) < 0)                      {                          result = 0;                          return false;                      }                        ch++;                  }                    if (ch != end)                  {                      result = 0;                      return false;                  }                  return true;              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt32,The following statement contains a magic number: fixed (char* ptr = value.Buffer)              {                  var ch = (ushort*)ptr + value.Offset;                  var end = ch + value.Length;                    ushort digit = 0;                  while (ch < end && (digit = (ushort)(*ch - 0x30)) <= 9)                  {                      // Check for overflow                      if ((result = result * 10 + digit) < 0)                      {                          result = 0;                          return false;                      }                        ch++;                  }                    if (ch != end)                  {                      result = 0;                      return false;                  }                  return true;              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64,The following statement contains a magic number: fixed (char* ptr = value.Buffer)              {                  var ch = (ushort*)ptr + value.Offset;                  var end = ch + value.Length;                    ushort digit = 0;                  while (ch < end && (digit = (ushort)(*ch - 0x30)) <= 9)                  {                      // Check for overflow                      if ((result = result * 10 + digit) < 0)                      {                          result = 0;                          return false;                      }                        ch++;                  }                    if (ch != end)                  {                      result = 0;                      return false;                  }                  return true;              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseNonNegativeInt64,The following statement contains a magic number: fixed (char* ptr = value.Buffer)              {                  var ch = (ushort*)ptr + value.Offset;                  var end = ch + value.Length;                    ushort digit = 0;                  while (ch < end && (digit = (ushort)(*ch - 0x30)) <= 9)                  {                      // Check for overflow                      if ((result = result * 10 + digit) < 0)                      {                          result = 0;                          return false;                      }                        ch++;                  }                    if (ch != end)                  {                      result = 0;                      return false;                  }                  return true;              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,The following statement contains a magic number: if (current < inputLength)              {                  ch = input[current];                    if (ch >= '0' && ch <= '9')                  {                      // The RFC accepts only one digit before the dot                      return false;                  }                    if (ch == '.')                  {                      current++;                        while (current < inputLength)                      {                          ch = input[current];                          if (ch >= '0' && ch <= '9')                          {                              if (current >= limit)                              {                                  return false;                              }                                decPart = decPart * 10 + ch - '0';                              decPow *= 10;                              current++;                          }                          else                          {                              break;                          }                      }                  }              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,TryParseQualityDouble,The following statement contains a magic number: if (current < inputLength)              {                  ch = input[current];                    if (ch >= '0' && ch <= '9')                  {                      // The RFC accepts only one digit before the dot                      return false;                  }                    if (ch == '.')                  {                      current++;                        while (current < inputLength)                      {                          ch = input[current];                          if (ch >= '0' && ch <= '9')                          {                              if (current >= limit)                              {                                  return false;                              }                                decPart = decPart * 10 + ch - '0';                              decPow *= 10;                              current++;                          }                          else                          {                              break;                          }                      }                  }              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,FormatNonNegativeInt64,The following statement contains a magic number: do              {                  // Consider using Math.DivRem() if available                  var quotient = value / 10;                  charBuffer[--position] = (char)(0x30 + (value - quotient * 10)); // 0x30 = '0'                  value = quotient;              }              while (value != 0);
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,FormatNonNegativeInt64,The following statement contains a magic number: do              {                  // Consider using Math.DivRem() if available                  var quotient = value / 10;                  charBuffer[--position] = (char)(0x30 + (value - quotient * 10)); // 0x30 = '0'                  value = quotient;              }              while (value != 0);
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,RemoveQuotes,The following statement contains a magic number: if (IsQuoted(input))              {                  input = input.Subsegment(1' input.Length - 2);              }
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,IsQuoted,The following statement contains a magic number: return !StringSegment.IsNullOrEmpty(input) && input.Length >= 2 && input[0] == '"' && input[input.Length - 1] == '"';
Magic Number,Microsoft.Net.Http.Headers,HeaderUtilities,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HeaderUtilities.cs,EscapeAsQuotedString,The following statement contains a magic number: var stringBuilder = new InplaceStringBuilder(input.Length + backSlashCount + 2);
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: var tokenChars = new bool[128];
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: for (int i = 33; i < 127; i++) // skip Space (32) & DEL (127)              {                  tokenChars[i] = true;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,CreateTokenChars,The following statement contains a magic number: for (int i = 33; i < 127; i++) // skip Space (32) & DEL (127)              {                  tokenChars[i] = true;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,IsTokenChar,The following statement contains a magic number: if (character > 127)              {                  return false;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == SP) || (c == Tab))                  {                      current++;                      continue;                  }                    if (c == CR)                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == LF))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == SP) || (spaceOrTab == Tab))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == SP) || (c == Tab))                  {                      current++;                      continue;                  }                    if (c == CR)                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == LF))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == SP) || (spaceOrTab == Tab))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetWhitespaceLength,The following statement contains a magic number: while (current < input.Length)              {                  c = input[current];                    if ((c == SP) || (c == Tab))                  {                      current++;                      continue;                  }                    if (c == CR)                  {                      // If we have a #13 char' it must be followed by #10 and then at least one SP or HT.                      if ((current + 2 < input.Length) && (input[current + 1] == LF))                      {                          char spaceOrTab = input[current + 2];                          if ((spaceOrTab == SP) || (spaceOrTab == Tab))                          {                              current += 3;                              continue;                          }                      }                  }                    return current - startIndex;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: if ((startIndex + 2 > input.Length) || (input[startIndex + 1] > 127))              {                  return HttpParseResult.InvalidFormat;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: if ((startIndex + 2 > input.Length) || (input[startIndex + 1] > 127))              {                  return HttpParseResult.InvalidFormat;              }
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetQuotedPairLength,The following statement contains a magic number: length = 2;
Magic Number,Microsoft.Net.Http.Headers,HttpRuleParser,C:\repos\aspnet_HttpAbstractions\src\Microsoft.Net.Http.Headers\HttpRuleParser.cs,GetExpressionLength,The following statement contains a magic number: while (current < input.Length)              {                  // Only check whether we have a quoted char' if we have at least 3 characters left to read (i.e.                  // quoted char + closing char). Otherwise the closing char may be considered part of the quoted char.                  var quotedPairLength = 0;                  if ((current + 2 < input.Length) &&                      (GetQuotedPairLength(input' current' out quotedPairLength) == HttpParseResult.Parsed))                  {                      // We ignore invalid quoted-pairs. Invalid quoted-pairs may mean that it looked like a quoted pair'                      // but we actually have a quoted-string: e.g. "\ü" ('\' followed by a char >127 - quoted-pair only                      // allows ASCII chars after '\'; qdtext allows both '\' and >127 chars).                      current = current + quotedPairLength;                      continue;                  }                    // If we support nested expressions and we find an open-char' then parse the nested expressions.                  if (supportsNesting && (input[current] == openChar))                  {                      nestedCount++;                      try                      {                          // Check if we exceeded the number of nested calls.                          if (nestedCount > MaxNestedCount)                          {                              return HttpParseResult.InvalidFormat;                          }                            var nestedLength = 0;                          HttpParseResult nestedResult = GetExpressionLength(input' current' openChar' closeChar'                              supportsNesting' ref nestedCount' out nestedLength);                            switch (nestedResult)                          {                              case HttpParseResult.Parsed:                                  current += nestedLength; // add the length of the nested expression and continue.                                  break;                                case HttpParseResult.NotParsed:                                  Contract.Assert(false' "'NotParsed' is unexpected: We started nested expression " +                                      "parsing' because we found the open-char. So either it's a valid nested " +                                      "expression or it has invalid format.");                                  break;                                case HttpParseResult.InvalidFormat:                                  // If the nested expression is invalid' we can't continue' so we fail with invalid format.                                  return HttpParseResult.InvalidFormat;                                default:                                  Contract.Assert(false' "Unknown enum result: " + nestedResult);                                  break;                          }                      }                      finally                      {                          nestedCount--;                      }                  }                    if (input[current] == closeChar)                  {                      length = current - startIndex + 1;                      return HttpParseResult.Parsed;                  }                  current++;              }
