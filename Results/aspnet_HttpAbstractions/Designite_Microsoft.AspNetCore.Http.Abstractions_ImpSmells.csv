Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The method has 145 lines of code.
Complex Method,Microsoft.AspNetCore.Http,HostString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\HostString.cs,MatchesAny,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.AspNetCore.Http,PathString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\PathString.cs,ToUriComponent,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.AspNetCore.Routing,RouteValueDictionary,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Routing\RouteValueDictionary.cs,RouteValueDictionary,Cyclomatic complexity of the method is 9
Long Identifier,Microsoft.AspNetCore.Http.Authentication,AuthenticationDescription,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Authentication\AuthenticationDescription.cs,,The length of the parameter AuthenticationSchemePropertyKey is 31.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status407ProxyAuthenticationRequired is 36.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status413RequestEntityTooLarge is 30.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status416RequestedRangeNotSatisfiable is 37.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status419AuthenticationTimeout is 30.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status431RequestHeaderFieldsTooLarge is 36.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status451UnavailableForLegalReasons is 35.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status505HttpVersionNotsupported is 32.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status506VariantAlsoNegotiates is 30.
Long Identifier,Microsoft.AspNetCore.Http,StatusCodes,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\StatusCodes.cs,,The length of the parameter Status511NetworkAuthenticationRequired is 38.
Long Statement,Microsoft.AspNetCore.Http,CookieBuilder,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\CookieBuilder.cs,Build,The length of the statement  "                Secure = SecurePolicy == CookieSecurePolicy.Always || (SecurePolicy == CookieSecurePolicy.SameAsRequest && context.Request.IsHttps)' " is 132.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                    throw new NotSupportedException(Resources.FormatException_UseMiddlewareExplicitArgumentsNotSupported(typeof(IMiddleware))); " is 123.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                    throw new InvalidOperationException(Resources.FormatException_UseMiddleMutlipleInvokes(InvokeMethodName' InvokeAsyncMethodName)); " is 129.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                    throw new InvalidOperationException(Resources.FormatException_UseMiddlewareNoInvokeMethod(InvokeMethodName' InvokeAsyncMethodName' middleware)); " is 144.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                    throw new InvalidOperationException(Resources.FormatException_UseMiddlewareNonTaskReturnType(InvokeMethodName' InvokeAsyncMethodName' nameof(Task))); " is 149.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                    throw new InvalidOperationException(Resources.FormatException_UseMiddlewareNoParameters(InvokeMethodName' InvokeAsyncMethodName' nameof(HttpContext))); " is 151.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddleware,The length of the statement  "                        throw new InvalidOperationException(Resources.FormatException_UseMiddlewareIServiceProviderNotAvailable(nameof(IServiceProvider))); " is 131.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddlewareInterface,The length of the statement  "                        throw new InvalidOperationException(Resources.FormatException_UseMiddlewareNoMiddlewareFactory(typeof(IMiddlewareFactory))); " is 124.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,UseMiddlewareInterface,The length of the statement  "                        throw new InvalidOperationException(Resources.FormatException_UseMiddlewareUnableToCreateMiddleware(middlewareFactory.GetType()' middlewareType)); " is 146.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,Compile,The length of the statement  "            //      return instance.Invoke(httpContext' (ILoggerFactory)UseMiddlewareExtensions.GetService(provider' typeof(ILoggerFactory)); " is 129.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,Compile,The length of the statement  "            //      return ((Middleware)instance).Invoke(httpContext' (ILoggerFactory)UseMiddlewareExtensions.GetService(provider' typeof(ILoggerFactory)); " is 143.
Long Statement,Microsoft.AspNetCore.Builder,UseMiddlewareExtensions,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Extensions\UseMiddlewareExtensions.cs,Compile,The length of the statement  "            var lambda = Expression.Lambda<Func<T' HttpContext' IServiceProvider' Task>>(body' instanceArg' httpContextArg' providerArg); " is 125.
Long Statement,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The length of the statement  "                        Attr attr = char.IsWhiteSpace(ch) ? Attr.Whitespace : ch == '\"' ? Attr.Quote : (ch == ''' || ch == (char)0) ? Attr.Delimiter : Attr.Value; " is 139.
Complex Conditional,Microsoft.AspNetCore.Http,HostString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\HostString.cs,HostString,The conditional expression  "host.IndexOf('[') == -1                  && (index = host.IndexOf(':')) >= 0                  && index < host.Length - 1                  && host.IndexOf(':'' index + 1) >= 0"  is complex.
Complex Conditional,Microsoft.AspNetCore.Http.Internal,ParsingHelpers,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\ParsingHelpers.cs,QuoteIfNeeded,The conditional expression  "!string.IsNullOrEmpty(value) &&                  value.Contains(''') &&                  (value[0] != '"' || value[value.Length - 1] != '"')"  is complex.
Complex Conditional,Microsoft.AspNetCore.Http.Internal,ParsingHelpers,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\ParsingHelpers.cs,DeQuote,The conditional expression  "!string.IsNullOrEmpty(value) &&                  (value.Length > 1 && value[0] == '"' && value[value.Length - 1] == '"')"  is complex.
Magic Number,Microsoft.AspNetCore.Http,PathString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\PathString.cs,ToUriComponent,The following statement contains a magic number: buffer = new StringBuilder(_value.Length * 3);
Magic Number,Microsoft.AspNetCore.Http,PathString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\PathString.cs,ToUriComponent,The following statement contains a magic number: count += 3;
Magic Number,Microsoft.AspNetCore.Http,PathString,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\PathString.cs,ToUriComponent,The following statement contains a magic number: i += 3;
Magic Number,Microsoft.AspNetCore.Http.Internal,HeaderSegment,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegment.cs,GetHashCode,The following statement contains a magic number: return (_formatting.GetHashCode() * 397) ^ _data.GetHashCode();
Magic Number,Microsoft.AspNetCore.Http.Internal,ParsingHelpers,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\ParsingHelpers.cs,DeQuote,The following statement contains a magic number: value = value.Substring(1' value.Length - 2);
Magic Number,Microsoft.AspNetCore.Http.Internal,PathStringHelper,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\PathStringHelper.cs,IsPercentEncodedChar,The following statement contains a magic number: return index < str.Length - 2                  && str[index] == '%'                  && IsHexadecimalChar(str[index + 1])                  && IsHexadecimalChar(str[index + 2]);
Magic Number,Microsoft.AspNetCore.Http.Internal,PathStringHelper,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\PathStringHelper.cs,IsPercentEncodedChar,The following statement contains a magic number: return index < str.Length - 2                  && str[index] == '%'                  && IsHexadecimalChar(str[index + 1])                  && IsHexadecimalChar(str[index + 2]);
Magic Number,Microsoft.AspNetCore.Routing,RouteValueDictionary,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Routing\RouteValueDictionary.cs,EnsureCapacitySlow,The following statement contains a magic number: capacity = _arrayStorage.Length == 0 ? DefaultCapacity : _arrayStorage.Length * 2;
Missing Default,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The following switch statement is missing a default case: switch (_mode)                          {                              case Mode.Leading:                                  switch (attr)                                  {                                      case Attr.Delimiter:                                          _valueStart = _valueStart == -1 ? _offset : _valueStart;                                          _valueEnd = _valueEnd == -1 ? _offset : _valueEnd;                                          _trailingStart = _trailingStart == -1 ? _offset : _trailingStart;                                          _leadingEnd = _offset;                                          _mode = Mode.Produce;                                          break;                                      case Attr.Quote:                                          _leadingEnd = _offset;                                          _valueStart = _offset;                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Value:                                          _leadingEnd = _offset;                                          _valueStart = _offset;                                          _mode = Mode.Value;                                          break;                                      case Attr.Whitespace:                                          // more                                          break;                                  }                                  break;                              case Mode.Value:                                  switch (attr)                                  {                                      case Attr.Quote:                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Delimiter:                                          _valueEnd = _offset;                                          _trailingStart = _offset;                                          _mode = Mode.Produce;                                          break;                                      case Attr.Value:                                          // more                                          break;                                      case Attr.Whitespace:                                          _valueEnd = _offset;                                          _trailingStart = _offset;                                          _mode = Mode.Trailing;                                          break;                                  }                                  break;                              case Mode.ValueQuoted:                                  switch (attr)                                  {                                      case Attr.Quote:                                          _mode = Mode.Value;                                          break;                                      case Attr.Delimiter:                                          if (ch == (char)0)                                          {                                              _valueEnd = _offset;                                              _trailingStart = _offset;                                              _mode = Mode.Produce;                                          }                                          break;                                      case Attr.Value:                                      case Attr.Whitespace:                                          // more                                          break;                                  }                                  break;                              case Mode.Trailing:                                  switch (attr)                                  {                                      case Attr.Delimiter:                                          _mode = Mode.Produce;                                          break;                                      case Attr.Quote:                                          // back into value                                          _trailingStart = -1;                                          _valueEnd = -1;                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Value:                                          // back into value                                          _trailingStart = -1;                                          _valueEnd = -1;                                          _mode = Mode.Value;                                          break;                                      case Attr.Whitespace:                                          // more                                          break;                                  }                                  break;                          }
Missing Default,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The following switch statement is missing a default case: switch (attr)                                  {                                      case Attr.Delimiter:                                          _valueStart = _valueStart == -1 ? _offset : _valueStart;                                          _valueEnd = _valueEnd == -1 ? _offset : _valueEnd;                                          _trailingStart = _trailingStart == -1 ? _offset : _trailingStart;                                          _leadingEnd = _offset;                                          _mode = Mode.Produce;                                          break;                                      case Attr.Quote:                                          _leadingEnd = _offset;                                          _valueStart = _offset;                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Value:                                          _leadingEnd = _offset;                                          _valueStart = _offset;                                          _mode = Mode.Value;                                          break;                                      case Attr.Whitespace:                                          // more                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The following switch statement is missing a default case: switch (attr)                                  {                                      case Attr.Quote:                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Delimiter:                                          _valueEnd = _offset;                                          _trailingStart = _offset;                                          _mode = Mode.Produce;                                          break;                                      case Attr.Value:                                          // more                                          break;                                      case Attr.Whitespace:                                          _valueEnd = _offset;                                          _trailingStart = _offset;                                          _mode = Mode.Trailing;                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The following switch statement is missing a default case: switch (attr)                                  {                                      case Attr.Quote:                                          _mode = Mode.Value;                                          break;                                      case Attr.Delimiter:                                          if (ch == (char)0)                                          {                                              _valueEnd = _offset;                                              _trailingStart = _offset;                                              _mode = Mode.Produce;                                          }                                          break;                                      case Attr.Value:                                      case Attr.Whitespace:                                          // more                                          break;                                  }
Missing Default,Microsoft.AspNetCore.Http.Internal,Enumerator,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Http.Abstractions\Internal\HeaderSegmentCollection.cs,MoveNext,The following switch statement is missing a default case: switch (attr)                                  {                                      case Attr.Delimiter:                                          _mode = Mode.Produce;                                          break;                                      case Attr.Quote:                                          // back into value                                          _trailingStart = -1;                                          _valueEnd = -1;                                          _mode = Mode.ValueQuoted;                                          break;                                      case Attr.Value:                                          // back into value                                          _trailingStart = -1;                                          _valueEnd = -1;                                          _mode = Mode.Value;                                          break;                                      case Attr.Whitespace:                                          // more                                          break;                                  }
