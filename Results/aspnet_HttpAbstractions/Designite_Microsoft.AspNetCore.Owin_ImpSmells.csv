Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNetCore.Owin,OwinEnvironment,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\OwinEnvironment.cs,OwinEnvironment,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.AspNetCore.Owin,FeatureMap,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\OwinEnvironment.cs,FeatureMap,The method has 5 parameters. Parameters: featureInterface' getter' defaultFactory' setter' featureFactory
Long Statement,Microsoft.AspNetCore.Owin,WebSocketAdapter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\WebSockets\WebSocketAdapter.cs,ReceiveAsync,The length of the statement  "                _environment[OwinConstants.WebSocket.ClientCloseStatus] = (int)(nativeResult.CloseStatus ?? WebSocketCloseStatus.NormalClosure); " is 128.
Magic Number,Microsoft.AspNetCore.Owin,OwinEnvironment,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\OwinEnvironment.cs,OwinEnvironment,The following statement contains a magic number: _entries = new Dictionary<string' FeatureMap>()              {                  { OwinConstants.RequestProtocol' new FeatureMap<IHttpRequestFeature>(feature => feature.Protocol' () => string.Empty' (feature' value) => feature.Protocol = Convert.ToString(value)) }'                  { OwinConstants.RequestScheme' new FeatureMap<IHttpRequestFeature>(feature => feature.Scheme' () => string.Empty' (feature' value) => feature.Scheme = Convert.ToString(value)) }'                  { OwinConstants.RequestMethod' new FeatureMap<IHttpRequestFeature>(feature => feature.Method' () => string.Empty' (feature' value) => feature.Method = Convert.ToString(value)) }'                  { OwinConstants.RequestPathBase' new FeatureMap<IHttpRequestFeature>(feature => feature.PathBase' () => string.Empty' (feature' value) => feature.PathBase = Convert.ToString(value)) }'                  { OwinConstants.RequestPath' new FeatureMap<IHttpRequestFeature>(feature => feature.Path' () => string.Empty' (feature' value) => feature.Path = Convert.ToString(value)) }'                  { OwinConstants.RequestQueryString' new FeatureMap<IHttpRequestFeature>(feature => Utilities.RemoveQuestionMark(feature.QueryString)' () => string.Empty'                      (feature' value) => feature.QueryString = Utilities.AddQuestionMark(Convert.ToString(value))) }'                  { OwinConstants.RequestHeaders' new FeatureMap<IHttpRequestFeature>(feature => Utilities.MakeDictionaryStringArray(feature.Headers)' (feature' value) => feature.Headers = Utilities.MakeHeaderDictionary((IDictionary<string' string[]>)value)) }'                  { OwinConstants.RequestBody' new FeatureMap<IHttpRequestFeature>(feature => feature.Body' () => Stream.Null' (feature' value) => feature.Body = (Stream)value) }'                  { OwinConstants.RequestUser' new FeatureMap<IHttpAuthenticationFeature>(feature => feature.User' () => null' (feature' value) => feature.User = (ClaimsPrincipal)value) }'                    { OwinConstants.ResponseStatusCode' new FeatureMap<IHttpResponseFeature>(feature => feature.StatusCode' () => 200' (feature' value) => feature.StatusCode = Convert.ToInt32(value)) }'                  { OwinConstants.ResponseReasonPhrase' new FeatureMap<IHttpResponseFeature>(feature => feature.ReasonPhrase' (feature' value) => feature.ReasonPhrase = Convert.ToString(value)) }'                  { OwinConstants.ResponseHeaders' new FeatureMap<IHttpResponseFeature>(feature => Utilities.MakeDictionaryStringArray(feature.Headers)' (feature' value) => feature.Headers = Utilities.MakeHeaderDictionary((IDictionary<string' string[]>)value)) }'                  { OwinConstants.ResponseBody' new FeatureMap<IHttpResponseFeature>(feature => feature.Body' () => Stream.Null' (feature' value) => feature.Body = (Stream)value) }'                  { OwinConstants.CommonKeys.OnSendingHeaders' new FeatureMap<IHttpResponseFeature>(                      feature => new Action<Action<object>' object>((cb' state) => {                          feature.OnStarting(s =>                          {                              cb(s);                              return Task.CompletedTask;                          }' state);                      }))                  }'                    { OwinConstants.CommonKeys.ConnectionId' new FeatureMap<IHttpConnectionFeature>(feature => feature.ConnectionId'                      (feature' value) => feature.ConnectionId = Convert.ToString(value' CultureInfo.InvariantCulture)) }'                    { OwinConstants.CommonKeys.LocalPort' new FeatureMap<IHttpConnectionFeature>(feature => feature.LocalPort.ToString(CultureInfo.InvariantCulture)'                      (feature' value) => feature.LocalPort = Convert.ToInt32(value' CultureInfo.InvariantCulture)) }'                  { OwinConstants.CommonKeys.RemotePort' new FeatureMap<IHttpConnectionFeature>(feature => feature.RemotePort.ToString(CultureInfo.InvariantCulture)'                      (feature' value) => feature.RemotePort = Convert.ToInt32(value' CultureInfo.InvariantCulture)) }'                    { OwinConstants.CommonKeys.LocalIpAddress' new FeatureMap<IHttpConnectionFeature>(feature => feature.LocalIpAddress.ToString()'                      (feature' value) => feature.LocalIpAddress = IPAddress.Parse(Convert.ToString(value))) }'                  { OwinConstants.CommonKeys.RemoteIpAddress' new FeatureMap<IHttpConnectionFeature>(feature => feature.RemoteIpAddress.ToString()'                      (feature' value) => feature.RemoteIpAddress = IPAddress.Parse(Convert.ToString(value))) }'                    { OwinConstants.SendFiles.SendAsync' new FeatureMap<IHttpSendFileFeature>(feature => new SendFileFunc(feature.SendFileAsync)) }'                    { OwinConstants.Security.User' new FeatureMap<IHttpAuthenticationFeature>(feature => feature.User'                      ()=> null' (feature' value) => feature.User = Utilities.MakeClaimsPrincipal((IPrincipal)value)'                      () => new HttpAuthenticationFeature())                  }'                    { OwinConstants.RequestId' new FeatureMap<IHttpRequestIdentifierFeature>(feature => feature.TraceIdentifier'                      ()=> null' (feature' value) => feature.TraceIdentifier = (string)value'                      () => new HttpRequestIdentifierFeature())                  }              };
Magic Number,Microsoft.AspNetCore.Owin,WebSocketAcceptAdapter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\WebSockets\WebSocketAcceptAdapter.cs,AcceptWebSocket,The following statement contains a magic number: _env[OwinConstants.ResponseStatusCode] = 101;
Magic Number,Microsoft.AspNetCore.Owin,WebSocketAcceptAdapter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\WebSockets\WebSocketAcceptAdapter.cs,AdaptWebSockets,The following statement contains a magic number: return async environment =>              {                  object accept;                  if (environment.TryGetValue(OwinConstants.WebSocket.AcceptAlt' out accept) && accept is WebSocketAcceptAlt)                  {                      var adapter = new WebSocketAcceptAdapter(environment' (WebSocketAcceptAlt)accept);                        environment[OwinConstants.WebSocket.Accept] = new WebSocketAccept(adapter.AcceptWebSocket);                      await next(environment);                      if ((int)environment[OwinConstants.ResponseStatusCode] == 101 && adapter._callback != null)                      {                          WebSocketAcceptContext acceptContext = null;                          object obj;                          if (adapter._options != null && adapter._options.TryGetValue(typeof(WebSocketAcceptContext).FullName' out obj))                          {                              acceptContext = obj as WebSocketAcceptContext;                          }                          else if (adapter._options != null)                          {                              acceptContext = new OwinWebSocketAcceptContext(adapter._options);                          }                            var webSocket = await adapter._accept(acceptContext);                          var webSocketAdapter = new WebSocketAdapter(webSocket' (CancellationToken)environment[OwinConstants.CallCancelled]);                          await adapter._callback(webSocketAdapter.Environment);                          await webSocketAdapter.CleanupAsync();                      }                  }                  else                  {                      await next(environment);                  }              };
Magic Number,Microsoft.AspNetCore.Owin,WebSocketAdapter,D:\research\architectureSmells\repos\aspnet_HttpAbstractions\src\Microsoft.AspNetCore.Owin\WebSockets\WebSocketAdapter.cs,RedirectSendToCloseAsync,The following statement contains a magic number: return CloseAsync(1000' string.Empty' cancel);
