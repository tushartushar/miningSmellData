Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,Read2,Cyclomatic complexity of the method is 10
Complex Method,FaceFusion.Services,AudioManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\AudioManager.cs,UpdateAudioState,Cyclomatic complexity of the method is 22
Complex Method,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,Cyclomatic complexity of the method is 8
Complex Method,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportMesh,Cyclomatic complexity of the method is 11
Complex Method,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,Cyclomatic complexity of the method is 8
Complex Method,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,GetWidthFromColorImageFormat,Cyclomatic complexity of the method is 9
Complex Method,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,Cyclomatic complexity of the method is 10
Long Parameter List,FaceFusion.Services,KinectFrameWorkItem,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\KinectFrameWorkItem.cs,KinectFrameWorkItem,The method has 6 parameters.
Long Parameter List,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,OnFrameReady,The method has 7 parameters.
Long Parameter List,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,OnFrameReadyOverride,The method has 6 parameters.
Long Parameter List,FaceFusion.Services,RegionFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,OnFrameReadyOverride,The method has 6 parameters.
Long Parameter List,FaceFusion.Services,SkeletonFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,OnFrameReadyOverride,The method has 6 parameters.
Long Parameter List,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,SreSpeechRecognized,The method has 6 parameters.
Long Parameter List,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,TrackFrame,The method has 6 parameters.
Long Parameter List,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The method has 11 parameters.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessFusionFrame,The length of the statement  "	if (kinect_format.DepthImageFormat != _currentFormat.DepthImageFormat || kinect_format.ColorImageFormat != _currentFormat.ColorImageFormat) { " is 141.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The length of the statement  "	this.colorFusionBitmap = new WriteableBitmap ((int)depthSize.Width * 2' (int)depthSize.Height * 2' 96.0' 96.0' PixelFormats.Bgr32' null); " is 137.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The length of the statement  "		this.volume = ColorReconstruction.FusionCreateReconstruction (volParam' ProcessorType' DeviceToUse' this.worldToCameraTransform); " is 129.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The length of the statement  "	colorFusionBitmap.WritePixels (new Int32Rect (0' 0' this.colorFusionBitmap.PixelWidth' this.colorFusionBitmap.PixelHeight)' this.colorPixels' this.colorFusionBitmap.PixelWidth * sizeof(int)' 0); " is 194.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The length of the statement  "	if (_residualWritableBitmap == null || _residualWritableBitmap.PixelWidth != (int)depthSize.Width || _residualWritableBitmap.PixelHeight != (int)depthSize.Height) { " is 164.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The length of the statement  "		_residualWritableBitmap = new WriteableBitmap ((int)depthSize.Width' (int)depthSize.Height' 96' 96' PixelFormats.Bgr32' null); " is 126.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The length of the statement  "	_residualWritableBitmap.WritePixels (new Int32Rect (0' 0' _residualWritableBitmap.PixelWidth' _residualWritableBitmap.PixelHeight)' _residualImageData' _residualWritableBitmap.PixelWidth * sizeof(int)' 0); " is 205.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The length of the statement  "	this.AlignmentEnergyString = "Alignment Energy: " + _alignmentEnergy.ToString ("F3") + " Avg Residual: " + _averageResidual.ToString ("F3"); " is 140.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The length of the statement  "	FusionDepthProcessor.DepthToDepthFloatFrame (depthPixels' (int)depthSize.Width' (int)depthSize.Height' this.depthFloatBuffer' FusionDepthProcessor.DefaultMinimumDepth' FusionDepthProcessor.DefaultMaximumDepth' false); " is 217.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The length of the statement  "	bool trackingSucceeded = this.volume.AlignDepthFloatToReconstruction (depthFloatBuffer' FusionDepthProcessor.DefaultAlignIterationCount' residualFloatBuffer' out _alignmentEnergy' volume.GetCurrentWorldToCameraTransform ()); " is 224.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The length of the statement  "				this.volume.IntegrateFrame (depthFloatBuffer' frame' FusionDepthProcessor.DefaultIntegrationWeight' colorIntegrationAngle' this.worldToCameraTransform); " is 152.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,RenderFusion,The length of the statement  "	FusionDepthProcessor.ShadePointCloud (this.pointCloudBuffer' viewCam' worldToBGRTransform' null' this.shadedSurfaceColorFrame); " is 127.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The length of the statement  "	if (0 == vertices.Count || 0 != vertices.Count % 3 || vertices.Count != indices.Count || (outputColor && vertices.Count != colors.Count)) { " is 139.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The length of the statement  "			vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture); " is 124.
Long Statement,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The length of the statement  "			vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture); " is 167.
Long Statement,FaceFusion.Services,KinectFrameWorkItem,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\KinectFrameWorkItem.cs,Create,The length of the statement  "	return new KinectFrameWorkItem (format' depthPixels' colorPixels' skeletons' colorMappedToDepthPoints' mappedColorImageData); " is 125.
Long Statement,FaceFusion.Services,RegionFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,OnFrameReadyOverride,The length of the statement  "		FaceTrackFrame frame = this.faceTracker.Track (colorImageFormat' colorImage' depthImageFormat' shortImage' this.FaceRect); " is 122.
Long Statement,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,GetKinectRecognizer,The length of the statement  "		return "True".Equals (value' StringComparison.InvariantCultureIgnoreCase) && "en-US".Equals (r.Culture.Name' StringComparison.InvariantCultureIgnoreCase); " is 154.
Long Statement,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,InitializeSpeechRecognition,The length of the statement  "Ensure you have the Microsoft Speech SDK installed."' "Failed to load Speech SDK"' MessageBoxButton.OK' MessageBoxImage.Error); " is 127.
Long Statement,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,InitializeSpeechRecognition,The length of the statement  "Ensure you have the Microsoft Speech SDK installed and configured."' "Failed to load Speech SDK"' MessageBoxButton.OK' MessageBoxImage.Error); " is 142.
Long Statement,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,StartSpeechRecognition,The length of the statement  "	speechRecognizer.SetInputToAudioStream (kinectStream' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null)); " is 132.
Long Statement,FaceFusion.Extensions,MatrixExtensions,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Extensions\MatrixExtensions.cs,ToMatrix3D,The length of the statement  "	System.Windows.Media.Media3D.Matrix3D m = new System.Windows.Media.Media3D.Matrix3D (mat.M11' mat.M12' mat.M13' mat.M14' mat.M21' mat.M22' mat.M23' mat.M24' mat.M31' mat.M32' mat.M33' mat.M34' mat.M41' mat.M42' mat.M43' mat.M44); " is 229.
Long Statement,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,TrackFrame,The length of the statement  "		if (skeleton.TrackingState == SkeletonTrackingState.Tracked || skeleton.TrackingState == SkeletonTrackingState.PositionOnly) { " is 126.
Long Statement,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,TrackFrame,The length of the statement  "				skeletonFaceTracker.OnFrameReady (this.Kinect' colorImageFormat' colorImage' depthImageFormat' depthImage' null' skeleton); " is 123.
Long Statement,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,Init,The length of the statement  "	_kinectFrameWorkItemPool = new Pool<KinectFrameWorkItem' KinectFormat> (5' _currentKinectFormat' KinectFrameWorkItem.Create); " is 125.
Long Statement,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The length of the statement  "			mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints); " is 164.
Long Statement,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,UpdateKinectFrameUI,The length of the statement  "	_depthImageWritableBitmap.WritePixels (new Int32Rect (0' 0' _depthImageWritableBitmap.PixelWidth' _depthImageWritableBitmap.PixelHeight)' _depthImageData' _depthImageWritableBitmap.PixelWidth * 4' 0); " is 200.
Long Statement,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,UpdateKinectFrameUI,The length of the statement  "	_colorImageWritableBitmap.WritePixels (new Int32Rect (0' 0' _colorImageWritableBitmap.PixelWidth' _colorImageWritableBitmap.PixelHeight)' item.MappedColorImageData' _colorImageWritableBitmap.PixelWidth * 4' 0); " is 210.
Long Statement,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessSkeletonFrame,The length of the statement  "	var closestSkeleton = skeletonList.Where (s => s.TrackingState == SkeletonTrackingState.Tracked).OrderBy (s => s.Position.Z * Math.Abs (s.Position.X)).FirstOrDefault (); " is 169.
Complex Conditional,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The conditional expression  "0 == vertices.Count || 0 != vertices.Count % 3 || vertices.Count != indices.Count || (outputColor && vertices.Count != colors.Count)"  is complex.
Complex Conditional,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessColorFrame,The conditional expression  "cx >= 0 && cx < depthWidth && cy >= 0 && cy < depthHeight"  is complex.
Empty Catch Block,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The method has an empty catch block.
Magic Number,FaceFusion.Services,WaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,Read,The following statement contains a magic number: return samplesRead * 4;  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetFrequencyForSemitone,The following statement contains a magic number: return 440.0 * Math.Pow (2' (semitone - 69) / 12.0);  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetFrequencyForSemitone,The following statement contains a magic number: return 440.0 * Math.Pow (2' (semitone - 69) / 12.0);  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetFrequencyForSemitone,The following statement contains a magic number: return 440.0 * Math.Pow (2' (semitone - 69) / 12.0);  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetFrequencyForSemitone,The following statement contains a magic number: return 440.0 * Math.Pow (2' (semitone - 69) / 12.0);  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetSinValue,The following statement contains a magic number: PhaseAngle += (2 * Math.PI * freq) / sampleRate;  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetSinValue,The following statement contains a magic number: if (PhaseAngle > 2 * Math.PI)  	PhaseAngle -= 2 * Math.PI;  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetSinValue,The following statement contains a magic number: if (PhaseAngle > 2 * Math.PI)  	PhaseAngle -= 2 * Math.PI;  
Magic Number,FaceFusion.Services,Tone,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,GetSinValue,The following statement contains a magic number: PhaseAngle -= 2 * Math.PI;  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,SineWaveProvider32,The following statement contains a magic number: ActualSemitone = 60;  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,SineWaveProvider32,The following statement contains a magic number: Semitone = 60;  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _rootTones.Add (new Tone (12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 0' 1.0));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 0' 1.0));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _errorChordTones.Add (new Tone (-2 + 4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 0' 1.0));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (4 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 0' 1.0));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12' 0.5));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 7' 0.45));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12' 0.4));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 4' 0.35));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 7' 0.3));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,SineWaveProvider32,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,InitTones,The following statement contains a magic number: _triadChordTones.Add (new Tone (7 + 12 + 12 + 10' 0.25));  
Magic Number,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,WriteSamplesToBuffer,The following statement contains a magic number: if (isBackwardsLoop) {  	for (int i = 0; i < samplesRead - 1; i += 2) {  		int j = samplesRead - 2 - i;  		float sample = overlapBuffer [j];  		buffer [i + offset] = sample;  		writer.WriteSample (sample);  		sample = overlapBuffer [j + 1];  		buffer [i + offset + 1] = sample;  		writer.WriteSample (sample);  	}  }  else {  	for (int i = 0; i < samplesRead; i++) {  		buffer [i + offset] = overlapBuffer [i];  	}  	writer.WriteSamples (overlapBuffer' 0' samplesRead);  }  
Magic Number,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,WriteSamplesToBuffer,The following statement contains a magic number: if (isBackwardsLoop) {  	for (int i = 0; i < samplesRead - 1; i += 2) {  		int j = samplesRead - 2 - i;  		float sample = overlapBuffer [j];  		buffer [i + offset] = sample;  		writer.WriteSample (sample);  		sample = overlapBuffer [j + 1];  		buffer [i + offset + 1] = sample;  		writer.WriteSample (sample);  	}  }  else {  	for (int i = 0; i < samplesRead; i++) {  		buffer [i + offset] = overlapBuffer [i];  	}  	writer.WriteSamples (overlapBuffer' 0' samplesRead);  }  
Magic Number,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,WriteSamplesToBuffer,The following statement contains a magic number: for (int i = 0; i < samplesRead - 1; i += 2) {  	int j = samplesRead - 2 - i;  	float sample = overlapBuffer [j];  	buffer [i + offset] = sample;  	writer.WriteSample (sample);  	sample = overlapBuffer [j + 1];  	buffer [i + offset + 1] = sample;  	writer.WriteSample (sample);  }  
Magic Number,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,WriteSamplesToBuffer,The following statement contains a magic number: for (int i = 0; i < samplesRead - 1; i += 2) {  	int j = samplesRead - 2 - i;  	float sample = overlapBuffer [j];  	buffer [i + offset] = sample;  	writer.WriteSample (sample);  	sample = overlapBuffer [j + 1];  	buffer [i + offset + 1] = sample;  	writer.WriteSample (sample);  }  
Magic Number,FaceFusion.Services,LoopStream,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\Audio.cs,WriteSamplesToBuffer,The following statement contains a magic number: i += 2
Magic Number,FaceFusion.Services,AudioManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\AudioManager.cs,AudioManager,The following statement contains a magic number: _sineGenerator.SetWaveFormat (16000' 1);  
Magic Number,FaceFusion.Services,AudioManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\AudioManager.cs,AudioManager,The following statement contains a magic number: _chordTimer.Interval = TimeSpan.FromSeconds (0.5);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: switch (imageFormat) {  case ColorImageFormat.InfraredResolution640x480Fps30:  case ColorImageFormat.RawBayerResolution640x480Fps30:  case ColorImageFormat.RawYuvResolution640x480Fps15:  case ColorImageFormat.RgbResolution640x480Fps30:  case ColorImageFormat.YuvResolution640x480Fps15:  	return new Size (640' 480);  case ColorImageFormat.RawBayerResolution1280x960Fps12:  case ColorImageFormat.RgbResolution1280x960Fps12:  	return new Size (1280' 960);  case ColorImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: switch (imageFormat) {  case ColorImageFormat.InfraredResolution640x480Fps30:  case ColorImageFormat.RawBayerResolution640x480Fps30:  case ColorImageFormat.RawYuvResolution640x480Fps15:  case ColorImageFormat.RgbResolution640x480Fps30:  case ColorImageFormat.YuvResolution640x480Fps15:  	return new Size (640' 480);  case ColorImageFormat.RawBayerResolution1280x960Fps12:  case ColorImageFormat.RgbResolution1280x960Fps12:  	return new Size (1280' 960);  case ColorImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: switch (imageFormat) {  case ColorImageFormat.InfraredResolution640x480Fps30:  case ColorImageFormat.RawBayerResolution640x480Fps30:  case ColorImageFormat.RawYuvResolution640x480Fps15:  case ColorImageFormat.RgbResolution640x480Fps30:  case ColorImageFormat.YuvResolution640x480Fps15:  	return new Size (640' 480);  case ColorImageFormat.RawBayerResolution1280x960Fps12:  case ColorImageFormat.RgbResolution1280x960Fps12:  	return new Size (1280' 960);  case ColorImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: switch (imageFormat) {  case ColorImageFormat.InfraredResolution640x480Fps30:  case ColorImageFormat.RawBayerResolution640x480Fps30:  case ColorImageFormat.RawYuvResolution640x480Fps15:  case ColorImageFormat.RgbResolution640x480Fps30:  case ColorImageFormat.YuvResolution640x480Fps15:  	return new Size (640' 480);  case ColorImageFormat.RawBayerResolution1280x960Fps12:  case ColorImageFormat.RgbResolution1280x960Fps12:  	return new Size (1280' 960);  case ColorImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: return new Size (640' 480);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: return new Size (640' 480);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: return new Size (1280' 960);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following statement contains a magic number: return new Size (1280' 960);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (320' 240);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (320' 240);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (640' 480);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (640' 480);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (80' 60);  
Magic Number,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following statement contains a magic number: return new Size (80' 60);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ResetReconstruction,The following statement contains a magic number: if (null != this.volume) {  	// Translate the reconstruction volume location  	if (this.translateResetPose) {  		Matrix4 worldToVolumeTransform = this.defaultWorldToVolumeTransform;  		// Translate the volume in the Z axis by the minDepthThreshold distance  		float minDist = (this.minDepthClip < this.maxDepthClip) ? this.minDepthClip : this.maxDepthClip;  		double volumeSizeZ = (VoxelResolutionZ / (double)VoxelsPerMeter);  		worldToVolumeTransform.M41 += (float)(volumeCenter.X * VoxelsPerMeter);  		worldToVolumeTransform.M42 += (float)(volumeCenter.Y * VoxelsPerMeter);  		worldToVolumeTransform.M43 -= (float)((volumeCenter.Z - 0.5 * volumeSizeZ) * VoxelsPerMeter);  		Trace.WriteLine ("Reset reconstruction at center: " + volumeCenter.X + "' " + volumeCenter.Y + " " + volumeCenter.Z);  		this.volume.ResetReconstruction (this.worldToCameraTransform' worldToVolumeTransform);  	}  	else {  		this.volume.ResetReconstruction (this.worldToCameraTransform);  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ResetReconstruction,The following statement contains a magic number: if (this.translateResetPose) {  	Matrix4 worldToVolumeTransform = this.defaultWorldToVolumeTransform;  	// Translate the volume in the Z axis by the minDepthThreshold distance  	float minDist = (this.minDepthClip < this.maxDepthClip) ? this.minDepthClip : this.maxDepthClip;  	double volumeSizeZ = (VoxelResolutionZ / (double)VoxelsPerMeter);  	worldToVolumeTransform.M41 += (float)(volumeCenter.X * VoxelsPerMeter);  	worldToVolumeTransform.M42 += (float)(volumeCenter.Y * VoxelsPerMeter);  	worldToVolumeTransform.M43 -= (float)((volumeCenter.Z - 0.5 * volumeSizeZ) * VoxelsPerMeter);  	Trace.WriteLine ("Reset reconstruction at center: " + volumeCenter.X + "' " + volumeCenter.Y + " " + volumeCenter.Z);  	this.volume.ResetReconstruction (this.worldToCameraTransform' worldToVolumeTransform);  }  else {  	this.volume.ResetReconstruction (this.worldToCameraTransform);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ResetReconstruction,The following statement contains a magic number: worldToVolumeTransform.M43 -= (float)((volumeCenter.Z - 0.5 * volumeSizeZ) * VoxelsPerMeter);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessFusionFrame,The following statement contains a magic number: if (kinect_format.DepthImageFormat != _currentFormat.DepthImageFormat || kinect_format.ColorImageFormat != _currentFormat.ColorImageFormat) {  	_currentFormat = kinect_format;  	_fusionWorkItemPool.Format = kinect_format;  	_residualImageData = new byte[depthPixels.Length * 4];  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessFusionFrame,The following statement contains a magic number: _residualImageData = new byte[depthPixels.Length * 4];  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: _fusionWorkItemPool = new Pool<FusionWorkItem' KinectFormat> (5' kinectFormat' FusionWorkItem.Create);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: _fusionWorkQueue = new WorkQueue<FusionWorkItem> (ProcessFusionFrameBackground) {  	CanceledCallback = ReturnFusionWorkItem'  	MaxQueueLength = 2  };  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorPixels = new int[(int)(depthSize.Width * 2 * depthSize.Height * 2)];  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorPixels = new int[(int)(depthSize.Width * 2 * depthSize.Height * 2)];  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorFusionBitmap = new WriteableBitmap ((int)depthSize.Width * 2' (int)depthSize.Height * 2' 96.0' 96.0' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorFusionBitmap = new WriteableBitmap ((int)depthSize.Width * 2' (int)depthSize.Height * 2' 96.0' 96.0' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorFusionBitmap = new WriteableBitmap ((int)depthSize.Width * 2' (int)depthSize.Height * 2' 96.0' 96.0' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.colorFusionBitmap = new WriteableBitmap ((int)depthSize.Width * 2' (int)depthSize.Height * 2' 96.0' 96.0' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.pointCloudBuffer = new FusionPointCloudImageFrame ((int)depthSize.Width * 2' (int)depthSize.Height * 2);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.pointCloudBuffer = new FusionPointCloudImageFrame ((int)depthSize.Width * 2' (int)depthSize.Height * 2);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.shadedSurfaceColorFrame = new FusionColorImageFrame ((int)depthSize.Width * 2' (int)depthSize.Height * 2);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,InitFusion,The following statement contains a magic number: this.shadedSurfaceColorFrame = new FusionColorImageFrame ((int)depthSize.Width * 2' (int)depthSize.Height * 2);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The following statement contains a magic number: if (_residualWritableBitmap == null || _residualWritableBitmap.PixelWidth != (int)depthSize.Width || _residualWritableBitmap.PixelHeight != (int)depthSize.Height) {  	_residualWritableBitmap = new WriteableBitmap ((int)depthSize.Width' (int)depthSize.Height' 96' 96' PixelFormats.Bgr32' null);  	ResidualImage = _residualWritableBitmap;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The following statement contains a magic number: if (_residualWritableBitmap == null || _residualWritableBitmap.PixelWidth != (int)depthSize.Width || _residualWritableBitmap.PixelHeight != (int)depthSize.Height) {  	_residualWritableBitmap = new WriteableBitmap ((int)depthSize.Width' (int)depthSize.Height' 96' 96' PixelFormats.Bgr32' null);  	ResidualImage = _residualWritableBitmap;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The following statement contains a magic number: _residualWritableBitmap = new WriteableBitmap ((int)depthSize.Width' (int)depthSize.Height' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,FusionUpdateUI,The following statement contains a magic number: _residualWritableBitmap = new WriteableBitmap ((int)depthSize.Width' (int)depthSize.Height' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessFusionFrameBackground,The following statement contains a magic number: try {  	DepthImagePixel[] depthPixels = workItem.data;  	byte[] colorPixels = workItem.colordata;  	bool trackingSucceeded = false;  	if (!IsIntegrationPaused) {  		trackingSucceeded = TrackIntegrate (depthPixels' workItem.colordata' workItem.Format);  	}  	if (ProcessedFrameCount % 2 == 0) {  		RenderFusion ();  	}  	// The input frame was processed successfully' increase the processed frame count  	++this.ProcessedFrameCount;  	//Console.WriteLine("ohohoh!pushed item !");  	_fusionWorkItemPool.Push (workItem);  	_syncContext.Post ((SendOrPostCallback)FusionUpdateUI' trackingSucceeded);  	//return trackingSucceeded;  }  catch (InvalidOperationException ex) {  	FusionStatusMessage = ex.Message;  	//return false;  }  finally {  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessFusionFrameBackground,The following statement contains a magic number: if (ProcessedFrameCount % 2 == 0) {  	RenderFusion ();  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The following statement contains a magic number: if (!trackingSucceeded) {  	this.trackingErrorCount++;  	// Show tracking error on status bar  	FusionStatusMessage = Properties.Resources.CameraTrackingFailed;  	_audioManager.State = AudioState.Error;  }  else {  	ProcessResidualImage ();  	this.worldToCameraTransform = volume.GetCurrentWorldToCameraTransform ();  	if (!IsIntegrationPaused) {  		if (IntegratingColor) {  			FusionColorImageFrame frame = new FusionColorImageFrame ((int)colorSize.Width' (int)colorSize.Height);  			Single colorIntegrationAngle = 10.0f;  			int[] intColorPixels = new int[colorPixels.Length / 4];  			Buffer.BlockCopy (colorPixels' 0' intColorPixels' 0' colorPixels.Length);  			frame.CopyPixelDataFrom (intColorPixels);  			this.volume.IntegrateFrame (depthFloatBuffer' frame' FusionDepthProcessor.DefaultIntegrationWeight' colorIntegrationAngle' this.worldToCameraTransform);  		}  		else {  			this.volume.IntegrateFrame (depthFloatBuffer' IntegrationWeight' this.worldToCameraTransform);  		}  	}  	this.trackingErrorCount = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The following statement contains a magic number: if (!IsIntegrationPaused) {  	if (IntegratingColor) {  		FusionColorImageFrame frame = new FusionColorImageFrame ((int)colorSize.Width' (int)colorSize.Height);  		Single colorIntegrationAngle = 10.0f;  		int[] intColorPixels = new int[colorPixels.Length / 4];  		Buffer.BlockCopy (colorPixels' 0' intColorPixels' 0' colorPixels.Length);  		frame.CopyPixelDataFrom (intColorPixels);  		this.volume.IntegrateFrame (depthFloatBuffer' frame' FusionDepthProcessor.DefaultIntegrationWeight' colorIntegrationAngle' this.worldToCameraTransform);  	}  	else {  		this.volume.IntegrateFrame (depthFloatBuffer' IntegrationWeight' this.worldToCameraTransform);  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,TrackIntegrate,The following statement contains a magic number: if (IntegratingColor) {  	FusionColorImageFrame frame = new FusionColorImageFrame ((int)colorSize.Width' (int)colorSize.Height);  	Single colorIntegrationAngle = 10.0f;  	int[] intColorPixels = new int[colorPixels.Length / 4];  	Buffer.BlockCopy (colorPixels' 0' intColorPixels' 0' colorPixels.Length);  	frame.CopyPixelDataFrom (intColorPixels);  	this.volume.IntegrateFrame (depthFloatBuffer' frame' FusionDepthProcessor.DefaultIntegrationWeight' colorIntegrationAngle' this.worldToCameraTransform);  }  else {  	this.volume.IntegrateFrame (depthFloatBuffer' IntegrationWeight' this.worldToCameraTransform);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,RenderFusion,The following statement contains a magic number: m.Translate (new Vector3D (0' 0' 1.75 * zSize));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	float data = _residualData [i];  	if (data <= 1.0) {  		newAvgResidual += Math.Abs (data);  		avgCount++;  		_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  		_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  		_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  	}  	else {  		_residualImageData [i * 4 + 0] = 0;  		_residualImageData [i * 4 + 1] = 0;  		_residualImageData [i * 4 + 2] = 0;  	}  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (data <= 1.0) {  	newAvgResidual += Math.Abs (data);  	avgCount++;  	_residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  	_residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  	_residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  }  else {  	_residualImageData [i * 4 + 0] = 0;  	_residualImageData [i * 4 + 1] = 0;  	_residualImageData [i * 4 + 2] = 0;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 0] = (byte)(255 * MathUtility.Clamp (1 - data' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 1] = (byte)(255 * MathUtility.Clamp (1 - Math.Abs (data)' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 2] = (byte)(255 * MathUtility.Clamp (1 + data' 0' 1));  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 0] = 0;  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 1] = 0;  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 2] = 0;  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: _residualImageData [i * 4 + 2] = 0;  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (avgCount > 0) {  	newAvgResidual /= avgCount;  	_alignmentEnergy = newAvgResidual;  	double rootTone = 60;  	_averageResidual += (newAvgResidual - _averageResidual) * 0.1f;  	if (_averageResidual < 0.1) {  		_audioManager.Semitone = rootTone;  		_audioManager.State = AudioState.Chord;  	}  	else {  		_audioManager.State = AudioState.SlidingNote;  		double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  		rootTone += offsetTone;  		_audioManager.Semitone = rootTone;  	}  }  else {  	_audioManager.State = AudioState.None;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (_averageResidual < 0.1) {  	_audioManager.Semitone = rootTone;  	_audioManager.State = AudioState.Chord;  }  else {  	_audioManager.State = AudioState.SlidingNote;  	double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  	rootTone += offsetTone;  	_audioManager.Semitone = rootTone;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (_averageResidual < 0.1) {  	_audioManager.Semitone = rootTone;  	_audioManager.State = AudioState.Chord;  }  else {  	_audioManager.State = AudioState.SlidingNote;  	double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  	rootTone += offsetTone;  	_audioManager.Semitone = rootTone;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (_averageResidual < 0.1) {  	_audioManager.Semitone = rootTone;  	_audioManager.State = AudioState.Chord;  }  else {  	_audioManager.State = AudioState.SlidingNote;  	double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  	rootTone += offsetTone;  	_audioManager.Semitone = rootTone;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (_averageResidual < 0.1) {  	_audioManager.Semitone = rootTone;  	_audioManager.State = AudioState.Chord;  }  else {  	_audioManager.State = AudioState.SlidingNote;  	double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  	rootTone += offsetTone;  	_audioManager.Semitone = rootTone;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ProcessResidualImage,The following statement contains a magic number: if (_averageResidual < 0.1) {  	_audioManager.Semitone = rootTone;  	_audioManager.State = AudioState.Chord;  }  else {  	_audioManager.State = AudioState.SlidingNote;  	double offsetTone = MathUtility.Clamp (MathUtility.MapValue (_averageResidual' 0.16' 0.1' -16' 0)' -16' 0);  	rootTone += offsetTone;  	_audioManager.Semitone = rootTone;  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (0 == vertices.Count || 0 != vertices.Count % 3 || vertices.Count != indices.Count || (outputColor && vertices.Count != colors.Count)) {  	throw new ArgumentException ("Invalid mesh arguments. Saving mesh process aborted");  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < vertices.Count; i++) {  	var vertex = vertices [i];  	string vertexString = vertex.X.ToString (CultureInfo.CurrentCulture) + " ";  	if (flipAxes) {  		vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture);  	}  	else {  		vertexString += vertex.Y.ToString (CultureInfo.CurrentCulture) + " " + vertex.Z.ToString (CultureInfo.CurrentCulture);  	}  	if (outputColor) {  		int red = (colors [i] >> 16) & 255;  		int green = (colors [i] >> 8) & 255;  		int blue = colors [i] & 255;  		vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  	}  	writer.WriteLine (vertexString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < vertices.Count; i++) {  	var vertex = vertices [i];  	string vertexString = vertex.X.ToString (CultureInfo.CurrentCulture) + " ";  	if (flipAxes) {  		vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture);  	}  	else {  		vertexString += vertex.Y.ToString (CultureInfo.CurrentCulture) + " " + vertex.Z.ToString (CultureInfo.CurrentCulture);  	}  	if (outputColor) {  		int red = (colors [i] >> 16) & 255;  		int green = (colors [i] >> 8) & 255;  		int blue = colors [i] & 255;  		vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  	}  	writer.WriteLine (vertexString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < vertices.Count; i++) {  	var vertex = vertices [i];  	string vertexString = vertex.X.ToString (CultureInfo.CurrentCulture) + " ";  	if (flipAxes) {  		vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture);  	}  	else {  		vertexString += vertex.Y.ToString (CultureInfo.CurrentCulture) + " " + vertex.Z.ToString (CultureInfo.CurrentCulture);  	}  	if (outputColor) {  		int red = (colors [i] >> 16) & 255;  		int green = (colors [i] >> 8) & 255;  		int blue = colors [i] & 255;  		vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  	}  	writer.WriteLine (vertexString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < vertices.Count; i++) {  	var vertex = vertices [i];  	string vertexString = vertex.X.ToString (CultureInfo.CurrentCulture) + " ";  	if (flipAxes) {  		vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture);  	}  	else {  		vertexString += vertex.Y.ToString (CultureInfo.CurrentCulture) + " " + vertex.Z.ToString (CultureInfo.CurrentCulture);  	}  	if (outputColor) {  		int red = (colors [i] >> 16) & 255;  		int green = (colors [i] >> 8) & 255;  		int blue = colors [i] & 255;  		vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  	}  	writer.WriteLine (vertexString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < vertices.Count; i++) {  	var vertex = vertices [i];  	string vertexString = vertex.X.ToString (CultureInfo.CurrentCulture) + " ";  	if (flipAxes) {  		vertexString += (-vertex.Y).ToString (CultureInfo.CurrentCulture) + " " + (-vertex.Z).ToString (CultureInfo.CurrentCulture);  	}  	else {  		vertexString += vertex.Y.ToString (CultureInfo.CurrentCulture) + " " + vertex.Z.ToString (CultureInfo.CurrentCulture);  	}  	if (outputColor) {  		int red = (colors [i] >> 16) & 255;  		int green = (colors [i] >> 8) & 255;  		int blue = colors [i] & 255;  		vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  	}  	writer.WriteLine (vertexString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (outputColor) {  	int red = (colors [i] >> 16) & 255;  	int green = (colors [i] >> 8) & 255;  	int blue = colors [i] & 255;  	vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (outputColor) {  	int red = (colors [i] >> 16) & 255;  	int green = (colors [i] >> 8) & 255;  	int blue = colors [i] & 255;  	vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (outputColor) {  	int red = (colors [i] >> 16) & 255;  	int green = (colors [i] >> 8) & 255;  	int blue = colors [i] & 255;  	vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (outputColor) {  	int red = (colors [i] >> 16) & 255;  	int green = (colors [i] >> 8) & 255;  	int blue = colors [i] & 255;  	vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: if (outputColor) {  	int red = (colors [i] >> 16) & 255;  	int green = (colors [i] >> 8) & 255;  	int blue = colors [i] & 255;  	vertexString += " " + red.ToString (CultureInfo.CurrentCulture) + " " + green.ToString (CultureInfo.CurrentCulture) + " " + blue.ToString (CultureInfo.CurrentCulture);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < faces; i++) {  	string baseIndex0 = (i * 3).ToString (CultureInfo.CurrentCulture);  	string baseIndex1 = ((i * 3) + 1).ToString (CultureInfo.CurrentCulture);  	string baseIndex2 = ((i * 3) + 2).ToString (CultureInfo.CurrentCulture);  	string faceString = "3 " + baseIndex0 + " " + baseIndex1 + " " + baseIndex2;  	writer.WriteLine (faceString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < faces; i++) {  	string baseIndex0 = (i * 3).ToString (CultureInfo.CurrentCulture);  	string baseIndex1 = ((i * 3) + 1).ToString (CultureInfo.CurrentCulture);  	string baseIndex2 = ((i * 3) + 2).ToString (CultureInfo.CurrentCulture);  	string faceString = "3 " + baseIndex0 + " " + baseIndex1 + " " + baseIndex2;  	writer.WriteLine (faceString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < faces; i++) {  	string baseIndex0 = (i * 3).ToString (CultureInfo.CurrentCulture);  	string baseIndex1 = ((i * 3) + 1).ToString (CultureInfo.CurrentCulture);  	string baseIndex2 = ((i * 3) + 2).ToString (CultureInfo.CurrentCulture);  	string faceString = "3 " + baseIndex0 + " " + baseIndex1 + " " + baseIndex2;  	writer.WriteLine (faceString);  }  
Magic Number,FaceFusion.Services,FusionManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FusionManager.cs,ExportColorMesh,The following statement contains a magic number: for (int i = 0; i < faces; i++) {  	string baseIndex0 = (i * 3).ToString (CultureInfo.CurrentCulture);  	string baseIndex1 = ((i * 3) + 1).ToString (CultureInfo.CurrentCulture);  	string baseIndex2 = ((i * 3) + 2).ToString (CultureInfo.CurrentCulture);  	string faceString = "3 " + baseIndex0 + " " + baseIndex1 + " " + baseIndex2;  	writer.WriteLine (faceString);  }  
Magic Number,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,GetWidthFromColorImageFormat,The following statement contains a magic number: switch (format) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.RawYuvResolution640x480Fps15:  case Microsoft.Kinect.ColorImageFormat.RawBayerResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.InfraredResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.YuvResolution640x480Fps15:  	return 640;  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  case Microsoft.Kinect.ColorImageFormat.RawBayerResolution1280x960Fps12:  	return 1280;  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,GetWidthFromColorImageFormat,The following statement contains a magic number: switch (format) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.RawYuvResolution640x480Fps15:  case Microsoft.Kinect.ColorImageFormat.RawBayerResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.InfraredResolution640x480Fps30:  case Microsoft.Kinect.ColorImageFormat.YuvResolution640x480Fps15:  	return 640;  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  case Microsoft.Kinect.ColorImageFormat.RawBayerResolution1280x960Fps12:  	return 1280;  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,GetWidthFromColorImageFormat,The following statement contains a magic number: return 640;  
Magic Number,FaceFusion.Services,FaceTrackerBase,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,GetWidthFromColorImageFormat,The following statement contains a magic number: return 1280;  
Magic Number,FaceFusion.Services,SkeletonFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,DrawOverride,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (_headPoint.X' _headPoint.Y)' 4' 4);  
Magic Number,FaceFusion.Services,SkeletonFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,DrawOverride,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (_headPoint.X' _headPoint.Y)' 4' 4);  
Magic Number,FaceFusion.Services,SkeletonFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,DrawOverride,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (_neckPoint.X' _neckPoint.Y)' 4' 4);  
Magic Number,FaceFusion.Services,SkeletonFaceTracker,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\SkeletonFaceTracker.cs,DrawOverride,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (_neckPoint.X' _neckPoint.Y)' 4' 4);  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,InitializeSpeechRecognition,The following statement contains a magic number: this.readyTimer.Interval = new TimeSpan (0' 0' 4);  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,StartSpeechRecognition,The following statement contains a magic number: speechRecognizer.SetInputToAudioStream (kinectStream' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,StartSpeechRecognition,The following statement contains a magic number: speechRecognizer.SetInputToAudioStream (kinectStream' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,StartSpeechRecognition,The following statement contains a magic number: speechRecognizer.SetInputToAudioStream (kinectStream' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,StartSpeechRecognition,The following statement contains a magic number: speechRecognizer.SetInputToAudioStream (kinectStream' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,FaceFusion.Services,VoiceCommand,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\VoiceCommand.cs,SreSpeechRecognized,The following statement contains a magic number: if (e.Result.Confidence < 0.70) {  	Trace.WriteLine ("\nSpeech Rejected filtered' confidence: " + e.Result.Confidence);  	return;  }  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: switch (colorImageFormat) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  	return new DepthImagePoint[640 * 480];  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  	return new DepthImagePoint[1280 * 960];  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: switch (colorImageFormat) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  	return new DepthImagePoint[640 * 480];  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  	return new DepthImagePoint[1280 * 960];  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: switch (colorImageFormat) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  	return new DepthImagePoint[640 * 480];  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  	return new DepthImagePoint[1280 * 960];  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: switch (colorImageFormat) {  case Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30:  	return new DepthImagePoint[640 * 480];  case Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12:  	return new DepthImagePoint[1280 * 960];  default:  	throw new NotImplementedException ();  }  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: return new DepthImagePoint[640 * 480];  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: return new DepthImagePoint[640 * 480];  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: return new DepthImagePoint[1280 * 960];  
Magic Number,FaceFusion.ViewModels,FaceTrackingViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\FaceTrackingViewModel.cs,CreateDepthImagePointsFromColorFormat,The following statement contains a magic number: return new DepthImagePoint[1280 * 960];  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,Init,The following statement contains a magic number: _kinectFrameWorkItemPool = new Pool<KinectFrameWorkItem' KinectFormat> (5' _currentKinectFormat' KinectFrameWorkItem.Create);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,Init,The following statement contains a magic number: _elevationTimer.Interval = TimeSpan.FromMilliseconds (500);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,Init,The following statement contains a magic number: _voiceHeardResetTimer.Interval = TimeSpan.FromSeconds (2);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The following statement contains a magic number: try {  	newSensor.ColorStream.Enable (DefaultColorImageFormat);  	newSensor.DepthStream.Enable (DefaultDepthImageFormat);  	try {  		// This will throw on non Kinect For Windows devices.  		newSensor.DepthStream.Range = DepthRange.Near;  		newSensor.SkeletonStream.EnableTrackingInNearRange = true;  	}  	catch (InvalidOperationException) {  		newSensor.DepthStream.Range = DepthRange.Default;  		newSensor.SkeletonStream.EnableTrackingInNearRange = false;  	}  	newSensor.SkeletonStream.TrackingMode = SkeletonTrackingMode.Seated;  	var smoothParams = new TransformSmoothParameters () {  		Smoothing = 0.8f'  		Correction = 0.2f'  		Prediction = 0.5f'  		JitterRadius = 0.10f'  		MaxDeviationRadius = 0.04f  	};  	newSensor.SkeletonStream.Enable (smoothParams);  	newSensor.AllFramesReady += KinectSensorOnAllFramesReady;  	_elevationAngle = newSensor.ElevationAngle;  	RaisePropertyChanged (ElevationAnglePropertyName);  	this.KinectSensor = newSensor;  	this.rawFrameCount = 0;  	//TODO cleanup old voice command  	_voiceCommand = new VoiceCommand (newSensor);  	_voiceCommand.IsListeningChanged += (s' e) =>  {  		this.IsListening = _voiceCommand.IsListening;  		if (this.IsListening) {  			VoiceHeard = "Listening...";  		}  	};  	_voiceCommand.FusionPause += (s' e) =>  {  		if (FusionManager.IsIntegrationPaused) {  			FusionManager.IsIntegrationPaused = false;  			FusionManager.RotationRateInDegrees = 0;  			FusionManager.CurrentRotationDegrees = 0;  		}  		else {  			FusionManager.IsIntegrationPaused = true;  			FusionManager.RotationRateInDegrees = 3;  		}  		VoiceHeard = "Heard: Fusion Pause";  	};  	_voiceCommand.FusionReset += (s' e) =>  {  		ResetCommand.Execute (null);  		if (FusionManager != null) {  			FusionManager.IsIntegrationPaused = false;  			FusionManager.RotationRateInDegrees = 0;  			FusionManager.CurrentRotationDegrees = 0;  		}  		VoiceHeard = "Heard: Fusion Reset";  	};  	_voiceCommand.FusionStart += (s' e) =>  {  		ResetCommand.Execute (null);  		if (FusionManager != null) {  			FusionManager.IsIntegrationPaused = false;  			FusionManager.RotationRateInDegrees = 0;  			FusionManager.CurrentRotationDegrees = 0;  		}  		VoiceHeard = "Heard: Fusion Start";  	};  	_voiceCommand.FusionColor += (s' e) =>  {  		this.IsColorIntegrated = !this.IsColorIntegrated;  	};  	if (FusionManager != null) {  		FusionManager.Dispose ();  		FusionManager = null;  	}  	FusionManager = new FusionManager (KinectSensor);  }  catch (InvalidOperationException) {  	// This exception can be thrown when we are trying to  	// enable streams on a device that has gone away.  This  	// can occur' say' in app shutdown scenarios when the sensor  	// goes away between the time it changed status and the  	// time we get the sensor changed notification.  	//  	// Behavior here is to just eat the exception and assume  	// another notification will come along if a sensor  	// comes back.  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The following statement contains a magic number: _voiceCommand.FusionPause += (s' e) =>  {  	if (FusionManager.IsIntegrationPaused) {  		FusionManager.IsIntegrationPaused = false;  		FusionManager.RotationRateInDegrees = 0;  		FusionManager.CurrentRotationDegrees = 0;  	}  	else {  		FusionManager.IsIntegrationPaused = true;  		FusionManager.RotationRateInDegrees = 3;  	}  	VoiceHeard = "Heard: Fusion Pause";  };  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The following statement contains a magic number: if (FusionManager.IsIntegrationPaused) {  	FusionManager.IsIntegrationPaused = false;  	FusionManager.RotationRateInDegrees = 0;  	FusionManager.CurrentRotationDegrees = 0;  }  else {  	FusionManager.IsIntegrationPaused = true;  	FusionManager.RotationRateInDegrees = 3;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,StartKinect,The following statement contains a magic number: FusionManager.RotationRateInDegrees = 3;  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: try {  	colorImageFrame = e.OpenColorImageFrame ();  	depthImageFrame = e.OpenDepthImageFrame ();  	if (colorImageFrame != null) {  		if (_currentKinectFormat.ColorImageFormat != colorImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.ColorImageFormat = colorImageFrame.Format;  		}  	}  	if (depthImageFrame != null) {  		if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  			formatChanged = true;  			_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  			var depthWidth = depthImageFrame.Width;  			var depthHeight = depthImageFrame.Height;  			FaceTrackingVM.DepthWidth = depthWidth;  			FaceTrackingVM.DepthHeight = depthHeight;  			this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  			this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  			ColorImage = _colorImageWritableBitmap;  			DepthImage = _depthImageWritableBitmap;  			FusionInputImage = _modDepthImageWritableBitmap;  		}  	}  	skeletonFrame = e.OpenSkeletonFrame ();  	if (skeletonFrame != null) {  		if (_currentKinectFormat.NumSkeletons != skeletonFrame.SkeletonArrayLength) {  			_currentKinectFormat.NumSkeletons = skeletonFrame.SkeletonArrayLength;  			formatChanged = true;  		}  	}  	if (formatChanged) {  		_kinectFrameWorkItemPool.Format = _currentKinectFormat;  	}  	if (colorImageFrame != null && depthImageFrame != null && skeletonFrame != null) {  		var workItem = _kinectFrameWorkItemPool.Pop ();  		workItem.FrameNumber = depthImageFrame.FrameNumber;  		colorImageFrame.CopyPixelDataTo (workItem.ColorPixels);  		depthImageFrame.CopyDepthImagePixelDataTo (workItem.DepthImagePixels);  		skeletonFrame.CopySkeletonDataTo (workItem.Skeletons);  		var mapper = KinectSensor.CoordinateMapper;  		mapper.MapColorFrameToDepthFrame (workItem.Format.ColorImageFormat' workItem.Format.DepthImageFormat' workItem.DepthImagePixels' workItem.ColorMappedToDepthPoints);  		if (_kinectWorkQueue != null) {  			_kinectWorkQueue.AddWork (workItem);  		}  	}  }  finally {  	if (colorImageFrame != null) {  		colorImageFrame.Dispose ();  	}  	if (depthImageFrame != null) {  		depthImageFrame.Dispose ();  	}  	if (skeletonFrame != null) {  		skeletonFrame.Dispose ();  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (depthImageFrame != null) {  	if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  		formatChanged = true;  		_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  		var depthWidth = depthImageFrame.Width;  		var depthHeight = depthImageFrame.Height;  		FaceTrackingVM.DepthWidth = depthWidth;  		FaceTrackingVM.DepthHeight = depthHeight;  		this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  		this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  		ColorImage = _colorImageWritableBitmap;  		DepthImage = _depthImageWritableBitmap;  		FusionInputImage = _modDepthImageWritableBitmap;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: if (_currentKinectFormat.DepthImageFormat != depthImageFrame.Format) {  	formatChanged = true;  	_currentKinectFormat.DepthImageFormat = depthImageFrame.Format;  	var depthWidth = depthImageFrame.Width;  	var depthHeight = depthImageFrame.Height;  	FaceTrackingVM.DepthWidth = depthWidth;  	FaceTrackingVM.DepthHeight = depthHeight;  	this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  	this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	_colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  	ColorImage = _colorImageWritableBitmap;  	DepthImage = _depthImageWritableBitmap;  	FusionInputImage = _modDepthImageWritableBitmap;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._depthImageData = new byte[depthImageFrame.PixelDataLength * 4];  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._modDepthImageData = new byte[depthImageFrame.PixelDataLength * 4];  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._depthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: this._modDepthImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: _colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,KinectSensorOnAllFramesReady,The following statement contains a magic number: _colorImageWritableBitmap = new WriteableBitmap (depthWidth' depthHeight' 96' 96' PixelFormats.Bgr32' null);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,UpdateKinectFrameUI,The following statement contains a magic number: _depthImageWritableBitmap.WritePixels (new Int32Rect (0' 0' _depthImageWritableBitmap.PixelWidth' _depthImageWritableBitmap.PixelHeight)' _depthImageData' _depthImageWritableBitmap.PixelWidth * 4' 0);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,UpdateKinectFrameUI,The following statement contains a magic number: _colorImageWritableBitmap.WritePixels (new Int32Rect (0' 0' _colorImageWritableBitmap.PixelWidth' _colorImageWritableBitmap.PixelHeight)' item.MappedColorImageData' _colorImageWritableBitmap.PixelWidth * 4' 0);  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (byte* depthPtrFixed = _depthImageData) {  	fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  		int* depthIntPtr = (int*)depthPtrFixed;  		DepthImagePixel* pixelPtr = pixelPtrFixed;  		int len = width * height;  		for (int y = 0; y < height; y++) {  			for (int x = 0; x < width; x++) {  				int srcIndex = (width - 1 - x) + y * width;  				int targetIndex = x + y * width;  				var dip = *(pixelPtr + srcIndex);  				short depth = dip.Depth;  				int playerIndex = dip.PlayerIndex;  				byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  				if (depth <= 0) {  					value = 0;  				}  				int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  				*depthIntPtr = shiftValue;  				depthIntPtr++;  			}  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: fixed (DepthImagePixel* pixelPtrFixed = workItem.DepthImagePixels) {  	int* depthIntPtr = (int*)depthPtrFixed;  	DepthImagePixel* pixelPtr = pixelPtrFixed;  	int len = width * height;  	for (int y = 0; y < height; y++) {  		for (int x = 0; x < width; x++) {  			int srcIndex = (width - 1 - x) + y * width;  			int targetIndex = x + y * width;  			var dip = *(pixelPtr + srcIndex);  			short depth = dip.Depth;  			int playerIndex = dip.PlayerIndex;  			byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  			if (depth <= 0) {  				value = 0;  			}  			int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  			*depthIntPtr = shiftValue;  			depthIntPtr++;  		}  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	for (int x = 0; x < width; x++) {  		int srcIndex = (width - 1 - x) + y * width;  		int targetIndex = x + y * width;  		var dip = *(pixelPtr + srcIndex);  		short depth = dip.Depth;  		int playerIndex = dip.PlayerIndex;  		byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  		if (depth <= 0) {  			value = 0;  		}  		int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  		*depthIntPtr = shiftValue;  		depthIntPtr++;  	}  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.ViewModels,MainViewModel,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\ViewModels\MainViewModel.cs,ProcessDepthFrame,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	int srcIndex = (width - 1 - x) + y * width;  	int targetIndex = x + y * width;  	var dip = *(pixelPtr + srcIndex);  	short depth = dip.Depth;  	int playerIndex = dip.PlayerIndex;  	byte value = (byte)(255 - 255 * (depth - minDepth) / maxDepth);  	if (depth <= 0) {  		value = 0;  	}  	int shiftValue = ((255 << 24) | (value << 16) | (value << 8) | (value));  	*depthIntPtr = shiftValue;  	depthIntPtr++;  }  
Magic Number,FaceFusion.Views,SkeletonJointView,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Views\SkeletonJointView.xaml.cs,OnRender,The following statement contains a magic number: foreach (var joint in ViewModel.Joints) {  	drawingContext.DrawEllipse (null' pen' new Point (joint.X' joint.Y)' 4' 4);  }  
Magic Number,FaceFusion.Views,SkeletonJointView,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Views\SkeletonJointView.xaml.cs,OnRender,The following statement contains a magic number: foreach (var joint in ViewModel.Joints) {  	drawingContext.DrawEllipse (null' pen' new Point (joint.X' joint.Y)' 4' 4);  }  
Magic Number,FaceFusion.Views,SkeletonJointView,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Views\SkeletonJointView.xaml.cs,OnRender,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (joint.X' joint.Y)' 4' 4);  
Magic Number,FaceFusion.Views,SkeletonJointView,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Views\SkeletonJointView.xaml.cs,OnRender,The following statement contains a magic number: drawingContext.DrawEllipse (null' pen' new Point (joint.X' joint.Y)' 4' 4);  
Missing Default,FaceFusion.Services,AudioManager,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\AudioManager.cs,UpdateAudioState,The following switch statement is missing a default case: switch (State) {  case AudioState.SlidingNote:  	_sineGenerator.IsPlayingRoot = true;  	_sineGenerator.IsPlayingTriadChord = false;  	_sineGenerator.IsPlayingErrorChord = false;  	_chordTimer.Stop ();  	break;  case AudioState.Chord:  	_sineGenerator.IsPlayingRoot = true;  	_sineGenerator.IsPlayingTriadChord = true;  	_sineGenerator.IsPlayingErrorChord = false;  	//_chordTimer.Stop();  	//_chordTimer.Start();  	break;  case AudioState.Error:  	_sineGenerator.IsPlayingRoot = true;  	_sineGenerator.IsPlayingErrorChord = true;  	_sineGenerator.IsPlayingTriadChord = false;  	_chordTimer.Stop ();  	_chordTimer.Start ();  	break;  case AudioState.None:  	if (!_chordTimer.IsEnabled) {  		_sineGenerator.IsPlayingRoot = false;  		_sineGenerator.IsPlayingErrorChord = false;  		_sineGenerator.IsPlayingTriadChord = false;  		_chordTimer.Stop ();  	}  	break;  }  
Missing Default,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetColorSize,The following switch statement is missing a default case: switch (imageFormat) {  case ColorImageFormat.InfraredResolution640x480Fps30:  case ColorImageFormat.RawBayerResolution640x480Fps30:  case ColorImageFormat.RawYuvResolution640x480Fps15:  case ColorImageFormat.RgbResolution640x480Fps30:  case ColorImageFormat.YuvResolution640x480Fps15:  	return new Size (640' 480);  case ColorImageFormat.RawBayerResolution1280x960Fps12:  case ColorImageFormat.RgbResolution1280x960Fps12:  	return new Size (1280' 960);  case ColorImageFormat.Undefined:  	return new Size (0' 0);  }  
Missing Default,FaceFusion.Services,FormatHelper,C:\repos\kit-cat_ColorFaceFusion\FaceFusion\Services\FormatHelper.cs,GetDepthSize,The following switch statement is missing a default case: switch (imageFormat) {  case DepthImageFormat.Resolution320x240Fps30:  	return new Size (320' 240);  case DepthImageFormat.Resolution640x480Fps30:  	return new Size (640' 480);  case DepthImageFormat.Resolution80x60Fps30:  	return new Size (80' 60);  case DepthImageFormat.Undefined:  	return new Size (0' 0);  }  
