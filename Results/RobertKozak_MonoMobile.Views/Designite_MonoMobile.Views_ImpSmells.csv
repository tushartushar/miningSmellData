Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoMobile.Views,Theme,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\Theme.cs,MergeTheme,The method has 124 lines of code.
Long Method,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The method has 100 lines of code.
Long Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The method has 139 lines of code.
Long Method,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,NewCell,The method has 149 lines of code.
Complex Method,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,SetStatus,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetNestedMember,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,CreateGenericListFromEnumerable,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,SetValue,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,Theme,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\Theme.cs,MergeTheme,Cyclomatic complexity of the method is 40
Complex Method,MonoMobile.Views,Theme,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\Theme.cs,ThemeChanged,Cyclomatic complexity of the method is 14
Complex Method,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,Cyclomatic complexity of the method is 12
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,Cyclomatic complexity of the method is 24
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseList,Cyclomatic complexity of the method is 10
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetCommandForMember,Cyclomatic complexity of the method is 11
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForToolbarItems,Cyclomatic complexity of the method is 10
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForNavbarItems,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CreateCommandBarButton,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,MonoMobileAppDelegate,C:\repos\RobertKozak_MonoMobile.Views\Application\MonoMobileAppDelegate.cs,Startup,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,Cyclomatic complexity of the method is 11
Complex Method,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,ConfigureBackgroundImage,Cyclomatic complexity of the method is 11
Complex Method,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,Dispose,Cyclomatic complexity of the method is 15
Complex Method,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,NewCell,Cyclomatic complexity of the method is 31
Complex Method,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,NewCell,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,UpdateCell,Cyclomatic complexity of the method is 11
Complex Method,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,WillDisplay,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,RowSelected,Cyclomatic complexity of the method is 11
Complex Method,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,SetValue,Cyclomatic complexity of the method is 10
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,WillDisplay,Cyclomatic complexity of the method is 13
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,RowSelected,Cyclomatic complexity of the method is 19
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,NavigateToList,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,ConfigureRowEditing,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,GetItems,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,SetItems,Cyclomatic complexity of the method is 8
Complex Method,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,SetSelectionAccessory,Cyclomatic complexity of the method is 9
Complex Method,MonoMobile.Views,DataContextBinder,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DataContextBinder.cs,HandleNotifyCollectionChanged,Cyclomatic complexity of the method is 14
Complex Method,MonoMobile.Views,ComposableViewListCell,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\ComposableViewListCell.cs,CreateViewList,Cyclomatic complexity of the method is 19
Complex Method,MonoMobile.Views,ComposableViewListCell,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\ComposableViewListCell.cs,Draw,Cyclomatic complexity of the method is 25
Complex Method,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,Download,Cyclomatic complexity of the method is 12
Long Parameter List,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CreateCommandBarButton,The method has 9 parameters.
Long Parameter List,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,ConfigureToolbarItems,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,DialogViewController,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,TableCellFactory,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\CellFactory.cs,GetCell,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,GetCell,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,ComposableViewListCell,C:\repos\RobertKozak_MonoMobile.Views\Dialog\Cell\ComposableViewListCell.cs,ComposableViewListCell,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,ISelectableInterceptor,C:\repos\RobertKozak_MonoMobile.Views\Interfaces\ISelectableInterceptor.cs,Preselect,The method has 5 parameters.
Long Parameter List,MonoMobile.Views,ISelectableInterceptor,C:\repos\RobertKozak_MonoMobile.Views\Interfaces\ISelectableInterceptor.cs,Postselect,The method has 5 parameters.
Long Parameter List,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,QueueRequest,The method has 5 parameters.
Long Identifier,MonoMobile.Views,CellViewTemplate,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Templates\CellViewTemplate.cs,CellViewTemplate,The length of the parameter converterParameterPropertyName is 30.
Long Identifier,MonoMobile.Views,ValueConverterAttribute,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Templates\ValueConverterAttribute.cs,ValueConverterAttribute,The length of the parameter converterParameterPropertyName is 30.
Long Statement,MonoMobile.Views,ReflectiveCommand,C:\repos\RobertKozak_MonoMobile.Views\Commands\ReflectiveCommand.cs,Execute,The length of the statement  "		throw new Exception (string.Format ("{0} method has thrown an exception: {1}"' ex.InnerException.TargetSite.Name' ex.InnerException.Message)' ex); " is 146.
Long Statement,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,Flip,The length of the statement  "	_ArrowView.Layer.Transform = IsFlipped ? CATransform3D.MakeRotation ((float)Math.PI' 0' 0' 1) : CATransform3D.MakeRotation ((float)Math.PI * 2' 0' 0' 1); " is 153.
Long Statement,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetNestedMember,The length of the statement  "	BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy; " is 126.
Long Statement,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetNestedMember,The length of the statement  "		bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy; " is 138.
Long Statement,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,IsAssignableToGenericType,The length of the statement  "	return baseType.IsGenericType && baseType.GetGenericTypeDefinition () == genericType || IsAssignableToGenericType (baseType' genericType); " is 138.
Long Statement,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetMembers,The length of the statement  "	//			members = type.GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static).ToList(); " is 135.
Long Statement,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetMembers,The length of the statement  "	//			members = (from m in members where (m is MethodBase && !((MethodBase)m).IsSpecialName || !(m is MethodBase)) select m).ToList(); " is 133.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Initialize,The length of the statement  "	AutoresizingMask = UIViewAutoresizing.FlexibleTopMargin | UIViewAutoresizing.FlexibleBottomMargin | UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin; " is 179.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "	indFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - indFrame.Size.Width) / 2) + _XOffset' (float)Math.Floor ((frame.Size.Height - indFrame.Size.Height) / 2) + _YOffset' indFrame.Size.Width' indFrame.Size.Height); " is 226.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height); " is 152.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "		RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight); " is 191.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "			indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height); " is 152.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "			lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height); " is 142.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The length of the statement  "			RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight); " is 168.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The length of the statement  "	RectangleF boxRect = new RectangleF (((allRect.Size.Width - _Width) / 2) + _XOffset' ((allRect.Size.Height - _Height) / 2) + _YOffset' _Width' _Height); " is 152.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The length of the statement  "	context.AddArc (rect.GetMinX () + radius' rect.GetMaxY () - radius' radius' (float)(Math.PI / 2)' (float)Math.PI' false); " is 121.
Long Statement,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The length of the statement  "	context.AddArc (rect.GetMinX () + radius' rect.GetMinY () + radius' radius' (float)Math.PI' (float)(3 * Math.PI / 2)' false); " is 125.
Long Statement,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The length of the statement  "	RectangleF circleRect = new RectangleF (allRect.Location.X + 2' allRect.Location.Y + 2' allRect.Size.Width - 4' allRect.Size.Height - 4); " is 137.
Long Statement,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The length of the statement  "	context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false); " is 138.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The length of the statement  "		if (skipAttribute != null || toolbarButtonAttribute != null || navbarButtonAttribute != null || pullToRefreshAttribute != null || (attributes.Length == 0 && typeof(MethodInfo) == memberData.Type)) { " is 198.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The length of the statement  "		var isList = (listAttribute != null && listAttribute.DisplayMode == DisplayMode.List) && !typeof(string).IsAssignableFrom (memberData.Type) && (typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type)); " is 251.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The length of the statement  "			if ((!typeof(string).IsAssignableFrom (memberData.Type) && typeof(IEnumerable).IsAssignableFrom (memberData.Type)) || typeof(Enum).IsAssignableFrom (memberData.Type)) { " is 168.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The length of the statement  "	if (sectionList.Count == 1 && sectionList [0].DataContext.Count == 1 && sectionList [0].ListSources [0] != null && !sectionList [0].ListSources [0].IsRootCell) { " is 161.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseList,The length of the statement  "				source.IsNavigable = listAttribute.DisplayMode != DisplayMode.Collapsable || listAttribute.SelectionAction == SelectionAction.NavigateToView; " is 141.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetCommandForMember,The length of the statement  "		PropertyInfo property = source.GetType ().GetProperty (propertyName' BindingFlags.IgnoreCase | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance); " is 187.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetCommandForMember,The length of the statement  "					property = source.GetType ().GetProperty (propertyName' BindingFlags.IgnoreCase | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance); " is 174.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetCommandForMember,The length of the statement  "				throw new Exception (string.Format ("Property {0} cannot be used for CanExecute property because it does not have a return type of bool"' property.Name)); " is 154.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForToolbarItems,The length of the statement  "			var caption = captionAttribute != null ? captionAttribute.Caption : !buttonAttribute.ButtonType.HasValue && buttonAttribute.CellViewType == null ? member.Name.Capitalize () : null; " is 180.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForToolbarItems,The length of the statement  "			var button = CreateCommandBarButton (view' member' title' buttonView' buttonAttribute.Style' buttonAttribute.ButtonType' buttonAttribute.Location); " is 147.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForNavbarItems,The length of the statement  "			var button = CreateCommandBarButton (view' member' title' null' buttonAttribute.Style' buttonAttribute.ButtonType' buttonAttribute.Location); " is 141.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CreateCommandBarButton,The length of the statement  "			var interceptorTemplate = cellViewTemplates.FirstOrDefault (template => template.CellViewType != null && template.CellViewType.GetInterfaces ().Any (type => type == typeof(ICommandInterceptor))) as CellViewTemplate; " is 215.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetViewTypes,The length of the statement  "		var cellViewTemplates = memberInfo.GetCustomAttributes<Attribute> ().Where (attribute => typeof(CellViewTemplate).IsAssignableFrom (attribute.GetType ())).Cast<CellViewTemplate> ().ToList (); " is 191.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,GetMethods,The length of the statement  "	return type.GetMethods (BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance).Where (m =>  { " is 133.
Long Statement,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,CheckForInstanceProperties,The length of the statement  "			var instanceProperty = view.GetType ().GetProperty (cellViewTemplate.InstancePropertyName' BindingFlags.IgnoreCase | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance); " is 209.
Long Statement,MonoMobile.Views,MonoMobileAppDelegate,C:\repos\RobertKozak_MonoMobile.Views\Application\MonoMobileAppDelegate.cs,Startup,The length of the statement  "		MonoMobileApplication.DialogViewControllers.Add (new DialogViewController (MonoMobileApplication.Title' view' Theme.CreateTheme ()' true) { " is 139.
Long Statement,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The length of the statement  "			throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString)); " is 173.
Long Statement,MonoMobile.Views,ActionSheetView,C:\repos\RobertKozak_MonoMobile.Views\View\ActionSheetView.cs,Prepare,The length of the statement  "	var methods = GetType ().GetMethods ().Where (methodInfo => methodInfo.GetCustomAttribute<ButtonAttribute> (true) != null).ToList (); " is 133.
Long Statement,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,ShouldAutorotateToInterfaceOrientation,The length of the statement  "	return (Autorotate || toInterfaceOrientation == UIInterfaceOrientation.Portrait) && toInterfaceOrientation != UIInterfaceOrientation.PortraitUpsideDown; " is 152.
Long Statement,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,PerformFilter,The length of the statement  "								if ((searchableItem != null && searchableItem.Matches (text)) || (caption != null && !string.IsNullOrEmpty (caption.Caption)) || item.ToString ().ToLower ().Contains (text.ToLower ())) { " is 186.
Long Statement,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,ConfigureToolbarItems,The length of the statement  "		var buttonList = ToolbarButtons.Where (button => button.Command == null || !(button as ICommandButton).Hidden).ToList (); " is 121.
Long Statement,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,NewCell,The length of the statement  "					if (hasCellViewTemplate != null && cellViewTemplate != null && hasCellViewTemplate.GetType () == cellViewTemplate.CellViewType) { " is 129.
Long Statement,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The length of the statement  "				var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1; " is 127.
Long Statement,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetMemberFromView,The length of the statement  "	var memberInfo = Controller.RootView.GetType ().GetMember (memberName' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).SingleOrDefault (); " is 210.
Long Statement,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetMemberFromViewModel,The length of the statement  "		memberInfo = dc.DataContext.GetType ().GetMember (memberName' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).SingleOrDefault (); " is 201.
Long Statement,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,GetCell,The length of the statement  "		cell = listSource.GetCell (tableView' NSIndexPath.FromRowSection (indexPath.Row - memberData.Order' indexPath.Section)); " is 120.
Long Statement,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,GetCell,The length of the statement  "	cell = CellFactory.GetCell (tableView' indexPath' memberData.Id' NibName' (cellId' idxPath) => NewCell (cellId' idxPath)); " is 122.
Long Statement,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,NewCell,The length of the statement  "	if ((typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type)) && listSource != null && !listSource.IsRootCell) { " is 162.
Long Statement,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,WillDisplay,The length of the statement  "	if (PerformActionIfCellListElement (cell' indexPath' listSource => listSource.WillDisplay (tableView' cell' indexPath))) { " is 122.
Long Statement,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,RowSelected,The length of the statement  "				var interceptor = views.Where (view => (view as ISelectableInterceptor) != null).FirstOrDefault () as ISelectableInterceptor; " is 125.
Long Statement,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,CanHandleNotifyPropertyChanged,The length of the statement  "	return (Member != null && propertyName == Member.Name) || (DataContextMember != null && propertyName == DataContextMember.Name); " is 128.
Long Statement,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,ResetCollection,The length of the statement  "		var collectionChangedMethod = collection.GetType ().GetMethod ("OnCollectionChanged"' BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance); " is 162.
Long Statement,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,ConvertbackValue,The length of the statement  "		var message = string.Format ("The value \"{0}\" is of type {1} but the {2} \"{3}\" is of type {4}. You need to specify an IValueConverter to convert it."' convertedValue' convertedValue.GetType ()' Member.GetMemberTypeName ()' Member.Name' memberType); " is 252.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,GetCell,The length of the statement  "	var cell = CellFactory.GetCell (tableView' indexPath' CellId' NibName' (cellId' idxPath) => NewListCell (cellId' idxPath)); " is 123.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,UpdateCell,The length of the statement  "		if (dataType != null && (dataType.IsPrimitive || dataType.IsEnum) && (SelectionAction == SelectionAction.NavigateToView || SelectionAction == SelectionAction.Custom)) { " is 168.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,UpdateCell,The length of the statement  "		if (dataType != null && ((dataType.IsPrimitive || dataType == typeof(string))) && (SelectionAction != SelectionAction.Custom || SelectionAction == SelectionAction.None)) { " is 171.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,UpdateCell,The length of the statement  "	cell.SelectionStyle = SelectionAction == SelectionAction.Custom ? UITableViewCellSelectionStyle.Blue : cell.SelectionStyle; " is 123.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,RowSelected,The length of the statement  "		//	Controller.TableView.ReloadRows(new NSIndexPath[] { NSIndexPath.FromRowSection(0' section.Index) }' UITableViewRowAnimation.Fade); " is 133.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,NavigateToList,The length of the statement  "	NavigationSource.IsSelectable = (SelectionAction == SelectionAction.PopOnSelection || SelectionAction == SelectionAction.Selection || SelectionAction == SelectionAction.Multiselection); " is 185.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,NavigateToList,The length of the statement  "	NavigationSource.IsNavigable = !PopOnSelection && NavigationSource.IsNavigable && SelectionAction != SelectionAction.Custom; " is 124.
Long Statement,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,SetSelectionAccessory,The length of the statement  "	cell.Accessory = SelectionAction == SelectionAction.Custom || SelectionAction == SelectionAction.None ? UITableViewCellAccessory.None : cell.Accessory; " is 151.
Long Statement,MonoMobile.Views,UIPlaceholderTextField,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIPlaceholderTextField.cs,DrawPlaceholder,The length of the statement  "	DrawString (Placeholder' rect' UIFont.SystemFontOfSize (UIFont.LabelFontSize)' UILineBreakMode.Clip' PlaceholderAlignment); " is 123.
Long Statement,MonoMobile.Views,DataContextBinder,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DataContextBinder.cs,HandleNotifyCollectionChanged,The length of the statement  "			InvokeOnMainThread (() => Controller.TableView.ReloadSections (NSIndexSet.FromIndex (Section.Index)' UITableViewRowAnimation.Automatic)); " is 137.
Long Statement,MonoMobile.Views,ListCellView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Base\ListCellView.cs,UpdateCell,The length of the statement  "		cell.Accessory = listSource.Sections [0].DataContext.Count > 0 ? UITableViewCellAccessory.DisclosureIndicator : UITableViewCellAccessory.None; " is 142.
Long Statement,MonoMobile.Views,ListCellView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Base\ListCellView.cs,UpdateCell,The length of the statement  "		cell.Accessory = listSource.Sections [0].DataContext.Count > 1 ? UITableViewCellAccessory.DisclosureIndicator : UITableViewCellAccessory.None; " is 142.
Long Statement,MonoMobile.Views,ListCellView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Base\ListCellView.cs,UpdateCell,The length of the statement  "	cell.SelectionStyle = listSource.Sections [0].DataContext.Count > 1 ? UITableViewCellSelectionStyle.Blue : UITableViewCellSelectionStyle.None; " is 142.
Long Statement,MonoMobile.Views,HttpDebug,C:\repos\RobertKozak_MonoMobile.Views\Application\Debug\HttpDebug.cs,Header,The length of the statement  "	c.WriteLine ("<html><head><title>{0}</title>\n" + "<head>\n" + "  <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js'></script>"' title); " is 162.
Long Statement,MonoMobile.Views,HttpDebug,C:\repos\RobertKozak_MonoMobile.Views\Application\Debug\HttpDebug.cs,Summary,The length of the statement  "	Header (c' "Summary"' "$(\"a.type\").click (function (e) { $(this).append ('<div></div>'); $(this).children ().load ('/type/'); console.log ($(this).contents ()); e.preventDefault ();});"); " is 189.
Long Statement,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The length of the statement  "			ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2))); " is 141.
Complex Conditional,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The conditional expression  "skipAttribute != null || toolbarButtonAttribute != null || navbarButtonAttribute != null || pullToRefreshAttribute != null || (attributes.Length == 0 && typeof(MethodInfo) == memberData.Type)"  is complex.
Complex Conditional,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The conditional expression  "sectionList.Count == 1 && sectionList [0].DataContext.Count == 1 && sectionList [0].ListSources [0] != null && !sectionList [0].ListSources [0].IsRootCell"  is complex.
Complex Conditional,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,PerformFilter,The conditional expression  "(searchableItem != null && searchableItem.Matches (text)) || (caption != null && !string.IsNullOrEmpty (caption.Caption)) || item.ToString ().ToLower ().Contains (text.ToLower ())"  is complex.
Complex Conditional,MonoMobile.Views,ViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ViewSource.cs,NewCell,The conditional expression  "(typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type)) && listSource != null && !listSource.IsRootCell"  is complex.
Complex Conditional,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,UpdateCell,The conditional expression  "dataType != null && (dataType.IsPrimitive || dataType.IsEnum) && (SelectionAction == SelectionAction.NavigateToView || SelectionAction == SelectionAction.Custom)"  is complex.
Complex Conditional,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,UpdateCell,The conditional expression  "dataType != null && ((dataType.IsPrimitive || dataType == typeof(string))) && (SelectionAction != SelectionAction.Custom || SelectionAction == SelectionAction.None)"  is complex.
Complex Conditional,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,RowSelected,The conditional expression  "PopOnSelection && !(!IsSelectable || IsNavigable || IsMultiselect)"  is complex.
Empty Catch Block,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetNestedMember,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,GetValue,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,TypeExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\TypeExtensions.cs,TryGetValue,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,Convert,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,ConvertValue,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,ConvertbackValue,The method has an empty catch block.
Empty Catch Block,MonoMobile.Views,MemberData,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\MemberData.cs,ConvertbackValue,The method has an empty catch block.
Empty Catch Block,MonoTouch.UrlImageStore,UrlImageStore,C:\repos\RobertKozak_MonoMobile.Views\Application\UrlImageStore.cs,DeleteCachedFiles,The method has an empty catch block.
Empty Catch Block,MonoTouch.UrlImageStore,UrlImageStore,C:\repos\RobertKozak_MonoMobile.Views\Application\UrlImageStore.cs,DeleteCachedFiles,The method has an empty catch block.
Empty Catch Block,MonoTouch.UrlImageStore,UrlImageStore,C:\repos\RobertKozak_MonoMobile.Views\Application\UrlImageStore.cs,RequestImageImpl,The method has an empty catch block.
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _LastUpdateLabel.Frame = new RectangleF (0' bounds.Height - 30' bounds.Width' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _LastUpdateLabel.Frame = new RectangleF (0' bounds.Height - 30' bounds.Width' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _StatusLabel.Frame = new RectangleF (0' bounds.Height - 48' bounds.Width' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _StatusLabel.Frame = new RectangleF (0' bounds.Height - 48' bounds.Width' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _ArrowView.Frame = new RectangleF (20' bounds.Height - 65' 30' 55);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _ArrowView.Frame = new RectangleF (20' bounds.Height - 65' 30' 55);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _ArrowView.Frame = new RectangleF (20' bounds.Height - 65' 30' 55);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _ArrowView.Frame = new RectangleF (20' bounds.Height - 65' 30' 55);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _Activity.Frame = new RectangleF (25' bounds.Height - 38' 20' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _Activity.Frame = new RectangleF (25' bounds.Height - 38' 20' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _Activity.Frame = new RectangleF (25' bounds.Height - 38' 20' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,LayoutSubviews,The following statement contains a magic number: _Activity.Frame = new RectangleF (25' bounds.Height - 38' 20' 20);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,Flip,The following statement contains a magic number: _ArrowView.Layer.Transform = IsFlipped ? CATransform3D.MakeRotation ((float)Math.PI' 0' 0' 1) : CATransform3D.MakeRotation ((float)Math.PI * 2' 0' 0' 1);  
Magic Number,MonoMobile.Views,RefreshTableHeaderView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\RefreshTableHeaderView.cs,Initialize,The following statement contains a magic number: _StatusLabel = new UILabel () {  	Font = UIFont.BoldSystemFontOfSize (14)'  	TextColor = new UIColor (0.47f' 0.50f' 0.57f' 1)'  	ShadowColor = _LastUpdateLabel.ShadowColor'  	ShadowOffset = new SizeF (0' 1)'  	BackgroundColor = BackgroundColor'  	Opaque = true'  	TextAlignment = UITextAlignment.Center'  	AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin  };  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: if (Mode == HudProgressMode.Determinate) {  	_Indicator = new RoundProgressView ();  }  else if (Mode == HudProgressMode.Indeterminate) {  	_Indicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);  	((UIActivityIndicatorView)_Indicator).StartAnimating ();  }  else {  	_Indicator = new UIImageView () {  		ContentMode = UIViewContentMode.ScaleAspectFill'  		Image = _CheckmarkImage'  		AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  		Bounds = new RectangleF (0' 0' 37' 37)  	};  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: if (Mode == HudProgressMode.Determinate) {  	_Indicator = new RoundProgressView ();  }  else if (Mode == HudProgressMode.Indeterminate) {  	_Indicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);  	((UIActivityIndicatorView)_Indicator).StartAnimating ();  }  else {  	_Indicator = new UIImageView () {  		ContentMode = UIViewContentMode.ScaleAspectFill'  		Image = _CheckmarkImage'  		AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  		Bounds = new RectangleF (0' 0' 37' 37)  	};  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: if (Mode == HudProgressMode.Indeterminate) {  	_Indicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);  	((UIActivityIndicatorView)_Indicator).StartAnimating ();  }  else {  	_Indicator = new UIImageView () {  		ContentMode = UIViewContentMode.ScaleAspectFill'  		Image = _CheckmarkImage'  		AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  		Bounds = new RectangleF (0' 0' 37' 37)  	};  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: if (Mode == HudProgressMode.Indeterminate) {  	_Indicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);  	((UIActivityIndicatorView)_Indicator).StartAnimating ();  }  else {  	_Indicator = new UIImageView () {  		ContentMode = UIViewContentMode.ScaleAspectFill'  		Image = _CheckmarkImage'  		AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  		Bounds = new RectangleF (0' 0' 37' 37)  	};  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: _Indicator = new UIImageView () {  	ContentMode = UIViewContentMode.ScaleAspectFill'  	Image = _CheckmarkImage'  	AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  	Bounds = new RectangleF (0' 0' 37' 37)  };  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,UpdateIndicators,The following statement contains a magic number: _Indicator = new UIImageView () {  	ContentMode = UIViewContentMode.ScaleAspectFill'  	Image = _CheckmarkImage'  	AutoresizingMask = UIViewAutoresizing.FlexibleLeftMargin | UIViewAutoresizing.FlexibleRightMargin'  	Bounds = new RectangleF (0' 0' 37' 37)  };  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: _Width = indFrame.Size.Width + 2 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: _Height = indFrame.Size.Height + 2 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - indFrame.Size.Width) / 2) + _XOffset' (float)Math.Floor ((frame.Size.Height - indFrame.Size.Height) / 2) + _YOffset' indFrame.Size.Width' indFrame.Size.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - indFrame.Size.Width) / 2) + _XOffset' (float)Math.Floor ((frame.Size.Height - indFrame.Size.Height) / 2) + _YOffset' indFrame.Size.Width' indFrame.Size.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != TitleText) {  	// Get size of label text  	SizeF dims = StringSize (TitleText' TitleFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	float lHeight = dims.Height;  	float lWidth;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_Label.Font = TitleFont;  	_Label.AdjustsFontSizeToFitWidth = false;  	_Label.TextAlignment = UITextAlignment.Center;  	_Label.LineBreakMode = UILineBreakMode.WordWrap;  	_Label.Opaque = false;  	_Label.BackgroundColor = UIColor.Clear;  	_Label.TextColor = UIColor.White;  	_Label.Text = TitleText;  	// Update HUD size  	if (_Width < (lWidth + 2 * MARGIN)) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_Label.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_Label.Lines--;  	lHeight = lHeight * _Label.Lines;  	// Move indicator to make room for the label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Set the label position and dimensions  	RectangleF lFrame = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' (float)Math.Floor (indFrame.Location.Y + indFrame.Size.Height + PADDING)' lWidth' lHeight);  	_Label.Frame = lFrame;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_Label);  	// Add details label delatils text was set  	if (null != DetailText) {  		// Get size of label text  		dims = StringSize (DetailText' DetailFont);  		// Compute label dimensions based on font metrics if size is larger than max then clip the label width  		lHeight = dims.Height;  		if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  			lWidth = dims.Width;  		}  		else {  			lWidth = frame.Size.Width - 4 * MARGIN;  		}  		// Set label properties  		_DetailsLabel.Font = DetailFont;  		_DetailsLabel.AdjustsFontSizeToFitWidth = false;  		_DetailsLabel.TextAlignment = UITextAlignment.Center;  		_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  		_DetailsLabel.Opaque = false;  		_DetailsLabel.BackgroundColor = UIColor.Clear;  		_DetailsLabel.TextColor = UIColor.White;  		_DetailsLabel.Text = DetailText;  		// Update HUD size  		if (_Width < lWidth) {  			_Width = lWidth + 2 * MARGIN;  		}  		//Set number of lines for the amount of text and re-adjust height  		_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  		if (dims.Width % lWidth == 0)  			_DetailsLabel.Lines--;  		lHeight = lHeight * _DetailsLabel.Lines;  		// Move indicator to make room for the new label  		indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  		_Indicator.Frame = indFrame;  		// Move first label to make room for the new label  		lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  		_Label.Frame = lFrame;  		// Set label position and dimensions  		RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  		_DetailsLabel.Frame = lFrameD;  		_Height = _Height + lHeight + PADDING;  		AddSubview (_DetailsLabel);  	}  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  	lWidth = dims.Width;  }  else {  	lWidth = frame.Size.Width - 4 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  	lWidth = dims.Width;  }  else {  	lWidth = frame.Size.Width - 4 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: lWidth = frame.Size.Width - 4 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (_Width < (lWidth + 2 * MARGIN)) {  	_Width = lWidth + 2 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (_Width < (lWidth + 2 * MARGIN)) {  	_Width = lWidth + 2 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: _Width = lWidth + 2 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - (float)(Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (null != DetailText) {  	// Get size of label text  	dims = StringSize (DetailText' DetailFont);  	// Compute label dimensions based on font metrics if size is larger than max then clip the label width  	lHeight = dims.Height;  	if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  		lWidth = dims.Width;  	}  	else {  		lWidth = frame.Size.Width - 4 * MARGIN;  	}  	// Set label properties  	_DetailsLabel.Font = DetailFont;  	_DetailsLabel.AdjustsFontSizeToFitWidth = false;  	_DetailsLabel.TextAlignment = UITextAlignment.Center;  	_DetailsLabel.LineBreakMode = UILineBreakMode.WordWrap;  	_DetailsLabel.Opaque = false;  	_DetailsLabel.BackgroundColor = UIColor.Clear;  	_DetailsLabel.TextColor = UIColor.White;  	_DetailsLabel.Text = DetailText;  	// Update HUD size  	if (_Width < lWidth) {  		_Width = lWidth + 2 * MARGIN;  	}  	//Set number of lines for the amount of text and re-adjust height  	_DetailsLabel.Lines = (int)(dims.Width / lWidth) + 1;  	if (dims.Width % lWidth == 0)  		_DetailsLabel.Lines--;  	lHeight = lHeight * _DetailsLabel.Lines;  	// Move indicator to make room for the new label  	indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  	_Indicator.Frame = indFrame;  	// Move first label to make room for the new label  	lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  	_Label.Frame = lFrame;  	// Set label position and dimensions  	RectangleF lFrameD = new RectangleF ((float)Math.Floor ((frame.Size.Width - lWidth) / 2) + _XOffset' lFrame.Location.Y + lFrame.Size.Height + PADDING' lWidth' lHeight);  	_DetailsLabel.Frame = lFrameD;  	_Height = _Height + lHeight + PADDING;  	AddSubview (_DetailsLabel);  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  	lWidth = dims.Width;  }  else {  	lWidth = frame.Size.Width - 4 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (dims.Width <= (frame.Size.Width - 2 * MARGIN)) {  	lWidth = dims.Width;  }  else {  	lWidth = frame.Size.Width - 4 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: lWidth = frame.Size.Width - 4 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: if (_Width < lWidth) {  	_Width = lWidth + 2 * MARGIN;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: _Width = lWidth + 2 * MARGIN;  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: indFrame = new RectangleF (indFrame.Location.X' indFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' indFrame.Width' indFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,LayoutSubviews,The following statement contains a magic number: lFrame = new RectangleF (lFrame.Location.X' lFrame.Location.Y - ((float)Math.Floor (lHeight / 2 + PADDING / 2))' lFrame.Width' lFrame.Height);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,ShowUsingAnimation,The following statement contains a magic number: if (animated) {  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.40);  	Alpha = 1.0f;  	UIView.CommitAnimations ();  }  else {  	Alpha = 1.0f;  }  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,ShowUsingAnimation,The following statement contains a magic number: UIView.SetAnimationDuration (0.40);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMaxX () - radius' rect.GetMinY () + radius' radius' (float)(3 * Math.PI / 2)' 0f' false);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMaxX () - radius' rect.GetMinY () + radius' radius' (float)(3 * Math.PI / 2)' 0f' false);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMaxX () - radius' rect.GetMaxY () - radius' radius' 0' (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMinX () + radius' rect.GetMaxY () - radius' radius' (float)(Math.PI / 2)' (float)Math.PI' false);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMinX () + radius' rect.GetMinY () + radius' radius' (float)Math.PI' (float)(3 * Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,ProgressHud,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,FillRoundedRect,The following statement contains a magic number: context.AddArc (rect.GetMinX () + radius' rect.GetMinY () + radius' radius' (float)Math.PI' (float)(3 * Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The following statement contains a magic number: context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The following statement contains a magic number: context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The following statement contains a magic number: context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The following statement contains a magic number: context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,RoundProgressView,C:\repos\RobertKozak_MonoMobile.Views\Controls\ProgressHud.cs,Draw,The following statement contains a magic number: context.AddArc (x' y' (allRect.Size.Width - 4) / 2' -(float)(Math.PI / 2)' (float)(Progress * 2 * Math.PI) - (float)(Math.PI / 2)' false);  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: foreach (var member in members) {  	var attributes = member.GetCustomAttributes (false);  	var memberData = new MemberData (view' member) {  		Section = sectionIndex  	};  	var defaultValueAttribute = member.GetCustomAttribute<DefaultValueAttribute> ();  	if (defaultValueAttribute != null) {  		memberData.Value = defaultValueAttribute.Value;  	}  	var pullToRefreshAttribute = member.GetCustomAttribute<PullToRefreshAttribute> ();  	if (pullToRefreshAttribute != null) {  		((DialogViewController)controller).PullToRefreshCommand = GetCommandForMember (view' member);  		((DialogViewController)controller).RefreshKey = pullToRefreshAttribute.SettingsKey;  		((DialogViewController)controller).EnablePullToRefresh = true;  	}  	var toolbarButtonAttribute = member.GetCustomAttribute<ToolbarButtonAttribute> ();  	var navbarButtonAttribute = member.GetCustomAttribute<NavbarButtonAttribute> ();  	var skipAttribute = member.GetCustomAttribute<SkipAttribute> ();  	if (skipAttribute != null || toolbarButtonAttribute != null || navbarButtonAttribute != null || pullToRefreshAttribute != null || (attributes.Length == 0 && typeof(MethodInfo) == memberData.Type)) {  		memberData.Dispose ();  		continue;  	}  	var themeAttribute = member.GetCustomAttribute<ThemeAttribute> ();  	if (themeAttribute != null) {  		var theme = Theme.CreateTheme (themeAttribute.ThemeType);  		if (theme != null && theme.CellHeight > 0) {  			memberData.RowHeight = theme.CellHeight;  			theme.Dispose ();  		}  	}  	else {  		var themeable = view as IThemeable;  		if (themeable != null && themeable.Theme != null && themeable.Theme.CellHeight > 0) {  			memberData.RowHeight = themeable.Theme.CellHeight;  		}  	}  	var rowHeightAttribute = member.GetCustomAttribute<RowHeightAttribute> ();  	if (rowHeightAttribute != null)  		memberData.RowHeight = rowHeightAttribute.RowHeight;  	var listAttribute = member.GetCustomAttribute<ListAttribute> ();  	var isList = (listAttribute != null && listAttribute.DisplayMode == DisplayMode.List) && !typeof(string).IsAssignableFrom (memberData.Type) && (typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type));  	var orderAttribute = member.GetCustomAttribute<OrderAttribute> ();  	if (orderAttribute != null) {  		// make sure assigned order is an even number to fit in between the default order   		// allowing the values int.MinValue and int.MaxValue for the first and Last positions  		memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  	}  	else {  		// make sure all default memberOrder is odd;  		memberOrder = memberOrder + (memberOrder % 2) + 1;  		memberData.Order = memberOrder;  	}  	var sectionAttribute = member.GetCustomAttribute<SectionAttribute> ();  	if (sectionAttribute != null || isList) {  		if (sections.Count > 0) {  			sectionIndex++;  		}  		memberData.Section = sectionIndex;  		if (sectionAttribute != null && orderAttribute != null) {  			memberData.Section = orderAttribute.Order == 0 ? sectionIndex : orderAttribute.Order;  		}  		else {  			memberData.Section = sectionIndex;  		}  	}  	var viewTypes = GetViewTypes (memberData);  	if (!sections.ContainsKey (memberData.Section)) {  		var section = CreateSection (controller' memberData' viewTypes);  		sections.Add (memberData.Section' section);  	}  	else {  		if (viewTypes != null) {  			IList<Type> list = null;  			var key = memberData.Id.ToString ();  			var viewTypesList = sections [memberData.Section].ViewTypes;  			if (viewTypesList.ContainsKey (key)) {  				list = viewTypesList [key];  			}  			else {  				list = new List<Type> ();  				viewTypesList.Add (key' list);  			}  			foreach (var viewType in viewTypes) {  				if (!list.Contains (viewType)) {  					list.Add (viewType);  				}  			}  		}  	}  	if (memberLists.ContainsKey (memberData.Section)) {  		memberLists [memberData.Section].Add (memberData.Order' memberData);  	}  	else {  		var sortedList = new SortedList<int' MemberData> ();  		sortedList.Add (memberData.Order' memberData);  		memberLists.Add (memberData.Section' sortedList);  	}  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: foreach (var member in members) {  	var attributes = member.GetCustomAttributes (false);  	var memberData = new MemberData (view' member) {  		Section = sectionIndex  	};  	var defaultValueAttribute = member.GetCustomAttribute<DefaultValueAttribute> ();  	if (defaultValueAttribute != null) {  		memberData.Value = defaultValueAttribute.Value;  	}  	var pullToRefreshAttribute = member.GetCustomAttribute<PullToRefreshAttribute> ();  	if (pullToRefreshAttribute != null) {  		((DialogViewController)controller).PullToRefreshCommand = GetCommandForMember (view' member);  		((DialogViewController)controller).RefreshKey = pullToRefreshAttribute.SettingsKey;  		((DialogViewController)controller).EnablePullToRefresh = true;  	}  	var toolbarButtonAttribute = member.GetCustomAttribute<ToolbarButtonAttribute> ();  	var navbarButtonAttribute = member.GetCustomAttribute<NavbarButtonAttribute> ();  	var skipAttribute = member.GetCustomAttribute<SkipAttribute> ();  	if (skipAttribute != null || toolbarButtonAttribute != null || navbarButtonAttribute != null || pullToRefreshAttribute != null || (attributes.Length == 0 && typeof(MethodInfo) == memberData.Type)) {  		memberData.Dispose ();  		continue;  	}  	var themeAttribute = member.GetCustomAttribute<ThemeAttribute> ();  	if (themeAttribute != null) {  		var theme = Theme.CreateTheme (themeAttribute.ThemeType);  		if (theme != null && theme.CellHeight > 0) {  			memberData.RowHeight = theme.CellHeight;  			theme.Dispose ();  		}  	}  	else {  		var themeable = view as IThemeable;  		if (themeable != null && themeable.Theme != null && themeable.Theme.CellHeight > 0) {  			memberData.RowHeight = themeable.Theme.CellHeight;  		}  	}  	var rowHeightAttribute = member.GetCustomAttribute<RowHeightAttribute> ();  	if (rowHeightAttribute != null)  		memberData.RowHeight = rowHeightAttribute.RowHeight;  	var listAttribute = member.GetCustomAttribute<ListAttribute> ();  	var isList = (listAttribute != null && listAttribute.DisplayMode == DisplayMode.List) && !typeof(string).IsAssignableFrom (memberData.Type) && (typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type));  	var orderAttribute = member.GetCustomAttribute<OrderAttribute> ();  	if (orderAttribute != null) {  		// make sure assigned order is an even number to fit in between the default order   		// allowing the values int.MinValue and int.MaxValue for the first and Last positions  		memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  	}  	else {  		// make sure all default memberOrder is odd;  		memberOrder = memberOrder + (memberOrder % 2) + 1;  		memberData.Order = memberOrder;  	}  	var sectionAttribute = member.GetCustomAttribute<SectionAttribute> ();  	if (sectionAttribute != null || isList) {  		if (sections.Count > 0) {  			sectionIndex++;  		}  		memberData.Section = sectionIndex;  		if (sectionAttribute != null && orderAttribute != null) {  			memberData.Section = orderAttribute.Order == 0 ? sectionIndex : orderAttribute.Order;  		}  		else {  			memberData.Section = sectionIndex;  		}  	}  	var viewTypes = GetViewTypes (memberData);  	if (!sections.ContainsKey (memberData.Section)) {  		var section = CreateSection (controller' memberData' viewTypes);  		sections.Add (memberData.Section' section);  	}  	else {  		if (viewTypes != null) {  			IList<Type> list = null;  			var key = memberData.Id.ToString ();  			var viewTypesList = sections [memberData.Section].ViewTypes;  			if (viewTypesList.ContainsKey (key)) {  				list = viewTypesList [key];  			}  			else {  				list = new List<Type> ();  				viewTypesList.Add (key' list);  			}  			foreach (var viewType in viewTypes) {  				if (!list.Contains (viewType)) {  					list.Add (viewType);  				}  			}  		}  	}  	if (memberLists.ContainsKey (memberData.Section)) {  		memberLists [memberData.Section].Add (memberData.Order' memberData);  	}  	else {  		var sortedList = new SortedList<int' MemberData> ();  		sortedList.Add (memberData.Order' memberData);  		memberLists.Add (memberData.Section' sortedList);  	}  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: foreach (var member in members) {  	var attributes = member.GetCustomAttributes (false);  	var memberData = new MemberData (view' member) {  		Section = sectionIndex  	};  	var defaultValueAttribute = member.GetCustomAttribute<DefaultValueAttribute> ();  	if (defaultValueAttribute != null) {  		memberData.Value = defaultValueAttribute.Value;  	}  	var pullToRefreshAttribute = member.GetCustomAttribute<PullToRefreshAttribute> ();  	if (pullToRefreshAttribute != null) {  		((DialogViewController)controller).PullToRefreshCommand = GetCommandForMember (view' member);  		((DialogViewController)controller).RefreshKey = pullToRefreshAttribute.SettingsKey;  		((DialogViewController)controller).EnablePullToRefresh = true;  	}  	var toolbarButtonAttribute = member.GetCustomAttribute<ToolbarButtonAttribute> ();  	var navbarButtonAttribute = member.GetCustomAttribute<NavbarButtonAttribute> ();  	var skipAttribute = member.GetCustomAttribute<SkipAttribute> ();  	if (skipAttribute != null || toolbarButtonAttribute != null || navbarButtonAttribute != null || pullToRefreshAttribute != null || (attributes.Length == 0 && typeof(MethodInfo) == memberData.Type)) {  		memberData.Dispose ();  		continue;  	}  	var themeAttribute = member.GetCustomAttribute<ThemeAttribute> ();  	if (themeAttribute != null) {  		var theme = Theme.CreateTheme (themeAttribute.ThemeType);  		if (theme != null && theme.CellHeight > 0) {  			memberData.RowHeight = theme.CellHeight;  			theme.Dispose ();  		}  	}  	else {  		var themeable = view as IThemeable;  		if (themeable != null && themeable.Theme != null && themeable.Theme.CellHeight > 0) {  			memberData.RowHeight = themeable.Theme.CellHeight;  		}  	}  	var rowHeightAttribute = member.GetCustomAttribute<RowHeightAttribute> ();  	if (rowHeightAttribute != null)  		memberData.RowHeight = rowHeightAttribute.RowHeight;  	var listAttribute = member.GetCustomAttribute<ListAttribute> ();  	var isList = (listAttribute != null && listAttribute.DisplayMode == DisplayMode.List) && !typeof(string).IsAssignableFrom (memberData.Type) && (typeof(IEnumerable).IsAssignableFrom (memberData.Type) || typeof(Enum).IsAssignableFrom (memberData.Type));  	var orderAttribute = member.GetCustomAttribute<OrderAttribute> ();  	if (orderAttribute != null) {  		// make sure assigned order is an even number to fit in between the default order   		// allowing the values int.MinValue and int.MaxValue for the first and Last positions  		memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  	}  	else {  		// make sure all default memberOrder is odd;  		memberOrder = memberOrder + (memberOrder % 2) + 1;  		memberData.Order = memberOrder;  	}  	var sectionAttribute = member.GetCustomAttribute<SectionAttribute> ();  	if (sectionAttribute != null || isList) {  		if (sections.Count > 0) {  			sectionIndex++;  		}  		memberData.Section = sectionIndex;  		if (sectionAttribute != null && orderAttribute != null) {  			memberData.Section = orderAttribute.Order == 0 ? sectionIndex : orderAttribute.Order;  		}  		else {  			memberData.Section = sectionIndex;  		}  	}  	var viewTypes = GetViewTypes (memberData);  	if (!sections.ContainsKey (memberData.Section)) {  		var section = CreateSection (controller' memberData' viewTypes);  		sections.Add (memberData.Section' section);  	}  	else {  		if (viewTypes != null) {  			IList<Type> list = null;  			var key = memberData.Id.ToString ();  			var viewTypesList = sections [memberData.Section].ViewTypes;  			if (viewTypesList.ContainsKey (key)) {  				list = viewTypesList [key];  			}  			else {  				list = new List<Type> ();  				viewTypesList.Add (key' list);  			}  			foreach (var viewType in viewTypes) {  				if (!list.Contains (viewType)) {  					list.Add (viewType);  				}  			}  		}  	}  	if (memberLists.ContainsKey (memberData.Section)) {  		memberLists [memberData.Section].Add (memberData.Order' memberData);  	}  	else {  		var sortedList = new SortedList<int' MemberData> ();  		sortedList.Add (memberData.Order' memberData);  		memberLists.Add (memberData.Section' sortedList);  	}  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: if (orderAttribute != null) {  	// make sure assigned order is an even number to fit in between the default order   	// allowing the values int.MinValue and int.MaxValue for the first and Last positions  	memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  }  else {  	// make sure all default memberOrder is odd;  	memberOrder = memberOrder + (memberOrder % 2) + 1;  	memberData.Order = memberOrder;  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: if (orderAttribute != null) {  	// make sure assigned order is an even number to fit in between the default order   	// allowing the values int.MinValue and int.MaxValue for the first and Last positions  	memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  }  else {  	// make sure all default memberOrder is odd;  	memberOrder = memberOrder + (memberOrder % 2) + 1;  	memberData.Order = memberOrder;  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: if (orderAttribute != null) {  	// make sure assigned order is an even number to fit in between the default order   	// allowing the values int.MinValue and int.MaxValue for the first and Last positions  	memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  }  else {  	// make sure all default memberOrder is odd;  	memberOrder = memberOrder + (memberOrder % 2) + 1;  	memberData.Order = memberOrder;  }  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: memberData.Order = orderAttribute.Order > int.MaxValue / 2 ? int.MaxValue : orderAttribute.Order * 2;  
Magic Number,MonoMobile.Views,ViewParser,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ViewParser.cs,ParseView,The following statement contains a magic number: memberOrder = memberOrder + (memberOrder % 2) + 1;  
Magic Number,MonoMobile.Views,UIDatePickerToolbar,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIDatePickerToolbar.cs,CreateToolbarItems,The following statement contains a magic number: buttonList.Insert (2' _TodayButton);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (hexString)) {  	var colorString = hexString.Replace ("#"' "");  	byte alpha' red' blue' green;  	alpha = 255;  	switch (colorString.Length) {  	case 3:// #RGB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		break;  	}  	case 4:// #ARGB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  		break;  	}  	case 6:// #RRGGBB  	 {  		red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		break;  	}  	case 8:// #AARRGGBB  	 {  		alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  		red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  		green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  		blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  		break;  	}  	default: {  		throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  	}  	}  	result = UIColor.FromRGBA (red' green' blue' alpha);  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: alpha = 255;  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: switch (colorString.Length) {  case 3:// #RGB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	break;  }  case 4:// #ARGB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  	break;  }  case 6:// #RRGGBB   {  	red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	break;  }  case 8:// #AARRGGBB   {  	alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  	red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  	green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  	blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  	break;  }  default: {  	throw new Exception (string.Format ("Invalid color value \rColor value {0} is invalid. It should be a hex value of the form #RBG' #ARGB' #RRGGBB' or #AARRGGBB"' hexString));  }  }  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (1' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (2' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (3' 1)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: alpha = (Byte)Convert.ToInt16 (colorString.Substring (0' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: red = (Byte)Convert.ToInt16 (colorString.Substring (2' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: green = (Byte)Convert.ToInt16 (colorString.Substring (4' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  
Magic Number,MonoMobile.Views,StringExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\StringExtensions.cs,ToUIColor,The following statement contains a magic number: blue = (Byte)Convert.ToInt16 (colorString.Substring (6' 2)' 16);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,TriggerRefresh,The following statement contains a magic number: if (Reloading && showStatus && RefreshView != null) {  	UIView.BeginAnimations ("reloadingData");  	UIView.SetAnimationDuration (0.2);  	TableView.ContentInset = new UIEdgeInsets (60' 0' 0' 0);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,TriggerRefresh,The following statement contains a magic number: if (Reloading && showStatus && RefreshView != null) {  	UIView.BeginAnimations ("reloadingData");  	UIView.SetAnimationDuration (0.2);  	TableView.ContentInset = new UIEdgeInsets (60' 0' 0' 0);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,TriggerRefresh,The following statement contains a magic number: UIView.SetAnimationDuration (0.2);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,TriggerRefresh,The following statement contains a magic number: TableView.ContentInset = new UIEdgeInsets (60' 0' 0' 0);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,TriggerRefresh,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,StartSearch,The following statement contains a magic number: if (searchbar != null && searchbar.IsSearchbarHidden || _Searchbar == null) {  	TableView.ScrollToRow (NSIndexPath.FromRowSection (0' 0)' UITableViewScrollPosition.Top' true);  	CreateSearchbar ();  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	_Searchbar.Frame = new RectangleF (0' 0' _Searchbar.Frame.Width' 45);  	TableView.TableHeaderView = _Searchbar;  	if (_OriginalSections == null) {  		_OriginalSections = new Dictionary<int' Section> (((BaseDialogViewSource)TableView.Source).Sections);  		_OriginalDataContext = new List<object> ();  		foreach (var section in _OriginalSections.Values) {  			_OriginalDataContext.Add (section.DataContext);  		}  	}  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,StartSearch,The following statement contains a magic number: if (searchbar != null && searchbar.IsSearchbarHidden || _Searchbar == null) {  	TableView.ScrollToRow (NSIndexPath.FromRowSection (0' 0)' UITableViewScrollPosition.Top' true);  	CreateSearchbar ();  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	_Searchbar.Frame = new RectangleF (0' 0' _Searchbar.Frame.Width' 45);  	TableView.TableHeaderView = _Searchbar;  	if (_OriginalSections == null) {  		_OriginalSections = new Dictionary<int' Section> (((BaseDialogViewSource)TableView.Source).Sections);  		_OriginalDataContext = new List<object> ();  		foreach (var section in _OriginalSections.Values) {  			_OriginalDataContext.Add (section.DataContext);  		}  	}  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,StartSearch,The following statement contains a magic number: UIView.SetAnimationDuration (0.3);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,StartSearch,The following statement contains a magic number: _Searchbar.Frame = new RectangleF (0' 0' _Searchbar.Frame.Width' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (hide) {  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	// we need to perform some post operations after the animation is complete  	UIView.SetAnimationDelegate (this);  	UIView.SetAnimationDidStopSelector (new Selector ("fadeOutDidFinish"));  	if (_Searchbar != null)  		_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  	TableView.ContentOffset = new PointF (0' 45);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (hide) {  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	// we need to perform some post operations after the animation is complete  	UIView.SetAnimationDelegate (this);  	UIView.SetAnimationDidStopSelector (new Selector ("fadeOutDidFinish"));  	if (_Searchbar != null)  		_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  	TableView.ContentOffset = new PointF (0' 45);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (hide) {  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	// we need to perform some post operations after the animation is complete  	UIView.SetAnimationDelegate (this);  	UIView.SetAnimationDidStopSelector (new Selector ("fadeOutDidFinish"));  	if (_Searchbar != null)  		_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  	TableView.ContentOffset = new PointF (0' 45);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (hide) {  	UIView.BeginAnimations (null);  	UIView.SetAnimationDuration (0.3);  	// we need to perform some post operations after the animation is complete  	UIView.SetAnimationDelegate (this);  	UIView.SetAnimationDidStopSelector (new Selector ("fadeOutDidFinish"));  	if (_Searchbar != null)  		_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  	TableView.ContentOffset = new PointF (0' 45);  	UIView.CommitAnimations ();  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: UIView.SetAnimationDuration (0.3);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (_Searchbar != null)  	_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: if (_Searchbar != null)  	_Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: _Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: _Searchbar.Frame = new RectangleF (0' -45' _Searchbar.Frame.Width' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,FinishSearch,The following statement contains a magic number: TableView.ContentOffset = new PointF (0' 45);  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,CreateSearchbar,The following statement contains a magic number: if (_Searchbar == null) {  	var searchable = TableView.Source as ISearchBar;  	if (searchable != null) {  		_Searchbar = new UISearchBar (new RectangleF (0' 0' TableView.Bounds.Width' 45)) {  			Delegate = new DialogViewSearchDelegate (this)'  			TintColor = Theme.BarTintColor'  		};  		if (!string.IsNullOrEmpty (searchable.SearchPlaceholder))  			_Searchbar.Placeholder = searchable.SearchPlaceholder;  		else  			_Searchbar.Placeholder = "Search";  	}  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,CreateSearchbar,The following statement contains a magic number: if (searchable != null) {  	_Searchbar = new UISearchBar (new RectangleF (0' 0' TableView.Bounds.Width' 45)) {  		Delegate = new DialogViewSearchDelegate (this)'  		TintColor = Theme.BarTintColor'  	};  	if (!string.IsNullOrEmpty (searchable.SearchPlaceholder))  		_Searchbar.Placeholder = searchable.SearchPlaceholder;  	else  		_Searchbar.Placeholder = "Search";  }  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,CreateSearchbar,The following statement contains a magic number: _Searchbar = new UISearchBar (new RectangleF (0' 0' TableView.Bounds.Width' 45)) {  	Delegate = new DialogViewSearchDelegate (this)'  	TintColor = Theme.BarTintColor'  };  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,CreateSearchbar,The following statement contains a magic number: frame.Height = 45;  
Magic Number,MonoMobile.Views,DialogViewController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewController.cs,Flip,The following statement contains a magic number: UIView.SetAnimationDuration (1.25);  
Magic Number,MonoMobile.Views,DialogViewSearchDelegate,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\DialogViewSearchDelegate.cs,CancelButtonClicked,The following statement contains a magic number: new Wait (TimeSpan.FromMilliseconds (300)' () =>  {  	_Container.FinishSearch (false);  	_Container.ToggleSearchbar ();  });  
Magic Number,MonoMobile.Views,Reachability,C:\repos\RobertKozak_MonoMobile.Views\Application\Reachablity.cs,IsAdHocWiFiNetworkAvailable,The following statement contains a magic number: if (adHocWiFiNetworkReachability == null) {  	adHocWiFiNetworkReachability = new NetworkReachability (new IPAddress (new byte[] {  		169'  		254'  		0'  		0  	}));  	adHocWiFiNetworkReachability.SetCallback (OnChange);  	adHocWiFiNetworkReachability.Schedule (CFRunLoop.Current' CFRunLoop.ModeDefault);  }  
Magic Number,MonoMobile.Views,Reachability,C:\repos\RobertKozak_MonoMobile.Views\Application\Reachablity.cs,IsAdHocWiFiNetworkAvailable,The following statement contains a magic number: if (adHocWiFiNetworkReachability == null) {  	adHocWiFiNetworkReachability = new NetworkReachability (new IPAddress (new byte[] {  		169'  		254'  		0'  		0  	}));  	adHocWiFiNetworkReachability.SetCallback (OnChange);  	adHocWiFiNetworkReachability.Schedule (CFRunLoop.Current' CFRunLoop.ModeDefault);  }  
Magic Number,MonoMobile.Views,Reachability,C:\repos\RobertKozak_MonoMobile.Views\Application\Reachablity.cs,IsAdHocWiFiNetworkAvailable,The following statement contains a magic number: adHocWiFiNetworkReachability = new NetworkReachability (new IPAddress (new byte[] {  	169'  	254'  	0'  	0  }));  
Magic Number,MonoMobile.Views,Reachability,C:\repos\RobertKozak_MonoMobile.Views\Application\Reachablity.cs,IsAdHocWiFiNetworkAvailable,The following statement contains a magic number: adHocWiFiNetworkReachability = new NetworkReachability (new IPAddress (new byte[] {  	169'  	254'  	0'  	0  }));  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The following statement contains a magic number: if (Sections.Count > sectionIndex && Sections.ContainsKey (sectionIndex)) {  	var section = Sections [sectionIndex];  	if (section != null && !string.IsNullOrEmpty (section.HeaderText)) {  		var indentation = UIDevice.CurrentDevice.GetIndentation ();  		var width = tableView.Bounds.Width - (indentation * 2);  		using (var headerLabel = new UILabel ()) {  			headerLabel.Font = UIFont.BoldSystemFontOfSize (UIFont.LabelFontSize);  			var size = headerLabel.StringSize (section.HeaderText' headerLabel.Font);  			var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1;  			return height;  		}  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The following statement contains a magic number: if (Sections.Count > sectionIndex && Sections.ContainsKey (sectionIndex)) {  	var section = Sections [sectionIndex];  	if (section != null && !string.IsNullOrEmpty (section.HeaderText)) {  		var indentation = UIDevice.CurrentDevice.GetIndentation ();  		var width = tableView.Bounds.Width - (indentation * 2);  		using (var headerLabel = new UILabel ()) {  			headerLabel.Font = UIFont.BoldSystemFontOfSize (UIFont.LabelFontSize);  			var size = headerLabel.StringSize (section.HeaderText' headerLabel.Font);  			var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1;  			return height;  		}  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The following statement contains a magic number: if (section != null && !string.IsNullOrEmpty (section.HeaderText)) {  	var indentation = UIDevice.CurrentDevice.GetIndentation ();  	var width = tableView.Bounds.Width - (indentation * 2);  	using (var headerLabel = new UILabel ()) {  		headerLabel.Font = UIFont.BoldSystemFontOfSize (UIFont.LabelFontSize);  		var size = headerLabel.StringSize (section.HeaderText' headerLabel.Font);  		var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1;  		return height;  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The following statement contains a magic number: if (section != null && !string.IsNullOrEmpty (section.HeaderText)) {  	var indentation = UIDevice.CurrentDevice.GetIndentation ();  	var width = tableView.Bounds.Width - (indentation * 2);  	using (var headerLabel = new UILabel ()) {  		headerLabel.Font = UIFont.BoldSystemFontOfSize (UIFont.LabelFontSize);  		var size = headerLabel.StringSize (section.HeaderText' headerLabel.Font);  		var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1;  		return height;  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForHeader,The following statement contains a magic number: using (var headerLabel = new UILabel ()) {  	headerLabel.Font = UIFont.BoldSystemFontOfSize (UIFont.LabelFontSize);  	var size = headerLabel.StringSize (section.HeaderText' headerLabel.Font);  	var height = (float)Math.Floor ((float)(size.Height * (headerLabel.Font.NumberOfLines (section.HeaderText' width) + 0.5))) + 1;  	return height;  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: if (Sections.Count > sectionIndex && Sections.ContainsKey (sectionIndex)) {  	var section = Sections [sectionIndex];  	if (section != null && !string.IsNullOrEmpty (section.FooterText)) {  		var indentation = UIDevice.CurrentDevice.GetIndentation ();  		var width = tableView.Bounds.Width - (indentation * 2);  		using (var footerLabel = new UILabel ()) {  			footerLabel.Font = UIFont.SystemFontOfSize (15);  			var size = footerLabel.StringSize (section.FooterText' footerLabel.Font);  			var height = size.Height * (footerLabel.Font.NumberOfLines (section.FooterText' width)) + 1;  			return height;  		}  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: if (Sections.Count > sectionIndex && Sections.ContainsKey (sectionIndex)) {  	var section = Sections [sectionIndex];  	if (section != null && !string.IsNullOrEmpty (section.FooterText)) {  		var indentation = UIDevice.CurrentDevice.GetIndentation ();  		var width = tableView.Bounds.Width - (indentation * 2);  		using (var footerLabel = new UILabel ()) {  			footerLabel.Font = UIFont.SystemFontOfSize (15);  			var size = footerLabel.StringSize (section.FooterText' footerLabel.Font);  			var height = size.Height * (footerLabel.Font.NumberOfLines (section.FooterText' width)) + 1;  			return height;  		}  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: if (section != null && !string.IsNullOrEmpty (section.FooterText)) {  	var indentation = UIDevice.CurrentDevice.GetIndentation ();  	var width = tableView.Bounds.Width - (indentation * 2);  	using (var footerLabel = new UILabel ()) {  		footerLabel.Font = UIFont.SystemFontOfSize (15);  		var size = footerLabel.StringSize (section.FooterText' footerLabel.Font);  		var height = size.Height * (footerLabel.Font.NumberOfLines (section.FooterText' width)) + 1;  		return height;  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: if (section != null && !string.IsNullOrEmpty (section.FooterText)) {  	var indentation = UIDevice.CurrentDevice.GetIndentation ();  	var width = tableView.Bounds.Width - (indentation * 2);  	using (var footerLabel = new UILabel ()) {  		footerLabel.Font = UIFont.SystemFontOfSize (15);  		var size = footerLabel.StringSize (section.FooterText' footerLabel.Font);  		var height = size.Height * (footerLabel.Font.NumberOfLines (section.FooterText' width)) + 1;  		return height;  	}  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: using (var footerLabel = new UILabel ()) {  	footerLabel.Font = UIFont.SystemFontOfSize (15);  	var size = footerLabel.StringSize (section.FooterText' footerLabel.Font);  	var height = size.Height * (footerLabel.Font.NumberOfLines (section.FooterText' width)) + 1;  	return height;  }  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,GetHeightForFooter,The following statement contains a magic number: footerLabel.Font = UIFont.SystemFontOfSize (15);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateHeaderView,The following statement contains a magic number: headerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateHeaderView,The following statement contains a magic number: headerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateHeaderView,The following statement contains a magic number: headerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateFooterView,The following statement contains a magic number: footerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateFooterView,The following statement contains a magic number: footerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BaseDialogViewSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\BaseDialogViewSource.cs,CreateFooterView,The following statement contains a magic number: footerLabel.TextColor = UIColor.FromRGB (76' 86' 108);  
Magic Number,MonoMobile.Views,BooleanCellView,C:\repos\RobertKozak_MonoMobile.Views\Dialog\CellViews\Base\BooleanCellView.cs,BooleanCellView,The following statement contains a magic number: Switch = new UISwitch (new RectangleF (0' 9' frame.Width' frame.Height)) {  	AutoresizingMask = UIViewAutoresizing.FlexibleHeight | UIViewAutoresizing.FlexibleWidth'  	BackgroundColor = UIColor.Clear'  	Tag = 1  };  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetIndentation,The following statement contains a magic number: if (device.IsPhone ())  	return 10;  else  	return 40;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetIndentation,The following statement contains a magic number: if (device.IsPhone ())  	return 10;  else  	return 40;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetIndentation,The following statement contains a magic number: return 10;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetIndentation,The following statement contains a magic number: return 40;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetDeviceMargin,The following statement contains a magic number: if (device.IsPhone ())  	return 3;  else  	return 7;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetDeviceMargin,The following statement contains a magic number: if (device.IsPhone ())  	return 3;  else  	return 7;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetDeviceMargin,The following statement contains a magic number: return 3;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetDeviceMargin,The following statement contains a magic number: return 7;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetFixedGap,The following statement contains a magic number: return 5;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: if (device.IsPad ()) {  	if (landscape)  		return 352;  	return 264;  }  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: if (device.IsPad ()) {  	if (landscape)  		return 352;  	return 264;  }  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: if (landscape)  	return 352;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: return 352;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: return 264;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: if (landscape)  	return 140;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: return 140;  
Magic Number,MonoMobile.Views,UIDeviceExtensions,C:\repos\RobertKozak_MonoMobile.Views\Extensions\UIDeviceExtensions.cs,GetKeyboardHeight,The following statement contains a magic number: return 216;  
Magic Number,MonoMobile.Views,NavigationController,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\NavigationController.cs,DisposeOldViewController,The following statement contains a magic number: new Wait (TimeSpan.FromMilliseconds (500)' () =>  {  	//	DidReceiveMemoryWarning();  	controller.Dispose ();  });  
Magic Number,MonoMobile.Views,HttpDebug,C:\repos\RobertKozak_MonoMobile.Views\Application\Debug\HttpDebug.cs,HttpServer,The following statement contains a magic number: while (true) {  	var context = listener.GetContext ();  	var request = context.Request;  	var response = context.Response;  	var tw = new StreamWriter (response.OutputStream);  	var path = request.Url.AbsolutePath;  	if (path.StartsWith ("/type/")) {  		ShowInstancesOf (tw' path.Substring (6));  	}  	else {  		Summary (tw);  	}  	tw.Flush ();  	response.OutputStream.Close ();  }  
Magic Number,MonoMobile.Views,HttpDebug,C:\repos\RobertKozak_MonoMobile.Views\Application\Debug\HttpDebug.cs,HttpServer,The following statement contains a magic number: if (path.StartsWith ("/type/")) {  	ShowInstancesOf (tw' path.Substring (6));  }  else {  	Summary (tw);  }  
Magic Number,MonoMobile.Views,HttpDebug,C:\repos\RobertKozak_MonoMobile.Views\Application\Debug\HttpDebug.cs,HttpServer,The following statement contains a magic number: ShowInstancesOf (tw' path.Substring (6));  
Magic Number,MonoMobile.Views,VerticalAlignmnentLabel,C:\repos\RobertKozak_MonoMobile.Views\Controls\VerticalAlignmentLabel.cs,TextRectForBounds,The following statement contains a magic number: if (_VerticalAlignment != UIVerticalAlignment.Top) {  	if (_VerticalAlignment == UIVerticalAlignment.Bottom) {  		bounds.Y += bounds.Height - calculatedRect.Height;  		//move down by difference  	}  	else {  		bounds.Y += (bounds.Height - calculatedRect.Height) / 2;  	}  }  
Magic Number,MonoMobile.Views,VerticalAlignmnentLabel,C:\repos\RobertKozak_MonoMobile.Views\Controls\VerticalAlignmentLabel.cs,TextRectForBounds,The following statement contains a magic number: if (_VerticalAlignment == UIVerticalAlignment.Bottom) {  	bounds.Y += bounds.Height - calculatedRect.Height;  	//move down by difference  }  else {  	bounds.Y += (bounds.Height - calculatedRect.Height) / 2;  }  
Magic Number,MonoMobile.Views,VerticalAlignmnentLabel,C:\repos\RobertKozak_MonoMobile.Views\Controls\VerticalAlignmentLabel.cs,TextRectForBounds,The following statement contains a magic number: bounds.Y += (bounds.Height - calculatedRect.Height) / 2;  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: if (image != null) {  	InvokeOnMainThread (() =>  {  		var bounds = Bounds;  		ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  		ImageView.Layer.CornerRadius = 5.0f;  		ImageView.Layer.MasksToBounds = true;  		ImageView.Layer.BorderWidth = 1;  		ImageView.Layer.BorderColor = UIColor.LightGray.CGColor;  		ImageView.Image = image;  		ImageView.Alpha = 0f;  		Add (ImageView);  		_ActivityIndicatorView.StopAnimating ();  		UIView.BeginAnimations ("fadeIn");  		UIView.SetAnimationDuration (animate ? 0.6f : 0f);  		ImageView.Alpha = 1.0f;  		UIView.CommitAnimations ();  	});  }  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: if (image != null) {  	InvokeOnMainThread (() =>  {  		var bounds = Bounds;  		ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  		ImageView.Layer.CornerRadius = 5.0f;  		ImageView.Layer.MasksToBounds = true;  		ImageView.Layer.BorderWidth = 1;  		ImageView.Layer.BorderColor = UIColor.LightGray.CGColor;  		ImageView.Image = image;  		ImageView.Alpha = 0f;  		Add (ImageView);  		_ActivityIndicatorView.StopAnimating ();  		UIView.BeginAnimations ("fadeIn");  		UIView.SetAnimationDuration (animate ? 0.6f : 0f);  		ImageView.Alpha = 1.0f;  		UIView.CommitAnimations ();  	});  }  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: InvokeOnMainThread (() =>  {  	var bounds = Bounds;  	ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  	ImageView.Layer.CornerRadius = 5.0f;  	ImageView.Layer.MasksToBounds = true;  	ImageView.Layer.BorderWidth = 1;  	ImageView.Layer.BorderColor = UIColor.LightGray.CGColor;  	ImageView.Image = image;  	ImageView.Alpha = 0f;  	Add (ImageView);  	_ActivityIndicatorView.StopAnimating ();  	UIView.BeginAnimations ("fadeIn");  	UIView.SetAnimationDuration (animate ? 0.6f : 0f);  	ImageView.Alpha = 1.0f;  	UIView.CommitAnimations ();  });  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: InvokeOnMainThread (() =>  {  	var bounds = Bounds;  	ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  	ImageView.Layer.CornerRadius = 5.0f;  	ImageView.Layer.MasksToBounds = true;  	ImageView.Layer.BorderWidth = 1;  	ImageView.Layer.BorderColor = UIColor.LightGray.CGColor;  	ImageView.Image = image;  	ImageView.Alpha = 0f;  	Add (ImageView);  	_ActivityIndicatorView.StopAnimating ();  	UIView.BeginAnimations ("fadeIn");  	UIView.SetAnimationDuration (animate ? 0.6f : 0f);  	ImageView.Alpha = 1.0f;  	UIView.CommitAnimations ();  });  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,AddImage,The following statement contains a magic number: ImageView = new UIImageView (new RectangleF (BorderWidth' BorderWidth' Bounds.Width - (BorderWidth * 2)' Bounds.Height - (BorderWidth * 2)));  
Magic Number,MonoMobile.Views,UIBorderedView,C:\repos\RobertKozak_MonoMobile.Views\Controls\UIBorderedView.cs,Initialize,The following statement contains a magic number: CornerRadius = 10;  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,hex,The following statement contains a magic number: if (v < 10) {  	return '0' + v;  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,hex,The following statement contains a magic number: return 'a' + v - 10;  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	ret [i * 2] = (char)hex (bytes [i] >> 4);  	ret [i * 2 + 1] = (char)hex (bytes [i] & 0xf);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	ret [i * 2] = (char)hex (bytes [i] >> 4);  	ret [i * 2 + 1] = (char)hex (bytes [i] & 0xf);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	ret [i * 2] = (char)hex (bytes [i] >> 4);  	ret [i * 2 + 1] = (char)hex (bytes [i] & 0xf);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	ret [i * 2] = (char)hex (bytes [i] >> 4);  	ret [i * 2 + 1] = (char)hex (bytes [i] & 0xf);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: ret [i * 2] = (char)hex (bytes [i] >> 4);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: ret [i * 2] = (char)hex (bytes [i] >> 4);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,md5,The following statement contains a magic number: ret [i * 2 + 1] = (char)hex (bytes [i] & 0xf);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: if (DefaultLoader == null) {  	DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: if (DefaultLoader == null) {  	DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: if (DefaultLoader == null) {  	DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: if (DefaultLoader == null) {  	DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  }  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,DefaultRequestImage,The following statement contains a magic number: DefaultLoader = new ImageLoader (50' 4 * 1024 * 1024);  
Magic Number,MonoMobile.Views.Utilities,ImageLoader,C:\repos\RobertKozak_MonoMobile.Views\Dialog\ImageLoader.cs,QueueRequest,The following statement contains a magic number: lock (requestQueue) {  	if (pendingRequests.ContainsKey (uri)) {  		//Util.Log ("pendingRequest: added new listener for {0}"' id);  		pendingRequests [uri].Add (notify);  		return;  	}  	var slot = new List<IImageUpdated> (4);  	slot.Add (notify);  	pendingRequests [uri] = slot;  	if (requestQueue.Count >= MaxRequests) {  		requestQueue.Push (uri);  	}  	else {  		ThreadPool.QueueUserWorkItem (state =>  {  			try {  				StartPicDownload (uri' target' headers);  			}  			catch (Exception e) {  				Console.WriteLine (e);  			}  		});  	}  }  
Missing Default,MonoMobile.Views,ListSource,C:\repos\RobertKozak_MonoMobile.Views\Dialog\DialogViewController\ListSource.cs,RowSelected,The following switch statement is missing a default case: switch (UnselectionBehavior) {  case UnselectionBehavior.SetSelectedToCurrentValue:  	break;  case UnselectionBehavior.SetSelectedToNull:  	SelectedItem = null;  	break;  case UnselectionBehavior.SetSelectedToPreviousValueOrNull: {  	if (SelectedItems.Count > 0) {  		SelectedItem = SelectedItems [SelectedItems.Count - 1];  	}  	else {  		SelectedItem = null;  	}  	break;  }  }  
