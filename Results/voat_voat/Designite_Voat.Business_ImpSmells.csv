Implementation smell,Namespace,Class,File,Method,Description
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The method has 168 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The method has 183 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The method has 238 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSort,The method has 143 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The method has 100 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,The method has 109 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The method has 103 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The method has 107 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSearch,The method has 124 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The method has 200 lines of code.
Long Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The method has 134 lines of code.
Long Method,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The method has 137 lines of code.
Complex Method,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Convert,Cyclomatic complexity of the method is 13
Complex Method,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,SetItem,Cyclomatic complexity of the method is 10
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,Cyclomatic complexity of the method is 19
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,Cyclomatic complexity of the method is 19
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,Cyclomatic complexity of the method is 22
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSort,Cyclomatic complexity of the method is 16
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditSubmission,Cyclomatic complexity of the method is 9
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteSubmission,Cyclomatic complexity of the method is 9
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveUserPrefernces,Cyclomatic complexity of the method is 19
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessageReply,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,Cyclomatic complexity of the method is 15
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,Cyclomatic complexity of the method is 11
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryBase,Cyclomatic complexity of the method is 10
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ConvertMessageTypeFlag,Cyclomatic complexity of the method is 9
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,Cyclomatic complexity of the method is 9
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanUserFromSubverse,Cyclomatic complexity of the method is 12
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,Cyclomatic complexity of the method is 12
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSearch,Cyclomatic complexity of the method is 22
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplyCommentSearch,Cyclomatic complexity of the method is 12
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BannedDomains,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,Cyclomatic complexity of the method is 14
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,CreateOrUpdateSet,Cyclomatic complexity of the method is 10
Complex Method,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,Cyclomatic complexity of the method is 8
Complex Method,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,SearchOptions,Cyclomatic complexity of the method is 16
Complex Method,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Voat.Domain.Command,GlobalBanCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Admin\GlobalBanCommand.cs,ExecuteStage,Cyclomatic complexity of the method is 10
Complex Method,Voat.Domain.Query.Base,BaseQueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\BaseQueryCommentSegment.cs,GetSegment,Cyclomatic complexity of the method is 10
Complex Method,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,GetMimeType,Cyclomatic complexity of the method is 8
Complex Method,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,SendCommentReplyNotification,Cyclomatic complexity of the method is 8
Complex Method,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,Cyclomatic complexity of the method is 9
Complex Method,Voat.Rules,VoatRuleContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\VoatRuleContext.cs,GetMissingValue,Cyclomatic complexity of the method is 8
Complex Method,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,Cyclomatic complexity of the method is 8
Complex Method,Voat.Rules.Posting,PostSubmissionThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionThrottleRule.cs,EvaluateRule,Cyclomatic complexity of the method is 9
Complex Method,Voat.Rules.Posting,PostSubmissionValidityRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionValidityRule.cs,EvaluateRule,Cyclomatic complexity of the method is 12
Complex Method,Voat.Utilities,AccountSecurity,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\AccountSecurity.cs,IsPasswordComplex,Cyclomatic complexity of the method is 8
Complex Method,Voat.Utilities.Components,MatchProcessingReplacer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\RegExReplacer.cs,IsInBlock,Cyclomatic complexity of the method is 8
Long Parameter List,Voat,VoatUserManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Auth\VoatUserManager.cs,VoatUserManager,The method has 9 parameters. Parameters: store' optionsAccessor' passwordHasher' userValidators' passwordValidators' keyNormalizer' errorDescribers' services' logger
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetVoteValue,The method has 5 parameters. Parameters: sourceUser' targetUser' contentType' id' voteStatus
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryBase,The method has 5 parameters. Parameters: context' ownerName' ownerType' type' state
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,MarkMessages,The method has 5 parameters. Parameters: ownerName' ownerType' type' state' id
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The method has 6 parameters. Parameters: ownerName' ownerType' type' state' markAsRead' options
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The method has 5 parameters. Parameters: subverse' contentType' hours' reviewedStatus' ruleSetID
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteCount,The method has 5 parameters. Parameters: sourceUser' targetUser' contentType' voteType' timeSpan
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditApiKey,The method has 5 parameters. Parameters: apiKey' name' description' url' redirectUrl
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserSubmissionCount,The method has 5 parameters. Parameters: userName' range' type' subverse' isDeleted
Long Parameter List,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The method has 6 parameters. Parameters: userName' contentType' subverse' isReceived' timeSpan' cutOffDate
Long Parameter List,Voat.Domain.Command,EditApiKeyCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\ApiKeyCommands.cs,EditApiKeyCommand,The method has 5 parameters. Parameters: apiKeyID' name' description' url' redirectUrl
Long Parameter List,Voat.Domain.Command,MarkMessagesCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\MarkMessageCommand.cs,MarkMessagesCommand,The method has 5 parameters. Parameters: ownerName' ownerType' type' action' id
Long Parameter List,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,Map,The method has 5 parameters. Parameters: treeComment' user' submissionOwnerName' commentVotes' userBlocks
Long Parameter List,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,HydrateUserData,The method has 5 parameters. Parameters: user' comment' populateMissingUserState' commentVotes' userBlocks
Long Parameter List,Voat.Domain.Query.Base,BaseQueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\BaseQueryCommentSegment.cs,AddComments,The method has 8 parameters. Parameters: queryTree' parent' count' nestLevel' currentNestLevel' collapseThreshold' sort' mapToNestedCommentFunc
Long Parameter List,Voat.Domain.Query,QueryMessageBase<T>,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryMessages.cs,QueryMessageBase,The method has 5 parameters. Parameters: ownerName' ownerType' type' state' markAsRead
Long Parameter List,Voat.Domain.Query,QueryMessages,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryMessages.cs,QueryMessages,The method has 5 parameters. Parameters: ownerName' ownerType' type' state' markAsRead
Long Parameter List,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Resize,The method has 6 parameters. Parameters: input' maximumSize' forceJpegFormat' square' scale' center
Long Parameter List,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendMentionNotice,The method has 5 parameters. Parameters: userName' sendingUserName' type' referenceID' message
Long Parameter List,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendMessageNotice,The method has 6 parameters. Parameters: userName' sendingUserName' type' referenceType' referenceID' message
Long Parameter List,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendVoteNotice,The method has 5 parameters. Parameters: userName' sendingUserName' referenceType' referenceID' voteValue
Long Parameter List,Voat.Utilities,ThumbGenerator,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\ThumbGenerator.cs,GenerateImageThumbnail,The method has 6 parameters. Parameters: fileManager' key' stream' size' forceJpegFormat' square
Long Parameter List,Voat.Utilities,VoatUrlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\VoatUrlFormatter.cs,CommentsPagePath,The method has 5 parameters. Parameters: subverse' submissionID' sort' queryString' options
Long Identifier,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyCommentPostingQuotaUsed,The length of the parameter userCommentSubmissionsInPast24Hours is 35.
Long Identifier,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyCommentPostingQuotaUsed,The length of the parameter userCommentSubmissionsInPastHour is 32.
Long Identifier,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyGlobalPostingQuotaUsed,The length of the parameter totalUserSubmissionsForTimeSpam is 31.
Long Identifier,Voat.Utilities,CONSTANTS,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\CONSTANTS.cs,,The length of the parameter DEFAULT_GUEST_PAGE_CACHE_MINUTES is 32.
Long Identifier,Voat.Utilities,CONSTANTS,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\CONSTANTS.cs,,The length of the parameter REQUEST_VERIFICATION_HEADER_NAME is 32.
Long Identifier,Voat.Utilities.Components,MatchProcessingReplacer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\RegExReplacer.cs,Replace,The length of the parameter requiresAdditionalProcecessing is 30.
Long Statement,Voat,ChatRoom,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Chat\ChatRoom.cs,GetAccessHash,The length of the statement  "                hash = System.Convert.ToBase64String(hashAlg.ComputeHash(System.Text.ASCIIEncoding.Unicode.GetBytes(String.Format("{0}-{1}"' userName' passphrase)))); " is 150.
Long Statement,Voat,ChatRoom,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Chat\ChatRoom.cs,AddUser,The length of the statement  "            var user = new UserContext() { UserName = userName' DisplayName = IsAnonymized ? GenerateAlias() : userName' IsAnonymized = IsAnonymized }; " is 139.
Long Statement,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,BasePath,The length of the statement  "                        path = String.Format("{0}/{1}"' Utilities.VoatUrlFormatter.BasePath(domainReference)' sort == null ? "" : sort.Value.ToString().ToLower()); " is 139.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,RefetchItem,The length of the statement  "                    EventLogger.Instance.Log(new LogInformation() { Type = LogType.Debug' Category = "Cache"' Message = msg' Origin = Configuration.VoatSettings.Instance.Origin.ToString() }); " is 171.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,RefetchItem,The length of the statement  "                    AddEvictionTracker(cacheKey' new object()' meta.CacheTime.Subtract(_refreshOffset)' new PostEvictionDelegate(RefetchItem)); " is 123.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,RefetchItem,The length of the statement  "                    EventLogger.Instance.Log(new LogInformation() { Type = LogType.Debug' Category = "Cache"' Message = msg' Origin = Configuration.VoatSettings.Instance.Origin.ToString() }); " is 171.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,ExpireItem,The length of the statement  "                EventLogger.Instance.Log(new LogInformation() { Type = LogType.Debug' Category = "Cache"' Message = msg' Origin = Configuration.VoatSettings.Instance.Origin.ToString() }); " is 171.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                    EventLogger.Instance.Log(new LogInformation() { Type = LogType.Debug' Category = "Cache"' Message = $"Inserting Cache ({cacheKey})"' Origin = Configuration.VoatSettings.Instance.Origin.ToString() }); " is 199.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        _meta[cacheKey] = new RefetchEntryFunc<T>(getData) { CacheTime = cacheTime' CurrentCount = 0' MaxCount = refetchLimit }; " is 120.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        //AddEvictionTracker(cacheKey' new object()' Repository.CurrentDate.Add(cacheTime)' new PostEvictionDelegate(ExpireItem)); " is 122.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        //cache.Add(cacheKey' new object()' new CacheItemPolicy() { AbsoluteExpiration = Repository.CurrentDate.Add(cacheTime)' RemovedCallback = new CacheEntryRemovedCallback(ExpireItem) }); " is 183.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                    EventLogger.Instance.Log(new LogInformation() { Type = LogType.Debug' Category = "Cache"' Message = $"Inserting Cache ({cacheKey})"' Origin = Configuration.VoatSettings.Instance.Origin.ToString() }); " is 199.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        _meta[cacheKey] = new RefetchEntryTask<T>(getData) { CacheTime = cacheTime' CurrentCount = 0' MaxCount = refetchLimit }; " is 120.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        //AddEvictionTracker(cacheKey' new object()' Repository.CurrentDate.Add(cacheTime.Subtract(_refreshOffset))' new PostEvictionDelegate(RefetchItem)); " is 148.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        //AddEvictionTracker(cacheKey' new object()' Repository.CurrentDate.Add(cacheTime)' new PostEvictionDelegate(ExpireItem)); " is 122.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Register,The length of the statement  "                                        //cache.Add(cacheKey' new object()' new CacheItemPolicy() { AbsoluteExpiration = Repository.CurrentDate.Add(cacheTime)' RemovedCallback = new CacheEntryRemovedCallback(ExpireItem) }); " is 183.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Convert,The length of the statement  "                        //HACK: Need a better way to handle redis to .NET type mapping. We store int? in cache on UI and Redis conversions out of cache throw invalid cast exceptions. " is 158.
Long Statement,Voat.Caching,CacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CacheHandler.cs,Convert,The length of the statement  "                                        return (T)castType.GetConstructor(castType.GetGenericArguments()).Invoke(new object[] { System.Convert.ChangeType(val' typeof(int)) }); " is 135.
Long Statement,Voat.Caching,CachingKey,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CachingKey.cs,ApiPermissionPolicy,The length of the statement  "            return String.Format("Api:Policy:{0}"' apiPermissionPolicyID.HasValue ? apiPermissionPolicyID.Value.ToString() : "default"); " is 124.
Long Statement,Voat.Caching,CachingKey,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\CachingKey.cs,ApiStreamLastCallDate,The length of the statement  "            return String.Format("Api:Stream:{0}:{1}:{2}"' String.IsNullOrEmpty(userName) ? "unknown" : userName' contentType.ToString()' (String.IsNullOrEmpty(subverse) ? "All" : subverse)); " is 179.
Long Statement,Voat.Caching,Submission_Legacy,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\DataCache.cs,Retrieve,The length of the statement  "                    Voat.Data.Models.Submission submission = CacheHandler.Instance.Register<Voat.Data.Models.Submission>(cacheKey' new Func<Voat.Data.Models.Submission>(() => " is 154.
Long Statement,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,GetItem,The length of the statement  "                    return entries.ToDictionary<HashEntry' object' object>(new Func<HashEntry' object>(x => x.Name)' new Func<HashEntry' object>(x => Deserialize(x.Value))); " is 153.
Long Statement,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,SetItem,The length of the statement  "                        GetDatabase(ConnectionType.Write).HashSet(cacheKey' new HashEntry[] { new HashEntry(key.ToString()' Serialize(item)) }); " is 120.
Long Statement,Voat.Data,DapperQuery,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\DapperQuery.cs,ToString,The length of the statement  "            var q = $"{EnsureStartsWith(FormattedSelect' "SELECT ")} {EnsureStartsWith(Where' "WHERE ")} {EnsureStartsWith(GroupBy' "GROUP BY ")} {EnsureStartsWith(Having' "HAVING ")} {EnsureStartsWith(OrderBy' "ORDER BY ")}"; " is 214.
Long Statement,Voat.Data,DapperQuery,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\DapperQuery.cs,ToString,The length of the statement  "                q += String.Format(" OFFSET {0} ROWS FETCH NEXT {1} ROWS ONLY"' (SkipCount.HasValue ? SkipCount.Value : 0).ToString()' TakeCount.Value.ToString()); " is 147.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The length of the statement  "                    var existingVoteTracker = _db.CommentVoteTracker.FirstOrDefault(x => x.CommentID == commentID && x.UserName == userName); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The length of the statement  "                    ruleContext.PropertyBag.CurrentVoteValue = existingVote; //set existing vote value so rules engine can avoid checks on revotes " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The length of the statement  "                            outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteComment' RuleScope.UpVote' RuleScope.UpVoteComment); " is 146.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The length of the statement  "                            outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteComment' RuleScope.DownVote' RuleScope.DownVoteComment); " is 150.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The length of the statement  "                                        VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs " is 165.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                    var existingVoteTracker = _db.SubmissionVoteTracker.FirstOrDefault(x => x.SubmissionID == submissionID && x.UserName == userName); " is 130.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                    ruleContext.PropertyBag.CurrentVoteValue = existingVote; //set existing vote value so rules engine can avoid checks on revotes " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                            outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteSubmission' RuleScope.UpVote' RuleScope.UpVoteSubmission); " is 152.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                            outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteSubmission' RuleScope.DownVote' RuleScope.DownVoteSubmission); " is 156.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                                        VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs " is 174.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                                        existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The length of the statement  "                                        existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetVoteValue,The length of the statement  "            q.Select = $"sub.\"IsPrivate\"' s.\"IsAnonymized\"' sub.\"MinCCPForDownvote\" FROM {SqlFormatter.Table("Subverse"' "sub"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON s.\"Subverse\" = sub.\"Name\""; " is 240.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,CreateSubverse,The length of the statement  "                await SubscribeUser(new DomainReference(DomainType.Subverse' subverse.Name)' SubscriptionAction.Subscribe).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 155.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetStickies,The length of the statement  "            var dataStickies = await _db.StickiedSubmission.Where(s => s.Subverse.ToLower() == subverse.ToLower()).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 204.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetStickies,The length of the statement  "                        sticky.Attributes.Insert(0' new Voat.Domain.Models.ContentAttribute() { CssClass = "promoted"' Name = "sticky"' Type = Voat.Domain.Models.AttributeType.Flair }); " is 161.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetCommentCount,The length of the statement  "                cmd.CommandText = $"SELECT COUNT(*) FROM {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} WHERE c.\"SubmissionID\" = @SubmissionID AND c.\"IsDeleted\" != {SqlFormatter.BooleanLiteral(true)}"; " is 195.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetTopViewedSubmissions,The length of the statement  "                        where submission.ArchiveDate == null && !submission.IsDeleted && subverse.IsPrivate != true && subverse.IsAdminPrivate != true && subverse.IsAdult == false && submission.CreationDate >= startDate && submission.CreationDate <= CurrentDate " is 237.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetTopViewedSubmissions,The length of the statement  "                        //where !(from ubs in _db.UserBlockedSubverses where ubs.Subverse.Equals(subverse.Name) select ubs.UserName).Contains(User.Identity.Name) " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserSubmissions,The length of the statement  "            var results = (await query.ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT)).Select(Selectors.SecureSubmission); " is 125.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsByDomain,The length of the statement  "            query.Select = $"SELECT DISTINCT {"{0}"} FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Subverse"' "sub"' null' "NOLOCK")} ON s.\"Subverse\" = sub.\"Name\""; " is 203.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsByDomain,The length of the statement  "            query.Where = $"s.\"Type\" = {((int)SubmissionType.Link).ToString()} AND (s.\"DomainReversed\" = @DomainReversed OR s.\"DomainReversed\" LIKE CONCAT(@DomainReversed' '.'' '%'))"; " is 178.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "            query.Select = $"SELECT DISTINCT {"{0}"} FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN  {SqlFormatter.Table("Subverse"' "sub"' null' "NOLOCK")} ON s.\"Subverse\" = sub.\"Name\""; " is 204.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                    query.Append(x => x.Select' $"INNER JOIN {SqlFormatter.Table("SubverseSetList"' joinAlias' null' "NOLOCK")} ON sub.\"ID\" {op} {joinAlias}.\"SubverseID\""); " is 156.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                                //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24"); " is 134.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //where !message.IsArchived && !message.IsDeleted && subverse.IsPrivate != true && subverse.IsAdminPrivate != true && subverse.MinCCPForDownvote == 0 " is 149.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //where !(from ubs in _db.UserBlockedSubverses where ubs.Subverse.Equals(subverse.Name) select ubs.UserName).Contains(userName) " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            query.Append(x => x.Where' $"sub.\"MinCCPForDownvote\" = 0 AND sub.\"IsAdminPrivate\" = {SqlFormatter.BooleanLiteral(false)} AND sub.\"IsPrivate\" = {SqlFormatter.BooleanLiteral(false)}"); " is 188.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                                query.Where += $" AND sub.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)} AND s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}"; " is 135.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //                && (!x.Subverse1.IsAdminPrivate && !x.Subverse1.IsPrivate && !(x.Subverse1.IsAdminDisabled.HasValue && x.Subverse1.IsAdminDisabled.Value)) " is 156.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //    where !(from bu in _db.SubverseBans where bu.Subverse == subverse.Name select bu.UserName).Contains(message.UserName) " is 123.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //query.Append(x => x.Where' "s.ID NOT IN (SELECT sticky.SubmissionID FROM StickiedSubmission sticky WITH (NOLOCK) WHERE sticky.SubmissionID = s.ID AND sticky.Subverse = s.Subverse)"); " is 184.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND {SqlFormatter.ToNormalized("sticky.\"Subverse\""' Normalization.Lower)} = 'announcements')"); " is 289.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND sticky.\"Subverse\" = s.\"Subverse\")"); " is 236.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                                query.Append(x => x.Where' $"sub.\"ID\" NOT IN (SELECT \"SubverseID\" FROM {SqlFormatter.Table("SubverseSetList")} WHERE \"SubverseSetID\" = @BlockedSetID)"); " is 158.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                            //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24"); " is 134.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The length of the statement  "                query.Append(x => x.Where' "(s.\"Title\" LIKE CONCAT('%'' @Phrase' '%') OR s.\"Content\" LIKE CONCAT('%'' @Phrase' '%') OR s.\"Url\" LIKE CONCAT('%'' @Phrase' '%'))"); " is 167.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSort,The length of the statement  "                ////query.SelectColumns = query.AppendClause(query.SelectColumns' "LastCommentDate = (SELECT TOP 1 ISNULL(c.CreationDate' s.CreationDate) FROM Comment c WITH (NOLOCK) WHERE c.SubmissionID = s.ID ORDER BY c.CreationDate DESC)"' "' "); " is 233.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "                    return MapRuleOutCome<Domain.Models.Submission>(new RuleOutcome(RuleResult.Denied' "Anon Submission Rule"' "9.1"' "Subverse does not allow anon content")' null); " is 161.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "            if (subverseObject.IsAdult || (!userSubmission.IsAdult && Regex.IsMatch(userSubmission.Title' CONSTANTS.NSFW_FLAG' RegexOptions.IgnoreCase))) " is 141.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "                //    userSubmission.Content = ContentProcessor.Instance.Process(userSubmission.Content' ProcessingStage.InboundPreSave' newSubmission); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "                newSubmission.DomainReversed = UrlUtility.GetDomainFromUri(userSubmission.Url).ReverseSplit().ToNormalized(Normalization.Lower); " is 128.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "                    Data = new { thumbsEnabled = VoatSettings.Instance.ThumbnailsEnabled' subThumbsEnabled = subverseObject.IsThumbnailEnabled }' " is 125.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "                    var result = await ThumbGenerator.GenerateThumbnail(userSubmission.Url).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostSubmission,The length of the statement  "            //    ContentProcessor.Instance.Process(String.Concat(newSubmission.Title' " "' newSubmission.Content)' ProcessingStage.InboundPostSave' newSubmission); " is 152.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditSubmission,The length of the statement  "            if (userSubmissionContent == null || (!userSubmissionContent.HasState && String.IsNullOrEmpty(userSubmissionContent.Content))) " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditSubmission,The length of the statement  "                return CommandResponse.FromStatus((Models.Submission)null' Status.Denied' "User does not have permissions to perform requested action"); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditSubmission,The length of the statement  "                submission.Title = (String.IsNullOrEmpty(userSubmissionContent.Title) ? submission.Title : userSubmissionContent.Title); " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteSubmission,The length of the statement  "                        await ResetVotes(ContentType.Submission' submission.ID' Domain.Models.VoteValue.Up' Domain.Models.VoteValue.None).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 162.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteSubmission,The length of the statement  "                    return CommandResponse.FromStatus((Models.Submission)null' Status.Denied' "User does not have permissions to perform requested action"); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        var exists = $"SELECT st.* FROM  {SqlFormatter.Table("SessionTracker"' "st"' null' "NOLOCK")} WHERE st.\"SessionID\" = @SessionID AND st.\"Subverse\" = (SELECT \"Subverse\" FROM {SqlFormatter.Table("Submission"' null' null' "NOLOCK")} WHERE \"ID\" = @SubmissionID)"; " is 266.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        body += $"SELECT @SessionID' s.\"Subverse\"' @Date FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} WHERE \"ID\" = @SubmissionID "; " is 143.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        await _db.Connection.ExecuteAsync(body' new { SessionID = hash' SubmissionID = submissionID' Date = CurrentDate }' commandType: System.Data.CommandType.Text).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 206.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        exists = $"SELECT COUNT(*) FROM {SqlFormatter.Table("ViewStatistic"' "vs"' null' "NOLOCK")} WHERE vs.\"SubmissionID\" = @SubmissionID AND vs.\"ViewerID\" = @SessionID"; " is 168.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        var count = await _db.Connection.ExecuteScalarAsync<int>(exists' new { SessionID = hash' SubmissionID = submissionID }).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 168.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                            var sql = $"INSERT INTO {SqlFormatter.Table("ViewStatistic")} (\"SubmissionID\"' \"ViewerID\") VALUES (@SubmissionID' @SessionID) "; " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                            await _db.Connection.ExecuteAsync(sql' new { SessionID = hash' SubmissionID = submissionID }).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 142.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                            await _db.Connection.ExecuteAsync(sql' new { SessionID = hash' SubmissionID = submissionID }).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 142.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        var exists = $"SELECT st.* FROM  {SqlFormatter.Table("SessionTracker"' "st"' null' "NOLOCK")} WHERE st.\"SessionID\" = @SessionID AND st.\"Subverse\" = @Subverse"; " is 163.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,LogVisit,The length of the statement  "                        await _db.Connection.ExecuteAsync(body' new { SessionID = hash' Subverse = subverse' Date = CurrentDate }' commandType: System.Data.CommandType.Text).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 198.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetComments,The length of the statement  "            //             && (submission.Subverse.Equals(subverse' StringComparison.OrdinalIgnoreCase) || String.IsNullOrEmpty(subverse)) " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetCommentTree,The length of the statement  "                    commentTree = _db.Connection.Query<usp_CommentTree_Result>("usp_CommentTree"' new { SubmissionID = submissionID' Depth = depth' ParentID = parentID }' commandType: System.Data.CommandType.StoredProcedure); " is 205.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetCommentTree,The length of the statement  "                    commentTree = _db.Connection.Query<usp_CommentTree_Result>(d.ToString()' new { SubmissionID = submissionID' Depth = depth' ParentID = parentID }); " is 146.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetComments,The length of the statement  "            q.Select = $"c.*' s.\"Subverse\" FROM {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON s.\"ID\" = c.\"SubmissionID\""; " is 192.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ResetVotes,The length of the statement  "                    u.Where = $"t.\"ID\" IN (SELECT v.\"ID\" FROM {SqlFormatter.Table("CommentVoteTracker"' "v"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"ID\" = v.\"CommentID\" INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")}  ON c.\"SubmissionID\" = s.\"ID\" WHERE v.\"CommentID\" = @ID AND v.\"VoteStatus\" = @VoteStatus AND s.\"ArchiveDate\" IS NULL)"; " is 400.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ResetVotes,The length of the statement  "                    u.Where = $"t.\"ID\" IN (SELECT v.\"ID\" FROM {SqlFormatter.Table("SubmissionVoteTracker"' "v"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")}  ON v.\"SubmissionID\" = s.\"ID\" WHERE v.\"SubmissionID\" = @ID AND v.\"VoteStatus\" = @VoteStatus AND s.\"ArchiveDate\" IS NULL)"; " is 312.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ResetVotes,The length of the statement  "            int count = await _db.Connection.ExecuteAsync(u.ToString()' new { ID = id' VoteStatus = (int)voteStatus' VoteValue = (int)voteValue }); " is 135.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteComment,The length of the statement  "                            await ResetVotes(ContentType.Comment' comment.ID' Domain.Models.VoteValue.Up' Domain.Models.VoteValue.None).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 156.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteComment,The length of the statement  "                        return CommandResponse.FromStatus((Domain.Models.Comment)null' Status.Denied' "User does not have permissions to perform requested action"); " is 140.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditComment,The length of the statement  "                    return CommandResponse.FromStatus((Data.Models.Comment)null' Status.Denied' "User does not have permissions to perform requested action"); " is 138.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostComment,The length of the statement  "                        return CommandResponse.FromStatus<Domain.Models.Comment>(null' Status.Invalid' "Parent comment does not belong to submission"); " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,PostComment,The length of the statement  "                        return CommandResponse.FromStatus<Domain.Models.Comment>(null' Status.Invalid' "Closed for the holidays: Deleted comments do not allow new replies"); " is 149.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserSavedItems,The length of the statement  "                    savedIDs = await _db.CommentSaveTracker.Where(x => x.UserName.ToLower() == userName.ToLower()).Select(x => x.CommentID).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 182.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserSavedItems,The length of the statement  "                    savedIDs = await _db.SubmissionSaveTracker.Where(x => x.UserName.ToLower() == userName.ToLower()).Select(x => x.SubmissionID).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 188.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The length of the statement  "            //TODO: These save trackers should be stored in a single table in SQL. Two tables for such similar information isn't ideal... mmkay. Makes querying nasty. " is 154.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The length of the statement  "            //TODO: There is a potential issue with this code. There is no validation that the ID belongs to a comment or a submission. This is nearly impossible to determine anyways but it's still an issue. " is 195.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The length of the statement  "                    var c = _db.CommentSaveTracker.FirstOrDefault(x => x.CommentID == ID && x.UserName.ToLower() == currentUserName.ToLower()); " is 123.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The length of the statement  "                    var s = _db.SubmissionSaveTracker.FirstOrDefault(x => x.SubmissionID == ID && x.UserName.ToLower() == currentUserName.ToLower()); " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessageReply,The length of the statement  "                return new CommandResponse<Domain.Models.Message>(null' Status.NotProcessed' "Couldn't find message in which to reply"); " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessageReply,The length of the statement  "                        commandResponse = CommandResponse.FromStatus<Domain.Models.Message>(null' Status.Denied' "Sent messages do not allow replies"); " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessages,The length of the statement  "            var tasks = messages.Select(x => Task.Run(async () => { return await SendMessage(x).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); })); " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,The length of the statement  "                if (!forceSend && !CONSTANTS.SYSTEM_USER_NAME.IsEqual(sender.Name) && userData.Information.CommentPoints.Sum < minCCPToSendMessages) " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,The length of the statement  "                    return CommandResponse.FromStatus(responseMessage' Status.Ignored' $"Comment points too low to send messages. Need at least {minCCPToSendMessages} CCP."); " is 154.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,The length of the statement  "                firstSent = CommandResponse.FromStatus((Domain.Models.Message)null' Status.Invalid' "No messages sent. Please confirm that message details are valid."); " is 152.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The length of the statement  "            q.Select = $"SELECT {"{0}"} FROM {SqlFormatter.Table("Message"' "m"' null' "NOLOCK")} LEFT JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON s.\"ID\" = m.\"SubmissionID\" LEFT JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"ID\" = m.\"CommentID\""; " is 279.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The length of the statement  "                senderClause = $" OR (m.\"Sender\" = @OwnerName AND m.\"SenderType\" = @OwnerType AND m.\"Type\" = {((int)MessageType.Sent).ToString()})"; " is 138.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The length of the statement  "            q.Where = $"((m.\"Recipient\" = @OwnerName AND m.\"RecipientType\" = @OwnerType AND m.\"Type\" != {((int)MessageType.Sent).ToString()}){senderClause})"; " is 152.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The length of the statement  "            //            (m.Recipient.Equals(ownerName' StringComparison.OrdinalIgnoreCase) && m.RecipientType == (int)ownerType && m.Type != (int)MessageType.Sent) " is 153.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The length of the statement  "            //            (m.Sender.Equals(ownerName' StringComparison.OrdinalIgnoreCase) && m.SenderType == (int)ownerType && ((type & MessageTypeFlag.Sent) > 0) && m.Type == (int)MessageType.Sent) " is 186.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryBase,The length of the statement  "                        (m.Sender.ToLower() == ownerName.ToLower() && m.SenderType == (int)ownerType && ((type & MessageTypeFlag.Sent) > 0) && m.Type == (int)MessageType.Sent) " is 151.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,MarkMessages,The length of the statement  "            var setReadDate = new Func<Data.Models.Message' DateTime?>((x) => (state == MessageState.Read ? CurrentDate : (DateTime?)null)); " is 128.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageCounts,The length of the statement  "                q.Where = "((\"Recipient\" = @UserName AND \"RecipientType\" = @OwnerType AND \"Type\" <> @SentType) OR (\"Sender\" = @UserName AND \"SenderType\" = @OwnerType AND \"Type\" = @SentType))"; " is 188.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The length of the statement  "            return await GetMessages(User.Identity.Name' IdentityType.User' type' state' markAsRead' options).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 146.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The length of the statement  "                var messageMap = new Func<Data.Models.Message' Data.Models.Submission' Data.Models.Comment' Domain.Models.Message>((m' s' c) => " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The length of the statement  "                var messages = await _db.Connection.QueryAsync<Data.Models.Message' Data.Models.Submission' Data.Models.Comment' Domain.Models.Message>(q.ToString()' messageMap' q.Parameters' splitOn: "ID"); " is 191.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The length of the statement  "                    //Postgres Port: This db is crazy' according to docs UPDATE supports an alias but I can not get it working if I alias the columns " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The length of the statement  "                    //await q.Where(x => x.ReadDate == null).ForEachAsync<Models.Message>(x => x.ReadDate = CurrentDate).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 149.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserCommentVotesBySubmission,The length of the statement  "            q.Select = $"SELECT v.\"CommentID\" AS \"ID\"' {SqlFormatter.IsNull("v.\"VoteStatus\""' "0")} AS \"Value\" FROM {SqlFormatter.Table("CommentVoteTracker"' "v"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON v.\"CommentID\" = c.\"ID\""; " is 271.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserCommentVotesBySubmission,The length of the statement  "            //              where c.SubmissionID == submissionID && cv.UserName.Equals(userName' StringComparison.OrdinalIgnoreCase) " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubscriptions,The length of the statement  "            d.Select = $"SELECT 1 AS \"Type\"' s.\"Name\"' NULL AS \"OwnerName\" FROM{SqlFormatter.Table("SubverseSet"' "subSet")} INNER JOIN {SqlFormatter.Table("SubverseSetList"' "setList")} ON subSet.\"ID\" = setList.\"SubverseSetID\" INNER JOIN {SqlFormatter.Table("Subverse"' "s")} ON setList.\"SubverseID\" = s.\"ID\" WHERE subSet.\"Type\" = @Type AND subSet.\"Name\" = @SetName AND subSet.\"UserName\" = @UserName "; " is 411.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubscriptions,The length of the statement  "            d.Select += $"SELECT 2 AS \"Type\"' subSet.\"Name\"' subSet.\"UserName\" AS \"OwnerName\" FROM {SqlFormatter.Table("SubverseSetSubscription"' "setSub")} INNER JOIN {SqlFormatter.Table("SubverseSet"' "subSet")} ON subSet.\"ID\" = setSub.\"SubverseSetID\" WHERE setSub.\"UserName\" = @UserName "; " is 294.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubscriptions,The length of the statement  "            d.Parameters = new DynamicParameters(new { UserName = userName' Type = (int)SetType.Front' SetName = SetType.Front.ToString() }); " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "            Task<Score>[] tasks = { Task<Score>.Factory.StartNew(() => UserContributionPoints(userName' ContentType.Comment' null' true))' " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "                userInfo.ProfilePicture = VoatUrlFormatter.BuildUrlPath(null' new PathOptions(true' true)' "images/thumb-placeholder.png"); " is 123.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "                userInfo.ProfilePicture = FileManager.Instance.Uri(new FileKey() { ID = userPreferences.Avatar' FileType = FileType.Avatar }' new PathOptions() { FullyQualified = true' ProvideProtocol = true }); " is 195.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "                //userInfo.ProfilePicture = VoatUrlFormatter.AvatarPath(userName' userPreferences.Avatar' true' true' !String.IsNullOrEmpty(userPreferences.Avatar)); " is 149.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "                                    (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10))) " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The length of the statement  "                                    (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day) " is 180.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserVotingBehavior,The length of the statement  "                cmd.CommandText = $"SELECT x.\"VoteStatus\"' ABS({SqlFormatter.IsNull("SUM(x.\"VoteStatus\")"' "0")}) AS \"Count\" FROM {SqlFormatter.Table(type == ContentType.Comment ? "CommentVoteTracker" : "SubmissionVoteTracker"' "x"' null' "NOLOCK")} WHERE x.\"UserName\" = @UserName AND (x.\"CreationDate\" >= @CompareDate OR @CompareDate IS NULL) GROUP BY x.\"VoteStatus\""; " is 365.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserVoteStatus,The length of the statement  "                    q.Select = $"SELECT \"CommentID\" AS \"ID\"' {SqlFormatter.IsNull("\"VoteStatus\""' "0")} AS \"Value\" FROM {SqlFormatter.Table("CommentVoteTracker"' null' null' "NOLOCK")}"; " is 174.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserVoteStatus,The length of the statement  "                    q.Select = $"SELECT \"SubmissionID\" AS \"ID\"' {SqlFormatter.IsNull("\"VoteStatus\""' "0")} AS \"Value\" FROM {SqlFormatter.Table("SubmissionVoteTracker"' null' null' "NOLOCK")}"; " is 180.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    var set = GetOrCreateSubverseSet(new SubverseSet() { Name = SetType.Front.ToString()' UserName = User.Identity.Name' Type = (int)SetType.Front' Description = "Front Page Subverse Subscriptions" }); " is 197.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    //    if (!_db.SubverseSubscriptions.Any(x => x.Subverse.Equals(domainReference.Name' StringComparison.OrdinalIgnoreCase) && x.UserName.Equals(User.Identity.Name' StringComparison.OrdinalIgnoreCase))) " is 200.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    //    var sub = _db.SubverseSubscriptions.FirstOrDefault(x => x.Subverse.Equals(domainReference.Name' StringComparison.OrdinalIgnoreCase) && x.UserName.Equals(User.Identity.Name' StringComparison.OrdinalIgnoreCase)); " is 216.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    var setSubscriptionRecord = _db.SubverseSetSubscription.FirstOrDefault(x => x.SubverseSetID == setb.ID && x.UserName.ToLower() == User.Identity.Name.ToLower()); " is 160.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                        var sub = new SubverseSetSubscription { UserName = User.Identity.Name' SubverseSetID = setb.ID' CreationDate = CurrentDate }; " is 125.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                        //db.SubverseSetLists.Add(new SubverseSetList { SubverseSetID = set.ID' SubverseID = subverse.ID' CreationDate = CurrentDate }); " is 128.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    else if (setSubscriptionRecord != null && ((action == SubscriptionAction.Unsubscribe) || action == SubscriptionAction.Toggle)) " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    //    if (!_db.SubverseSetSubscriptions.Any(x => x.SubverseSetID == setb.ID && x.UserName.Equals(User.Identity.Name' StringComparison.OrdinalIgnoreCase))) " is 154.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubscribeUser,The length of the statement  "                    //    var sub = _db.SubverseSetSubscriptions.FirstOrDefault(x => x.SubverseSetID == setb.ID && x.UserName.Equals(User.Identity.Name' StringComparison.OrdinalIgnoreCase)); " is 170.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "            //TODO: This logic is jacked because of the action has been extended to include a toggle value thus this needs refactoring " is 122.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "                        //u.Update = $"UPDATE s SET \"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue) FROM {SqlFormatter.Table("Subverse"' "s")}"; " is 164.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "                        u.Update = $"{SqlFormatter.UpdateSetBlock($"\"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue)"' SqlFormatter.Table("Subverse"' null)' "s")}"; " is 183.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "                        //u.Update = $"UPDATE s SET \"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue) FROM {SqlFormatter.Table("SubverseSet"' "s")}"; " is 167.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "                        u.Update = $"{SqlFormatter.UpdateSetBlock($"\"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue)"' SqlFormatter.Table("SubverseSet"' null)' "s")}"; " is 186.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The length of the statement  "                        u.Parameters = new DynamicParameters(new { Name = domainReference.Name' IncrementValue = incrementValue' OwnerName = domainReference.OwnerName }); " is 146.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanUserFromSubverse,The length of the statement  "            var existingBan = _db.SubverseBan.FirstOrDefault(a => a.UserName == originalUserName && a.Subverse == subverseModel.Name); " is 122.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanUserFromSubverse,The length of the statement  "                        return new CommandResponse<bool?>(status' Status.Denied' "Moderators of subverse can not be banned. Is this a coup attempt?"); " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanUserFromSubverse,The length of the statement  "                    msg.Message = $"@{User.Identity.Name} has unbanned you from v/{subverseModel.Name}. Play nice. Promise me. Ok' I believe you."; " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The length of the statement  "            var subModerator = await _db.SubverseModerator.FindAsync(subverseModeratorRecordID).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The length of the statement  "                return new CommandResponse<RemoveModeratorResponse>(response' Status.Denied' "User does not have permissions to execute action"); " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The length of the statement  "                var currentModLevel = ModeratorPermission.Level(User' subverse.Name).Value; //safe to get value as previous check ensures is mod " is 128.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The length of the statement  "                                var isTargetOriginalMod = (String.IsNullOrEmpty(subModerator.CreatedBy) && !subModerator.CreationDate.HasValue); //Currently original mods have these fields nulled " is 163.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RemoveModerator,The length of the statement  "                                        var originModCreationDate = (originModeratorRecord.CreationDate.HasValue ? originModeratorRecord.CreationDate.Value : new DateTime(2000' 1' 1)); " is 144.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleSets,The length of the statement  "            q.Where = $"(r.\"Subverse\" = @Subverse OR r.\"Subverse\" IS NULL) AND (r.\"ContentType\" = @ContentType OR r.\"ContentType\" IS NULL) AND r.\"IsActive\" = {SqlFormatter.BooleanLiteral(true)}"; " is 193.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleSets,The length of the statement  "            var data = await _db.Connection.QueryAsync<Data.Models.RuleSet>(q.ToString()' new { Subverse = subverse' ContentType = intContentType }); " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "            q.Select = $"SELECT rr.\"Subverse\"' rr.\"UserName\"' rr.\"SubmissionID\"' rr.\"CommentID\"' rr.\"RuleSetID\"' r.\"Name\"' r.\"Description\"' COUNT(*) AS \"Count\"' MAX(rr.\"CreationDate\") AS \"MostRecent\" FROM {SqlFormatter.Table("RuleReport"' "rr"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("RuleSet"' "r"' null' "NOLOCK")} ON rr.\"RuleSetID\" = r.\"ID\""; " is 366.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "            q.Where = "(rr.\"Subverse\" = @Subverse OR @Subverse IS NULL) AND (rr.\"CreationDate\" >= @StartDate OR @StartDate IS NULL) AND (rr.\"CreationDate\" <= @EndDate OR @EndDate IS NULL)"; " is 183.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "                q.Append(x => x.Where' contentType == ContentType.Submission ? "rr.\"SubmissionID\" IS NOT NULL" : "rr.\"CommentID\" IS NOT NULL"); " is 131.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "                q.Append(x => x.Where' reviewedStatus == ReviewStatus.Reviewed ? "rr.\"ReviewedDate\" IS NOT NULL" : "rr.\"ReviewedDate\" IS NULL"); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "            q.GroupBy = "rr.\"Subverse\"' rr.\"UserName\"' rr.\"SubmissionID\"' rr.\"CommentID\"' rr.\"RuleSetID\"' r.\"Name\"' r.\"Description\""; " is 135.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "            var data = await _db.Connection.QueryAsync<ContentUserReport>(q.ToString()' new { Subverse = subverse' StartDate = startDate' EndDate = endDate' RuleSetID = ruleSetID }); " is 170.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "            Dictionary<ContentItem' IEnumerable<ContentUserReport>> groupedData = new Dictionary<ContentItem' IEnumerable<ContentUserReport>>(); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "                var dict = ids.ToDictionary(x => new ContentItem() { Submission = DomainMaps.Map(submissions.FirstOrDefault(s => s.ID == x))' ContentType = ContentType.Submission }' x => data.Where(y => y.SubmissionID.Value == x && !y.CommentID.HasValue)); " is 240.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRuleReports,The length of the statement  "                var dict = ids.ToDictionary(x => new ContentItem() { Comment = comments.FirstOrDefault(s => s.ID == x)' ContentType = ContentType.Comment }' x => data.Where(y => y.CommentID.HasValue && y.CommentID.Value == x)); " is 211.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,MarkReportsAsReviewed,The length of the statement  "            q.Update = SqlFormatter.UpdateSetBlock($"\"ReviewedBy\" = @UserName' \"ReviewedDate\" = @CreationDate"' SqlFormatter.Table("RuleReport")' "r"); " is 143.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,MarkReportsAsReviewed,The length of the statement  "            var result = await _db.Connection.ExecuteAsync(q.ToString()' new { Subverse = subverse' ID = id' UserName = User.Identity.Name' CreationDate = CurrentDate }); " is 158.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "            var existsClause = $"SELECT * FROM {SqlFormatter.Table("RuleReport"' "ruleExists")} WHERE ruleExists.\"CreatedBy\" = @UserName {duplicateFilter}"; " is 146.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "            var body = $"INSERT INTO {SqlFormatter.Table("RuleReport")} (\"Subverse\"' \"UserName\"' \"SubmissionID\"' \"CommentID\"' \"RuleSetID\"' \"CreatedBy\"' \"CreationDate\") "; " is 172.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "                    body += $"SELECT s.\"Subverse\"' NULL' s.\"ID\"' c.\"ID\"' @RuleID' @UserName' @Date FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"SubmissionID\" = s.\"ID\" INNER JOIN {SqlFormatter.Table("RuleSet"' "r"' null' "NOLOCK")} ON r.\"ID\" = @RuleID AND (r.\"Subverse\" = s.\"Subverse\" OR r.\"Subverse\" IS NULL) AND (r.\"ContentType\" = @ContentType OR r.\"ContentType\" IS NULL) WHERE c.\"ID\" = @ID AND c.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)} AND r.\"IsActive\" = {SqlFormatter.BooleanLiteral(true)}"; " is 599.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "                    body += $"SELECT s.\"Subverse\"' NULL' s.\"ID\"' NULL' @RuleID' @UserName' @Date FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("RuleSet"' "r"' null' "NOLOCK")} ON r.\"ID\" = @RuleID AND (r.\"Subverse\" = s.\"Subverse\" OR r.\"Subverse\" IS NULL) AND (r.\"ContentType\" = @ContentType OR r.\"ContentType\" IS NULL) WHERE s.\"ID\" = @ID AND s.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)} AND r.\"IsActive\" = {SqlFormatter.BooleanLiteral(true)}"; " is 498.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "            body += $" AND NOT EXISTS (SELECT * FROM {SqlFormatter.Table("BannedUser")} WHERE \"UserName\" = @UserName) AND NOT EXISTS (SELECT * FROM {SqlFormatter.Table("SubverseBan")} WHERE \"UserName\" = @UserName AND \"Subverse\" = s.\"Subverse\")"; " is 241.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The length of the statement  "           var result = await _db.Connection.ExecuteAsync(body' new { UserName = User.Identity.Name' ID = id' RuleID = ruleID' ContentType = (int)contentType' Date = CurrentDate }); " is 170.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                    var set = GetOrCreateSubverseSet(new SubverseSet() { Name = SetType.Blocked.ToString()' UserName = User.Identity.Name' Type = (int)SetType.Blocked' Description = "Blocked Subverses" }); " is 185.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                    //var action = block == null ? (SubscriptionAction?)null : (block.Value ? SubscriptionAction.Subscribe : SubscriptionAction.Unsubscribe); " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                    //var subverseBlock = db.UserBlockedSubverses.FirstOrDefault(n => n.Subverse.ToLower() == name.ToLower() && n.UserName == User.Identity.Name); " is 142.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                    //    db.UserBlockedSubverses.Add(new UserBlockedSubverse { UserName = User.Identity.Name' Subverse = name' CreationDate = Repository.CurrentDate }); " is 149.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                    var userBlock = _db.UserBlockedUser.FirstOrDefault(n => n.BlockUser.ToLower() == name.ToLower() && n.UserName == User.Identity.Name); " is 133.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Block,The length of the statement  "                        _db.UserBlockedUser.Add(new UserBlockedUser { UserName = User.Identity.Name' BlockUser = name' CreationDate = Repository.CurrentDate }); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRandomSubverse,The length of the statement  "            q.Select = $"SELECT s.\"Name\" FROM {SqlFormatter.Table("Subverse"' "s")} INNER JOIN {SqlFormatter.Table("Submission"' "sm")} ON s.\"Name\" = sm.\"Subverse\""; " is 159.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRandomSubverse,The length of the statement  "            q.Where = $"s.\"Name\" != 'all' AND s.\"IsAdult\" = @IsAdult AND s.\"IsAdminDisabled\" = {SqlFormatter.BooleanLiteral(false)}"; " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,HighestRankInSubverse,The length of the statement  "            q.Select = $"MAX({SqlFormatter.IsNull("\"Rank\""' "0")}) FROM {SqlFormatter.Table("Submission"' null' null' "NOLOCK")}"; " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,HighestRankInSubverse,The length of the statement  "            //    var submission = db.Submissions.OrderByDescending(x => x.Rank).Where(x => x.Subverse == subverse).FirstOrDefault(); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ToCorrectSubverseCasing,The length of the statement  "                //    var sub = db.Subverse.Where(x => String.Equals(x.Name' subverse' StringComparison.OrdinalIgnoreCase)).FirstOrDefault(); " is 125.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The length of the statement  "            d.Select += $"SELECT d.\"Type\"' d.\"ID\"' \"Name\"' {SqlFormatter.IsNull("f.\"Title\""' "d.\"Title\"")} AS \"Title\"' {SqlFormatter.IsNull("f.\"Description\""' "d.\"Description\"")} AS \"Description\"' d.\"SubscriberCount\"' d.\"OwnerName\"' d.\"CreationDate\"' f.\"StartDate\" AS \"FeaturedDate\"' f.\"CreatedBy\" AS \"FeaturedBy\" FROM {SqlFormatter.Table("Featured"' "f")} "; " is 379.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The length of the statement  "            d.Select += $"SELECT 1 AS \"Type\"' \"ID\"' \"Name\"' \"Title\"' \"Description\"' \"CreationDate\"' \"SubscriberCount\"' \"CreatedBy\" AS \"OwnerName\" FROM {SqlFormatter.Table("Subverse")} WHERE \"IsAdminDisabled\" = {SqlFormatter.BooleanLiteral(false)} "; " is 257.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The length of the statement  "            d.Select += $"SELECT 2 AS \"Type\"' \"ID\"' \"Name\"' \"Title\"' \"Description\"' \"CreationDate\"' \"SubscriberCount\"' \"UserName\" AS \"OwnerName\" FROM {SqlFormatter.Table("SubverseSet")} WHERE \"IsPublic\" = {SqlFormatter.BooleanLiteral(true)} "; " is 251.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The length of the statement  "                //d.Append(x => x.Where' "(f.\"EndDate\" IS NOT NULL OR (f.\"EndDate\" IS NULL AND DATEDIFF(HH' f.\"StartDate\"' GETUTCDATE()) <= @Hours))"); " is 141.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The length of the statement  "            d.Parameters.Add("CurrentDate"' CurrentDate); //I really have no idea why we are passing in a current time. In fact' it is both pointless and error prone' but for some reason' deep inside me' I cannot change this. True' it would take me all of 4 seconds' but this isn’t the time investment. It is something deeper' something unexplainable. I feel that somehow' for some reason' this will save us in the future. I shall leave it in order to save the future people! I am legend? " is 476.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ActiveSessionCount,The length of the statement  "            var result = await _db.Database.GetDbConnection().ExecuteScalarAsync<int>(query.ToString()' new { Subverse = domainReference.Name' StartDate =  range.StartDate}); " is 162.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SubverseSubmissionSettingsSearch,The length of the statement  "                    q.Where = $"{SqlFormatter.ToNormalized("\"Name\""' Normalization.Lower)} LIKE CONCAT(@Name' '%') OR {SqlFormatter.ToNormalized("\"Name\""' Normalization.Lower)} = @Name"; " is 170.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                        var setRecoveryEmail = !String.IsNullOrEmpty(options.RecoveryEmailAddress) && options.RecoveryEmailAddress.IsEqual(options.ConfirmRecoveryEmailAddress); " is 152.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Comment"));  " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Content\" = '{deleteText}'"' SqlFormatter.Table("Comment")); " is 156.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Submission")); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Title\" = '{deleteText}'' \"Content\" = '{deleteText}'"' SqlFormatter.Table("Submission")); " is 187.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Submission")); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                                d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Title\" = '{deleteText}'' \"Url\" = 'https://{VoatSettings.Instance.SiteDomain}'"' SqlFormatter.Table("Submission")); " is 213.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                        _db.SubverseModerator.RemoveRange(_db.SubverseModerator.Where(m => m.UserName.ToLower() == options.UserName.ToLower())); " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                        u.Where = $"((\"Recipient\" = @UserName AND \"RecipientType\" = {(int)IdentityType.User} AND \"Type\" {SqlFormatter.In("@RecipientTypes")}))"; " is 142.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                            updatePrefStatement.Update = SqlFormatter.UpdateSetBlock("\"Bio\" = NULL' \"Avatar\" = NULL"' SqlFormatter.Table("UserPreference")); " is 132.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                            //var existing = _db.UserBadges.FirstOrDefault(x => x.UserName.Equals(userName' StringComparison.OrdinalIgnoreCase) && x.BadgeID.Equals(badgeID' StringComparison.OrdinalIgnoreCase)); " is 182.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                            //    _db.UserBadges.Add(new Models.UserBadge() { BadgeID = badgeID' CreationDate = CurrentDate' UserName = userName }); " is 120.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The length of the statement  "                        await userManager.ChangePasswordAsync(userAccount' options.CurrentPassword' randomPassword).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 140.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanGlobally,The length of the statement  "                insert.Insert += $" SELECT @Value' @Reason' @CreatedBy' @CreationDate WHERE NOT EXISTS (SELECT * FROM {SqlFormatter.Table(tablename)} WHERE \"{columnname}\" = @Value)"; " is 168.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,IsApiKeyValid,The length of the statement  "                //TODO: This needs to be non-blocking and non-queued. If 20 threads with same apikey are accessing this method at once we don't want to perform 20 updates on record. " is 165.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DistinguishComment,The length of the statement  "                        //u.Update = $"{SqlFormatter.Table("Comment")} SET \"IsDistinguished\" = {SqlFormatter.ToggleBoolean("\"IsDistinguished\"")}"; " is 126.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DistinguishComment,The length of the statement  "                        u.Update = SqlFormatter.UpdateSetBlock($"\"IsDistinguished\" = {SqlFormatter.ToggleBoolean("\"IsDistinguished\"")}"' SqlFormatter.Table("Comment")); " is 148.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetModLogRemovedComments,The length of the statement  "                    m.Comment.Submission.UserName = m.Comment.Submission.IsAnonymized ? d.Comment.Submission.ID.ToString() : d.Comment.Submission.UserName; " is 135.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserSubscribedSetDetails,The length of the statement  "            q.Select += $" INNER JOIN {SqlFormatter.Table("SubverseSetSubscription"' "setSubscription"' null' "NOLOCK")} ON setSubscription.\"SubverseSetID\" = s.\"ID\""; " is 158.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                    q.SelectColumns = "@DomainType as \"Type\"' s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"CreatedBy\" AS \"OwnerName\"' s.\"SubscriberCount\"' s.\"CreationDate\""; " is 165.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                        q.Where = "(s.\"Name\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Title\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Description\" LIKE CONCAT('%'' @SearchPhrase' '%'))"; " is 172.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                    q.Append(x => x.Where' $"s.\"IsAdminDisabled\" = {SqlFormatter.BooleanLiteral(false)} AND s.\"IsPrivate\" = {SqlFormatter.BooleanLiteral(false)}"); " is 147.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                    q.SelectColumns = "@DomainType as \"Type\"' s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"UserName\" AS \"OwnerName\"' s.\"SubscriberCount\"' s.\"CreationDate\""; " is 164.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                        q.Where = "(s.\"Name\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Title\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Description\" LIKE CONCAT('%'' @SearchPhrase' '%'))"; " is 172.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The length of the statement  "                            q.Select += $" INNER JOIN {SqlFormatter.Table("SubverseSetList"' "subList"' null' "NOLOCK")} ON subList.\"SubverseSetID\" = s.\"ID\""; " is 134.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetSubverseListChange,The length of the statement  "                var setSubverseRecord = db.SubverseSetList.FirstOrDefault(n => n.SubverseSetID == set.ID && n.SubverseID == subverse.ID); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetSubverseListChange,The length of the statement  "                    db.SubverseSetList.Add(new SubverseSetList { SubverseSetID = set.ID' SubverseID = subverse.ID' CreationDate = CurrentDate }); " is 125.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetSubverseListChange,The length of the statement  "                else if (setSubverseRecord != null && ((action == SubscriptionAction.Unsubscribe) || action == SubscriptionAction.Toggle)) " is 122.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetSubverseListChange,The length of the statement  "                response.Response = actionTaken == SubscriptionAction.Toggle ? (bool?)null : actionTaken == SubscriptionAction.Subscribe; " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSetListDescription,The length of the statement  "            q.Select = $"s.\"ID\"' s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"CreationDate\"' {SqlFormatter.As(SqlFormatter.IsNull("s.\"SubscriberCount\""' "0")' "\"SubscriberCount\"")}' sl.\"CreationDate\" AS \"SubscriptionDate\" FROM {SqlFormatter.Table("SubverseSetList"' "sl")} INNER JOIN {SqlFormatter.Table("Subverse"' "s")} ON (sl.\"SubverseID\" = s.\"ID\")"; " is 359.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetOrCreateSubverseSet,The length of the statement  "                var set = db.SubverseSet.FirstOrDefault(x => x.Name.ToLower() == setInfo.Name.ToLower() && x.UserName == setInfo.UserName); " is 123.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetOrCreateSubverseSet,The length of the statement  "                    setInfo.SubverseSetSubscriptions.Add(new SubverseSetSubscription() { UserName = setInfo.UserName' CreationDate = CurrentDate }); " is 128.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,CreateOrUpdateSet,The length of the statement  "                        return CommandResponse.FromStatus<Set>(null' Status.Denied' $"Sorry' Users are limited to {VoatSettings.Instance.MaximumOwnedSets} sets and you currently have {setCount}"); " is 172.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,CreateOrUpdateSet,The length of the statement  "                        SubscriberCount = 1' //Owner is a subscriber. Reminds me of that hair club commercial: I"m not only the Set Owner' I'm also a subscriber. " is 137.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,CreateOrUpdateSet,The length of the statement  "                    _db.SubverseSetSubscription.Add(new SubverseSetSubscription() { SubverseSetID = newSet.ID' UserName = UserName' CreationDate = CurrentDate }); " is 142.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,HighestVotedContentStatistics,The length of the statement  "            var submissions = await GetSubmissions(result.Where(x => x.ContentType == ContentType.Submission).Select(x => x.ID).ToArray()); " is 127.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserCommentCount,The length of the statement  "                q.Append(x => x.Select' $" INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON c.\"SubmissionID\" = s.\"ID\""); " is 129.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The length of the statement  "            var groupingClause = $"SELECT \"UserName\"' \"IsReceived\"' \"ContentType\"' \"VoteStatus\"' SUM(\"VoteCount\") AS \"VoteCount\"' SUM(\"VoteValue\") AS \"VoteValue\" FROM ({"{0}"}) AS a GROUP BY a.\"UserName\"' a.\"IsReceived\"' a.\"ContentType\"' a.\"VoteStatus\""; " is 266.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The length of the statement  "            var archivedPointsClause = $"SELECT \"UserName\"' \"IsReceived\"' \"ContentType\"' \"VoteStatus\"' \"VoteCount\"' \"VoteValue\" FROM {SqlFormatter.Table("UserContribution"' "uc"' null' "NOLOCK")} WHERE uc.\"UserName\" = @UserName AND uc.\"IsReceived\" = @IsReceived AND uc.\"ContentType\" = @ContentType UNION ALL "; " is 316.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The length of the statement  "                            q.Select = $"SELECT @UserName AS \"UserName\"' @IsReceived AS \"IsReceived\"' @ContentType AS \"ContentType\"' v.\"VoteStatus\" AS \"VoteStatus\"' 1 AS \"VoteCount\"' ABS(v.\"VoteValue\") AS \"VoteValue\" FROM {SqlFormatter.Table("CommentVoteTracker"' "v"' null' "NOLOCK")} "; " is 276.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The length of the statement  "                            q.Select += $"INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"ID\" = v.\"CommentID\" INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON s.\"ID\" = c.\"SubmissionID\""; " is 209.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserContributionPoints,The length of the statement  "                            q.Select = $"SELECT @UserName AS \"UserName\"' @IsReceived AS \"IsReceived\"' @ContentType AS \"ContentType\"' v.\"VoteStatus\" AS \"VoteStatus\"' 1 AS \"VoteCount\"' ABS(v.\"VoteValue\") AS \"VoteValue\" FROM {SqlFormatter.Table("SubmissionVoteTracker"' "v"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} ON s.\"ID\" = v.\"SubmissionID\""; " is 378.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,RecordUserVote,The length of the statement  "            var voteRecord = await _db.VoteTracker.Where(x => x.VoteID == voteID && x.VoteOptionID == optionID && x.UserName == userName).FirstOrDefaultAsync(); " is 148.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                if (!existingDataModel.CreatedBy.IsEqual(User.Identity.Name) && !User.IsInAnyRole(new[] { UserRole.GlobalAdmin' UserRole.Admin })) " is 130.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                    return CommandResponse.FromStatus<Domain.Models.Vote>(null' Status.Error' "Vote can not be edited once voting has begun"); " is 122.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                var restrictionsAreBelongToUs = newDataModel.VoteRestrictions.Where(x => x.ID > 0).All(x => existingDataModel.VoteRestrictions.Any(e => e.ID == x.ID)); " is 151.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                var optionsAreBelongToUs = newDataModel.VoteOptions.Where(x => x.ID > 0).All(x => existingDataModel.VoteOptions.Any(e => e.ID == x.ID)); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                var outcomesAreBelongToUs = newDataModel.VoteOptions.Where(x => x.ID > 0).SelectMany(x => x.VoteOutcomes.Where(o => o.ID > 0)).All(x => existingDataModel.VoteOptions.SelectMany(y => y.VoteOutcomes).Any(e => e.ID == x.ID)); " is 222.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                var deletedOptions = existingDataModel.VoteOptions.Where(c => !newDataModel.VoteOptions.Any(n => c.ID == n.ID)).ToList(); " is 121.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveVote,The length of the statement  "                var deletedRestrictions = existingDataModel.VoteRestrictions.Where(c => !newDataModel.VoteRestrictions.Any(n => c.ID == n.ID)).ToList(); " is 136.
Long Statement,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetVotes,The length of the statement  "                //q.Select = $"SELECT * FROM {SqlFormatter.Table("VoteOutcome")} WHERE \"VoteOptionID\" {SqlFormatter.In("@VoteOptionID")} "; " is 125.
Long Statement,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,ParseQuery,The length of the statement  "                    reducedQueryString = queryString.Substring(queryString.IndexOf("?") + 1' queryString.Length - queryString.IndexOf("?") - 1); " is 124.
Long Statement,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,ToString,The length of the statement  "                keyValues.Add("startDate"' (useCacheFriendlyDateDelim ? StartDate.Value.ToString("s").Replace(':'' '.') : StartDate.Value.ToString("o"))); " is 138.
Long Statement,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,ToString,The length of the statement  "                keyValues.Add("endDate"' (useCacheFriendlyDateDelim ? EndDate.Value.ToString("s").Replace(':'''.') : EndDate.Value.ToString("o"))); " is 131.
Long Statement,Voat.Data,SearchOptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\SearchOptions.cs,ToString,The length of the statement  "            var value = keyValues.OrderBy(x => x.Key).Concat(_unknownPairs.OrderBy(x => x.Key)).Aggregate(""' (x' y) => String.Join(String.IsNullOrEmpty(x) ? "" : "&"' x' String.Format("{0}={1}"' y.Key' y.Value))); " is 202.
Long Statement,Voat.Domain.Command,GlobalBanCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Admin\GlobalBanCommand.cs,ExecuteStage,The length of the statement  "                //    if (!User.IsInAnyRole(new[] { UserRole.GlobalAdmin' UserRole.Admin' UserRole.DelegateAdmin' UserRole.GlobalBans })) " is 121.
Long Statement,Voat.Domain.Command,BlockCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\BlockCommand.cs,CacheExecute,The length of the statement  "                var response = await db.Block(_domainType' _name' (_toggleSetting ? SubscriptionAction.Toggle : SubscriptionAction.Subscribe)).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 175.
Long Statement,Voat.Domain.Command,UnblockCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\BlockCommand.cs,CacheExecute,The length of the statement  "                var response = await db.Block(_domainType' _name' SubscriptionAction.Unsubscribe).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 130.
Long Statement,Voat.Domain.Command,CreateCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,UpdateCache,The length of the statement  "                        CacheHandler.Instance.DictionaryReplace<int' usp_CommentTree_Result>(key' c.ParentID.Value' x => { x.ChildCount += 1; return x; }); " is 131.
Long Statement,Voat.Domain.Command,EditCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,CacheExecute,The length of the statement  "                return Tuple.Create(new CommandResponse<Domain.Models.Comment>(result.Response.Map(User' null)' result.Status' result.Message)' result.Response); " is 145.
Long Statement,Voat.Domain.Command,DistinquishCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Moderation\DistinquishCommentCommand.cs,UpdateCache,The length of the statement  "                CacheHandler.Instance.DictionaryReplace<int' usp_CommentTree_Result>(CachingKey.CommentTree(comment.SubmissionID.Value)' comment.ID' x => { x.IsDistinguished = comment.IsDistinguished; return x; }' true); " is 204.
Long Statement,Voat.Domain.Command,SendMessageCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\SendMessageCommand.cs,ProtectedExecute,The length of the statement  "                return await repo.SendMessage(_message' _forceSend' _ensureUserExists' _isAnonymized).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 134.
Long Statement,Voat.Domain.Command,CommentVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\VoteCommands.cs,CacheExecute,The length of the statement  "                var outcome = await Task.Run(() => repo.VoteComment(CommentID' VoteStatus' AddressHash' RevokeOnRevote)).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 153.
Long Statement,Voat.Domain.Command,CommentVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\VoteCommands.cs,CacheExecute,The length of the statement  "                    EventNotification.Instance.SendVoteNotice(outcome.OwnerUserName' this.UserName' Models.ContentType.Comment' CommentID' outcome.Difference); " is 139.
Long Statement,Voat.Domain.Command,SubmissionVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\VoteCommands.cs,CacheExecute,The length of the statement  "                var outcome = await Task.Run(() => repo.VoteSubmission(SubmissionID' VoteStatus' AddressHash' RevokeOnRevote)).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 159.
Long Statement,Voat.Domain.Command,SubmissionVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\VoteCommands.cs,CacheExecute,The length of the statement  "                    EventNotification.Instance.SendVoteNotice(outcome.OwnerUserName' this.UserName' Models.ContentType.Submission' SubmissionID' outcome.Difference); " is 145.
Long Statement,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,Map,The length of the statement  "                result.FormattedContent = (submission.Type == 1 && String.IsNullOrEmpty(submission.FormattedContent) ? Formatting.FormatMessage(submission.Content' true) : submission.FormattedContent); " is 185.
Long Statement,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,Map,The length of the statement  "                    result.Attributes.Add(new ContentAttribute() { ID = -1' Type = AttributeType.Flair' Name = submission.FlairLabel' CssClass = submission.FlairCss } ); " is 149.
Long Statement,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,Map,The length of the statement  "                    result.Attributes.Add(new ContentAttribute() { ID = -1' Type = AttributeType.Data' Name = "NSFW"' CssClass = "linkflairlabel" }); " is 129.
Long Statement,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,Map,The length of the statement  "                    result.Attributes.Add(new ContentAttribute() { ID = -1' Type = AttributeType.Data' Name = "Archived"' CssClass = "linkflairlabel" }); " is 133.
Long Statement,Voat.Domain,DomainMaps,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Maps\DomainMaps.cs,MapToNestedComment,The length of the statement  "                //Just a note' the entire Subverse in Data models for comments is a bit hacky as this info is needed in the app but data models don't contain it. " is 145.
Long Statement,Voat.Domain.Models,UserDefinition,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\UserDefinition.cs,Parse,The length of the statement  "            var matches = Regex.Matches(userName' String.Format(@"((?'prefix'@|u/|/u/|v/|/v/)?(?'name'{0}|{1}))"' CONSTANTS.USER_NAME_REGEX' CONSTANTS.SUBVERSE_REGEX)' RegexOptions.IgnoreCase); " is 181.
Long Statement,Voat.Domain.Models,CreateVoteType,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\Vote.cs,Construct,The length of the statement  "                var o = (T)JsonConvert.DeserializeObject(Options.ToString()' metadata.Type' JsonSettings.DataInputSerializationSettings); " is 121.
Long Statement,Voat.Domain.Models,Vote,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\Vote.cs,Validate,The length of the statement  "                var grouped = Options.GroupBy(x => x.Title.TrimSafe().ToNormalized(Normalization.Lower)).Select(x => new { Key = x.Key' Count = x.Count() }); " is 141.
Long Statement,Voat.Domain.Query.Base,BaseQueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\BaseQueryCommentSegment.cs,GetSegment,The length of the statement  "                    fullTree = fullTree.OrderByDescending(x => Math.Max(1' (x.UpCount + x.DownCount)) ^ (Math.Min(x.UpCount' x.DownCount) / Math.Max(1' Math.Max(x.UpCount' x.DownCount)))); " is 168.
Long Statement,Voat.Domain.Query.Base,BaseQueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\BaseQueryCommentSegment.cs,GetSegment,The length of the statement  "            Func<usp_CommentTree_Result' NestedComment> mapToNestedCommentFunc = new Func<usp_CommentTree_Result' NestedComment>(commentTree => " is 131.
Long Statement,Voat.Domain.Query,CachedQuery<T>,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\CachedQuery.cs,ExecuteAsync,The length of the statement  "                    result = await CacheHandler.Register<T>(FullCacheKey.ToLower()' new Func<Task<T>>(GetFreshData)' CachingPolicy.Duration' CachingPolicy.RefetchLimit); " is 149.
Long Statement,Voat.Domain.Query,QueryApiPermissionSet,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryApiPermissionSet.cs,GetData,The length of the statement  "            //return new ApiPermissionSet() { AllowLogin = false' AllowStream = false' AllowUnrestrictedLogin = false' RequireHmacOnLogin = false }; " is 136.
Long Statement,Voat.Domain.Query,QueryApiPermissionSet,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryApiPermissionSet.cs,GetData,The length of the statement  "            return new ApiPermissionSet() { Name = "Default"' AllowLogin = false' AllowStream = false' AllowUnrestrictedLogin = false' RequireHmacOnLogin = false }; " is 152.
Long Statement,Voat.Domain.Query,QueryApiStreamLastCalledDate,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryApiStreamLastCalledDate.cs,ExecuteAsync,The length of the statement  "            EventLogger.Instance.Log(LogType.Debug' "Method Invoked"' "QueryApiStreamLastCalledDate"' new { lastCallDate' newCallDate' cacheKey' user = User.Identity.Name }); " is 162.
Long Statement,Voat.Domain.Query,QueryCommentContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentContext.cs,ExecuteAsync,The length of the statement  "                        //HACK: So we have a bit of a bug here. If we provide valid counts here the UI will attempt to offer loading capabilities " is 121.
Long Statement,Voat.Domain.Query,QueryCommentContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentContext.cs,ExecuteAsync,The length of the statement  "                        //if this happens the ajax loading will most likely load duplicate comments as sorting doesn't appy to history' if dups get loaded " is 130.
Long Statement,Voat.Domain.Query,QueryCommentContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentContext.cs,ExecuteAsync,The length of the statement  "                        //the UI goes all kinds of cray cray. So' until I can think of a clean solution' we will load context history as having no siblings " is 131.
Long Statement,Voat.Domain.Query,QueryAllMessageCounts,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryMessageCounts.cs,ExecuteAsync,The length of the statement  "            tasks.Add(Task.Factory.StartNew(() => { var q = new QueryMessageCounts(_ownerName' _ownerType' this._type' this._state).SetUserContext(User); return q.Execute(); })); " is 166.
Long Statement,Voat.Domain.Query,QueryAllMessageCounts,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryMessageCounts.cs,ExecuteAsync,The length of the statement  "                    tasks.Add(Task.Factory.StartNew(() => { var q = new QueryMessageCounts(mod.Subverse' IdentityType.Subverse' this._type' this._state).SetUserContext(User); return q.Execute(); })); " is 179.
Long Statement,Voat.Domain.Query,QueryMessageCounts,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryMessageCounts.cs,ExecuteAsync,The length of the statement  "                    counts = await repo.GetMessageCounts(_ownerName' _ownerType' _type' _state).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 124.
Long Statement,Voat.Domain.Query,QuerySubmissions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QuerySubmissions.cs,GetData,The length of the statement  "                var result = await db.GetSubmissionsDapper(this._domainReference' this._options).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 129.
Long Statement,Voat.Domain.Query,QuerySubmissionsByDomain,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QuerySubmissionsByDomain.cs,GetData,The length of the statement  "                var result = await db.GetSubmissionsByDomain(this._domain' this._options).ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT); " is 122.
Long Statement,Voat.Domain.Query,QueryUserInformation,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryUserInformation.cs,GetData,The length of the statement  "                        data.Moderates = moderates.Select(x => new SubverseModerator() { Subverse = x.Subverse' Level = (ModeratorLevel)Enum.Parse(typeof(ModeratorLevel)' x.Power.ToString()) }).ToList(); " is 179.
Long Statement,Voat.Domain.Query,QueryUserSubscriptions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryUserSubscriptions.cs,GetData,The length of the statement  "                //var dict = data.Select(x => x.Type).Distinct().ToDictionary(x => x.ToString()' y => data.Where(x => x.Type == y).Select(x => x.Name).ToList().AsEnumerable()); " is 160.
Long Statement,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Resize,The length of the statement  "                            graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black))' new Rectangle(0' 0' maximumSize.Width' maximumSize.Height)); " is 121.
Long Statement,Voat.IO.Email,SmtpEmailSender,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\Email\SmtpEmailSender.cs,SendEmail,The length of the statement  "                throw new NotImplementedException("This swallows errors and kills the process if connection is refused. Needs research' will fix later."); " is 138.
Long Statement,Voat.IO,AzureBlobFileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\AzureBlobFileManager.cs,GetBlock,The length of the statement  "                await container.SetPermissionsAsync(new BlobContainerPermissions { PublicAccess = BlobContainerPublicAccessType.Blob }); " is 120.
Long Statement,Voat.IO,FileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\FileManager.cs,IsUploadPermitted,The length of the statement  "                        result = CommandResponse.FromStatus(Status.Invalid' $"File length is too big or too small but we aren't saying (Hint: {Math.Round(uploadLimit.ByteLimit / (decimal)1000000' 1)} MB max)"); " is 186.
Long Statement,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendMentionNotice,The length of the statement  "            OnMentionReceived?.Invoke(this' new MessageReceivedEventArgs() { TargetUserName = userName' MessageType = MessageTypeFlag.CommentMention' ReferenceType = type' ReferenceID = referenceID' Message = message }); " is 208.
Long Statement,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendMessageNotice,The length of the statement  "            OnMessageReceived?.Invoke(this' new MessageReceivedEventArgs() { TargetUserName = userName' SendingUserName = sendingUserName' MessageType = type' ReferenceType = referenceType' ReferenceID = referenceID' Message = message }); " is 226.
Long Statement,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendVoteNotice,The length of the statement  "            OnVoteReceived?.Invoke(this' new VoteReceivedEventArgs() { TargetUserName = userName' SendingUserName = sendingUserName' ReferenceType = referenceType' ReferenceID = referenceID' ChangeValue = voteValue }); " is 206.
Long Statement,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendHeadButtNotice,The length of the statement  "            OnHeadButtReceived?.Invoke(this' new BasicMessageEventArgs() { TargetUserName = userName' SendingUserName = sendingUserName' Message = message }); " is 146.
Long Statement,Voat.Notifications,EventNotification,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\EventNotification.cs,SendChatMessageNotice,The length of the statement  "            OnChatMessageReceived?.Invoke(this' new ChatMessageEventArgs() { TargetUserName = userName' SendingUserName = sendingUserName' Message = message' Chatroom = chatRoom }); " is 169.
Long Statement,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,SendUserMentionNotification,The length of the statement  "                                            EventNotification.Instance.SendMentionNotice(recipient' comment.UserName' Domain.Models.ContentType.Comment' comment.ID' comment.Content); " is 138.
Long Statement,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,SendUserMentionNotification,The length of the statement  "                                            EventNotification.Instance.SendMentionNotice(recipient' submission.UserName' Domain.Models.ContentType.Submission' submission.ID' submission.Content); " is 150.
Long Statement,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,SendCommentReplyNotification,The length of the statement  "                                                    EventNotification.Instance.SendMessageNotice(message.Recipient' message.Sender' Domain.Models.MessageTypeFlag.CommentReply' Domain.Models.ContentType.Comment' comment.ID); " is 171.
Long Statement,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,SendSubmissionReplyNotification,The length of the statement  "                                        EventNotification.Instance.SendMessageNotice(message.Recipient' message.Sender' Domain.Models.MessageTypeFlag.CommentReply' Domain.Models.ContentType.Comment' comment.ID); " is 171.
Long Statement,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,FindMentions,The length of the statement  "            matchmaker.IsDuplicate = (match' matches) => { return matches.Any(x => String.Equals(x.Groups["user"].Value' match.Groups["user"].Value' StringComparison.OrdinalIgnoreCase)); }; " is 177.
Long Statement,Voat.Rules,BaseCCPVote,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\BaseCCPRule.cs,EvaluateRule,The length of the statement  "                return CreateOutcome(RuleResult.Denied' (String.Format("CCP of {0} is below minimum of {1} required for action {2}"' context.UserData.Information.CommentPoints.Sum' MinimumCommentPoints' Scope.ToString()))); " is 207.
Long Statement,Voat.Rules,BaseCommentRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\BaseCommentRule.cs,EvaluateRule,The length of the statement  "                    var copyPasta = repo.SimilarCommentSubmittedRecently(context.UserName' content.TrimWhiteSpace()' TimeSpan.FromHours(24)); " is 121.
Long Statement,Voat.Rules,BaseCommentRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\BaseCommentRule.cs,EvaluateRule,The length of the statement  "                        return base.CreateOutcome(RuleResult.Denied' "You have recently submitted a similar comment. Please try to not use copy/paste so often."); " is 138.
Long Statement,Voat.Rules,BaseSubverseMinimumCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\BaseSubverseMinCCPRule.cs,EvaluateRule,The length of the statement  "                    return CreateOutcome(RuleResult.Denied' String.Format("Subverse '{0}' requires {1}CCP to downvote"' subverse.Name' subMinCCP.Value.ToString())); " is 144.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyPostingQuotaForSubUsed,The length of the statement  "                var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' subverse' DateRange.StartFrom(TimeSpan.FromHours(24))); " is 171.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyPostingQuotaForNegativeScoreUsed,The length of the statement  "                var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission'null' DateRange.StartFrom(TimeSpan.FromHours(24))); " is 166.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyCommentPostingQuotaForNegativeScoreUsed,The length of the statement  "                var userCommentCountInPast24Hours = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Comment' null' DateRange.StartFrom(TimeSpan.FromHours(24)));  " is 167.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyCommentPostingQuotaUsed,The length of the statement  "                var userCommentSubmissionsInPast24Hours = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Comment' null' DateRange.StartFrom(TimeSpan.FromHours(24)));  " is 173.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyCommentPostingQuotaUsed,The length of the statement  "                var userCommentSubmissionsInPastHour = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Comment' null' DateRange.StartFrom(TimeSpan.FromHours(1))); " is 169.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyPostingQuotaForSubUsed,The length of the statement  "                var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' subverse' DateRange.StartFrom(TimeSpan.FromHours(1))); " is 170.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyGlobalPostingQuotaUsed,The length of the statement  "            // only execute this check if user account is less than a month old and user SCP is less than 50 and user is not posting to a sub they own/moderate " is 147.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyGlobalPostingQuotaUsed,The length of the statement  "                var totalUserSubmissionsForTimeSpam = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' null' DateRange.StartFrom(TimeSpan.FromHours(1)));  " is 171.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyGlobalPostingQuotaUsed,The length of the statement  "            // only execute this check if user account is less than a month old and user SCP is less than 50 and user is not posting to a sub they own/moderate " is 147.
Long Statement,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyGlobalPostingQuotaUsed,The length of the statement  "                var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' null' DateRange.StartFrom(TimeSpan.FromHours(24))); " is 167.
Long Statement,Voat.Rules,CreateSetRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Set\CreateSetRule.cs,EvaluateRule,The length of the statement  "            //    return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires an account age of {VoatSettings.Instance.MinimumAccountAgeInDaysForSubverseCreation} days"); " is 179.
Long Statement,Voat.Rules,CreateSetRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Set\CreateSetRule.cs,EvaluateRule,The length of the statement  "            //    return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires a minimum of {VoatSettings.Instance.MinimumCommentPointsForSubverseCreation} comment (CCP) points"); " is 187.
Long Statement,Voat.Rules,CreateSetRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Set\CreateSetRule.cs,EvaluateRule,The length of the statement  "            //if (context.UserData.Information.SubmissionPoints.Sum < VoatSettings.Instance.MinimumSubmissionPointsForSubverseCreation) " is 123.
Long Statement,Voat.Rules,CreateSetRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Set\CreateSetRule.cs,EvaluateRule,The length of the statement  "            //    return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires a minimum of {VoatSettings.Instance.MinimumSubmissionPointsForSubverseCreation} submission (SCP) points"); " is 193.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "                    return base.CreateOutcome(RuleResult.Denied' "Sorry' The subverse you are trying to create already exists' but you can try to claim it by submitting a takeover request to /v/subverserequest"); " is 192.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "                    return base.CreateOutcome(RuleResult.Denied' "Sorry' you can not moderate more than " + VoatSettings.Instance.MaximumOwnedSubs + " subverses."); " is 144.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "                return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires an account age of {VoatSettings.Instance.MinimumAccountAgeInDaysForSubverseCreation} days"); " is 173.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "                return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires a minimum of {VoatSettings.Instance.MinimumCommentPointsForSubverseCreation} comment (CCP) points"); " is 181.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "            if (context.UserData.Information.SubmissionPoints.Sum < VoatSettings.Instance.MinimumSubmissionPointsForSubverseCreation) " is 121.
Long Statement,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The length of the statement  "                return base.CreateOutcome(RuleResult.Denied' $"Sorry' subverse creation requires a minimum of {VoatSettings.Instance.MinimumSubmissionPointsForSubverseCreation} submission (SCP) points"); " is 187.
Long Statement,Voat.Rules.Chat,ChatMessageSpamRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Chat\ChatMessageSpamRule.cs,EvaluateRule,The length of the statement  "            //duplicateFound = historyArray.Any(x => x.UserName == message.UserName && x.Message.IsEqual(message.Message.TrimSafe())); " is 122.
Long Statement,Voat.Rules.Chat,ChatMessageSpamRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Chat\ChatMessageSpamRule.cs,EvaluateRule,The length of the statement  "            var countInWindow = historyArray.Count(x => x.User.UserName == message.User.UserName && currentDate.Subtract(x.CreationDate) <= _timeSpanWindow); " is 145.
Long Statement,Voat.Rules.Posting.Base,SubmissionBannedDomainRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\Base\SubmissionBannedDomainRule.cs,EvaluateRule,The length of the statement  "                    containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' $"{submission.Title} {submission.Url}"); " is 129.
Long Statement,Voat.Rules.Posting.Base,SubmissionBannedDomainRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\Base\SubmissionBannedDomainRule.cs,EvaluateRule,The length of the statement  "                    containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' $"{submission.Title} {submission.Content}"); " is 133.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "                        return CreateOutcome(RuleResult.Denied' String.Format("You have reached your daily comment quota. Your current quota is {0} comment(s) per 24 hours."' VoatSettings.Instance.DailyCommentPostingQuotaForNegativeScore.ToString())); " is 227.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "                        return CreateOutcome(RuleResult.Denied' String.Format("You have reached your hourly comment quota. Your current quota is {0} comment(s) per hour."' VoatSettings.Instance.HourlyCommentPostingQuota.ToString())); " is 209.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "                        return CreateOutcome(RuleResult.Denied' String.Format("You have reached your daily comment quota. Your current quota is {0} comment(s) per 24 hours."' VoatSettings.Instance.DailyCommentPostingQuota.ToString())); " is 211.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "                //    if ((userMembershipTimeSpam.TotalDays < 180 || userCcp <= -50) && UserHelper.UserDailyCommentPostingQuotaForNegativeScoreUsed(context.UserName)) " is 150.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "                //        result = CreateOutcome(RuleResult.Denied' String.Format("You have reached your daily comment quota. Your current quota is {0} comment(s) per 24 hours."' VoatSettings.Instance.DailyCommentPostingQuotaForNegativeScore.ToString())); " is 239.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest' "You have reached your daily comment quota. Your current quota is " + VoatSettings.Instance.DailyCommentPostingQuotaForNegativeScore.ToString() + " comment(s) per 24 hours."); " is 244.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest' "You have reached your hourly comment quota. Your current quota is " + VoatSettings.Instance.HourlyCommentPostingQuota.ToString() + " comment(s) per hour."); " is 226.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest' "You have reached your daily comment quota. Your current quota is " + VoatSettings.Instance.DailyCommentPostingQuota.ToString() + " comment(s) per 24 hours."); " is 228.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //    return new HttpStatusCodeResult(HttpStatusCode.BadRequest' "You have recently submitted a similar comment. Please try to not use copy/paste so often."); " is 158.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //if (!UserHelper.IsUserGloballyBanned(User.Identity.Name) && !UserHelper.IsUserBannedFromSubverse(User.Identity.Name' submission.Subverse)) " is 140.
Long Statement,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The length of the statement  "            //        commentModel.Content = ContentProcessor.Instance.Process(commentModel.Content' ProcessingStage.InboundPreSave' commentModel); " is 135.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "            //if (result != null && (context.UserData.Information.CommentPoints.Sum <= -10 || context.UserData.Information.SubmissionPoints.Sum <= -10) " is 139.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "            //    result = CreateOutcome(RuleResult.Denied' String.Format("You have reached your daily submission quota. Your current quota is {0} submission(s) per 24 hours"' VoatSettings.Instance.DailyPostingQuotaForNegativeScore)); " is 222.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "            if (userInfo.CommentPoints.Sum <= base.MinimumCommentPoints && userData.TotalSubmissionsPostedIn24Hours >= postThreshold) " is 121.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "                return CreateOutcome(RuleResult.Denied' "An Account with a CCP value of {0} is limited to {1} posts(s) in 24 hours"' userInfo.CommentPoints.Sum' postThreshold); " is 160.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "            if (userInfo.SubmissionPoints.Sum <= base.MinimumCommentPoints && userData.TotalSubmissionsPostedIn24Hours >= postThreshold) " is 124.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "                return CreateOutcome(RuleResult.Denied' "An Account with a SCP value of {0} is limited to {1} posts(s) in 24 hours"' userInfo.SubmissionPoints.Sum' postThreshold); " is 163.
Long Statement,Voat.Rules.Posting,PostSubmissionCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionCCPRule.cs,EvaluateRule,The length of the statement  "                return CreateOutcome(RuleResult.Denied' $"An Account must have a minimum of {minCCPForPost} CCP to create a submission"); " is 121.
Long Statement,Voat.Rules.Posting,PostSubmissionRecentlySubmittedRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionRecentlySubmittedRule.cs,EvaluateRule,The length of the statement  "                        string url = VoatUrlFormatter.BuildUrlPath(null' new Common.PathOptions() { FullyQualified = true' ProvideProtocol = true }' $"v/{recentlySubmitted.Subverse}/{recentlySubmitted.ID}"); " is 183.
Long Statement,Voat.Rules.Posting,PostSubmissionThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionThrottleRule.cs,EvaluateRule,The length of the statement  "            //bool isModerator = context.UserData.Information.Moderates.Any(x => x.Subverse.Equals(context.Subverse.Name' StringComparison.OrdinalIgnoreCase)); " is 147.
Long Statement,Voat.Rules.Posting,PostSubmissionThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionThrottleRule.cs,EvaluateRule,The length of the statement  "                    return CreateOutcome(RuleResult.Denied' "You are not authorized to submit links or start discussions in this subverse. Please contact subverse moderators for authorization"); " is 174.
Long Statement,Voat.Rules.Posting,PostSubmissionValidityRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionValidityRule.cs,EvaluateRule,The length of the statement  "                    if (userSubmission.Title.Equals(userSubmission.Url' StringComparison.InvariantCultureIgnoreCase) || userSubmission.Title.Contains(linkDomain)) " is 142.
Long Statement,Voat.Rules.Posting,PostSubmissionValidityRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionValidityRule.cs,EvaluateRule,The length of the statement  "                        return CreateOutcome(RuleResult.Denied' "Submission title may not be the same as the URL you are trying to submit. Why would you even think about doing this?! Why?"); " is 166.
Long Statement,Voat.Rules.Posting,PostSubmissionValidityRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionValidityRule.cs,EvaluateRule,The length of the statement  "            if (context.Subverse == null || userSubmission.Subverse.IsEqual("all")) //<-- the all subverse actually exists? HA! (Putts: leaving this code in because it's rad) " is 162.
Long Statement,Voat.Rules.Voting,DownVoteCommentBrigadeRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\DownVoteCommentBrigadingRule.cs,EvaluateRule,The length of the statement  "                var count = repo.VoteCount(context.UserName' comment.UserName' Domain.Models.ContentType.Comment' Domain.Models.VoteValue.Down' _timeSpan); " is 139.
Long Statement,Voat.Rules.Voting,VoteCommentAddressCheckRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteCommentAddressCheckRule.cs,EvaluateRule,The length of the statement  "                if ((existingVote == null || existingVote.Value == 0) && repo.HasAddressVoted(context.PropertyBag.AddressHash' ContentType.Comment' context.CommentID.Value)) " is 157.
Long Statement,Voat.Rules.Voting,VoteSubmissionAddressCheckRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteSubmissionAddressCheckRule.cs,EvaluateRule,The length of the statement  "                if ((existingVote == null || existingVote.Value == 0) && repo.HasAddressVoted(context.PropertyBag.AddressHash' ContentType.Submission' context.SubmissionID.Value)) " is 163.
Long Statement,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The length of the statement  "                return CreateOutcome(RuleResult.Denied' "Vote limit exceeded based on CCP. Available votes per 24 hours: {0}"' scaledDailyVotingQuota); " is 135.
Long Statement,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The length of the statement  "            //                VotingComments.UpvoteComment(commentId' loggedInUser' IpHash.CreateHash(UserHelper.UserIpAddress(Request))); " is 126.
Long Statement,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The length of the statement  "            //            VotingComments.UpvoteComment(commentId' loggedInUser' IpHash.CreateHash(UserHelper.UserIpAddress(Request))); " is 122.
Long Statement,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The length of the statement  "            //                VotingComments.DownvoteComment(commentId' loggedInUser' IpHash.CreateHash(UserHelper.UserIpAddress(Request))); " is 128.
Long Statement,Voat.Utilities,FilterUtility,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\FilterUtility.cs,Match,The length of the statement  "                string regexString = String.Format("{0}"' String.Join("|"' filters.Select(x => $"(?<F{x.ID.ToString()}>{x.Pattern})"))); " is 120.
Long Statement,Voat.Utilities,HttpResource,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\HttpResource.cs,GiddyUp,The length of the statement  "                httpClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue($"Voat-OpenGraph-Parser"' "2")); " is 130.
Long Statement,Voat.Utilities,ModeratorPermission,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\ModeratorPermission.cs,HasPermission,The length of the statement  "                    result = levelEvaluator(level' new ModeratorLevel[] { ModeratorLevel.Owner' ModeratorLevel.Moderator' ModeratorLevel.Janitor }); " is 128.
Long Statement,Voat.Utilities,ModeratorPermission,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\ModeratorPermission.cs,HasPermission,The length of the statement  "                    result = levelEvaluator(level' new ModeratorLevel[] { ModeratorLevel.Owner' ModeratorLevel.Moderator' ModeratorLevel.Designer }); " is 129.
Long Statement,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,UpdateSubverseHighestRanking,The length of the statement  "                    CacheHandler.Instance.Replace<double?>(CachingKey.SubverseHighestRank(subverse)' highestRankCacheEntry' TimeSpan.FromMinutes(30)); " is 130.
Long Statement,Voat.Utilities,ThumbGenerator,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\ThumbGenerator.cs,GenerateThumbnail,The length of the statement  "                                var fileCheck = fileManager.IsUploadPermitted(url' FileType.Thumbnail' httpResource.Response.Content.Headers.ContentType.MediaType' httpResource.Stream.Length); " is 160.
Long Statement,Voat.Utilities,UrlUtility,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UrlUtility.cs,GetDomainFromUri,The length of the statement  "                return uriResult.GetLeftPart(UriPartial.Authority).Replace("/www."' "/").Replace("http://"' "").Replace("https://"' ""); " is 120.
Long Statement,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,CanUserNameBeRegistered,The length of the statement  "            //            spoofsToCheck.AddRange(l.Where(x => !String.IsNullOrEmpty(x) && !userName.IsEqual(x)).ToList()); //only add valid items " is 133.
Long Statement,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The length of the statement  "                    var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized); " is 126.
Long Statement,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The length of the statement  "                    var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized); " is 129.
Long Statement,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The length of the statement  "                    ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here. " is 165.
Long Statement,Voat.Utilities,VoatUrlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\VoatUrlFormatter.cs,BasePath,The length of the statement  "                    basePath = $"/s/{domainReference.Name}" + (!String.IsNullOrEmpty(domainReference.OwnerName) ? CONSTANTS.SET_SEPERATOR + $"{domainReference.OwnerName}" : ""); " is 157.
Long Statement,Voat.Utilities,Voting,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Voting.cs,CheckIfVoted,The length of the statement  "            //    var checkResult = db.SubmissionVoteTrackers.Where(u => u.UserName == userToCheck && u.SubmissionID == submissionID) " is 121.
Long Statement,Voat.Utilities.Components,UserMentionLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,MatchFound,The length of the statement  "            return String.Format("[{0}]({1})"' replace' VoatUrlFormatter.UserProfile(match.Groups["user"].Value' new Common.PathOptions(true' true))); " is 138.
Long Statement,Voat.Utilities.Components,SubverseLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,ProcessContent,The length of the statement  "            MatchProcessingReplacer replacer = new MatchProcessingReplacer(CONSTANTS.ACCEPTABLE_LEADS + CONSTANTS.SUBVERSE_LINK_REGEX_FULL' " is 127.
Long Statement,Voat.Utilities.Components,SetLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,ProcessContent,The length of the statement  "            MatchProcessingReplacer replacer = new MatchProcessingReplacer(CONSTANTS.ACCEPTABLE_LEADS + CONSTANTS.SET_LINK_REGEX_SHORT' " is 123.
Long Statement,Voat.Utilities.Components,RedditLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,ProcessContent,The length of the statement  "            MatchProcessingReplacer replacer = new MatchProcessingReplacer(CONSTANTS.ACCEPTABLE_LEADS + @"((/?r/)(?'sub'[a-zA-Z0-9_]+))"' ProcessLogic); " is 140.
Long Statement,Voat.Utilities.Components,RawHyperlinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,ProcessContent,The length of the statement  "            MatchProcessingReplacer replacer = new MatchProcessingReplacer(CONSTANTS.ACCEPTABLE_LEADS + CONSTANTS.HTTP_LINK_REGEX + CONSTANTS.ACCEPTABLE_TRAILING' " is 150.
Long Statement,Voat.Utilities.Components,MatchProcessingReplacer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\RegExReplacer.cs,Replace,The length of the statement  "                                result = String.Concat(result.Substring(0' m.Index + offset)' substitution' result.Substring(m.Index + m.Length + offset' result.Length - (m.Length + m.Index + offset))); " is 170.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "            Action<string' string' List<string>> processSwap = new Action<string' string' List<string>>((string1' string2' list) => { " is 121.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "                        list.Add(lusername.Replace(string1.ToNormalized(normalization)' string2.ToNormalized(normalization)).ToNormalized(normalization)); " is 130.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "                        var matches = Regex.Matches(lusername' string1' normalization == Normalization.None ? RegexOptions.None : RegexOptions.IgnoreCase); " is 131.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "                                rollingSwap = String.Concat(rollingSwap.Substring(0' m.Index + offset)' substitution' rollingSwap.Substring(m.Index + m.Length + offset' rollingSwap.Length - (m.Length + m.Index + offset))); " is 190.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "                                var individualSwap = String.Concat(rollingSwap.Substring(0' m.Index)' substitution' rollingSwap.Substring(m.Index + m.Length' rollingSwap.Length - (m.Length + m.Index))); " is 170.
Long Statement,Voat.Business.Utilities,SpooferProofer,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\SpooferProofer.cs,CharacterSwapList,The length of the statement  "                                rollingSwap = String.Concat(rollingSwap.Substring(0' m.Index + offset)' substitution' rollingSwap.Substring(m.Index + m.Length + offset' rollingSwap.Length - (m.Length + m.Index + offset))); " is 190.
Long Statement,Voat.Voting.Restrictions,ContributionCountRestriction,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Voting\Restrictions\ContributionCountRestriction.cs,Evaluate,The length of the statement  "                var count = repo.UserContributionCount(principal.Identity.Name' (Voat.Domain.Models.ContentType)ContentType' Subverse' DateRange); " is 130.
Long Statement,Voat.Voting.Restrictions,ContributionCountRestriction,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Voting\Restrictions\ContributionCountRestriction.cs,Evaluate,The length of the statement  "                    evaluation = CommandResponse.FromStatus<IVoteRestriction>(this' Status.Denied' $"User only has {count} and needs {MinimumCount}"); " is 130.
Long Statement,Voat.Voting.Restrictions,ContributionPointRestriction,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Voting\Restrictions\ContributionPointRestriction.cs,ToDescription,The length of the statement  "            return $"Requires {MinimumCount} earned points for {ContentTypeDescription(true)} {WhereDescription()} {DateRangeDescription()}"; " is 129.
Long Statement,Voat.Voting.Restrictions,ContributionVoteRestriction,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Voting\Restrictions\ContributionVoteRestriction.cs,Evaluate,The length of the statement  "                //var score = repo.UserVotingBehavior(principal.Identity.Name' Options.Subverse' Options.ContentType' Options.Duration' Options.CutOffDate); " is 140.
Long Statement,Voat.Voting.Restrictions,ContributionVoteRestriction,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Voting\Restrictions\ContributionVoteRestriction.cs,ToDescription,The length of the statement  "            return $"Requires {MinimumCount} votes on {ContentTypeDescription(true)} {WhereDescription()} {DateRangeDescription()}"; " is 120.
Complex Conditional,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The conditional expression  "c == null && (forceAction == null || forceAction.HasValue && forceAction.Value)"  is complex.
Complex Conditional,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The conditional expression  "c != null && (forceAction == null || forceAction.HasValue && !forceAction.Value)"  is complex.
Complex Conditional,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The conditional expression  "s == null && (forceAction == null || forceAction.HasValue && forceAction.Value)"  is complex.
Complex Conditional,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The conditional expression  "s != null && (forceAction == null || forceAction.HasValue && !forceAction.Value)"  is complex.
Complex Conditional,Voat.IO,FileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\FileManager.cs,IsUploadPermitted,The conditional expression  "length == null || length.Value == 0 || (uploadLimit.ByteLimit > 0 && length > uploadLimit.ByteLimit)"  is complex.
Complex Conditional,Voat.Utilities,UrlUtility,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UrlUtility.cs,IsUriValid,The conditional expression  "(uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps)                           && !uriResult.IsLoopback                          && (!dnsNamesOnly || dnsNamesOnly && uriResult.HostNameType == UriHostNameType.Dns)"  is complex.
Empty Catch Block,Voat.Utilities,VoatUrlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\VoatUrlFormatter.cs,BuildUrlPath,The method has an empty catch block.
Magic Number,Voat,ChatMessage,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Chat\ChatMessage.cs,SanitizeInput,The following statement contains a magic number: message = message.SubstringMax(500);
Magic Number,Voat,ChatRoom,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Chat\ChatRoom.cs,GenerateAlias,The following statement contains a magic number: var number = random.Next(0' 99);
Magic Number,Voat,ChatRoom,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Chat\ChatRoom.cs,GenerateAlias,The following statement contains a magic number: alias = String.Format("{0}-{1}"' prefix' number.ToString().PadLeft(2' '0'));
Magic Number,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,ToRelativeRange,The following statement contains a magic number: switch (sortSpan)              {                  case SortSpan.Hour:                      end = start.ToEndOfHour();                      start = end.AddHours(1 * directionMultiplier);                      break;                    case SortSpan.Day:                      end = start.ToEndOfHour();                      start = end.AddHours(24 * directionMultiplier);                      break;                    case SortSpan.Week:                      end = start.ToEndOfDay();                      start = end.AddDays(7 * directionMultiplier);                      break;                    case SortSpan.Month:                      end = start.ToEndOfDay();                      start = end.AddDays(30 * directionMultiplier);                      break;                    case SortSpan.Quarter:                      end = start.ToEndOfDay();                      start = end.AddDays(90 * directionMultiplier);                      break;                    case SortSpan.Year:                      end = start.ToEndOfDay();                      start = end.AddDays(365 * directionMultiplier);                      break;                    default:                  case SortSpan.All:                        //Date Range shouldn't be processed for this span                      break;              }
Magic Number,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,ToRelativeRange,The following statement contains a magic number: switch (sortSpan)              {                  case SortSpan.Hour:                      end = start.ToEndOfHour();                      start = end.AddHours(1 * directionMultiplier);                      break;                    case SortSpan.Day:                      end = start.ToEndOfHour();                      start = end.AddHours(24 * directionMultiplier);                      break;                    case SortSpan.Week:                      end = start.ToEndOfDay();                      start = end.AddDays(7 * directionMultiplier);                      break;                    case SortSpan.Month:                      end = start.ToEndOfDay();                      start = end.AddDays(30 * directionMultiplier);                      break;                    case SortSpan.Quarter:                      end = start.ToEndOfDay();                      start = end.AddDays(90 * directionMultiplier);                      break;                    case SortSpan.Year:                      end = start.ToEndOfDay();                      start = end.AddDays(365 * directionMultiplier);                      break;                    default:                  case SortSpan.All:                        //Date Range shouldn't be processed for this span                      break;              }
Magic Number,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,ToRelativeRange,The following statement contains a magic number: switch (sortSpan)              {                  case SortSpan.Hour:                      end = start.ToEndOfHour();                      start = end.AddHours(1 * directionMultiplier);                      break;                    case SortSpan.Day:                      end = start.ToEndOfHour();                      start = end.AddHours(24 * directionMultiplier);                      break;                    case SortSpan.Week:                      end = start.ToEndOfDay();                      start = end.AddDays(7 * directionMultiplier);                      break;                    case SortSpan.Month:                      end = start.ToEndOfDay();                      start = end.AddDays(30 * directionMultiplier);                      break;                    case SortSpan.Quarter:                      end = start.ToEndOfDay();                      start = end.AddDays(90 * directionMultiplier);                      break;                    case SortSpan.Year:                      end = start.ToEndOfDay();                      start = end.AddDays(365 * directionMultiplier);                      break;                    default:                  case SortSpan.All:                        //Date Range shouldn't be processed for this span                      break;              }
Magic Number,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,ToRelativeRange,The following statement contains a magic number: switch (sortSpan)              {                  case SortSpan.Hour:                      end = start.ToEndOfHour();                      start = end.AddHours(1 * directionMultiplier);                      break;                    case SortSpan.Day:                      end = start.ToEndOfHour();                      start = end.AddHours(24 * directionMultiplier);                      break;                    case SortSpan.Week:                      end = start.ToEndOfDay();                      start = end.AddDays(7 * directionMultiplier);                      break;                    case SortSpan.Month:                      end = start.ToEndOfDay();                      start = end.AddDays(30 * directionMultiplier);                      break;                    case SortSpan.Quarter:                      end = start.ToEndOfDay();                      start = end.AddDays(90 * directionMultiplier);                      break;                    case SortSpan.Year:                      end = start.ToEndOfDay();                      start = end.AddDays(365 * directionMultiplier);                      break;                    default:                  case SortSpan.All:                        //Date Range shouldn't be processed for this span                      break;              }
Magic Number,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,ToRelativeRange,The following statement contains a magic number: switch (sortSpan)              {                  case SortSpan.Hour:                      end = start.ToEndOfHour();                      start = end.AddHours(1 * directionMultiplier);                      break;                    case SortSpan.Day:                      end = start.ToEndOfHour();                      start = end.AddHours(24 * directionMultiplier);                      break;                    case SortSpan.Week:                      end = start.ToEndOfDay();                      start = end.AddDays(7 * directionMultiplier);                      break;                    case SortSpan.Month:                      end = start.ToEndOfDay();                      start = end.AddDays(30 * directionMultiplier);                      break;                    case SortSpan.Quarter:                      end = start.ToEndOfDay();                      start = end.AddDays(90 * directionMultiplier);                      break;                    case SortSpan.Year:                      end = start.ToEndOfDay();                      start = end.AddDays(365 * directionMultiplier);                      break;                    default:                  case SortSpan.All:                        //Date Range shouldn't be processed for this span                      break;              }
Magic Number,Voat.Caching,Submission_Legacy,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\DataCache.cs,Retrieve,The following statement contains a magic number: Voat.Data.Models.Submission submission = CacheHandler.Instance.Register<Voat.Data.Models.Submission>(cacheKey' new Func<Voat.Data.Models.Submission>(() =>                      {                          using (var repo = new Repository())                          {                              return repo.GetSubmission(submissionID.Value);                          }                      })' TimeSpan.FromMinutes(30)' -1);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following statement contains a magic number: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0:                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          comment.UpCount++;                                      }                                      else                                      {                                          comment.DownCount++;                                      }                                        var newVotingTracker = new CommentVoteTracker                                      {                                          CommentID = commentID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.CommentVoteTracker.Add(newVotingTracker);                                      _db.SaveChanges();                                        //SendVoteNotification(comment.Name' "upvote");                                      response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                            _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                          comment.DownCount++;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                          _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                                switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke                                        if (existingVoteTracker != null)                                      {                                          comment.DownCount--;                                          _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                          response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          comment.UpCount++;                                          comment.DownCount--;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                        break;                              }                              break;                      }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following statement contains a magic number: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0:                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          comment.UpCount++;                                      }                                      else                                      {                                          comment.DownCount++;                                      }                                        var newVotingTracker = new CommentVoteTracker                                      {                                          CommentID = commentID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.CommentVoteTracker.Add(newVotingTracker);                                      _db.SaveChanges();                                        //SendVoteNotification(comment.Name' "upvote");                                      response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                            _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                          comment.DownCount++;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                          _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                                switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke                                        if (existingVoteTracker != null)                                      {                                          comment.DownCount--;                                          _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                          response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          comment.UpCount++;                                          comment.DownCount--;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                        break;                              }                              break;                      }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following statement contains a magic number: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0: //revoke                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          submission.UpCount++;                                      }                                      else                                      {                                          submission.DownCount++;                                      }                                        //calculate new ranks                                      Ranking.RerankSubmission(submission);                                        var t = new SubmissionVoteTracker                                      {                                          SubmissionID = submissionID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.SubmissionVoteTracker.Add(t);                                      _db.SaveChanges();                                        response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                          submission.DownCount++;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                              switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke if we are here                                        // delete existing downvote                                        if (existingVoteTracker != null)                                      {                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          submission.UpCount++;                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                      }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following statement contains a magic number: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0: //revoke                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          submission.UpCount++;                                      }                                      else                                      {                                          submission.DownCount++;                                      }                                        //calculate new ranks                                      Ranking.RerankSubmission(submission);                                        var t = new SubmissionVoteTracker                                      {                                          SubmissionID = submissionID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.SubmissionVoteTracker.Add(t);                                      _db.SaveChanges();                                        response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                          submission.DownCount++;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                              switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke if we are here                                        // delete existing downvote                                        if (existingVoteTracker != null)                                      {                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          submission.UpCount++;                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                      }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetTopViewedSubmissions,The following statement contains a magic number: var startDate = CurrentDate.Add(new TimeSpan(0' -24' 0' 0' 0));
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetTopViewedSubmissions,The following statement contains a magic number: var data = (from submission in _db.Submission                          join subverse in _db.Subverse on submission.Subverse equals subverse.Name                          where submission.ArchiveDate == null && !submission.IsDeleted && subverse.IsPrivate != true && subverse.IsAdminPrivate != true && subverse.IsAdult == false && submission.CreationDate >= startDate && submission.CreationDate <= CurrentDate                          where !(from bu in _db.BannedUser select bu.UserName).Contains(submission.UserName)                          where !subverse.IsAdminDisabled.Value                            //where !(from ubs in _db.UserBlockedSubverses where ubs.Subverse.Equals(subverse.Name) select ubs.UserName).Contains(User.Identity.Name)                          orderby submission.Views descending                          select submission).Take(5).ToList();
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The following statement contains a magic number: switch (type)              {                  case DomainType.Subverse:                        bool filterBlockedSubverses = false;                        switch (name.ToLower())                      {                          //Match Aggregate Subs                          case AGGREGATE_SUBVERSE.FRONT:                              joinSet(query' SetType.Front.ToString()' userName' SetType.Front' true);                              //query.Append(x => x.Select' "INNER JOIN SubverseSubscription ss WITH (NOLOCK) ON s.Subverse = ss.Subverse");                              query.Append(x => x.Where' $"s.\"ArchiveDate\" IS NULL AND s.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)}");                                //query = (from x in _db.Submissions                              //         join subscribed in _db.SubverseSubscriptions on x.Subverse equals subscribed.Subverse                              //         where subscribed.UserName == User.Identity.Name                              //         select x);                              if (!nsfw)                              {                                  query.Append(x => x.Where' $"s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}");                              }                              break;                          case AGGREGATE_SUBVERSE.DEFAULT:                              //if no user or user has no subscriptions or logged in user requests default page                              joinSet(query' "Default"' null' null' true);                              //query.Append(x => x.Select' "INNER JOIN DefaultSubverse ss WITH (NOLOCK) ON s.Subverse = ss.Subverse");                                //sort default by relative rank on default if sorted by rank by default                              options.Sort = (options.Sort == SortAlgorithm.Rank ? Domain.Models.SortAlgorithm.Relative : options.Sort);                                if (VoatSettings.Instance.IsVoatBranded && options.Sort == SortAlgorithm.Relative)                              {                                  //This is a modification Voat uses in the default page                                  //Postgre Port                                  //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24");                                  query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND s.\"CreationDate\" >= @DefaultEndDate");                                  query.Parameters.AddDynamicParams(new { DefaultEndDate = CurrentDate.AddHours(-24) });                              }                                if (!nsfw)                              {                                  query.Append(x => x.Where' $"s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}");                              }                              //query = (from x in _db.Submissions                              //         join defaults in _db.DefaultSubverses on x.Subverse equals defaults.Subverse                              //         select x);                              break;                          case AGGREGATE_SUBVERSE.ANY:                              //allowing subverse marked private to not be filtered                              //Should subs marked as private be excluded from an ANY query? I don't know.                              //query.Where = "sub.IsAdminPrivate = 0 AND sub.IsPrivate = 0";                              query.Append(x => x.Where' $"sub.\"IsAdminPrivate\" = {SqlFormatter.BooleanLiteral(false)}");                              //query = (from x in _db.Submissions                              //         where                              //         !x.Subverse1.IsAdminPrivate                              //         && !x.Subverse1.IsPrivate                              //         && !(x.Subverse1.IsAdminDisabled.HasValue && x.Subverse1.IsAdminDisabled.Value)                              //         select x);                              break;                            case AGGREGATE_SUBVERSE.ALL:                          case "all":                              filterBlockedSubverses = true;                              ////Controller logic:                              //IQueryable<Submission> submissionsFromAllSubversesByDate =                               //(from message in _db.Submissions                              //join subverse in _db.Subverses on message.Subverse equals subverse.Name                              //where !message.IsArchived && !message.IsDeleted && subverse.IsPrivate != true && subverse.IsAdminPrivate != true && subverse.MinCCPForDownvote == 0                              //where !(from bu in _db.BannedUsers select bu.UserName).Contains(message.UserName)                              //where !subverse.IsAdminDisabled.Value                              //where !(from ubs in _db.UserBlockedSubverses where ubs.Subverse.Equals(subverse.Name) select ubs.UserName).Contains(userName)                              //select message).OrderByDescending(s => s.CreationDate);                                    //v/all has certain conditions                              //1. Only subs that have a MinCCP of zero                              //2. Don't show private subs                              //3. Don't show NSFW subs if nsfw isn't enabled in profile' if they are logged in                              //4. Don't show blocked subs if logged in // not implemented                              query.Append(x => x.Where' $"sub.\"MinCCPForDownvote\" = 0 AND sub.\"IsAdminPrivate\" = {SqlFormatter.BooleanLiteral(false)} AND sub.\"IsPrivate\" = {SqlFormatter.BooleanLiteral(false)}");                              if (!nsfw)                              {                                  query.Where += $" AND sub.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)} AND s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}";                              }                                //query = (from x in _db.Submissions                              //         where x.Subverse1.MinCCPForDownvote == 0                              //                && (!x.Subverse1.IsAdminPrivate && !x.Subverse1.IsPrivate && !(x.Subverse1.IsAdminDisabled.HasValue && x.Subverse1.IsAdminDisabled.Value))                              //                && (x.Subverse1.IsAdult && nsfw || !x.Subverse1.IsAdult)                              //         select x);                              break;                            //for regular subverse queries                          default:                              name = ToCorrectSubverseCasing(name);                              if (String.IsNullOrEmpty(name))                              {                                  throw new VoatNotFoundException("Subverse '{0}' not found."' name);                              }                                ////Controller Logic:                              //IQueryable<Submission> submissionsFromASubverseByDate =                               //    (from message in _db.Submissions                              //    join subverse in _db.Subverses on message.Subverse equals subverse.Name                              //    where !message.IsDeleted && message.Subverse == subverseName                              //    where !(from bu in _db.BannedUsers select bu.UserName).Contains(message.UserName)                              //    where !(from bu in _db.SubverseBans where bu.Subverse == subverse.Name select bu.UserName).Contains(message.UserName)                              //    select message).OrderByDescending(s => s.CreationDate);                                query.Where = "s.\"Subverse\" = @Name";                                ////Filter out stickies in subs                              //query.Append(x => x.Where' "s.ID NOT IN (SELECT sticky.SubmissionID FROM StickiedSubmission sticky WITH (NOLOCK) WHERE sticky.SubmissionID = s.ID AND sticky.Subverse = s.Subverse)");                                //query = (from x in _db.Submissions                              //         where (x.Subverse == subverse || subverse == null)                              //         select x);                              break;                      }                      //Filter out stickies                      switch (name.ToLower())                      {                          //Match Aggregate Subs                          case AGGREGATE_SUBVERSE.FRONT:                          case AGGREGATE_SUBVERSE.DEFAULT:                          case AGGREGATE_SUBVERSE.ANY:                          case AGGREGATE_SUBVERSE.ALL:                          case "all":                                query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND {SqlFormatter.ToNormalized("sticky.\"Subverse\""' Normalization.Lower)} = 'announcements')");                                break;                          //for regular subverse queries                          default:                                //Filter out stickies in subs                              query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND sticky.\"Subverse\" = s.\"Subverse\")");                              break;                      }                              if (User.Identity.IsAuthenticated)                      {                          if (filterBlockedSubverses)                          {                              var set = GetSet(SetType.Blocked.ToString()' userName' SetType.Blocked);                              if (set != null)                              {                                  query.Append(x => x.Where' $"sub.\"ID\" NOT IN (SELECT \"SubverseID\" FROM {SqlFormatter.Table("SubverseSetList")} WHERE \"SubverseSetID\" = @BlockedSetID)");                                  query.Parameters.Add("BlockedSetID"' set.ID);                              }                          }                      }                      break;                    case DomainType.Set:                      joinSet(query' name' ownerName' null' true);                        if (name.IsEqual("Default") && String.IsNullOrEmpty(ownerName))                      {                          ////sort default by relative rank on default if sorted by rank by default                          //options.Sort = (options.Sort == SortAlgorithm.Rank ? Domain.Models.SortAlgorithm.Relative : options.Sort);                            if (VoatSettings.Instance.IsVoatBranded && options.Sort == SortAlgorithm.Relative)                          {                              //This is a modification Voat uses in the default page                              //Postgre Port                              //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24");                              query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND s.\"CreationDate\" >= @DefaultEndDate");                              query.Parameters.AddDynamicParams(new { DefaultEndDate = CurrentDate.AddHours(-24) });                          }                      }                        break;              }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSubmissionsDapper,The following statement contains a magic number: switch (type)              {                  case DomainType.Subverse:                        bool filterBlockedSubverses = false;                        switch (name.ToLower())                      {                          //Match Aggregate Subs                          case AGGREGATE_SUBVERSE.FRONT:                              joinSet(query' SetType.Front.ToString()' userName' SetType.Front' true);                              //query.Append(x => x.Select' "INNER JOIN SubverseSubscription ss WITH (NOLOCK) ON s.Subverse = ss.Subverse");                              query.Append(x => x.Where' $"s.\"ArchiveDate\" IS NULL AND s.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)}");                                //query = (from x in _db.Submissions                              //         join subscribed in _db.SubverseSubscriptions on x.Subverse equals subscribed.Subverse                              //         where subscribed.UserName == User.Identity.Name                              //         select x);                              if (!nsfw)                              {                                  query.Append(x => x.Where' $"s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}");                              }                              break;                          case AGGREGATE_SUBVERSE.DEFAULT:                              //if no user or user has no subscriptions or logged in user requests default page                              joinSet(query' "Default"' null' null' true);                              //query.Append(x => x.Select' "INNER JOIN DefaultSubverse ss WITH (NOLOCK) ON s.Subverse = ss.Subverse");                                //sort default by relative rank on default if sorted by rank by default                              options.Sort = (options.Sort == SortAlgorithm.Rank ? Domain.Models.SortAlgorithm.Relative : options.Sort);                                if (VoatSettings.Instance.IsVoatBranded && options.Sort == SortAlgorithm.Relative)                              {                                  //This is a modification Voat uses in the default page                                  //Postgre Port                                  //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24");                                  query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND s.\"CreationDate\" >= @DefaultEndDate");                                  query.Parameters.AddDynamicParams(new { DefaultEndDate = CurrentDate.AddHours(-24) });                              }                                if (!nsfw)                              {                                  query.Append(x => x.Where' $"s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}");                              }                              //query = (from x in _db.Submissions                              //         join defaults in _db.DefaultSubverses on x.Subverse equals defaults.Subverse                              //         select x);                              break;                          case AGGREGATE_SUBVERSE.ANY:                              //allowing subverse marked private to not be filtered                              //Should subs marked as private be excluded from an ANY query? I don't know.                              //query.Where = "sub.IsAdminPrivate = 0 AND sub.IsPrivate = 0";                              query.Append(x => x.Where' $"sub.\"IsAdminPrivate\" = {SqlFormatter.BooleanLiteral(false)}");                              //query = (from x in _db.Submissions                              //         where                              //         !x.Subverse1.IsAdminPrivate                              //         && !x.Subverse1.IsPrivate                              //         && !(x.Subverse1.IsAdminDisabled.HasValue && x.Subverse1.IsAdminDisabled.Value)                              //         select x);                              break;                            case AGGREGATE_SUBVERSE.ALL:                          case "all":                              filterBlockedSubverses = true;                              ////Controller logic:                              //IQueryable<Submission> submissionsFromAllSubversesByDate =                               //(from message in _db.Submissions                              //join subverse in _db.Subverses on message.Subverse equals subverse.Name                              //where !message.IsArchived && !message.IsDeleted && subverse.IsPrivate != true && subverse.IsAdminPrivate != true && subverse.MinCCPForDownvote == 0                              //where !(from bu in _db.BannedUsers select bu.UserName).Contains(message.UserName)                              //where !subverse.IsAdminDisabled.Value                              //where !(from ubs in _db.UserBlockedSubverses where ubs.Subverse.Equals(subverse.Name) select ubs.UserName).Contains(userName)                              //select message).OrderByDescending(s => s.CreationDate);                                    //v/all has certain conditions                              //1. Only subs that have a MinCCP of zero                              //2. Don't show private subs                              //3. Don't show NSFW subs if nsfw isn't enabled in profile' if they are logged in                              //4. Don't show blocked subs if logged in // not implemented                              query.Append(x => x.Where' $"sub.\"MinCCPForDownvote\" = 0 AND sub.\"IsAdminPrivate\" = {SqlFormatter.BooleanLiteral(false)} AND sub.\"IsPrivate\" = {SqlFormatter.BooleanLiteral(false)}");                              if (!nsfw)                              {                                  query.Where += $" AND sub.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)} AND s.\"IsAdult\" = {SqlFormatter.BooleanLiteral(false)}";                              }                                //query = (from x in _db.Submissions                              //         where x.Subverse1.MinCCPForDownvote == 0                              //                && (!x.Subverse1.IsAdminPrivate && !x.Subverse1.IsPrivate && !(x.Subverse1.IsAdminDisabled.HasValue && x.Subverse1.IsAdminDisabled.Value))                              //                && (x.Subverse1.IsAdult && nsfw || !x.Subverse1.IsAdult)                              //         select x);                              break;                            //for regular subverse queries                          default:                              name = ToCorrectSubverseCasing(name);                              if (String.IsNullOrEmpty(name))                              {                                  throw new VoatNotFoundException("Subverse '{0}' not found."' name);                              }                                ////Controller Logic:                              //IQueryable<Submission> submissionsFromASubverseByDate =                               //    (from message in _db.Submissions                              //    join subverse in _db.Subverses on message.Subverse equals subverse.Name                              //    where !message.IsDeleted && message.Subverse == subverseName                              //    where !(from bu in _db.BannedUsers select bu.UserName).Contains(message.UserName)                              //    where !(from bu in _db.SubverseBans where bu.Subverse == subverse.Name select bu.UserName).Contains(message.UserName)                              //    select message).OrderByDescending(s => s.CreationDate);                                query.Where = "s.\"Subverse\" = @Name";                                ////Filter out stickies in subs                              //query.Append(x => x.Where' "s.ID NOT IN (SELECT sticky.SubmissionID FROM StickiedSubmission sticky WITH (NOLOCK) WHERE sticky.SubmissionID = s.ID AND sticky.Subverse = s.Subverse)");                                //query = (from x in _db.Submissions                              //         where (x.Subverse == subverse || subverse == null)                              //         select x);                              break;                      }                      //Filter out stickies                      switch (name.ToLower())                      {                          //Match Aggregate Subs                          case AGGREGATE_SUBVERSE.FRONT:                          case AGGREGATE_SUBVERSE.DEFAULT:                          case AGGREGATE_SUBVERSE.ANY:                          case AGGREGATE_SUBVERSE.ALL:                          case "all":                                query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND {SqlFormatter.ToNormalized("sticky.\"Subverse\""' Normalization.Lower)} = 'announcements')");                                break;                          //for regular subverse queries                          default:                                //Filter out stickies in subs                              query.Append(x => x.Where' $"s.\"ID\" NOT IN (SELECT sticky.\"SubmissionID\" FROM {SqlFormatter.Table("StickiedSubmission"' "sticky"' null' "NOLOCK")} WHERE sticky.\"SubmissionID\" = s.\"ID\" AND sticky.\"Subverse\" = s.\"Subverse\")");                              break;                      }                              if (User.Identity.IsAuthenticated)                      {                          if (filterBlockedSubverses)                          {                              var set = GetSet(SetType.Blocked.ToString()' userName' SetType.Blocked);                              if (set != null)                              {                                  query.Append(x => x.Where' $"sub.\"ID\" NOT IN (SELECT \"SubverseID\" FROM {SqlFormatter.Table("SubverseSetList")} WHERE \"SubverseSetID\" = @BlockedSetID)");                                  query.Parameters.Add("BlockedSetID"' set.ID);                              }                          }                      }                      break;                    case DomainType.Set:                      joinSet(query' name' ownerName' null' true);                        if (name.IsEqual("Default") && String.IsNullOrEmpty(ownerName))                      {                          ////sort default by relative rank on default if sorted by rank by default                          //options.Sort = (options.Sort == SortAlgorithm.Rank ? Domain.Models.SortAlgorithm.Relative : options.Sort);                            if (VoatSettings.Instance.IsVoatBranded && options.Sort == SortAlgorithm.Relative)                          {                              //This is a modification Voat uses in the default page                              //Postgre Port                              //query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND ABS(DATEDIFF(HH' s.\"CreationDate\"' GETUTCDATE())) <= 24");                              query.Append(x => x.Where' "(s.\"UpCount\" - s.\"DownCount\" >= 20) AND s.\"CreationDate\" >= @DefaultEndDate");                              query.Parameters.AddDynamicParams(new { DefaultEndDate = CurrentDate.AddHours(-24) });                          }                      }                        break;              }
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,EditSubmission,The following statement contains a magic number: CurrentDate.Subtract(submission.CreationDate).TotalMinutes <= 10.0f
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetDefaultUserPreferences,The following statement contains a magic number: p.CollapseCommentLimit = 4;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetDefaultUserPreferences,The following statement contains a magic number: p.DisplayCommentCount = 5;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SetDefaultUserPreferences,The following statement contains a magic number: p.HighlightMinutes = 30;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SendMessage,The following statement contains a magic number: int max = 500;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: userInfo.SubmissionVoting = tasks[2].Result;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: userInfo.CommentVoting = tasks[3].Result;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserInformation,The following statement contains a magic number: var userBadges = await (from b in _db.Badge                                      join ub in _db.UserBadge on b.ID equals ub.BadgeID into ubn                                      from uball in ubn.DefaultIfEmpty()                                      where                                      uball.UserName == userName                                        //(virtual badges)                                      ||                                      (b.ID == "whoaverse" && (userInfo.RegistrationDate < new DateTime(2015' 1' 2)))                                      ||                                      (b.ID == "alphauser" && (userInfo.RegistrationDate > new DateTime(2015' 1' 2) && userInfo.RegistrationDate < new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "betauser" && userInfo.RegistrationDate > (new DateTime(2016' 10' 10)))                                      ||                                      (b.ID == "cakeday" && userInfo.RegistrationDate.Year < CurrentDate.Year && userInfo.RegistrationDate.Month == CurrentDate.Month && userInfo.RegistrationDate.Day == CurrentDate.Day)                                      select new Voat.Domain.Models.UserBadge()                                      {                                          CreationDate = (uball == null ? userInfo.RegistrationDate : uball.CreationDate)'                                          Name = b.Name'                                          Title = b.Title'                                          Graphic = b.Graphic'                                      }                                ).OrderByDescending(x => x.CreationDate).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetRandomSubverse,The following statement contains a magic number: q.Parameters.Add("EndDate"' CurrentDate.AddHours(-24));
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The following statement contains a magic number: var dayCutOff = 7;
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetFeatured,The following statement contains a magic number: d.Parameters.Add("EndDate"' Repository.CurrentDate.AddHours(dayCutOff * 24 * -1));
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ActiveSessionCount,The following statement contains a magic number: var range = new DateRange(TimeSpan.FromMinutes(15)' DateRangeDirection.Past' CurrentDate);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The following statement contains a magic number: var endLockOutDate = CurrentDate.AddDays(3 * 30);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The following statement contains a magic number: var endLockOutDate = CurrentDate.AddDays(3 * 30);
Magic Number,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetSetListDescription,The following statement contains a magic number: int count = 50;
Magic Number,Voat.Domain.Command,QueuedCommand<T>,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Base\QueuedCommand.cs,QueuedCommand,The following statement contains a magic number: _commands = new CacheBatchOperation<QueuedCommand<T>>("Command"' Voat.Caching.CacheHandler.Instance' 10' TimeSpan.FromMinutes(5)' ProcessBatch);
Magic Number,Voat.Domain.Command,QueuedCommand<T>,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Base\QueuedCommand.cs,QueuedCommand,The following statement contains a magic number: _commands = new CacheBatchOperation<QueuedCommand<T>>("Command"' Voat.Caching.CacheHandler.Instance' 10' TimeSpan.FromMinutes(5)' ProcessBatch);
Magic Number,Voat.Domain.Command,BlockCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\BlockCommand.cs,UpdateCache,The following statement contains a magic number: CacheHandler.Instance.Replace<IList<BlockedItem>>(key' new Func<IList<BlockedItem>' IList<BlockedItem>>(x =>                          {                              var entry = x.FirstOrDefault(b => b.Type == _domainType && b.Name.ToLower() == _name.ToLower());                              if (entry == null)                              {                                  x.Add(new BlockedItem() { Type = this._domainType' Name = this._name' CreationDate = Repository.CurrentDate });                              }                              return x;                          })' TimeSpan.FromMinutes(10));
Magic Number,Voat.Domain.Command,CreateCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,ExecuteStage,The following statement contains a magic number: switch (stage)              {                  case CommandStage.OnValidation:                      if (Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Models.Comment>(null' Status.Denied' "Comment can not exceed 10'000 characters");                      }                      break;              }
Magic Number,Voat.Domain.Command,EditCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,ExecuteStage,The following statement contains a magic number: switch (stage)              {                  case CommandStage.OnValidation:                      if (Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Models.Comment>(null' Status.Denied' "Comment can not exceed 10'000 characters");                      }                      break;              }
Magic Number,Voat.Domain.Command,EditSubmissionCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Submission\EditSubmissionCommand.cs,ExecuteStage,The following statement contains a magic number: switch (stage)              {                  case CommandStage.OnValidation:                      if (_userSubmission.Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Submission>(null' Status.Invalid' "Content can not exceed 10'000 characters");                      }                      break;              }
Magic Number,Voat.Domain,UserData,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\UserData.cs,Recache,The following statement contains a magic number: Task.Run(() => CacheHandler.Instance.Replace<UserData>(CachingKey.UserData(UserName)' this' TimeSpan.FromMinutes(5)));
Magic Number,Voat.Domain.Models,Vote,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\Vote.cs,Validate,The following statement contains a magic number: Options == null || Options.Count < 2
Magic Number,Voat.Domain.Models,Vote,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\Vote.cs,Validate,The following statement contains a magic number: Options.Count > 10
Magic Number,Voat.Domain.Models,Vote,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\Vote.cs,Validate,The following statement contains a magic number: Options != null || Options.Count >= 2
Magic Number,Voat.Domain.Models,VoteAggregate,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\Voting\VoteAggregate.cs,Load,The following statement contains a magic number: var generate = new Func<Dictionary<int' int>>(() => {                            var dict = new Dictionary<int' int>();                          var random = new Random();                            foreach (var o in aggregate.Vote.Options)                          {                              dict.Add(o.ID' random.Next(1' 5000));                          }                            return dict;                      });
Magic Number,Voat.Domain.Query.Base,BaseQueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Base\BaseQueryCommentSegment.cs,GetSegment,The following statement contains a magic number: int nestLevel = 3;
Magic Number,Voat.Domain.Query,QueryApiStreamLastCalledDate,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryApiStreamLastCalledDate.cs,GetData,The following statement contains a magic number: last = last.AddMinutes(-5);
Magic Number,Voat.Domain.Query,QueryCommentContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentContext.cs,QueryCommentContext,The following statement contains a magic number: _context = Math.Min(20' Math.Max(0' context.Value));
Magic Number,Voat.Domain.Query,QueryCommentContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentContext.cs,QueryCommentContext,The following statement contains a magic number: _collapseThreshold = -10000;
Magic Number,Voat.Domain.Query,QueryCommentSegment,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryCommentSegment.cs,TakeSegment,The following statement contains a magic number: return commentTree.Skip(_index.HasValue ? _index.Value : 0).Take(_count * 2);
Magic Number,Voat.Domain.Query,QueryUserSaves,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\QueryUserSaves.cs,ExecuteAsync,The following statement contains a magic number: handler.Replace(cacheKey' await GetData()' TimeSpan.FromMinutes(30));
Magic Number,Voat.Domain.Query,QueryVotes,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Vote\QueryVotes.cs,GetData,The following statement contains a magic number: result.ForEach(x => CacheHandler.Replace(CachingKey.Vote(x.ID)' x' TimeSpan.FromMinutes(30)));
Magic Number,Voat.Domain.Query.Statistics,QueryHighestVotedContent,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Statistics\QueryHighestVotedContent.cs,QueryHighestVotedContent,The following statement contains a magic number: options.Count = 5;
Magic Number,Voat.Domain.Query.Statistics,QueryUserVotesGiven,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Statistics\QueryUserVotesGiven.cs,QueryUserVotesGiven,The following statement contains a magic number: options.Count = 5;
Magic Number,Voat.Domain.Query.Statistics,QueryUserVotesReceived,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Query\Statistics\QueryUserVotesReceived.cs,QueryUserVotesReceived,The following statement contains a magic number: options.Count = 5;
Magic Number,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Resize,The following statement contains a magic number: encoderParameters.Param[0] = new EncoderParameter(qualityParamId' 100);
Magic Number,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Center,The following statement contains a magic number: shiftedWidthStart = (destinationSize.Width - scaledSize.Width) / 2;
Magic Number,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Center,The following statement contains a magic number: shiftedHeightStart = (destinationSize.Height - scaledSize.Height) / 2;
Magic Number,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Scale,The following statement contains a magic number: scaleWidth = (int)(scaleWidth * (scalePercentage / 100F));
Magic Number,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,Scale,The following statement contains a magic number: scaleHeight = (int)(scaleHeight * (scalePercentage / 100F));
Magic Number,Voat.IO,AzureBlobFileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\AzureBlobFileManager.cs,GetContainerName,The following statement contains a magic number: return $"{name}{_containerNameSuffix}".SubstringMax(63).ToNormalized(Normalization.Lower);
Magic Number,Voat.IO,FileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\FileManager.cs,IsUploadPermitted,The following statement contains a magic number: switch (fileType)              {                  case FileType.Avatar:                  case FileType.Thumbnail:                  case FileType.Badge:                        if (!uploadLimit.IsExtensionAllowed(fileName))                      {                          result = CommandResponse.FromStatus(Status.Invalid' "File type is not permitted for upload");                      }                      else if (!uploadLimit.IsMimeTypeAllowed(mimeType))                      {                          result = CommandResponse.FromStatus(Status.Invalid' "Mime type is not permitted for upload");                      }                      if (length == null || length.Value == 0 || (uploadLimit.ByteLimit > 0 && length > uploadLimit.ByteLimit))                      {                          result = CommandResponse.FromStatus(Status.Invalid' $"File length is too big or too small but we aren't saying (Hint: {Math.Round(uploadLimit.ByteLimit / (decimal)1000000' 1)} MB max)");                      }                      break;              }
Magic Number,Voat.Notifications,NotificationManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Notifications\NotificationManager.cs,FindMentions,The following statement contains a magic number: var matchmaker = new MatchMaker() { IgnoreDuplicateMatches = true' MatchThreshold = 5 };
Magic Number,Voat.Rules,BaseCommentRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\BaseCommentRule.cs,EvaluateRule,The following statement contains a magic number: var copyPasta = repo.SimilarCommentSubmittedRecently(context.UserName' content.TrimWhiteSpace()' TimeSpan.FromHours(24));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyPostingQuotaForSubUsed,The following statement contains a magic number: var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' subverse' DateRange.StartFrom(TimeSpan.FromHours(24)));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyPostingQuotaForNegativeScoreUsed,The following statement contains a magic number: var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission'null' DateRange.StartFrom(TimeSpan.FromHours(24)));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyCommentPostingQuotaForNegativeScoreUsed,The following statement contains a magic number: var userCommentCountInPast24Hours = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Comment' null' DateRange.StartFrom(TimeSpan.FromHours(24)));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyCommentPostingQuotaUsed,The following statement contains a magic number: var userCommentSubmissionsInPast24Hours = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Comment' null' DateRange.StartFrom(TimeSpan.FromHours(24)));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserHourlyGlobalPostingQuotaUsed,The following statement contains a magic number: memberInDays > 30
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyGlobalPostingQuotaUsed,The following statement contains a magic number: memberInDays > 30
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,UserDailyGlobalPostingQuotaUsed,The following statement contains a magic number: var userSubmissionsToTargetSub = repo.UserContributionCount(context.UserName' Domain.Models.ContentType.Submission' null' DateRange.StartFrom(TimeSpan.FromHours(24)));
Magic Number,Voat.Rules,VoatRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Base\VoatRule.cs,DailyCrossPostingQuotaUsed,The following statement contains a magic number: var numberOfTimesSubmitted = repo.FindUserLinkSubmissionCount(context.UserName' url' TimeSpan.FromHours(24));
Magic Number,Voat.Rules,CreateSubverseRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Subverse\CreateSubverseRule.cs,EvaluateRule,The following statement contains a magic number: subs.Count(x => x.Power <= 2) >= VoatSettings.Instance.MaximumOwnedSubs
Magic Number,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The following statement contains a magic number: userMembershipTimeSpan.TotalDays < 7 && userCcp < 50
Magic Number,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The following statement contains a magic number: userMembershipTimeSpan.TotalDays < 7 && userCcp < 50
Magic Number,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The following statement contains a magic number: userMembershipTimeSpan.TotalDays < 7 && userCcp <= 10
Magic Number,Voat.Rules.Posting,PostCommentCCPRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostCommentCCPRule.cs,EvaluateRule,The following statement contains a magic number: userMembershipTimeSpan.TotalDays < 7 && userCcp <= 10
Magic Number,Voat.Rules.Posting,PostSubmissionRecentlySubmittedRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionRecentlySubmittedRule.cs,EvaluateRule,The following statement contains a magic number: switch (submission.Type)              {                  case SubmissionType.Link:                      Data.Models.Submission recentlySubmitted = null;                      using (var repo = new Repository())                      {                          recentlySubmitted = repo.FindSubverseLinkSubmission(context.Subverse.Name' submission.Url' TimeSpan.FromDays(15));                      }                      if (recentlySubmitted != null)                      {                          string url = VoatUrlFormatter.BuildUrlPath(null' new Common.PathOptions() { FullyQualified = true' ProvideProtocol = true }' $"v/{recentlySubmitted.Subverse}/{recentlySubmitted.ID}");                            return CreateOutcome(RuleResult.Denied' $"Sorry' this link has already been submitted recently. {url}");                      }                      break;                    case SubmissionType.Text:                        //containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' submission.Content);                      break;              }
Magic Number,Voat.Rules.Voting,DownVoteCommentAgeRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\DownVoteCommentAgeRule.cs,EvaluateRule,The following statement contains a magic number: timeElapsed.TotalDays > 7
Magic Number,Voat.Rules.Voting,DownVoteSubmissionAgeRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\DownVoteSubmissionAgeRule.cs,EvaluateRule,The following statement contains a magic number: timeElapsed.TotalDays > 7
Magic Number,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The following statement contains a magic number: var scaledDailyVotingQuota = (userCCP >= 20 ? Math.Max(dailyVotingQuota' userCCP / 2) : dailyVotingQuotaScaledMinimum);
Magic Number,Voat.Rules.Voting,VoteThrottleRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Voting\VoteThrottleRule.cs,EvaluateRule,The following statement contains a magic number: var scaledDailyVotingQuota = (userCCP >= 20 ? Math.Max(dailyVotingQuota' userCCP / 2) : dailyVotingQuotaScaledMinimum);
Magic Number,Voat.Utilities,AccountSecurity,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\AccountSecurity.cs,IsPasswordComplex,The following statement contains a magic number: const int minLength = 6;
Magic Number,Voat.Utilities,CommentCounter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\CommentCounter.cs,CommentCount,The following statement contains a magic number: var data = CacheHandler.Instance.Register(cacheKey' new Func<int?>(() =>              {                  using (var repo = new Repository())                  {                      return repo.GetCommentCount(submissionID);                  }              })' _cacheTime' 3);
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,GetSubverseHighestRanking,The following statement contains a magic number: var highestRank = CacheHandler.Instance.Register(CachingKey.SubverseHighestRank(subverse)' new Func<double?>(() =>              {                  using (var repo = new Repository())                  {                      return repo.HighestRankInSubverse(subverse);                  }              })' TimeSpan.FromMinutes(30));
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,UpdateSubverseHighestRanking,The following statement contains a magic number: CacheHandler.Instance.Replace<double?>(CachingKey.SubverseHighestRank(subverse)' highestRankCacheEntry' TimeSpan.FromMinutes(30));
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,CalculateNewRank,The following statement contains a magic number: var newRank = (Math.Pow((score - 1)' 0.8)) / (Math.Pow((submissionAge + 2)' 1.8)) * penalty;
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,CalculateNewRank,The following statement contains a magic number: var newRank = (Math.Pow((score - 1)' 0.8)) / (Math.Pow((submissionAge + 2)' 1.8)) * penalty;
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,CalculateNewRank,The following statement contains a magic number: var newRank = (Math.Pow((score - 1)' 0.8)) / (Math.Pow((submissionAge + 2)' 1.8)) * penalty;
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,CalculateNewRank,The following statement contains a magic number: return double.IsNaN(newRank) ? 0 : Math.Round(newRank' 7);
Magic Number,Voat.Utilities,Ranking,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Ranking.cs,CalculateNewRelativeRank,The following statement contains a magic number: return double.IsNaN(relativeRank) ? 0 : Math.Round(relativeRank' 7);
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,SetUserStylePreferenceCookie,The following statement contains a magic number: context.Response.Cookies.Append("theme"'                   theme'                   new CookieOptions() {                      Expires = Repository.CurrentDate.AddDays(14)                  });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var loadFunc = new Func<UserStatsModel>(() =>              {                  var userStatsModel = new UserStatsModel();                    using (var db = new VoatOutOfRepositoryDataContextAccessor())                  {                      // 5 subverses user submitted to most                      var subverses = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                               .GroupBy(a => new { a.UserName' a.Subverse })                               .Select(g => new SubverseStats { SubverseName = g.Key.Subverse' Count = g.Count() })                               .OrderByDescending(s => s.Count)                               .Take(5)                               .ToList();                        // total comment count                      var comments = db.Comment.Count(a => a.UserName == userName && !a.IsDeleted);                        // voting habits                      var userData = new Domain.UserData(userName);                        var commentUpvotes = userData.Information.CommentVoting.UpCount;                      var commentDownvotes = userData.Information.CommentVoting.DownCount;                      var submissionUpvotes = userData.Information.SubmissionVoting.UpCount;                      var submissionDownvotes = userData.Information.SubmissionVoting.DownCount;                        //var commentUpvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var commentDownvotes = db.CommentVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                      //var submissionUpvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == 1);                      //var submissionDownvotes = db.SubmissionVoteTrackers.Count(a => a.UserName == userName && a.VoteStatus == -1);                        // get 3 highest rated comments                      var highestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        // get 3 lowest rated comments                      var lowestRatedComments = db.Comment                          .Include(x => x.Submission)                          .Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(3)                          .ToList();                        var linkSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 2 && !a.IsDeleted && !a.IsAnonymized);                      var messageSubmissionsCount = db.Submission.Count(a => a.UserName == userName && a.Type == 1 && !a.IsDeleted && !a.IsAnonymized);                        // get 5 highest rated submissions                      var highestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderByDescending(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        // get 5 lowest rated submissions                      var lowestRatedSubmissions = db.Submission.Where(a => a.UserName == userName && !a.IsAnonymized && !a.IsDeleted)                          .OrderBy(s => s.UpCount - s.DownCount)                          .Take(5)                          .ToList();                        userStatsModel.TopSubversesUserContributedTo = subverses;                      userStatsModel.LinkSubmissionsSubmitted = linkSubmissionsCount;                      userStatsModel.MessageSubmissionsSubmitted = messageSubmissionsCount;                      userStatsModel.LowestRatedSubmissions = lowestRatedSubmissions;                      userStatsModel.HighestRatedSubmissions = highestRatedSubmissions;                      userStatsModel.TotalCommentsSubmitted = comments;                      userStatsModel.HighestRatedComments = highestRatedComments;                      userStatsModel.LowestRatedComments = lowestRatedComments;                        userStatsModel.TotalCommentsUpvoted = commentUpvotes;                      userStatsModel.TotalCommentsDownvoted = commentDownvotes;                      userStatsModel.TotalSubmissionsUpvoted = submissionUpvotes;                      userStatsModel.TotalSubmissionsDownvoted = submissionDownvotes;                        ////HACK: EF causes JSON to StackOverflow on the highest/lowest comments because of the nested loading EF does with the include option' therefore null the refs here.                      //highestRatedComments.ForEach(x => x.Submission.Comments = null);                      //lowestRatedComments.ForEach(x => x.Submission.Comments = null);                  }                    return userStatsModel;              });
Magic Number,Voat.Utilities,UserHelper,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\UserHelper.cs,UserStatsModel,The following statement contains a magic number: var cachedData = CacheHandler.Instance.Register(CachingKey.UserOverview(userName)' loadFunc' TimeSpan.FromMinutes(30));
Magic Number,Voat.Utilities.Components,SubverseLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,SubverseLinkFilter,The following statement contains a magic number: Priority = 10;
Magic Number,Voat.Utilities.Components,SetLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,SetLinkFilter,The following statement contains a magic number: Priority = 10;
Magic Number,Voat.Utilities.Components,RedditLinkFilter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Components\ContentFilters.cs,RedditLinkFilter,The following statement contains a magic number: Priority = 10;
Duplicate Code,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetComments,The method contains a code clone-set at the following line numbers (starting from the method definition): ((43' 68)' (75' 100))
Missing Default,Voat,FriendlyEnumNames,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\FriendlyEnumNames.cs,ToFriendly,The following switch statement is missing a default case: switch (value)              {                  case MessageType.CommentMention:                      result = "Comment Mention";                      break;                  case MessageType.CommentReply:                      result = "Comment Reply";                      break;                  case MessageType.Private:                      result = "Inbox";                      break;                  case MessageType.SubmissionMention:                      result = "Submission Mention";                      break;                  case MessageType.SubmissionReply:                      result = "Submission Reply";                      break;              }
Missing Default,Voat,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\Extensions.cs,BasePath,The following switch statement is missing a default case: switch (domainReference.Type)                  {                      case Domain.Models.DomainType.Subverse:                          path = String.Format("/v/{0}/{1}"' domainReference.Name' sort == null ? "" : sort.Value.ToString().ToLower());                          break;                      case Domain.Models.DomainType.Set:                          path = String.Format("{0}/{1}"' Utilities.VoatUrlFormatter.BasePath(domainReference)' sort == null ? "" : sort.Value.ToString().ToLower());                          break;                      case Domain.Models.DomainType.User:                          path = String.Format("/u/{0}"' domainReference.Name);                          break;                  }
Missing Default,Voat.Caching,MemoryCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\MemoryCacheHandler.cs,SetItem,The following switch statement is missing a default case: switch (type)                  {                      case CacheType.Dictionary:                          value.Convert<IDictionary' object>()[key] = item;                          break;                      case CacheType.Set:                          var set = value.Convert<ISet<K>' object>();                          if (!set.Contains(key))                          {                              set.Add(key);                          }                          break;                  }
Missing Default,Voat.Caching,MemoryCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\MemoryCacheHandler.cs,ItemExists,The following switch statement is missing a default case: switch (type)                  {                      case CacheType.Dictionary:                          found = value.Convert<IDictionary' object>().Contains(key);                          break;                      case CacheType.Set:                          found = value.Convert<ISet<T>' object>().Contains(key);                          break;                  }
Missing Default,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,GetItem,The following switch statement is missing a default case: switch (type)              {                  case CacheType.Dictionary:                      if (GetDatabase(ConnectionType.Exists).HashExists(cacheKey' key.ToString()))                      {                          returnVal = (V)Deserialize(GetDatabase(ConnectionType.Read).HashGet(cacheKey' key.ToString()));                      }                      break;              }
Missing Default,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,SetItem,The following switch statement is missing a default case: switch (type)                  {                      case CacheType.Dictionary:                          GetDatabase(ConnectionType.Write).HashSet(cacheKey' new HashEntry[] { new HashEntry(key.ToString()' Serialize(item)) });                          break;                      case CacheType.Set:                          GetDatabase(ConnectionType.Write).SetAdd(cacheKey' Serialize(key));                          break;                      case CacheType.List:                          GetDatabase(ConnectionType.Write).ListRightPush(cacheKey' Serialize(key));                          break;                  }
Missing Default,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,DeleteItem,The following switch statement is missing a default case: switch (type)              {                  case CacheType.Dictionary:                      GetDatabase(ConnectionType.Write).HashDelete(cacheKey' key.ToString());                      break;                  case CacheType.Set:                      GetDatabase(ConnectionType.Write).SetRemove(cacheKey' Serialize(key));                      break;                  case CacheType.List:                      GetDatabase(ConnectionType.Write).ListRemove(cacheKey' Serialize(key));                      break;              }
Missing Default,Voat.Caching,RedisCacheHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Caching\Handlers\RedisCacheHandler.cs,ItemExists,The following switch statement is missing a default case: switch (type)              {                  case CacheType.Dictionary:                      found = GetDatabase(ConnectionType.Exists).HashExists(cacheKey' key.ToString());                      break;                  case CacheType.Set:                      found = GetDatabase(ConnectionType.Exists).SetContains(cacheKey' Serialize(key));                      break;              }
Missing Default,Voat.Data,AGGREGATE_SUBVERSE,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\AGGREGATE_SUBVERSE.cs,IsAggregate,The following switch statement is missing a default case: switch (subverse.ToLower())                  {                      case AGGREGATE_SUBVERSE.ALL:                      case AGGREGATE_SUBVERSE.FRONT:                      case AGGREGATE_SUBVERSE.DEFAULT:                      case AGGREGATE_SUBVERSE.ANY:                      case "all":                          result = true;                          break;                  }
Missing Default,Voat.Data,DapperQuery,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\DapperQuery.cs,Append,The following switch statement is missing a default case: switch (name.ToLower())              {                  case "select":                      Select = AppendClause(Select' appendClause' " ");                      break;                  case "orderby":                      OrderBy = AppendClause(OrderBy' appendClause' "' ");                      break;                  case "where":                      Where = AppendClause(Where' appendClause' " AND ");                      break;                  case "groupby":                      GroupBy = AppendClause(GroupBy' appendClause' "' ");                      break;                  case "having":                      Having = AppendClause(Having' appendClause' " AND ");                      break;              }
Missing Default,Voat.Data,DapperBase,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\DapperQuery.cs,Append,The following switch statement is missing a default case: switch (name.ToLower())              {                  case "where":                      Where = AppendClause(Where' appendClause' " AND ");                      break;              }
Missing Default,Voat.Data,Extensions,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Extensions.cs,Configure,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)              {                  case DataStoreType.SqlServer:                      optionsBuilder.UseSqlServer(conn.Value);                      break;                  case DataStoreType.PostgreSql:                      optionsBuilder.UseNpgsql(conn.Value);                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following switch statement is missing a default case: switch (vote)                      {                          case 1:                              outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteComment' RuleScope.UpVote' RuleScope.UpVoteComment);                              break;                            case -1:                              outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteComment' RuleScope.DownVote' RuleScope.DownVoteComment);                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following switch statement is missing a default case: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0:                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          comment.UpCount++;                                      }                                      else                                      {                                          comment.DownCount++;                                      }                                        var newVotingTracker = new CommentVoteTracker                                      {                                          CommentID = commentID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.CommentVoteTracker.Add(newVotingTracker);                                      _db.SaveChanges();                                        //SendVoteNotification(comment.Name' "upvote");                                      response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                            _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                          comment.DownCount++;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                          _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                                switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke                                        if (existingVoteTracker != null)                                      {                                          comment.DownCount--;                                          _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                          response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          comment.UpCount++;                                          comment.DownCount--;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                        break;                              }                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following switch statement is missing a default case: switch (vote)                              {                                  case 0:                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          comment.UpCount++;                                      }                                      else                                      {                                          comment.DownCount++;                                      }                                        var newVotingTracker = new CommentVoteTracker                                      {                                          CommentID = commentID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.CommentVoteTracker.Add(newVotingTracker);                                      _db.SaveChanges();                                        //SendVoteNotification(comment.Name' "upvote");                                      response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following switch statement is missing a default case: switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                            _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          comment.UpCount--;                                          comment.DownCount++;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                          _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteComment,The following switch statement is missing a default case: switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke                                        if (existingVoteTracker != null)                                      {                                          comment.DownCount--;                                          _db.CommentVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                          response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          comment.UpCount++;                                          comment.DownCount--;                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' comment.UserName' ContentType.Comment' comment.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)comment.DownCount' UpCount = (int)comment.UpCount };                                      }                                        break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following switch statement is missing a default case: switch (vote)                      {                          case 1:                              outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteSubmission' RuleScope.UpVote' RuleScope.UpVoteSubmission);                              break;                            case -1:                              outcome = VoatRulesEngine.Instance.EvaluateRuleSet(ruleContext' RuleScope.Vote' RuleScope.VoteSubmission' RuleScope.DownVote' RuleScope.DownVoteSubmission);                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following switch statement is missing a default case: switch (existingVote)                      {                          case 0: //Never voted or No vote                                switch (vote)                              {                                  case 0: //revoke                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          submission.UpCount++;                                      }                                      else                                      {                                          submission.DownCount++;                                      }                                        //calculate new ranks                                      Ranking.RerankSubmission(submission);                                        var t = new SubmissionVoteTracker                                      {                                          SubmissionID = submissionID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.SubmissionVoteTracker.Add(t);                                      _db.SaveChanges();                                        response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      break;                              }                              break;                            case 1: //Previous Upvote                                switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                          submission.DownCount++;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                            case -1: //Previous downvote                              switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke if we are here                                        // delete existing downvote                                        if (existingVoteTracker != null)                                      {                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          submission.UpCount++;                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following switch statement is missing a default case: switch (vote)                              {                                  case 0: //revoke                                      response = VoteResponse.Ignored(0' "A revoke on an unvoted item has opened a worm hole! Run!");                                      break;                                    case 1:                                  case -1:                                        if (vote == 1)                                      {                                          submission.UpCount++;                                      }                                      else                                      {                                          submission.DownCount++;                                      }                                        //calculate new ranks                                      Ranking.RerankSubmission(submission);                                        var t = new SubmissionVoteTracker                                      {                                          SubmissionID = submissionID'                                          UserName = userName'                                          VoteStatus = vote'                                          VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote)' //TODO: Need to set this to zero for Anon' MinCCP subs' and Private subs                                          IPAddress = addressHash'                                          CreationDate = Repository.CurrentDate                                      };                                        _db.SubmissionVoteTracker.Add(t);                                      _db.SaveChanges();                                        response = VoteResponse.Successful(vote);                                      response.Difference = vote;                                      response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following switch statement is missing a default case: switch (vote)                              {                                  case 0: //revoke                                  case 1: //revote which means revoke if we are here                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = -1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case -1:                                        //change upvote to downvote                                        if (existingVoteTracker != null)                                      {                                          submission.UpCount--;                                          submission.DownCount++;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                            response = VoteResponse.Successful(vote);                                          response.Difference = -2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,VoteSubmission,The following switch statement is missing a default case: switch (vote)                              {                                  case 0: //revoke                                  case -1: //revote which means revoke if we are here                                        // delete existing downvote                                        if (existingVoteTracker != null)                                      {                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            _db.SubmissionVoteTracker.Remove(existingVoteTracker);                                          _db.SaveChanges();                                            response = VoteResponse.Successful(0' REVOKE_MSG);                                          response.Difference = 1;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                                    case 1:                                        //change downvote to upvote                                      if (existingVoteTracker != null)                                      {                                          submission.UpCount++;                                          submission.DownCount--;                                            //calculate new ranks                                          Ranking.RerankSubmission(submission);                                            existingVoteTracker.VoteStatus = vote;                                          existingVoteTracker.VoteValue = GetVoteValue(userName' submission.UserName' ContentType.Submission' submission.ID' vote);                                          existingVoteTracker.CreationDate = CurrentDate;                                            _db.SaveChanges();                                          response = VoteResponse.Successful(vote);                                          response.Difference = 2;                                          response.Response = new Score() { DownCount = (int)submission.DownCount' UpCount = (int)submission.UpCount };                                      }                                      break;                              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetVoteValue,The following switch statement is missing a default case: switch (contentType)              {                  case ContentType.Comment:                      q.Select += $" INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"SubmissionID\" = s.\"ID\"";                      q.Where = "c.\"ID\" = @ID";                      break;                  case ContentType.Submission:                      q.Where = "s.\"ID\" = @ID";                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetCommentTree,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)              {                  case DataStoreType.SqlServer:                      commentTree = _db.Connection.Query<usp_CommentTree_Result>("usp_CommentTree"' new { SubmissionID = submissionID' Depth = depth' ParentID = parentID }' commandType: System.Data.CommandType.StoredProcedure);                      break;                  case DataStoreType.PostgreSql:                      var d = new DapperQuery();                      d.Select = "* FROM \"usp_CommentTree\"(@SubmissionID' @Depth' @ParentID)";                      commentTree = _db.Connection.Query<usp_CommentTree_Result>(d.ToString()' new { SubmissionID = submissionID' Depth = depth' ParentID = parentID });                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetUserSavedItems,The following switch statement is missing a default case: switch (type)              {                  case ContentType.Comment:                      savedIDs = await _db.CommentSaveTracker.Where(x => x.UserName.ToLower() == userName.ToLower()).Select(x => x.CommentID).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);                      break;                  case ContentType.Submission:                      savedIDs = await _db.SubmissionSaveTracker.Where(x => x.UserName.ToLower() == userName.ToLower()).Select(x => x.SubmissionID).ToListAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,Save,The following switch statement is missing a default case: switch (type)              {                  case ContentType.Comment:                        var c = _db.CommentSaveTracker.FirstOrDefault(x => x.CommentID == ID && x.UserName.ToLower() == currentUserName.ToLower());                        if (c == null && (forceAction == null || forceAction.HasValue && forceAction.Value))                      {                          c = new CommentSaveTracker() { CommentID = ID' UserName = currentUserName' CreationDate = CurrentDate };                          _db.CommentSaveTracker.Add(c);                          isSaved = true;                      }                      else if (c != null && (forceAction == null || forceAction.HasValue && !forceAction.Value))                      {                          _db.CommentSaveTracker.Remove(c);                          isSaved = false;                      }                      else                      {                          isSaved = forceAction.Value;                      }                      await _db.SaveChangesAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);                        break;                    case ContentType.Submission:                        var s = _db.SubmissionSaveTracker.FirstOrDefault(x => x.SubmissionID == ID && x.UserName.ToLower() == currentUserName.ToLower());                      if (s == null && (forceAction == null || forceAction.HasValue && forceAction.Value))                      {                          s = new SubmissionSaveTracker() { SubmissionID = ID' UserName = currentUserName' CreationDate = CurrentDate };                          _db.SubmissionSaveTracker.Add(s);                          isSaved = true;                      }                      else if (s != null && (forceAction == null || forceAction.HasValue && !forceAction.Value))                      {                          _db.SubmissionSaveTracker.Remove(s);                          isSaved = false;                      }                      await _db.SaveChangesAsync().ConfigureAwait(CONSTANTS.AWAIT_CAPTURE_CONTEXT);                        break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The following switch statement is missing a default case: switch (state)              {                  case MessageState.Read:                      q.Append(x => x.Where' "m.\"ReadDate\" IS NOT NULL");                      break;                  case MessageState.Unread:                      q.Append(x => x.Where' "m.\"ReadDate\" IS NULL");                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryDapperBase,The following switch statement is missing a default case: switch (mTFlag)                          {                              case MessageTypeFlag.Sent:                                  messageTypes.Add((int)MessageType.Sent);                                  break;                                case MessageTypeFlag.Private:                                  messageTypes.Add((int)MessageType.Private);                                  break;                                case MessageTypeFlag.CommentReply:                                  messageTypes.Add((int)MessageType.CommentReply);                                  break;                                case MessageTypeFlag.CommentMention:                                  messageTypes.Add((int)MessageType.CommentMention);                                  break;                                case MessageTypeFlag.SubmissionReply:                                  messageTypes.Add((int)MessageType.SubmissionReply);                                  break;                                case MessageTypeFlag.SubmissionMention:                                  messageTypes.Add((int)MessageType.SubmissionMention);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryBase,The following switch statement is missing a default case: switch (state)              {                  case MessageState.Read:                      q = q.Where(x => x.ReadDate != null);                      break;                    case MessageState.Unread:                      q = q.Where(x => x.ReadDate == null);                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessageQueryBase,The following switch statement is missing a default case: switch (mTFlag)                          {                              case MessageTypeFlag.Sent:                                  messageTypes.Add((int)MessageType.Sent);                                  break;                                case MessageTypeFlag.Private:                                  messageTypes.Add((int)MessageType.Private);                                  break;                                case MessageTypeFlag.CommentReply:                                  messageTypes.Add((int)MessageType.CommentReply);                                  break;                                case MessageTypeFlag.CommentMention:                                  messageTypes.Add((int)MessageType.CommentMention);                                  break;                                case MessageTypeFlag.SubmissionReply:                                  messageTypes.Add((int)MessageType.SubmissionReply);                                  break;                                case MessageTypeFlag.SubmissionMention:                                  messageTypes.Add((int)MessageType.SubmissionMention);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ConvertMessageTypeFlag,The following switch statement is missing a default case: switch (mTFlag)                          {                              case MessageTypeFlag.Sent:                                  messageTypes.Add((int)MessageType.Sent);                                  break;                                case MessageTypeFlag.Private:                                  messageTypes.Add((int)MessageType.Private);                                  break;                                case MessageTypeFlag.CommentReply:                                  messageTypes.Add((int)MessageType.CommentReply);                                  break;                                case MessageTypeFlag.CommentMention:                                  messageTypes.Add((int)MessageType.CommentMention);                                  break;                                case MessageTypeFlag.SubmissionReply:                                  messageTypes.Add((int)MessageType.SubmissionReply);                                  break;                                case MessageTypeFlag.SubmissionMention:                                  messageTypes.Add((int)MessageType.SubmissionMention);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,GetMessages,The following switch statement is missing a default case: switch (msg.Type)                      {                          case MessageType.CommentMention:                          case MessageType.CommentReply:                          case MessageType.SubmissionReply:                              if (msg.Comment != null)                              {                                  msg.Title = msg.Submission?.Title;                                  msg.Content = msg.Comment?.Content;                                  msg.FormattedContent = msg.Comment?.FormattedContent;                              }                              else                              {                                  msg.Title = "Removed";                                  msg.Content = "Removed";                                  msg.FormattedContent = "Removed";                              }                              break;                          case MessageType.SubmissionMention:                              if (msg.Submission != null)                              {                                  msg.Title = msg.Submission?.Title;                                  msg.Content = msg.Submission?.Content;                                  msg.FormattedContent = msg.Submission?.FormattedContent;                              }                              else                              {                                  msg.Title = "Removed";                                  msg.Content = "Removed";                                  msg.FormattedContent = "Removed";                              }                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UserVoteStatus,The following switch statement is missing a default case: switch (type)              {                  case ContentType.Comment:                      q.Select = $"SELECT \"CommentID\" AS \"ID\"' {SqlFormatter.IsNull("\"VoteStatus\""' "0")} AS \"Value\" FROM {SqlFormatter.Table("CommentVoteTracker"' null' null' "NOLOCK")}";                      q.Where = $"\"UserName\" = @UserName AND \"CommentID\" {SqlFormatter.In("@ID")}";                      break;                  case ContentType.Submission:                      q.Select = $"SELECT \"SubmissionID\" AS \"ID\"' {SqlFormatter.IsNull("\"VoteStatus\""' "0")} AS \"Value\" FROM {SqlFormatter.Table("SubmissionVoteTracker"' null' null' "NOLOCK")}";                      q.Where = $"\"UserName\" = @UserName AND \"SubmissionID\" {SqlFormatter.In("@ID")}";                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,UpdateSubverseSubscriberCount,The following switch statement is missing a default case: switch (domainReference.Type)                  {                      case DomainType.Subverse:                          //Postgre Port                          //u.Update = $"UPDATE s SET \"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue) FROM {SqlFormatter.Table("Subverse"' "s")}";                          u.Update = $"{SqlFormatter.UpdateSetBlock($"\"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue)"' SqlFormatter.Table("Subverse"' null)' "s")}";                            u.Where = "s.\"Name\" = @Name";                          u.Parameters = new DynamicParameters(new { Name = domainReference.Name' IncrementValue = incrementValue });                            break;                      case DomainType.Set:                            //Postgre Port                           //u.Update = $"UPDATE s SET \"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue) FROM {SqlFormatter.Table("SubverseSet"' "s")}";                          u.Update = $"{SqlFormatter.UpdateSetBlock($"\"SubscriberCount\" = ({SqlFormatter.IsNull("\"SubscriberCount\""' "0")} + @IncrementValue)"' SqlFormatter.Table("SubverseSet"' null)' "s")}";                            u.Where = "s.\"Name\" = @Name";                            if (!String.IsNullOrEmpty(domainReference.OwnerName))                          {                              u.Append(x => x.Where' "s.\"UserName\" = @OwnerName");                          }                          else                          {                              u.Append(x => x.Where' "s.\"UserName\" IS NULL");                          }                          u.Parameters = new DynamicParameters(new { Name = domainReference.Name' IncrementValue = incrementValue' OwnerName = domainReference.OwnerName });                          break;                      case DomainType.User:                          throw new NotImplementedException("User subscriber count not implemented");                          break;                  }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,SaveRuleReport,The following switch statement is missing a default case: switch (contentType)              {                  case ContentType.Comment:                      body += $"SELECT s.\"Subverse\"' NULL' s.\"ID\"' c.\"ID\"' @RuleID' @UserName' @Date FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("Comment"' "c"' null' "NOLOCK")} ON c.\"SubmissionID\" = s.\"ID\" INNER JOIN {SqlFormatter.Table("RuleSet"' "r"' null' "NOLOCK")} ON r.\"ID\" = @RuleID AND (r.\"Subverse\" = s.\"Subverse\" OR r.\"Subverse\" IS NULL) AND (r.\"ContentType\" = @ContentType OR r.\"ContentType\" IS NULL) WHERE c.\"ID\" = @ID AND c.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)} AND r.\"IsActive\" = {SqlFormatter.BooleanLiteral(true)}";                      break;                  case ContentType.Submission:                      body += $"SELECT s.\"Subverse\"' NULL' s.\"ID\"' NULL' @RuleID' @UserName' @Date FROM {SqlFormatter.Table("Submission"' "s"' null' "NOLOCK")} INNER JOIN {SqlFormatter.Table("RuleSet"' "r"' null' "NOLOCK")} ON r.\"ID\" = @RuleID AND (r.\"Subverse\" = s.\"Subverse\" OR r.\"Subverse\" IS NULL) AND (r.\"ContentType\" = @ContentType OR r.\"ContentType\" IS NULL) WHERE s.\"ID\" = @ID AND s.\"IsDeleted\" = {SqlFormatter.BooleanLiteral(false)} AND r.\"IsActive\" = {SqlFormatter.BooleanLiteral(true)}";                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,HasAddressVoted,The following switch statement is missing a default case: switch (contentType)              {                  case ContentType.Comment:                      result = _db.CommentVoteTracker.Any(x => x.CommentID == id && x.IPAddress == addressHash);                      break;                    case ContentType.Submission:                      result = _db.SubmissionVoteTracker.Any(x => x.SubmissionID == id && x.IPAddress == addressHash);                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,ApplySubmissionSearch,The following switch statement is missing a default case: switch (options.Sort)              {                  case SortAlgorithm.Relative:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.RelativeRank);                      }                      else                      {                          query = query.OrderByDescending(x => x.RelativeRank);                      }                      break;                    case SortAlgorithm.Rank:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.Rank);                      }                      else                      {                          query = query.OrderByDescending(x => x.Rank);                      }                      break;                    case SortAlgorithm.New:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.CreationDate);                      }                      else                      {                          query = query.OrderByDescending(x => x.CreationDate);                      }                      break;                    case SortAlgorithm.Top:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.UpCount);                      }                      else                      {                          query = query.OrderByDescending(x => x.UpCount);                      }                      break;                    case SortAlgorithm.Viewed:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.Views);                      }                      else                      {                          query = query.OrderByDescending(x => x.Views);                      }                      break;                    case SortAlgorithm.Discussed:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.Comments.Count);                      }                      else                      {                          query = query.OrderByDescending(x => x.Comments.Count);                      }                      break;                    case SortAlgorithm.Active:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.Comments.OrderBy(c => c.CreationDate).FirstOrDefault().CreationDate);                      }                      else                      {                          query = query.OrderByDescending(x => x.Comments.OrderBy(c => c.CreationDate).FirstOrDefault().CreationDate);                      }                      break;                    case SortAlgorithm.Bottom:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.DownCount);                      }                      else                      {                          query = query.OrderByDescending(x => x.DownCount);                      }                      break;                    case SortAlgorithm.Intensity:                      if (options.SortDirection == SortDirection.Reverse)                      {                          query = query.OrderBy(x => x.UpCount + x.DownCount);                      }                      else                      {                          query = query.OrderByDescending(x => x.UpCount + x.DownCount);                      }                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The following switch statement is missing a default case: switch (options.Comments.Value)                          {                              case DeleteOption.Anonymize:                                  var a = new DapperUpdate();                                  a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Comment"));                                   a.Where = "\"UserName\" = @UserName";                                  a.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(a);                                  break;                              case DeleteOption.Delete:                                  var d = new DapperUpdate();                                  d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Content\" = '{deleteText}'"' SqlFormatter.Table("Comment"));                                  d.Where = "\"UserName\" = @UserName";                                  d.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(d);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The following switch statement is missing a default case: switch (options.TextSubmissions.Value)                          {                              case DeleteOption.Anonymize:                                  var a = new DapperUpdate();                                  a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Submission"));                                  a.Where = $"\"UserName\" = @UserName AND \"Type\" = {(int)SubmissionType.Text}";                                  a.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(a);                                  break;                              case DeleteOption.Delete:                                  var d = new DapperUpdate();                                  d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Title\" = '{deleteText}'' \"Content\" = '{deleteText}'"' SqlFormatter.Table("Submission"));                                  d.Where = $"\"UserName\" = @UserName AND \"Type\" = {(int)SubmissionType.Text}";                                  d.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(d);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,DeleteAccount,The following switch statement is missing a default case: switch (options.LinkSubmissions.Value)                          {                              case DeleteOption.Anonymize:                                  var a = new DapperUpdate();                                  a.Update = SqlFormatter.UpdateSetBlock($"\"IsAnonymized\" = {SqlFormatter.BooleanLiteral(true)}"' SqlFormatter.Table("Submission"));                                  a.Where = $"\"UserName\" = @UserName AND \"Type\" = {(int)SubmissionType.Link}";                                  a.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(a);                                  break;                              case DeleteOption.Delete:                                  var d = new DapperUpdate();                                  d.Update = SqlFormatter.UpdateSetBlock($"\"IsDeleted\" = {SqlFormatter.BooleanLiteral(true)}' \"Title\" = '{deleteText}'' \"Url\" = 'https://{VoatSettings.Instance.SiteDomain}'"' SqlFormatter.Table("Submission"));                                  d.Where = $"\"UserName\" = @UserName AND \"Type\" = {(int)SubmissionType.Link}";                                  d.Parameters = new DynamicParameters(new { UserName = userName });                                  statements.Add(d);                                  break;                          }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BanGlobally,The following switch statement is missing a default case: switch (banItem.Type)                  {                      case BanType.Domain:                          insert.Parameters.Add("Value"' banItem.Name.ToNormalized(Normalization.Lower));                          tablename = "BannedDomain";                          columnname = "Domain";                            break;                      case BanType.User:                          insert.Parameters.Add("Value"' banItem.Name);                          tablename = "BannedUser";                          columnname = "UserName";                          break;                  }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The following switch statement is missing a default case: switch (domainType)              {                  case DomainType.Subverse:                      q.SelectColumns = "@DomainType as \"Type\"' s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"CreatedBy\" AS \"OwnerName\"' s.\"SubscriberCount\"' s.\"CreationDate\"";                      q.Select = $"DISTINCT {"{0}"} FROM {SqlFormatter.Table("Subverse"' "s"' null' "NOLOCK")}";                      if (hasPhrase)                      {                          q.Where = "(s.\"Name\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Title\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Description\" LIKE CONCAT('%'' @SearchPhrase' '%'))";                      }                      q.Append(x => x.Where' $"s.\"IsAdminDisabled\" = {SqlFormatter.BooleanLiteral(false)} AND s.\"IsPrivate\" = {SqlFormatter.BooleanLiteral(false)}");                      break;                  case DomainType.Set:                      q.SelectColumns = "@DomainType as \"Type\"' s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"UserName\" AS \"OwnerName\"' s.\"SubscriberCount\"' s.\"CreationDate\"";                      q.Select = $"DISTINCT {"{0}"} FROM {SqlFormatter.Table("SubverseSet"' "s"' null' "NOLOCK")}";                      if (hasPhrase)                      {                          q.Where = "(s.\"Name\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Title\" LIKE CONCAT('%'' @SearchPhrase' '%') OR s.\"Description\" LIKE CONCAT('%'' @SearchPhrase' '%'))";                      }                      q.Append(x => x.Where' "(s.\"IsPublic\" = @IsPublic OR @IsPublic IS NULL)");                      break;              }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,BaseDomainObjectSearch,The following switch statement is missing a default case: switch (domainType)                      {                          case DomainType.Subverse:                              q.Select += $" INNER JOIN {SqlFormatter.Table("Submission"' "sub"' null' "NOLOCK")} ON sub.\"Subverse\" = s.\"Name\"";                              q.SelectColumns += "' MAX(sub.\"CreationDate\") AS \"ThisIsOnlyUsedForSortingByActive\"";                              q.GroupBy = "s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"CreatedBy\"' s.\"SubscriberCount\"' s.\"CreationDate\"";                              q.OrderBy = "MAX(sub.\"CreationDate\") DESC";                              break;                          case DomainType.Set:                              q.Select += $" INNER JOIN {SqlFormatter.Table("SubverseSetList"' "subList"' null' "NOLOCK")} ON subList.\"SubverseSetID\" = s.\"ID\"";                              q.SelectColumns += "' MAX(subList.\"CreationDate\") AS \"ThisIsOnlyUsedForSortingByActive\"";                              q.GroupBy = "s.\"Name\"' s.\"Title\"' s.\"Description\"' s.\"UserName\"' s.\"SubscriberCount\"' s.\"CreationDate\"";                              q.OrderBy = "MAX(subList.\"CreationDate\") DESC";                              break;                      }
Missing Default,Voat.Data,Repository,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\Repository.cs,HighestVotedContentStatistics,The following switch statement is missing a default case: switch (item.ContentType)                  {                      case ContentType.Submission:                          item.Submission = submissions.FirstOrDefault(x => x.ID == item.ID).Map();                          break;                      case ContentType.Comment:                          item.Comment = comments.FirstOrDefault(x => x.ID == item.ID).Map(User);                          break;                    }
Missing Default,Voat.Data,SqlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\SqlFormatter.cs,Table,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)               {                  //Only add hints if sql' should really probably remove this                  case DataStoreType.SqlServer:                        if (hints != null && hints.Any())                      {                          result += $" WITH ({String.Join("' "' hints)})";                      }                      break;              }
Missing Default,Voat.Data,SqlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\SqlFormatter.cs,ToNormalized,The following switch statement is missing a default case: switch (normalization)              {                  case Normalization.Lower:                      switch (DataConfigurationSettings.Instance.StoreType)                      {                          case DataStoreType.PostgreSql:                          case DataStoreType.SqlServer:                              result = $"lower({value})";                              break;                      }                      break;                  case Normalization.Upper:                      switch (DataConfigurationSettings.Instance.StoreType)                      {                          case DataStoreType.PostgreSql:                          case DataStoreType.SqlServer:                              result = $"upper({value})";                              break;                      }                      break;              }
Missing Default,Voat.Data,SqlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\SqlFormatter.cs,ToNormalized,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)                      {                          case DataStoreType.PostgreSql:                          case DataStoreType.SqlServer:                              result = $"lower({value})";                              break;                      }
Missing Default,Voat.Data,SqlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\SqlFormatter.cs,ToNormalized,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)                      {                          case DataStoreType.PostgreSql:                          case DataStoreType.SqlServer:                              result = $"upper({value})";                              break;                      }
Missing Default,Voat.Data,SqlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Data\Repository\SqlFormatter.cs,ToggleBoolean,The following switch statement is missing a default case: switch (DataConfigurationSettings.Instance.StoreType)              {                  case DataStoreType.PostgreSql:                      result = $"NOT {name}";                  //case DataStoreType.SqlServer:                  //    result = $"lower({value})";                      break;              }
Missing Default,Voat.Domain.Command,GlobalBanCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Admin\GlobalBanCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnAuthorization:                      if (!User.IsInAnyRole(new[] { UserRole.GlobalAdmin' UserRole.Admin' UserRole.DelegateAdmin' UserRole.GlobalBans }))                      {                          commandResponse = CommandResponse.FromStatus(Status.Denied' "Permissions not granted");                      }                      break;                  case CommandStage.OnValidation:                      if (_banList == null || _banList.Count() == 0)                      {                          commandResponse = CommandResponse.FromStatus(Status.Invalid' "Banlist can not be null or empty");                      }                      else                      {                          foreach (var banItem in _banList)                          {                                switch (banItem.Type)                              {                                  case BanType.Domain:                                      //check full url first                                      var match = Regex.Match(banItem.Name' CONSTANTS.HTTP_LINK_REGEX' RegexOptions.IgnoreCase);                                      if (match.Success)                                      {                                          banItem.Name = match.Groups["domain"].Value;                                      }                                      else                                      {                                          //check partial                                          match = Regex.Match(banItem.Name' CONSTANTS.HOST_AND_PATH_LINK_REGEX' RegexOptions.IgnoreCase);                                          if (!match.Success)                                          {                                              commandResponse = CommandResponse.FromStatus(Status.Invalid' $"Domain {banItem.Name} is not valid");                                          }                                          else                                          {                                              banItem.Name = match.Groups["domain"].Value;                                          }                                      }                                        break;                                  case BanType.User:                                      var result = UserDefinition.Parse(banItem.Name);                                      if (result == null)                                      {                                          commandResponse = CommandResponse.FromStatus(Status.Invalid' $"UserName {banItem.Name} is not valid");                                      }                                      else                                      {                                          var originalName = UserHelper.OriginalUsername(result.Name);                                          if (String.IsNullOrEmpty(originalName))                                          {                                              commandResponse = CommandResponse.FromStatus(Status.Invalid' $"User {banItem.Name} does not exist");                                          }                                          banItem.Name = originalName;                                      }                                      break;                              }                          }                        }                      break;                  //case CommandStage.OnExecuted:                  //    if (!User.IsInAnyRole(new[] { UserRole.GlobalAdmin' UserRole.Admin' UserRole.DelegateAdmin' UserRole.GlobalBans }))                  //    {                  //        commandResponse = CommandResponse.FromStatus(Status.Denied' "Permissions not granted");                  //    }                  //    break;              }
Missing Default,Voat.Domain.Command,GlobalBanCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Admin\GlobalBanCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (banItem.Type)                              {                                  case BanType.Domain:                                      //check full url first                                      var match = Regex.Match(banItem.Name' CONSTANTS.HTTP_LINK_REGEX' RegexOptions.IgnoreCase);                                      if (match.Success)                                      {                                          banItem.Name = match.Groups["domain"].Value;                                      }                                      else                                      {                                          //check partial                                          match = Regex.Match(banItem.Name' CONSTANTS.HOST_AND_PATH_LINK_REGEX' RegexOptions.IgnoreCase);                                          if (!match.Success)                                          {                                              commandResponse = CommandResponse.FromStatus(Status.Invalid' $"Domain {banItem.Name} is not valid");                                          }                                          else                                          {                                              banItem.Name = match.Groups["domain"].Value;                                          }                                      }                                        break;                                  case BanType.User:                                      var result = UserDefinition.Parse(banItem.Name);                                      if (result == null)                                      {                                          commandResponse = CommandResponse.FromStatus(Status.Invalid' $"UserName {banItem.Name} is not valid");                                      }                                      else                                      {                                          var originalName = UserHelper.OriginalUsername(result.Name);                                          if (String.IsNullOrEmpty(originalName))                                          {                                              commandResponse = CommandResponse.FromStatus(Status.Invalid' $"User {banItem.Name} does not exist");                                          }                                          banItem.Name = originalName;                                      }                                      break;                              }
Missing Default,Voat.Domain.Command,CreateCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnValidation:                      if (Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Models.Comment>(null' Status.Denied' "Comment can not exceed 10'000 characters");                      }                      break;              }
Missing Default,Voat.Domain.Command,EditCommentCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\CommentCommands.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnValidation:                      if (Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Models.Comment>(null' Status.Denied' "Comment can not exceed 10'000 characters");                      }                      break;              }
Missing Default,Voat.Domain.Command,CreateSubmissionCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Submission\CreateSubmissionCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnValidation:                      var results = ValidationHandler.Validate(_userSubmission);                      if (!results.IsNullOrEmpty())                      {                          return CommandResponse.Invalid<Submission>(results);                      }                      break;              }
Missing Default,Voat.Domain.Command,EditSubmissionCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Submission\EditSubmissionCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnValidation:                      if (_userSubmission.Content.Length > 10000)                      {                          return CommandResponse.FromStatus<Submission>(null' Status.Invalid' "Content can not exceed 10'000 characters");                      }                      break;              }
Missing Default,Voat.Domain.Command,PersistVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Vote\PersistVoteCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnExecuting:                      //perform validationn return non-success if not success                      break;              }
Missing Default,Voat.Domain.Command,RecordUserVoteCommand,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Command\Vote\RecordUserVoteCommand.cs,ExecuteStage,The following switch statement is missing a default case: switch (stage)              {                  case CommandStage.OnExecuting:                        var q = new QueryVote(_voteID);                      var vote = await q.ExecuteAsync();                        var notPassed = vote.Restrictions.FirstOrDefault(x => {                          var e = x.Evaluate(User);                          return !e.Success;                      });                        _restrictionsPassed = notPassed == null;                        break;                    case CommandStage.OnExecuted:                        if (previous.Success)                      {                          CacheHandler.Instance.Remove(CachingKey.VoteStatistics(_voteID));                      }                        break;                }
Missing Default,Voat.Domain.Models,SetPermission,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\SetPermission.cs,GetPermissions,The following switch statement is missing a default case: switch ((SetType)set.Type)                      {                          case SetType.Normal:                              perms.View = set.IsPublic || isCurrentUserOwner;                              perms.Delete = isCurrentUserOwner;                              perms.EditList = isCurrentUserOwner;                              perms.EditProperties = isCurrentUserOwner;                              break;                          case SetType.Blocked:                          case SetType.Front:                          case SetType.Following:                              perms.View = isCurrentUserOwner;                              perms.Delete = false;                              perms.EditList = isCurrentUserOwner;                              perms.EditProperties = false;                              break;                      }
Missing Default,Voat.Domain.Models,UserDefinition,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Domain\Models\UserDefinition.cs,Parse,The following switch statement is missing a default case: switch (prefix)                  {                      case "":                      case "@":                      case "u/":                      case "/u/":                          result = new UserDefinition() { Name = name' Type = IdentityType.User };                          break;                        case "v/":                      case "/v/":                            result = new UserDefinition() { Name = name' Type = IdentityType.Subverse };                          break;                  }
Missing Default,Voat.Imaging,ImageHandler,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Imaging\ImageHandler.cs,GetImageFormatFromString,The following switch statement is missing a default case: switch (Format.ToLower())                  {                      case ".png":                      case "png":                      case "image/png":                          format = ImageFormat.Png;                          break;                        case ".gif":                      case ".giff":                      case "gif":                      case "image/gif":                          format = ImageFormat.Gif;                          break;                        case ".jpg":                      case ".jpeg":                      case ".jpe":                      case ".jfif":                      case ".pjpeg":                      case ".pjp":                      case "jpg":                      case "jpeg":                      case "image/jpeg":                      case "image/pjpeg":                      case "image/pipeg":                          format = ImageFormat.Jpeg;                          break;                        case ".tif":                      case ".tiff":                      case "tiff":                      case "tif":                      case "image/tiff":                          format = ImageFormat.Tiff;                          break;                        case ".bmp":                      case "bmp":                      case "image/bmp":                          format = ImageFormat.Bmp;                          break;                        case ".ico":                      case "ico":                      case "icon":                      case "image/x-icon":                          format = ImageFormat.Icon;                          break;                  }
Missing Default,Voat.IO,AzureBlobFileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\AzureBlobFileManager.cs,Uri,The following switch statement is missing a default case: switch (key.FileType)              {                  case FileType.Badge:                      options.ForceDomain = VoatSettings.Instance.SiteDomain;                      result = base.Uri(key' options);                      break;                  case FileType.Avatar:                  case FileType.Thumbnail:                      return VoatUrlFormatter.BuildUrlPath(null' options' (new string[] { ContentPath(key)' key.ID }).ToPathParts());                      break;              }
Missing Default,Voat.IO,FileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\FileManager.cs,IsUploadPermitted,The following switch statement is missing a default case: switch (fileType)              {                  case FileType.Avatar:                  case FileType.Thumbnail:                  case FileType.Badge:                        if (!uploadLimit.IsExtensionAllowed(fileName))                      {                          result = CommandResponse.FromStatus(Status.Invalid' "File type is not permitted for upload");                      }                      else if (!uploadLimit.IsMimeTypeAllowed(mimeType))                      {                          result = CommandResponse.FromStatus(Status.Invalid' "Mime type is not permitted for upload");                      }                      if (length == null || length.Value == 0 || (uploadLimit.ByteLimit > 0 && length > uploadLimit.ByteLimit))                      {                          result = CommandResponse.FromStatus(Status.Invalid' $"File length is too big or too small but we aren't saying (Hint: {Math.Round(uploadLimit.ByteLimit / (decimal)1000000' 1)} MB max)");                      }                      break;              }
Missing Default,Voat.IO,LocalNetworkFileManager,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\IO\FileManager\LocalNetworkFileManager.cs,ContentPath,The following switch statement is missing a default case: switch (key.FileType)              {                  case FileType.Avatar:                      path = VoatSettings.Instance.DestinationPathAvatars;                      break;                  case FileType.Badge:                      path = "~/images/badges/";                      break;                  case FileType.Thumbnail:                      path = VoatSettings.Instance.DestinationPathThumbs;                      break;              }
Missing Default,Voat.Rules,VoatRuleContext,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\VoatRuleContext.cs,GetMissingValue,The following switch statement is missing a default case: switch (name)              {                  case "Comment":                      if (CommentID != null)                      {                          var cmdComment = new QueryComment(CommentID.Value);                          var comment = cmdComment.Execute();                          PropertyBag.Comment = comment;                            return comment;                      }                      break;                  case "Submission":                      if (SubmissionID != null)                      {                          var cmd = new QuerySubmission(SubmissionID.Value);                          var submission = cmd.Execute();                          return submission;                      }                      if (CommentID != null)                      {                          var cmdComment = new QueryComment(CommentID.Value);                          var comment = cmdComment.Execute();                          PropertyBag.Comment = comment;                            var cmd = new QuerySubmission(comment.SubmissionID.Value);                          var submission = cmd.Execute();                          return submission;                      }                      break;                  case "Subverse":                      if (SubmissionID != null)                      {                          var cmd = new QuerySubmission(SubmissionID.Value);                          var submission = cmd.Execute();                          PropertyBag.Submission = submission;                            var cmdSubverse = new QuerySubverse(submission.Subverse);                          var subverse = cmdSubverse.Execute();                            return subverse;                      }                      if (CommentID != null)                      {                          var cmdComment = new QueryComment(CommentID.Value);                          var comment = cmdComment.Execute();                          PropertyBag.Comment = comment;                            var cmd = new QuerySubmission(comment.SubmissionID.Value);                          var submission = cmd.Execute();                          PropertyBag.Submission = submission;                            var cmdSubverse = new QuerySubverse(submission.Subverse);                          var subverse = cmdSubverse.Execute();                            return subverse;                      }                      break;              }
Missing Default,Voat.Rules.Posting.Base,SubmissionBannedDomainRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\Base\SubmissionBannedDomainRule.cs,EvaluateRule,The following switch statement is missing a default case: switch (submission.Type)              {                  case SubmissionType.Link:                      containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' $"{submission.Title} {submission.Url}");                      break;                    case SubmissionType.Text:                      containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' $"{submission.Title} {submission.Content}");                      break;              }
Missing Default,Voat.Rules.Posting.Base,SubmissionFilterRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\Base\SubmissionFilterRule.cs,EvaluateRule,The following switch statement is missing a default case: switch (submission.Type)              {                  case SubmissionType.Link:                      result = FilterUtility.Match(String.Concat(submission.Title' " "' submission.Url));                      break;                    case SubmissionType.Text:                      result = FilterUtility.Match(String.Concat(submission.Title' " "' submission.Content));                      break;              }
Missing Default,Voat.Rules.Posting,PostSubmissionRecentlySubmittedRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionRecentlySubmittedRule.cs,EvaluateRule,The following switch statement is missing a default case: switch (submission.Type)              {                  case SubmissionType.Link:                      Data.Models.Submission recentlySubmitted = null;                      using (var repo = new Repository())                      {                          recentlySubmitted = repo.FindSubverseLinkSubmission(context.Subverse.Name' submission.Url' TimeSpan.FromDays(15));                      }                      if (recentlySubmitted != null)                      {                          string url = VoatUrlFormatter.BuildUrlPath(null' new Common.PathOptions() { FullyQualified = true' ProvideProtocol = true }' $"v/{recentlySubmitted.Subverse}/{recentlySubmitted.ID}");                            return CreateOutcome(RuleResult.Denied' $"Sorry' this link has already been submitted recently. {url}");                      }                      break;                    case SubmissionType.Text:                        //containsBannedDomain = BanningUtility.ContentContainsBannedDomain(context.Subverse.Name' submission.Content);                      break;              }
Missing Default,Voat.Rules.Posting,PostSubmissionValidityRule,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Rules\Posting\PostSubmissionValidityRule.cs,EvaluateRule,The following switch statement is missing a default case: switch (userSubmission.Type)              {                  case SubmissionType.Link:                      if (String.IsNullOrEmpty(userSubmission.Url))                      {                          return CreateOutcome(RuleResult.Denied' "A link submission must include a url");                      }                        // make sure the input URI is valid                      if (!UrlUtility.IsUriValid(userSubmission.Url))                      {                          return CreateOutcome(RuleResult.Denied' "The url you are trying to submit is invalid");                      }                        //Ensure user isn't submitting links as titles                      var linkDomain = UrlUtility.GetDomainFromUri(userSubmission.Url);                      if (userSubmission.Title.Equals(userSubmission.Url' StringComparison.InvariantCultureIgnoreCase) || userSubmission.Title.Contains(linkDomain))                      {                          return CreateOutcome(RuleResult.Denied' "Submission title may not be the same as the URL you are trying to submit. Why would you even think about doing this?! Why?");                      }                        break;                    case SubmissionType.Text:                      break;              }
Missing Default,Voat.Utilities,VoatUrlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\VoatUrlFormatter.cs,BasePath,The following switch statement is missing a default case: switch (domainReference.Type)              {                  case DomainType.Set:                      basePath = $"/s/{domainReference.Name}" + (!String.IsNullOrEmpty(domainReference.OwnerName) ? CONSTANTS.SET_SEPERATOR + $"{domainReference.OwnerName}" : "");                      break;                  case DomainType.Subverse:                      basePath = $"/v/{domainReference.Name}";                      break;                  case DomainType.User:                      basePath = $"/user/{domainReference.Name}";                      break;              }
Missing Default,Voat.Utilities,VoatUrlFormatter,D:\research\architectureSmells\repos\voat_voat\src\Voat.Business\Utilities\VoatUrlFormatter.cs,BuildUrlPath,The following switch statement is missing a default case: switch (options.Normalization)              {                  case Normalization.Lower:                      result = result.ToLower();                      break;                  case Normalization.Upper:                      result = result.ToUpper();                      break;              }
