Implementation smell,Namespace,Class,File,Method,Description
Long Method,Voat.Common.Configuration,ArgumentParser,C:\repos\voat_voat\src\Voat.Common\Components\ArgumentParser.cs,Parse,The method has 109 lines of code.
Complex Method,Voat.Common,TypeDiscovery,C:\repos\voat_voat\src\Voat.Common\Components\TypeDiscovery.cs,DiscoverTypes,Cyclomatic complexity of the method is 8
Complex Method,Voat.Common.Configuration,ArgumentParser,C:\repos\voat_voat\src\Voat.Common\Components\ArgumentParser.cs,Parse,Cyclomatic complexity of the method is 11
Long Parameter List,Voat.Common,CacheBatchOperation<T>,C:\repos\voat_voat\src\Voat.Common\Components\BatchOperation\CacheBatchOperation.cs,CacheBatchOperation,The method has 5 parameters. Parameters: keySpace' cacheHandler' flushCount' flushSpan' batchAction
Long Statement,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfMonth,The length of the statement  "            return new DateTime(dateTime.Year' dateTime.Month' julianCalendar.GetDaysInMonth(dateTime.Year' dateTime.Month)).ToEndOfDay(); " is 126.
Long Statement,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The length of the statement  "                        return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay()); " is 164.
Long Statement,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The length of the statement  "                        return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay()); " is 188.
Long Statement,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The length of the statement  "                        return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay()); " is 188.
Long Statement,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The length of the statement  "                        return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay()); " is 189.
Long Statement,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,ReverseSplit,The length of the statement  "                return String.Join(seperator' content.Split(new string[] { seperator }' StringSplitOptions.RemoveEmptyEntries).Reverse()); " is 122.
Long Statement,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,StripUnicode,The length of the statement  "                scrubbed = Regex.Replace(scrubbed' String.Format(@"[^\u00{0}-\u00FF]"' (includeUnprintableChars ? "20" : "00"))' string.Empty).Trim(); " is 134.
Long Statement,Voat.Common,ActivityContext,C:\repos\voat_voat\src\Voat.Common\Security\ActivityContext.cs,Convert,The length of the statement  "                    new ActivityIdentity(claimsPrincipal.Identity.Name' claimsPrincipal.Identity.IsAuthenticated' claimsPrincipal.Identity.AuthenticationType)  " is 138.
Long Statement,Voat.Common.Configuration,HandlerInfo,C:\repos\voat_voat\src\Voat.Common\Components\HandlerInfo.cs,Construct,The length of the statement  "                        var flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty | BindingFlags.IgnoreCase; " is 134.
Long Statement,Voat.Configuration,VoatSettings,C:\repos\voat_voat\src\Voat.Common\Configuration\VoatSettings.cs,GetValue,The length of the statement  "            //    //I'm NOT liking where this is going. And I forgot exactly what situation I originally wrote this for. As Fuzzy and Dan say' "It's a future person problem." " is 162.
Complex Conditional,Voat.Common,SecurityExtentions,C:\repos\voat_voat\src\Voat.Common\Security\SecurityExtension.cs,IsInAnyRole,The conditional expression  "roles != null && roles.Length > 0 && user != null && user.Identity.IsAuthenticated"  is complex.
Complex Conditional,Voat.Common.Configuration,ArgumentParser,C:\repos\voat_voat\src\Voat.Common\Components\ArgumentParser.cs,Parse,The conditional expression  "type.IsPrimitive || type == typeof(string) || type.IsEnum || type.BaseType == typeof(ValueType)"  is complex.
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,Age,C:\repos\voat_voat\src\Voat.Common\Components\Age.cs,ToRelative,The following statement contains a magic number: if (span.TotalDays >= 365)              {                  //years                  //double years = Math.Round(span.TotalDays / 365f' 1); //Round                   double years = Math.Round(Math.Floor(span.TotalDays / 365f * 10) / 10' 1); //Round down                  result = years.PluralizeIt("year");              }              else if (span.TotalDays > 31)              {                  //months                  int days = (int)span.TotalDays;                  if (days.Equals(52))                  {                      result = "1 dog year";                  }                  else                  {                      int months = (int)(span.TotalDays / 30);                      result = months.PluralizeIt("month");                  }              }              else if (span.TotalHours >= 24)              {                  //days                  int days = (int)span.TotalDays;                  if (days.Equals(14))                  {                      result = "1 fortnight";                  }                  else                  {                      result = Math.Round(span.TotalDays' (span.TotalDays < 2 ? 1 : 0)).PluralizeIt("day");                  }              }              else if (span.TotalHours >= 1)              {                  //hours                  if (span.TotalHours < 3)                  {                      result = span.TotalHours.PluralizeIt("hour");                  }                  else                  {                      result = ((int)span.TotalHours).PluralizeIt("hour");                  }              }              else if (span.TotalSeconds >= 60)              {                  //minutes                  int min = (int)span.TotalMinutes;                  if (min.Equals(52))                  {                      result = "1 microcentury";                  }                  else                  {                      result = min.PluralizeIt("minute");                  }              }              else if (span.TotalSeconds > 0)              {                  //seconds                  if (Math.Round(span.TotalSeconds' 2).Equals(1.21))                  {                      result = "1 microfortnight";                  }                  else                  {                      result = Math.Max(1' Math.Round(span.TotalSeconds' 0)).PluralizeIt("second");                  }              }
Magic Number,Voat.Common,BatchOperation<T>,C:\repos\voat_voat\src\Voat.Common\Components\BatchOperation\BatchOperation.cs,BatchOperation,The following statement contains a magic number: if (_flushSpan > TimeSpan.Zero)              {                  var duration = _flushSpan.Add(TimeSpan.FromMilliseconds(250));                  _timer = new Timer(new System.Threading.TimerCallback(OnTimer)' this' duration' duration);              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfDay,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfHour,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' dateTime.Hour' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfHour,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' dateTime.Hour' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfHour,The following statement contains a magic number: return new DateTime(dateTime.Year' dateTime.Month' dateTime.Day' dateTime.Hour' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfYear,The following statement contains a magic number: return new DateTime(dateTime.Year' 12' 31' 23' 59' 59' 999);
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToEndOfWeek,The following statement contains a magic number: var start = dateTime.Add(TimeSpan.FromDays(6 - (int)dayOfWeek));
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,DateTimeExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\DateTimeExtensions.cs,ToQuarterRange,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  indexDay += j.GetDaysInMonth(dateTime.Year' i);                  if (indexDay >= currentDay)                  {                      if (i >= 0 && i <= 3)                      {                          var endMonthNum = 3;                          return new Tuple<DateTime' DateTime>(dateTime.ToStartOfYear()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 4 && i <= 6)                      {                          var endMonthNum = 6;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 4' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else if (i >= 7 && i <= 9)                      {                          var endMonthNum = 9;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 7' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                      else                      {                          var endMonthNum = 12;                          return new Tuple<DateTime' DateTime>(new DateTime(dateTime.Year' 10' 1).ToStartOfDay()' new DateTime(dateTime.Year' endMonthNum' j.GetDaysInMonth(dateTime.Year' endMonthNum)).ToEndOfDay());                      }                  }              }
Magic Number,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,ToKeyValuePairs,The following statement contains a magic number: var keyValuePairs = value.Split(pairDelim' StringSplitOptions.RemoveEmptyEntries)                                  .Select(x => x.Split(keyValueDelim' StringSplitOptions.RemoveEmptyEntries))                                  .Where(x => x.Length == 2)                                  .ToDictionary(x => x.First().TrimSafe()' x => x.Last().TrimSafe());
Magic Number,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,ContainsUnicode,The following statement contains a magic number: const int maxAnsiCode = 255;
Magic Number,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,ContainsUnicode,The following statement contains a magic number: int minAnsiCode = (includeUnprintableChars ? 32 : 0);
Missing Default,Voat.Common,LimitedList<T>,C:\repos\voat_voat\src\Voat.Common\Components\LimitedQueue.cs,Add,The following switch statement is missing a default case: switch (TrimBehavior)                  {                      case TrimEnd.Head:                          base.RemoveAt(0);                          break;                      case TrimEnd.Tail:                          base.RemoveAt(Count - 1);                          break;                  }
Missing Default,Voat.Common,LimitedList<T>,C:\repos\voat_voat\src\Voat.Common\Components\LimitedQueue.cs,Add,The following switch statement is missing a default case: switch (TrimBehavior)              {                  case TrimEnd.Head:                      base.Add(item);                      break;                  case TrimEnd.Tail:                      base.Insert(0' item);                      break;              }
Missing Default,Voat.Common,StringExtensions,C:\repos\voat_voat\src\Voat.Common\Misc\StringExtensions.cs,ToNormalized,The following switch statement is missing a default case: switch (normalization)                  {                      case Normalization.Lower:                          return value.ToLower();                          break;                      case Normalization.Upper:                          return value.ToUpper();                          break;                  }
