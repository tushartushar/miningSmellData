Implementation smell,Namespace,Class,File,Method,Description
Long Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Save,The method has 124 lines of code.
Long Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,StringToKey,The method has 265 lines of code.
Long Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,KeyToString,The method has 208 lines of code.
Long Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,The method has 231 lines of code.
Long Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlUp,The method has 114 lines of code.
Long Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The method has 131 lines of code.
Long Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The method has 240 lines of code.
Complex Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Load,Cyclomatic complexity of the method is 17
Complex Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,ReadSection,Cyclomatic complexity of the method is 11
Complex Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,StringToKey,Cyclomatic complexity of the method is 101
Complex Method,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,KeyToString,Cyclomatic complexity of the method is 101
Complex Method,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,LoadItemsInto,Cyclomatic complexity of the method is 11
Complex Method,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,Setup,Cyclomatic complexity of the method is 11
Complex Method,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,RefreshItems,Cyclomatic complexity of the method is 23
Complex Method,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetTexture,Cyclomatic complexity of the method is 8
Complex Method,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ClearMemory,Cyclomatic complexity of the method is 14
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,Cyclomatic complexity of the method is 52
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,Cyclomatic complexity of the method is 48
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,OnMouseWheelScrolled,Cyclomatic complexity of the method is 10
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlUp,Cyclomatic complexity of the method is 40
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlDown,Cyclomatic complexity of the method is 22
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,Cyclomatic complexity of the method is 13
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,Cyclomatic complexity of the method is 17
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,Cyclomatic complexity of the method is 12
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,Cyclomatic complexity of the method is 22
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,GetFolderContents,Cyclomatic complexity of the method is 13
Complex Method,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,Cyclomatic complexity of the method is 65
Long Parameter List,vimage,DWM,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\DWM.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,vimage,ViewState,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ViewState,The method has 6 parameters. Parameters: view' size' position' zoom' rotation' flippedX
Long Parameter List,ImageManipulation,Quantizer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\Quantizer.cs,SecondPass,The method has 5 parameters. Parameters: sourceData' output' width' height' bounds
Long Identifier,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,,The length of the parameter Control_DragLimitToMonitorBounds is 32.
Long Identifier,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,,The length of the parameter Control_OpenFullDuplicateImage is 30.
Long Identifier,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,,The length of the parameter BackgroundsForImagesWithTransparency is 36.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,SetDefaultCustomActions,The length of the statement  "            CustomActions.Add(new { name = "TOGGLE OVERLAY MODE"' func = "-toggleSync -clickThrough -alwaysOnTop -defaultTransparency" }); " is 126.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Save,The length of the statement  "                    "when the Reset Image action is used' all textures/animations will be cleared from memory (except ones used for current image)"); " is 129.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Save,The length of the statement  "                WriteSetting(writer' "MaxTextureSize"' Setting_MaxTextureSize' "will cut up images into multiple textures if they are larger than this value"); " is 143.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Save,The length of the statement  "                System.Windows.MessageBox.Show("vimage does not have write permissions for the folder it's located in.\nPlease place it somewhere else (or set it to run as admin)."' "vimage - Error"); " is 184.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Save,The length of the statement  "                System.Windows.Forms.MessageBox.Show("vimage does not have write permissions for the folder it's located in.\nPlease place it somewhere else (or set it to run as admin)."' "vimage - Error"); " is 190.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,WriteContextMenuItems,The length of the statement  "                    writer.Write((items[i] as string) + Environment.NewLine + VariableAmountOfStrings(depth' "\t") + "{" + Environment.NewLine); " is 124.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,WriteContextMenuItems,The length of the statement  "                    string itemFunc = (string)((items[i] as dynamic).func is Action ? ((Action)(items[i] as dynamic).func).ToNameString() : (items[i] as dynamic).func); " is 148.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,WriteCustomActions,The length of the statement  "                writer.Write("\t" + (customActions[i] as dynamic).name + " : " + (customActions[i] as dynamic).func + Environment.NewLine); " is 123.
Long Statement,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,WriteCustomActionBindings,The length of the statement  "                writer.Write("\t" + (customActionBindings[i] as dynamic).name + " : " + ControlsToString((customActionBindings[i] as dynamic).bindings) + Environment.NewLine); " is 159.
Long Statement,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,Setup,The length of the statement  "            if (!force && ((Setting == 0 && !(ImageViewer.Image is AnimatedImage)) || (Setting == 1 && ImageViewer.Image is AnimatedImage))) " is 128.
Long Statement,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,RefreshItems,The length of the statement  "                    Items[Items_General[FileNameItem]].Text = Items_General[FileNameItem].Replace("[filename]"' ImageViewer.File == "" ? "Clipboard Image" : ImageViewer.File.Substring(ImageViewer.File.LastIndexOf('\\') + 1)); " is 205.
Long Statement,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,RefreshItems,The length of the statement  "                        string fileName = ImageViewer.File == "" ? "Clipboard Image" : ImageViewer.File.Substring(ImageViewer.File.LastIndexOf('\\') + 1); " is 130.
Long Statement,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,ToolTipDraw,The length of the statement  "            DrawToolTipEventArgs newArgs = new DrawToolTipEventArgs(e.Graphics' e.AssociatedWindow' e.AssociatedControl' bounds' e.ToolTipText' " is 131.
Long Statement,vimage,AnimatedImage,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\AnimatedImage.cs,Update,The length of the statement  "                if (TotalFrames != Data.FramesCount && Looping && CurrentFrame == TotalFrames - 1 && CurrentFrame < Data.FramesCount - 1) " is 121.
Long Statement,vimage,DWM,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\DWM.cs,SysMenuSetVisible,The length of the statement  "            SetWindowPos(window.SystemHandle' new IntPtr(0)' window.Position.X' window.Position.Y' (int)window.Size.X' (int)window.Size.Y' SWP_FRAMECHANGED); " is 145.
Long Statement,vimage,DWM,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\DWM.cs,TitleBarSetVisible,The length of the statement  "            SetWindowPos(window.SystemHandle' new IntPtr(0)' window.Position.X' window.Position.Y' (int)window.Size.X' (int)window.Size.Y' SWP_FRAMECHANGED); " is 145.
Long Statement,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetCutUpTexturesFromBoundImage,The length of the statement  "            Vector2u amount = new Vector2u((uint)Math.Ceiling(size.X / (float)sectionSize)' (uint)Math.Ceiling(size.Y / (float)sectionSize)); " is 129.
Long Statement,vimage,LoadingAnimatedImage,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,LoadFrames,The length of the statement  "            System.Drawing.Imaging.FrameDimension frameDimension = new System.Drawing.Imaging.FrameDimension(Image.FrameDimensionsList[0]); " is 127.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return; " is 173.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return; " is 174.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return; " is 151.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return; " is 152.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return; " is 149.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The length of the statement  "                case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return; " is 151.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlUp,The length of the statement  "                if (Config.IsControl(code' ((Config.CustomActionBindings[i] as dynamic).bindings as List<int>)' CurrentAction != Action.None)) " is 126.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlUp,The length of the statement  "                    DoCustomAction((Config.CustomActions.Where(a => (a as dynamic).name == (Config.CustomActionBindings[i] as dynamic).name).First() as dynamic).func); " is 147.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The length of the statement  "                Vector2i difference = new Vector2i((int)newSize.X' (int)newSize.Y) - new Vector2i((int)Window.Size.X' (int)Window.Size.Y); " is 122.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The length of the statement  "                        Vector2i difference = new Vector2i((int)NextWindowSize.X' (int)NextWindowSize.Y) - new Vector2i((int)Window.Size.X' (int)Window.Size.Y); " is 136.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The length of the statement  "            if (CurrentZoom == 1 || (FitToMonitorHeight && dimension != Config.HEIGHT) || (FitToMonitorWidth && dimension != Config.WIDTH)) " is 127.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The length of the statement  "                NextWindowPos = new Vector2i(bounds.Left' bounds.Top); // Position Window at 0'0 if the image is large (ie: a Desktop wallpaper) " is 128.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The length of the statement  "                    NextWindowSize.X >= bounds.Width - 2 ? bounds.Left : bounds.Left + (bounds.Width / 2) - ((int)(CurrentImageSize().X * CurrentZoom) / 2)' " is 136.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The length of the statement  "                    NextWindowSize.Y >= bounds.Height - 2 ? bounds.Top : bounds.Top + (bounds.Height / 2) - ((int)(CurrentImageSize().Y * CurrentZoom) / 2)); " is 137.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,The length of the statement  "                NextWindowPos = new Vector2i(bounds.Left' bounds.Top); // Position Window at 0'0 if the image is large (ie: a Desktop wallpaper) " is 128.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,The length of the statement  "                    NextWindowSize.X >= currentWorkingArea.Width - 2 ? currentWorkingArea.Left : currentWorkingArea.Left + (currentWorkingArea.Width / 2) - ((int)(Size.X * CurrentZoom) / 2)' " is 170.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,The length of the statement  "                    NextWindowSize.Y >= currentWorkingArea.Height - 2 ? currentWorkingArea.Top : currentWorkingArea.Top + (currentWorkingArea.Height / 2) - ((int)(Size.Y * CurrentZoom) / 2)); // Center " is 181.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The length of the statement  "                (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255)); " is 158.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ForceAlwaysOnTopCheck,The length of the statement  "                ((bounds.Height != workingArea.Height && (NextWindowPos.Y + NextWindowSize.Y >= workingArea.Top + workingArea.Height || NextWindowPos.Y <= workingArea.Top)) || " is 159.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ForceAlwaysOnTopCheck,The length of the statement  "                (bounds.Width != workingArea.Width && (NextWindowPos.X <= workingArea.Left || NextWindowPos.X + NextWindowSize.X >= workingArea.Left + workingArea.Width)))) " is 156.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropStart,The length of the statement  "            CropRect.Position = Window.MapPixelToCoords(CropStartPos - (ShowTitleBar ? DWM.GetWindowClientPos(Window.SystemHandle) : Window.Position)); " is 139.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The length of the statement  "            NextWindowPos = new Vector2i(pos.X < CropStartPos.X ? pos.X : CropStartPos.X' pos.Y < CropStartPos.Y ? pos.Y : CropStartPos.Y); " is 127.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The length of the statement  "                Image.Data.Smooth = Math.Min(Size.X' Size.Y) < Config.Setting_SmoothingMinImageSize ? false : Config.Setting_SmoothingDefault; " is 126.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The length of the statement  "                Image.Texture.Smooth = Math.Min(Size.X' Size.Y) < Config.Setting_SmoothingMinImageSize ? false : Config.Setting_SmoothingDefault; " is 129.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The length of the statement  "                CurrentZoom = Config.Setting_ImageSizing == SizingOption.FitHeight || (Config.Setting_ImageSizing == SizingOption.FitAuto && actualPrevSize.Y < actualPrevSize.X) ? " is 163.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The length of the statement  "            if (Config.Setting_PositionLargeWideImagesInCorner && CurrentImageSize().X > CurrentImageSize().Y && CurrentImageSize().X * CurrentZoom >= bounds.Width) " is 152.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The length of the statement  "                NextWindowPos = new Vector2i(bounds.Left + (int)((bounds.Width - (CurrentImageSize().X * CurrentZoom)) / 2)' bounds.Top + (int)((bounds.Height - (CurrentImageSize().Y * CurrentZoom)) / 2)); " is 189.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,GetFolderContents,The length of the statement  "            var contents = Directory.GetFiles(directory' "*.*"' SearchOption.TopDirectoryOnly).Where(s => ImageViewerUtils.IsValidExtension(s' EXTENSIONS)); " is 144.
Long Statement,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DeleteFile,The length of the statement  "            Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(fileName' Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs' Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin); " is 178.
Long Statement,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentWorkingArea,The length of the statement  "                if (pos.X < screen.Bounds.X || pos.Y < screen.Bounds.Y || pos.X > screen.Bounds.X + screen.Bounds.Width || pos.Y > screen.Bounds.Y + screen.Bounds.Height) " is 154.
Long Statement,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentWorkingArea,The length of the statement  "            return new IntRect(firstScreen.WorkingArea.X' firstScreen.WorkingArea.Y' firstScreen.WorkingArea.Width' firstScreen.WorkingArea.Height); " is 136.
Long Statement,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentBounds,The length of the statement  "                if (pos.X < screen.Bounds.X || pos.Y < screen.Bounds.Y || pos.X > screen.Bounds.X + screen.Bounds.Width || pos.Y > screen.Bounds.Y + screen.Bounds.Height) " is 154.
Long Statement,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentBounds,The length of the statement  "            return returnBackupScreen ? new IntRect(backupScreen.Bounds.X' backupScreen.Bounds.Y' backupScreen.Bounds.Width' backupScreen.Bounds.Height) : new IntRect(); " is 157.
Complex Conditional,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,Setup,The conditional expression  "!force && ((Setting == 0 && !(ImageViewer.Image is AnimatedImage)) || (Setting == 1 && ImageViewer.Image is AnimatedImage))"  is complex.
Complex Conditional,vimage,AnimatedImage,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\AnimatedImage.cs,Update,The conditional expression  "TotalFrames != Data.FramesCount && Looping && CurrentFrame == TotalFrames - 1 && CurrentFrame < Data.FramesCount - 1"  is complex.
Complex Conditional,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ControlUp,The conditional expression  "CurrentAction != Action.None && CurrentAction != Action.Custom && CurrentAction != DownAction &&                  (!Locked || CurrentAction == Action.ToggleLock || CurrentAction == Action.OpenContextMenu)"  is complex.
Complex Conditional,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The conditional expression  "CurrentZoom == 1 || (FitToMonitorHeight && dimension != Config.HEIGHT) || (FitToMonitorWidth && dimension != Config.WIDTH)"  is complex.
Complex Conditional,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ForceAlwaysOnTopCheck,The conditional expression  "NextWindowSize.Y >= bounds.Height && NextWindowSize.X < bounds.Width &&                  ((bounds.Height != workingArea.Height && (NextWindowPos.Y + NextWindowSize.Y >= workingArea.Top + workingArea.Height || NextWindowPos.Y <= workingArea.Top)) ||                  (bounds.Width != workingArea.Width && (NextWindowPos.X <= workingArea.Left || NextWindowPos.X + NextWindowSize.X >= workingArea.Left + workingArea.Width)))"  is complex.
Complex Conditional,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The conditional expression  "!prevSize.Equals(Size) && (NextWindowPos.Y <= bounds.Top ||                  NextWindowPos.X + (CurrentImageSize().X * CurrentZoom) >= bounds.Left + bounds.Width ||                  NextWindowPos.Y + (CurrentImageSize().Y * CurrentZoom) >= bounds.Top + bounds.Height)"  is complex.
Complex Conditional,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentWorkingArea,The conditional expression  "pos.X < screen.Bounds.X || pos.Y < screen.Bounds.Y || pos.X > screen.Bounds.X + screen.Bounds.Width || pos.Y > screen.Bounds.Y + screen.Bounds.Height"  is complex.
Complex Conditional,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentBounds,The conditional expression  "pos.X < screen.Bounds.X || pos.Y < screen.Bounds.Y || pos.X > screen.Bounds.X + screen.Bounds.Width || pos.Y > screen.Bounds.Y + screen.Bounds.Height"  is complex.
Complex Conditional,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetCurrentBounds,The conditional expression  "(pos.X > screen.Bounds.X && screen.Bounds.X > backupScreen.Bounds.X) ||                          (pos.X < screen.Bounds.X && screen.Bounds.X < backupScreen.Bounds.X) ||                          (pos.Y > screen.Bounds.Y && screen.Bounds.Y > backupScreen.Bounds.Y) ||                          (pos.Y < screen.Bounds.Y && screen.Bounds.Y < backupScreen.Bounds.Y)"  is complex.
Empty Catch Block,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetSpriteFromIcon,The method has an empty catch block.
Empty Catch Block,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetSpriteFromSVG,The method has an empty catch block.
Empty Catch Block,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetAnimatedImageData,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RenderSVGAtCurrentZoom,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CopyAsImage,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoCustomAction,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The method has an empty catch block.
Empty Catch Block,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDateValueFromEXIF,The method has an empty catch block.
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,Init,The following statement contains a magic number: Settings = new Dictionary<string' object>()              {                  { "OPENATMOUSEPOSITION"' true }'                  { "SMOOTHINGDEFAULT"' true }'                  { "MIPMAPPING"' true }'                  { "BACKGROUNDFORIMAGESWITHTRANSPARENCYDEFAULT"' false }'                  { "BACKGROUNDCOLOUR"' "#4D000000" }'                  { "TRANSPARENCYTOGGLEVALUE"' "#BEFFFFFF" }'                  { "IMAGESIZING"' SizingOption.FitWidth }'                  { "LIMITIMAGESTOMONITOR"' AUTO }'                  { "POSITIONLARGEWIDEIMAGESINCORNER"' true }'                  { "LOOPIMAGENAVIGATION"' true }'                  { "PRELOADNEXTIMAGE"' true }'                  { "CLEARMEMORYONRESETIMAGE"' true }'                  { "SHOWTITLEBAR"' false }'                  { "OPENSETTINGSEXE"' true }'                  { "LISTENFORCONFIGCHANGES"' true }'                  { "MINIMAGESIZE"' 64 }'                  { "SMOOTHINGMINIMAGESIZE"' 65 }'                  { "ZOOMSPEED"' 2 }'                  { "ZOOMSPEEDFAST"' 10 }'                  { "MOVESPEED"' 2 }'                  { "MOVESPEEDFAST"' 10 }'                  { "MAXTEXTURES"' 80 }'                  { "MAXANIMATIONS"' 8 }'                  { "MAXTEXTURESIZE"' 10000 }'                  { "SETTINGSAPPWIDTH"' 600 }'                  { "SETTINGSAPPHEIGHT"' 550 }'                  { "DEFAULTSORTBY"' SortBy.FolderDefault }'                  { "DEFAULTSORTDIR"' SortDirection.FolderDefault }'                                    { "CROPTOOLFILLCOLOUR"' "#78FFFFFF" }'                  { "CROPTOOLOUTLINECOLOUR"' "#FF000000" }'                  { "CROPTOOLOUTLINETHICKNESS"' 2 }'                    { "DRAG"' Control_Drag }'                  { "CLOSE"' Control_Close }'                  { "OPENCONTEXTMENU"' Control_OpenContextMenu }'                  { "PREVIMAGE"' Control_PrevImage }'                  { "NEXTIMAGE"' Control_NextImage }'                  { "ROTATECLOCKWISE"' Control_RotateClockwise }'                  { "ROTATEANTICLOCKWISE"' Control_RotateAntiClockwise }'                  { "FLIP"' Control_Flip }'                  { "FITTOMONITORHEIGHT"' Control_FitToMonitorHeight }'                  { "FITTOMONITORWIDTH"' Control_FitToMonitorWidth }'                  { "FITTOMONITORAUTO"' Control_FitToMonitorAuto }'                  { "FITTOMONITORALT"' Control_FitToMonitorAlt }'                  { "ZOOMIN"' Control_ZoomIn }'                  { "ZOOMOUT"' Control_ZoomOut }'                  { "ZOOMFASTER"' Control_ZoomFaster }'                  { "ZOOMALT"' Control_ZoomAlt }'                  { "DRAGLIMITTOMONITORBOUNDS"' Control_DragLimitToMonitorBounds }'                  { "TOGGLESMOOTHING"' Control_ToggleSmoothing }'                  { "TOGGLEMIPMAPPING"' Control_ToggleMipmapping }'                  { "TOGGLEBACKGROUNDFORTRANSPARENCY"' Control_ToggleBackground }'                  { "TOGGLELOCK"' Control_ToggleLock }'                  { "TOGGLEALWAYSONTOP"' Control_ToggleAlwaysOnTop }'                  { "TOGGLETITLEBAR"' Control_ToggleTitleBar }'                  { "PAUSEANIMATION"' Control_PauseAnimation }'                  { "PREVFRAME"' Control_PrevFrame }'                  { "NEXTFRAME"' Control_NextFrame }'                  { "OPENSETTINGS"' Control_OpenSettings }'  				{ "RESETIMAGE"' Control_ResetImage }'                  { "OPENATLOCATION"' Control_OpenAtLocation }'                  { "DELETE"' Control_Delete }'                  { "COPY"' Control_Copy }'                  { "COPYASIMAGE"' Control_CopyAsImage }'                  { "OPENDUPLICATEIMAGE"' Control_OpenDuplicateImage }'                  { "OPENFULLDUPLICATEIMAGE"' Control_OpenFullDuplicateImage }'                  { "RANDOMIMAGE"' Control_RandomImage }'                  { "MOVELEFT"' Control_MoveLeft }'                  { "MOVERIGHT"' Control_MoveRight }'                  { "MOVEUP"' Control_MoveUp }'                  { "MOVEDOWN"' Control_MoveDown }'                  { "TRANSPARENCYTOGGLE"' Control_TransparencyToggle }'                  { "TRANSPARENCYINC"' Control_TransparencyInc }'                  { "TRANSPARENCYDEC"' Control_TransparencyDec }'                  { "CROP"' Control_Crop }'                  { "UNDOCROP"' Control_UndoCrop }'                  { "EXITALL"' Control_ExitAll }'                  { "RERENDERSVG"' Control_RerenderSVG}'                    { "CONTEXTMENU"' ContextMenu }'                  { "CONTEXTMENU_ANIMATION"' ContextMenu_Animation }'                  { "CONTEXTMENU_ANIMATION_INSERTATINDEX"' 2 }'                  { "CONTEXTMENU_SHOWMARGIN"' false }'                  { "CONTEXTMENU_SHOWMARGINSUB"' true }'                    { "CUSTOMACTIONS"' CustomActions }'                  { "CUSTOMACTIONBINDINGS"' CustomActionBindings }              };
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,SetDefaultCustomActions,The following statement contains a magic number: CustomActionBindings.Add(new { name = "TOGGLE OVERLAY MODE"' bindings = new List<int>() { -2' 38' 11 } });
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,SetDefaultCustomActions,The following statement contains a magic number: CustomActionBindings.Add(new { name = "TOGGLE OVERLAY MODE"' bindings = new List<int>() { -2' 38' 11 } });
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,SetDefaultCustomActions,The following statement contains a magic number: CustomActionBindings.Add(new { name = "TOGGLE OVERLAY MODE"' bindings = new List<int>() { -2' 38' 11 } });
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,ControlsToString,The following statement contains a magic number: controls[i] == -2 && controls.Count > 2
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,ControlsToString,The following statement contains a magic number: controls[i] == -2 && controls.Count > 2
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,StringToControls,The following statement contains a magic number: list.Add(-2);
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,IsControl,The following statement contains a magic number: index >= 1 && Control[index - 1] == -2
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,SetControls,The following statement contains a magic number: controls.Add(-2);
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following statement contains a magic number: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following statement contains a magic number: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following statement contains a magic number: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following statement contains a magic number: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Magic Number,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following statement contains a magic number: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Magic Number,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,SetupToolTip,The following statement contains a magic number: ToolTip.BackColor = System.Drawing.Color.FromArgb(26' 255' 255);
Magic Number,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,SetupToolTip,The following statement contains a magic number: ToolTip.BackColor = System.Drawing.Color.FromArgb(26' 255' 255);
Magic Number,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,SetupToolTip,The following statement contains a magic number: ToolTip.BackColor = System.Drawing.Color.FromArgb(26' 255' 255);
Magic Number,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,ItemMouseEnter,The following statement contains a magic number: ToolTip.Show(item.ToolTipText' item.Owner' item.Bounds.Location.X + 8' item.Bounds.Location.Y + 1);
Magic Number,vimage,DisplayObject,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\DisplayObject.cs,Rotate,The following statement contains a magic number: Rotation = Rotation + amount - 360;
Magic Number,vimage,DisplayObject,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\DisplayObject.cs,Rotate,The following statement contains a magic number: Rotation + amount > 180
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,GetCutUpTexturesFromBoundImage,The following statement contains a magic number: IntPtr partPtr = Marshal.AllocHGlobal((w * h) * 4);
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: const int SizeICONDIR = 6;
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: const int SizeICONDIRENTRY = 16;
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: int iCount = BitConverter.ToInt16(srcBuf' 4);
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: int iBitCount = BitConverter.ToInt16(srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 6);
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: int iImageSize = BitConverter.ToInt32(srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 8);
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: int iImageOffset = BitConverter.ToInt32(srcBuf' SizeICONDIR + SizeICONDIRENTRY * iIndex + 12);
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,ExtractVistaIcon,The following statement contains a magic number: iWidth == 0 && iHeight == 0 && iBitCount == 32
Magic Number,vimage,Graphics,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,RemoveTexture,The following statement contains a magic number: string name = TextureFileNames[t].Substring(0' TextureFileNames[t].Length - 7);
Magic Number,vimage,LoadingAnimatedImage,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,LoadFrames,The following statement contains a magic number: Quantizer = new ImageManipulation.OctreeQuantizer(255' 8);
Magic Number,vimage,LoadingAnimatedImage,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\Graphics.cs,LoadFrames,The following statement contains a magic number: Quantizer = new ImageManipulation.OctreeQuantizer(255' 8);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,The following statement contains a magic number: Graphics.TextureMaxSize = (int)Math.Min(Graphics.TextureMaxSize' 10000);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,The following statement contains a magic number: sort = sort.Substring(5' sort.IndexOf(';') - 5);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ImageViewer,The following statement contains a magic number: sort = sort.Substring(5' sort.IndexOf(';') - 5);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following statement contains a magic number: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: CurrentZoom = Math.Max(130f / CurrentImageSize().X' CurrentZoom);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: ShowTitleBar && CurrentZoom <= originalZoom && CurrentImageSize().X * CurrentZoom < 130
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: Rotation == 0 || Rotation == 180
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: NextWindowPos = new Vector2i(Window.Position.X - (difference.X / 2)' Window.Position.Y - (difference.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: NextWindowPos = new Vector2i(Window.Position.X - (difference.X / 2)' Window.Position.Y - (difference.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: CurrentZoom = (float)NextWindowSize.X / ((Rotation == 0 || Rotation == 180) ? Size.X : Size.Y);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: NextWindowPos = new Vector2i(Window.Position.X - (difference.X / 2)' Window.Position.Y - (difference.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,Zoom,The following statement contains a magic number: NextWindowPos = new Vector2i(Window.Position.X - (difference.X / 2)' Window.Position.Y - (difference.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: rotation >= 360
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: Vector2f center = new Vector2f(Window.Position.X + (Window.Size.X / 2)' Window.Position.Y + (Window.Size.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: Vector2f center = new Vector2f(Window.Position.X + (Window.Size.X / 2)' Window.Position.Y + (Window.Size.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: NextWindowPos = new Vector2i((int)center.X - (int)(WindowSize.X / 2)' (int)center.Y - (int)(WindowSize.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RotateImage,The following statement contains a magic number: NextWindowPos = new Vector2i((int)center.X - (int)(WindowSize.X / 2)' (int)center.Y - (int)(WindowSize.Y / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CurrentImageSize,The following statement contains a magic number: return (Rotation == 0 || Rotation == 180) ? Size : new Vector2u(Size.Y' Size.X);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,FlipImage,The following statement contains a magic number: view.Size = new Vector2f(Rotation == 90 || Rotation == 270 ? view.Size.X : Math.Abs(view.Size.X) * (FlippedX ? -1 : 1)'                  Rotation == 90 || Rotation == 270 ? Math.Abs(view.Size.Y) * (FlippedX ? -1 : 1) : view.Size.Y);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,FlipImage,The following statement contains a magic number: view.Size = new Vector2f(Rotation == 90 || Rotation == 270 ? view.Size.X : Math.Abs(view.Size.X) * (FlippedX ? -1 : 1)'                  Rotation == 90 || Rotation == 270 ? Math.Abs(view.Size.Y) * (FlippedX ? -1 : 1) : view.Size.Y);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,FlipImage,The following statement contains a magic number: view.Size = new Vector2f(Rotation == 90 || Rotation == 270 ? view.Size.X : Math.Abs(view.Size.X) * (FlippedX ? -1 : 1)'                  Rotation == 90 || Rotation == 270 ? Math.Abs(view.Size.Y) * (FlippedX ? -1 : 1) : view.Size.Y);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,FlipImage,The following statement contains a magic number: view.Size = new Vector2f(Rotation == 90 || Rotation == 270 ? view.Size.X : Math.Abs(view.Size.X) * (FlippedX ? -1 : 1)'                  Rotation == 90 || Rotation == 270 ? Math.Abs(view.Size.Y) * (FlippedX ? -1 : 1) : view.Size.Y);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ToggleFitToMonitor,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,The following statement contains a magic number: Window.SetView(new View(Window.DefaultView)              {                  Center = new Vector2f(Size.X / 2f' Size.Y / 2f)'                  Size = new Vector2f(Size.X' Size.Y)              });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ResetImage,The following statement contains a magic number: Window.SetView(new View(Window.DefaultView)              {                  Center = new Vector2f(Size.X / 2f' Size.Y / 2f)'                  Size = new Vector2f(Size.X' Size.Y)              });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The following statement contains a magic number: ImageColor = new Color(ImageColor.R' ImageColor.G' ImageColor.B'                  (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The following statement contains a magic number: ImageColor = new Color(ImageColor.R' ImageColor.G' ImageColor.B'                  (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The following statement contains a magic number: ImageColor = new Color(ImageColor.R' ImageColor.G' ImageColor.B'                  (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The following statement contains a magic number: ImageColor = new Color(ImageColor.R' ImageColor.G' ImageColor.B'                  (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,AdjustImageTransparency,The following statement contains a magic number: ImageColor = new Color(ImageColor.R' ImageColor.G' ImageColor.B'                  (byte)Math.Min(Math.Max(ImageColor.A + (amount * (255 * (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))))' 2)' 255));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: Math.Abs(CropRect.Size.X) < 10 || Math.Abs(CropRect.Size.Y) < 10
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: Math.Abs(CropRect.Size.X) < 10 || Math.Abs(CropRect.Size.Y) < 10
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: view.Center = new Vector2f(CropRect.Position.X + (CropRect.Size.X / 2f)' CropRect.Position.Y + (CropRect.Size.Y / 2f));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: view.Center = new Vector2f(CropRect.Position.X + (CropRect.Size.X / 2f)' CropRect.Position.Y + (CropRect.Size.Y / 2f));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CropEnd,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,UndoCrop,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,UndoCrop,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RenderSVGAtCurrentZoom,The following statement contains a magic number: Window.SetView(new View(Window.DefaultView)                      {                          Center = new Vector2f(Size.X / 2f' Size.Y / 2f)'                          Size = new Vector2f(Size.X' Size.Y)                      });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,RenderSVGAtCurrentZoom,The following statement contains a magic number: Window.SetView(new View(Window.DefaultView)                      {                          Center = new Vector2f(Size.X / 2f' Size.Y / 2f)'                          Size = new Vector2f(Size.X' Size.Y)                      });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: IntRect bounds = ImageViewerUtils.GetCurrentBounds(Window.Position +                  (Image == null ? new Vector2i() : new Vector2i((int)(Size.X * CurrentZoom) / 2' (int)(Size.Y * CurrentZoom) / 2)));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: IntRect bounds = ImageViewerUtils.GetCurrentBounds(Window.Position +                  (Image == null ? new Vector2i() : new Vector2i((int)(Size.X * CurrentZoom) / 2' (int)(Size.Y * CurrentZoom) / 2)));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: view.Center = new Vector2f(Size.X / 2f' Size.Y / 2f);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: view.Center = new Vector2f(Size.X / 2f' Size.Y / 2f);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: bounds = ImageViewerUtils.GetCurrentBounds(NextWindowPos +                          new Vector2i((int)(CurrentImageSize().X * CurrentZoom) / 2' (int)(CurrentImageSize().Y * CurrentZoom) / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: bounds = ImageViewerUtils.GetCurrentBounds(NextWindowPos +                          new Vector2i((int)(CurrentImageSize().X * CurrentZoom) / 2' (int)(CurrentImageSize().Y * CurrentZoom) / 2));
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: Vector2i boundsPos = NextWindowPos +                  new Vector2i((int)(CurrentImageSize().X * CurrentZoom) / 2' (int)(CurrentImageSize().Y * CurrentZoom) / 2);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ChangeImage,The following statement contains a magic number: Vector2i boundsPos = NextWindowPos +                  new Vector2i((int)(CurrentImageSize().X * CurrentZoom) / 2' (int)(CurrentImageSize().Y * CurrentZoom) / 2);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CopyAsImage,The following statement contains a magic number: Thread thread = new Thread(() =>              {                  try                  {                      System.Drawing.Bitmap bitmap;                      if (File == "")                      {                          // No File (viewing clipboard image?)                          if (ClipboardBitmap == null)                              return;                          bitmap = ClipboardBitmap;                      }                      else if (File.EndsWith(".ico"' StringComparison.OrdinalIgnoreCase))                      {                          // If .ico - copy largest version                          System.Drawing.Icon icon = new System.Drawing.Icon(File' 256' 256);                          bitmap = Graphics.ExtractVistaIcon(icon);                          if (bitmap == null)                              bitmap = icon.ToBitmap();                      }                      else                          bitmap = new System.Drawing.Bitmap(File);                      System.Windows.Forms.Clipboard.SetImage(bitmap);                  }                  catch (Exception) { }              });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,CopyAsImage,The following statement contains a magic number: Thread thread = new Thread(() =>              {                  try                  {                      System.Drawing.Bitmap bitmap;                      if (File == "")                      {                          // No File (viewing clipboard image?)                          if (ClipboardBitmap == null)                              return;                          bitmap = ClipboardBitmap;                      }                      else if (File.EndsWith(".ico"' StringComparison.OrdinalIgnoreCase))                      {                          // If .ico - copy largest version                          System.Drawing.Icon icon = new System.Drawing.Icon(File' 256' 256);                          bitmap = Graphics.ExtractVistaIcon(icon);                          if (bitmap == null)                              bitmap = icon.ToBitmap();                      }                      else                          bitmap = new System.Drawing.Bitmap(File);                      System.Windows.Forms.Clipboard.SetImage(bitmap);                  }                  catch (Exception) { }              });
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,OnConfigChanged,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following statement contains a magic number: Vector2f viewCenter = new Vector2f(Size.X / 2f' Size.Y / 2f);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following statement contains a magic number: Vector2f viewCenter = new Vector2f(Size.X / 2f' Size.Y / 2f);
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following statement contains a magic number: switch (args[i])                  {                      case "-x":                          if (val != -1)                          {                              NextWindowPos.X = val;                              i++;                          }                          break;                      case "-y":                          if (val != -1)                          {                              NextWindowPos.Y = val;                              i++;                          }                          break;                      case "-sizeX":                          if (val != -1)                          {                              Size.X = (uint)val;                              i++;                          }                          break;                      case "-sizeY":                          if (val != -1)                          {                              Size.Y = (uint)val;                              i++;                          }                          break;                      case "-centerX":                          valf = -1;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = -1;                          if (valf != -1)                          {                              viewCenter.X = valf;                              Updated = true;                              i++;                          }                          break;                      case "-centerY":                          valf = -1;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = -1;                          if (valf != -1)                          {                              viewCenter.Y = valf;                              Updated = true;                              i++;                          }                          break;                      case "-zoom":                          valf = 0;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = 0;                          if (valf != 0)                              Zoom(valf' true);                          i++;                          break;                      case "-rotation":                          if (val != -1)                          {                              if (Rotation != val)                                  RotateImage(val);                              i++;                          }                          break;                      case "-color":                      case "-colour":                          System.Drawing.Color colour = System.Drawing.ColorTranslator.FromHtml(args[i + 1]);                          ImageColor = new Color(colour.R' colour.G' colour.B' colour.A);                          Image.Color = ImageColor;                          Updated = true;                          i++;                          break;                      case "-alpha":                          if (val != -1)                          {                              if (val >= 0 && val <= 255)                                  SetImageTransparency((byte)val);                              i++;                          }                          break;                        case "-frame":                          if (val != -1)                          {                              if (Image is AnimatedImage)                              {                                  (Image as AnimatedImage).SetFrame(val);                                  Updated = true;                              }                                i++;                          }                          break;                      case "-next": NextImage(); break;                      case "-prev": PrevImage(); break;                      case "-random": RandomImage(); break;                      case "-reset": ResetImage(); break;                      case "-clearMemory": Graphics.ClearMemory(Image' File); break;                      case "-rerenderSVG": RenderSVGAtCurrentZoom(); break;                        case "-fitToMonitorHeight": ToggleFitToMonitor(Config.HEIGHT); break;                      case "-fitToMonitorWidth": ToggleFitToMonitor(Config.WIDTH); break;                      case "-fitToMonitorAuto": ToggleFitToMonitor(Config.AUTO); break;                        case "-toggleSync": toggleSync = 0; break;                        case "-flip":                          if (val == 0 || val == 1)                          {                              FlipImage(val);                              i++;                          }                          else                              t = FlipImage(toggleSyncVal);                          break;                      case "-smoothing":                          if (val == 0 || val == 1)                          {                              ToggleSmoothing(val);                              i++;                          }                          else                              t = ToggleSmoothing(toggleSyncVal);                          break;                      case "-mipmap":                          if (val == 0 || val == 1)                          {                              ToggleMipmap(val);                              i++;                          }                          else                              t = ToggleMipmap(toggleSyncVal);                          break;                      case "-background":                          if (val == 0 || val == 1)                          {                              ToggleBackground(val);                              i++;                          }                          else                              t = ToggleBackground(toggleSyncVal);                          break;                      case "-lock":                          if (val == 0 || val == 1)                          {                              ToggleLock(val);                              i++;                          }                          else                              t = ToggleLock(toggleSyncVal);                          break;                      case "-alwaysOnTop":                          if (val == 0 || val == 1)                          {                              ToggleAlwaysOnTop(val);                              i++;                          }                          else                              t = ToggleAlwaysOnTop(toggleSyncVal);                          break;                      case "-clickThrough":                          if (val == 0 || val == 1)                          {                              ToggleClickThroughAble(val);                              i++;                          }                          else                              t = ToggleClickThroughAble(toggleSyncVal);                          break;                      case "-titleBar":                          if (val == 0 || val == 1)                          {                              ToggleTitleBar(val);                              i++;                          }                          else                              t = ToggleTitleBar(toggleSyncVal);                          break;                      case "-taskbarIcon":                          if (val == 0 || val == 1)                          {                              ToggleTaskBarIconVisible(val);                              i++;                          }                          else                              t = ToggleTaskBarIconVisible(toggleSyncVal);                          break;                      case "-animation":                          if (val == 0 || val == 1)                          {                              ToggleAnimation(val);                              i++;                          }                          else                              t = ToggleAnimation(toggleSyncVal);                          break;                      case "-defaultTransparency":                          if (val == 0 || val == 1)                          {                              ToggleImageTransparency(val);                              i++;                          }                          else                              t = ToggleImageTransparency(toggleSyncVal);                          break;                  }
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following statement contains a magic number: Rotation == 90 || Rotation == 270
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,vimage,ImageViewerUtils,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Utils\ImageViewerUtils.cs,GetDefaultRotationFromEXIF,The following statement contains a magic number: switch (orientation)                      {                          case 6: return 90;                          case 3: return 180;                          case 8: return 270;                          default: return 0;                      }
Magic Number,ImageManipulation,OctreeQuantizer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: maxColors > 255
Magic Number,ImageManipulation,OctreeQuantizer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: (maxColorBits < 1) | (maxColorBits > 8)
Magic Number,ImageManipulation,Octree,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,Octree,The following statement contains a magic number: _reducibleNodes = new OctreeNode[9];
Magic Number,ImageManipulation,OctreeNode,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,Reduce,The following statement contains a magic number: index < 8
Magic Number,ImageManipulation,OctreeNode,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,GetPaletteIndex,The following statement contains a magic number: int	shift = 7 - level;
Magic Number,ImageManipulation,OctreeNode,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Display\ImageManipulation\OctreeQuantizer.cs,GetPaletteIndex,The following statement contains a magic number: int index = ( ( pixel->Red & mask[level] ) >> ( shift - 2 ) ) |  									( ( pixel->Green & mask[level] ) >> ( shift - 1 ) ) |  									( ( pixel->Blue & mask[level] ) >> ( shift ) );
Missing Default,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,StringToMouseButton,The following switch statement is missing a default case: switch (str)              {                  case "MOUSELEFT":                  case "MOUSE1":                      return (int)Mouse.Button.Left + MouseCodeOffset;                  case "MOUSERIGHT":                  case "MOUSE2":                      return (int)Mouse.Button.Right + MouseCodeOffset;                  case "MOUSEMIDDLE":                  case "MOUSE3":                      return (int)Mouse.Button.Middle + MouseCodeOffset;                  case "MOUSEX1":                  case "MOUSEXBUTTON1":                  case "MOUSE4":                      return (int)Mouse.Button.XButton1 + MouseCodeOffset;                  case "MOUSEX2":                  case "MOUSEXBUTTON2":                  case "MOUSE5":                      return (int)Mouse.Button.XButton2 + MouseCodeOffset;                  case "SCROLLUP":                      return MOUSE_SCROLL_UP;                  case "SCROLLDOWN":                      return MOUSE_SCROLL_DOWN;              }
Missing Default,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,MouseButtonToString,The following switch statement is missing a default case: switch (code - MouseCodeOffset)              {                  case 0: return "MOUSELEFT";                  case 1: return "MOUSERIGHT";                  case 2: return "MOUSEMIDDLE";                  case 3: return "MOUSE4";                  case 4: return "MOUSE5";                  case 5: return "SCROLLUP";                  case 6: return "SCROLLDOWN";              }
Missing Default,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,StringToKey,The following switch statement is missing a default case: switch (str)              {                  case "A":                      return Keyboard.Key.A;                  case "B":                      return Keyboard.Key.B;                  case "C":                      return Keyboard.Key.C;                  case "D":                      return Keyboard.Key.D;                  case "E":                      return Keyboard.Key.E;                  case "F":                      return Keyboard.Key.F;                  case "G":                      return Keyboard.Key.G;                  case "H":                      return Keyboard.Key.H;                  case "I":                      return Keyboard.Key.I;                  case "J":                      return Keyboard.Key.J;                  case "K":                      return Keyboard.Key.K;                  case "L":                      return Keyboard.Key.L;                  case "M":                      return Keyboard.Key.M;                  case "N":                      return Keyboard.Key.N;                  case "O":                      return Keyboard.Key.O;                  case "P":                      return Keyboard.Key.P;                  case "Q":                      return Keyboard.Key.Q;                  case "R":                      return Keyboard.Key.R;                  case "S":                      return Keyboard.Key.S;                  case "T":                      return Keyboard.Key.T;                  case "U":                      return Keyboard.Key.U;                  case "V":                      return Keyboard.Key.V;                  case "W":                      return Keyboard.Key.W;                  case "X":                      return Keyboard.Key.X;                  case "Y":                      return Keyboard.Key.Y;                  case "Z":                      return Keyboard.Key.Z;                  case "0":                  case "NUM0":                      return Keyboard.Key.Num0;                  case "1":                  case "NUM1":                      return Keyboard.Key.Num1;                  case "2":                  case "NUM2":                      return Keyboard.Key.Num2;                  case "3":                  case "NUM3":                      return Keyboard.Key.Num3;                  case "4":                  case "NUM4":                      return Keyboard.Key.Num4;                  case "5":                  case "NUM5":                      return Keyboard.Key.Num5;                  case "6":                  case "NUM6":                      return Keyboard.Key.Num6;                  case "7":                  case "NUM7":                      return Keyboard.Key.Num7;                  case "8":                  case "NUM8":                      return Keyboard.Key.Num8;                  case "9":                  case "NUM9":                      return Keyboard.Key.Num9;                  case "ESCAPE":                  case "ESC":                      return Keyboard.Key.Escape;                  case "CTRL":                  case "CONTROL":                  case "LCTRL":                  case "LEFTCTRL":                  case "LCONTROL":                  case "LEFTCONTROL":                      return Keyboard.Key.LControl;                  case "SHIFT":                  case "LSHIFT":                  case "LEFTSHIFT":                      return Keyboard.Key.LShift;                  case "ALT":                  case "LALT":                  case "LEFTALT":                      return Keyboard.Key.LAlt;                  case "LSYSTEM":                  case "LEFTSYSTEM":                      return Keyboard.Key.LSystem;                  case "RCTRL":                  case "RIGHTCTRL":                  case "RCONTROL":                  case "RIGHTCONTROL":                      return Keyboard.Key.RControl;                  case "RSHIFT":                  case "RIGHTSHIFT":                      return Keyboard.Key.RShift;                  case "RALT":                  case "RIGHTALT":                      return Keyboard.Key.RAlt;                  case "RSYSTEM":                  case "RIGHTSYSTEM":                      return Keyboard.Key.RSystem;                  case "MENU":                      return Keyboard.Key.Menu;                  case "LBRACKET":                  case "[":                  case "{":                      return Keyboard.Key.LBracket;                  case "RBRACKET":                  case "]":                  case "}":                      return Keyboard.Key.RBracket;                  case "SEMICOLON":                  case ";":                  case ":":                      return Keyboard.Key.SemiColon;                  case "COMMA":                  case "<":                      return Keyboard.Key.Comma;                  case "PERIOD":                  case ">":                  case ".":                      return Keyboard.Key.Period;                  case "QUOTE":                  case "\"":                  case "'":                      return Keyboard.Key.Quote;                  case "SLASH":                  case "?":                  case "/":                  case "QUESTION":                      return Keyboard.Key.Slash;                  case "BACKSLASH":                  case "|":                  case "\\":                      return Keyboard.Key.BackSlash;                  case "TILDE":                  case "~":                  case "`":                      return Keyboard.Key.Tilde;                  case "EQUAL":                  case "PLUS":                  case "=":                      return Keyboard.Key.Equal;                  case "DASH":                  case "MINUS":                  case "_":                  case "-":                      return Keyboard.Key.Dash;                  case "SPACE":                      return Keyboard.Key.Space;                  case "RETURN":                      return Keyboard.Key.Return;                  case "BACK":                  case "BACKSPACE":                      return Keyboard.Key.BackSpace;                  case "TAB":                      return Keyboard.Key.Tab;                  case "PAGEUP":                  case "PGUP":                      return Keyboard.Key.PageUp;                  case "PAGEDOWN":                  case "PGDOWN":                  case "NEXT":                      return Keyboard.Key.PageDown;                  case "END":                      return Keyboard.Key.End;                  case "HOME":                      return Keyboard.Key.Home;                  case "INSERT":                  case "INS":                      return Keyboard.Key.Insert;                  case "DELETE":                  case "DEL":                  case "DECIMAL":                      return Keyboard.Key.Delete;                  case "ADD":                      return Keyboard.Key.Add;                  case "SUBTRACT":                      return Keyboard.Key.Subtract;                  case "MULTIPLY":                      return Keyboard.Key.Multiply;                  case "DIVIDE":                      return Keyboard.Key.Divide;                  case "LEFT":                      return Keyboard.Key.Left;                  case "RIGHT":                      return Keyboard.Key.Right;                  case "UP":                      return Keyboard.Key.Up;                  case "DOWN":                      return Keyboard.Key.Down;                  case "NUMPAD0":                      return Keyboard.Key.Numpad0;                  case "NUMPAD1":                      return Keyboard.Key.Numpad1;                  case "NUMPAD2":                      return Keyboard.Key.Numpad2;                  case "NUMPAD3":                      return Keyboard.Key.Numpad3;                  case "NUMPAD4":                      return Keyboard.Key.Numpad4;                  case "NUMPAD5":                      return Keyboard.Key.Numpad5;                  case "NUMPAD6":                      return Keyboard.Key.Numpad6;                  case "NUMPAD7":                      return Keyboard.Key.Numpad7;                  case "NUMPAD8":                      return Keyboard.Key.Numpad8;                  case "NUMPAD9":                      return Keyboard.Key.Numpad9;                  case "F1":                      return Keyboard.Key.F1;                  case "F2":                      return Keyboard.Key.F2;                  case "F3":                      return Keyboard.Key.F3;                  case "F4":                      return Keyboard.Key.F4;                  case "F5":                      return Keyboard.Key.F5;                  case "F6":                      return Keyboard.Key.F6;                  case "F7":                      return Keyboard.Key.F7;                  case "F8":                      return Keyboard.Key.F8;                  case "F9":                      return Keyboard.Key.F9;                  case "F10":                      return Keyboard.Key.F10;                  case "F11":                      return Keyboard.Key.F11;                  case "F12":                      return Keyboard.Key.F12;                  case "F13":                      return Keyboard.Key.F13;                  case "F14":                      return Keyboard.Key.F14;                  case "F15":                      return Keyboard.Key.F15;                  case "PAUSE":                      return Keyboard.Key.Pause;              }
Missing Default,vimage,Config,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\Config.cs,KeyToString,The following switch statement is missing a default case: switch (key)              {                  case Keyboard.Key.A:  	                return "A";                  case Keyboard.Key.B:  	                return "B";                  case Keyboard.Key.C:  	                return "C";                  case Keyboard.Key.D:  	                return "D";                  case Keyboard.Key.E:  	                return "E";                  case Keyboard.Key.F:  	                return "F";                  case Keyboard.Key.G:  	                return "G";                  case Keyboard.Key.H:  	                return "H";                  case Keyboard.Key.I:  	                return "I";                  case Keyboard.Key.J:  	                return "J";                  case Keyboard.Key.K:  	                return "K";                  case Keyboard.Key.L:  	                return "L";                  case Keyboard.Key.M:  	                return "M";                  case Keyboard.Key.N:  	                return "N";                  case Keyboard.Key.O:  	                return "O";                  case Keyboard.Key.P:  	                return "P";                  case Keyboard.Key.Q:  	                return "Q";                  case Keyboard.Key.R:  	                return "R";                  case Keyboard.Key.S:  	                return "S";                  case Keyboard.Key.T:  	                return "T";                  case Keyboard.Key.U:  	                return "U";                  case Keyboard.Key.V:  	                return "V";                  case Keyboard.Key.W:  	                return "W";                  case Keyboard.Key.X:  	                return "X";                  case Keyboard.Key.Y:  	                return "Y";                  case Keyboard.Key.Z:  	                return "Z";                  case Keyboard.Key.Num0:  	                return "0";                  case Keyboard.Key.Num1:  	                return "1";                  case Keyboard.Key.Num2:  	                return "2";                  case Keyboard.Key.Num3:  	                return "3";                  case Keyboard.Key.Num4:  	                return "4";                  case Keyboard.Key.Num5:  	                return "5";                  case Keyboard.Key.Num6:  	                return "6";                  case Keyboard.Key.Num7:  	                return "7";                  case Keyboard.Key.Num8:  	                return "8";                  case Keyboard.Key.Num9:  	                return "9";                  case Keyboard.Key.Escape:  	                return "ESC";                  case Keyboard.Key.LControl:  	                return "CTRL";                  case Keyboard.Key.LShift:  	                return "SHIFT";                  case Keyboard.Key.LAlt:  	                return "ALT";                  case Keyboard.Key.LSystem:  	                return "SYSTEM";                  case Keyboard.Key.RControl:  	                return "RCTRL";                  case Keyboard.Key.RShift:  	                return "RSHIFT";                  case Keyboard.Key.RAlt:  	                return "RALT";                  case Keyboard.Key.RSystem:  	                return "RSYSTEM";                  case Keyboard.Key.Menu:  	                return "MENU";                  case Keyboard.Key.LBracket:  	                return "[";                  case Keyboard.Key.RBracket:  	                return "]";                  case Keyboard.Key.SemiColon:  	                return ";";                  case Keyboard.Key.Comma:  	                return "<";                  case Keyboard.Key.Period:  	                return ">";                  case Keyboard.Key.Quote:  	                return "\"";                  case Keyboard.Key.Slash:  	                return "/";                  case Keyboard.Key.BackSlash:  	                return "\\";                  case Keyboard.Key.Tilde:  	                return "~";                  case Keyboard.Key.Equal:  	                return "EQUAL";                  case Keyboard.Key.Dash:  	                return "DASH";                  case Keyboard.Key.Space:  	                return "SPACE";                  case Keyboard.Key.Return:  	                return "RETURN";                  case Keyboard.Key.BackSpace:  	                return "BACK";                  case Keyboard.Key.Tab:  	                return "TAB";                  case Keyboard.Key.PageUp:  	                return "PGUP";                  case Keyboard.Key.PageDown:  	                return "PGDOWN";                  case Keyboard.Key.End:  	                return "END";                  case Keyboard.Key.Home:  	                return "HOME";                  case Keyboard.Key.Insert:  	                return "INSERT";                  case Keyboard.Key.Delete:  	                return "DELETE";                  case Keyboard.Key.Add:  	                return "ADD";                  case Keyboard.Key.Subtract:  	                return "SUBTRACT";                  case Keyboard.Key.Multiply:  	                return "MULTIPLY";                  case Keyboard.Key.Divide:  	                return "DIVIDE";                  case Keyboard.Key.Left:  	                return "LEFT";                  case Keyboard.Key.Right:  	                return "RIGHT";                  case Keyboard.Key.Up:  	                return "UP";                  case Keyboard.Key.Down:  	                return "DOWN";                  case Keyboard.Key.Numpad0:  	                return "NUMPAD0";                  case Keyboard.Key.Numpad1:  	                return "NUMPAD1";                  case Keyboard.Key.Numpad2:  	                return "NUMPAD2";                  case Keyboard.Key.Numpad3:  	                return "NUMPAD3";                  case Keyboard.Key.Numpad4:  	                return "NUMPAD4";                  case Keyboard.Key.Numpad5:  	                return "NUMPAD5";                  case Keyboard.Key.Numpad6:  	                return "NUMPAD6";                  case Keyboard.Key.Numpad7:  	                return "NUMPAD7";                  case Keyboard.Key.Numpad8:  	                return "NUMPAD8";                  case Keyboard.Key.Numpad9:  	                return "NUMPAD9";                  case Keyboard.Key.F1:  	                return "F1";                  case Keyboard.Key.F2:  	                return "F2";                  case Keyboard.Key.F3:  	                return "F3";                  case Keyboard.Key.F4:  	                return "F4";                  case Keyboard.Key.F5:  	                return "F5";                  case Keyboard.Key.F6:  	                return "F6";                  case Keyboard.Key.F7:  	                return "F7";                  case Keyboard.Key.F8:  	                return "F8";                  case Keyboard.Key.F9:  	                return "F9";                  case Keyboard.Key.F10:  	                return "F10";                  case Keyboard.Key.F11:  	                return "F11";                  case Keyboard.Key.F12:  	                return "F12";                  case Keyboard.Key.F13:  	                return "F13";                  case Keyboard.Key.F14:  	                return "F14";                  case Keyboard.Key.F15:  	                return "F15";                  case Keyboard.Key.Pause:  	                return "PAUSE";              }
Missing Default,vimage,ContextMenu,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ContextMenu.cs,LoadItemsInto,The following switch statement is missing a default case: switch ((items[i] as dynamic).func)                          {                              case Action.NextImage:                              case Action.PrevImage:                              case Action.Delete:                                  continue;                          }
Missing Default,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,DoAction,The following switch statement is missing a default case: switch (action)              {                  case Action.Close: CloseNextTick = true; return;                  case Action.OpenContextMenu: OpenContextMenu(); return;                  case Action.PrevImage: PrevImage(); return;                  case Action.NextImage: NextImage(); return;                                    case Action.RotateClockwise: RotateImage(Rotation + 90); return;                  case Action.RotateAntiClockwise: RotateImage(Rotation - 90); return;                  case Action.Flip: FlipImage(); return;                  case Action.FitToMonitorHeight: ToggleFitToMonitor(Config.HEIGHT); return;                  case Action.FitToMonitorWidth: ToggleFitToMonitor(Config.WIDTH); return;                  case Action.FitToMonitorAuto: ToggleFitToMonitor(Config.AUTO); return;                  case Action.ZoomIn: Zoom(Math.Min(CurrentZoom + (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MAX)' !ZoomAlt' true); return;                  case Action.ZoomOut: Zoom(Math.Max(CurrentZoom - (ZoomFaster ? (Config.Setting_ZoomSpeedFast / 100f) : (Config.Setting_ZoomSpeed / 100f))' ZOOM_MIN)' !ZoomAlt' true); return;                    case Action.ToggleSmoothing: ToggleSmoothing(); return;                  case Action.ToggleMipmapping: ToggleMipmap(); return;                  case Action.ToggleBackground: ToggleBackground(); return;                  case Action.TransparencyToggle: ToggleImageTransparency(); return;                  case Action.ToggleLock: ToggleLock(); return;                  case Action.ToggleAlwaysOnTop: ToggleAlwaysOnTop(); return;                  case Action.ToggleTitleBar: ToggleTitleBar(); return;                                    case Action.NextFrame: NextFrame(); return;                  case Action.PrevFrame: PrevFrame(); return;                  case Action.PauseAnimation: ToggleAnimation(); return;                                    case Action.OpenSettings: OpenConfig(); return;                  case Action.ResetImage: ResetImage(); return;                  case Action.OpenAtLocation: OpenFileAtLocation(); return;                  case Action.Delete: DeleteFile(); return;                  case Action.Copy: CopyFile(); return;                  case Action.CopyAsImage: CopyAsImage(); return;                  case Action.OpenDuplicateImage: OpenDuplicateWindow(); return;                  case Action.OpenFullDuplicateImage: OpenDuplicateWindow(true); return;                  case Action.RandomImage: RandomImage(); return;                                    case Action.MoveLeft: NextWindowPos.X -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveRight: NextWindowPos.X += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveUp: NextWindowPos.Y -= ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                  case Action.MoveDown: NextWindowPos.Y += ZoomFaster ? Config.Setting_MoveSpeedFast : Config.Setting_MoveSpeed; Window.Position = NextWindowPos; return;                                    case Action.TransparencyInc: AdjustImageTransparency(-1); return;                  case Action.TransparencyDec: AdjustImageTransparency(1); return;                                    case Action.UndoCrop: UndoCrop(); return;                  case Action.ExitAll: ExitAllInstances(); return;                  case Action.RerenderSVG: RenderSVGAtCurrentZoom(); return;                    case Action.VisitWebsite: Process.Start("http://torrunt.net/vimage"); return;                                    case Action.SortName: ChangeSortBy(SortBy.Name); return;                  case Action.SortDate: ChangeSortBy(SortBy.Date); return;                  case Action.SortDateModified: ChangeSortBy(SortBy.DateModified); return;                  case Action.SortDateCreated: ChangeSortBy(SortBy.DateCreated); return;                  case Action.SortSize: ChangeSortBy(SortBy.Size); return;                  case Action.SortAscending: ChangeSortByDirection(SortDirection.Ascending); return;                  case Action.SortDescending: ChangeSortByDirection(SortDirection.Descending); return;              }
Missing Default,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,GetFolderContents,The following switch statement is missing a default case: switch (SortImagesBy)              {                  case SortBy.Name:                  {                      FolderContents = contents.ToList();                      FolderContents.Sort(new WindowsFileSorting.NaturalStringComparer());                      if (SortImagesByDir == SortDirection.Descending)                          FolderContents.Reverse();                      break;                  }                  case SortBy.Date:                  {                      if (SortImagesByDir == SortDirection.Ascending)                          FolderContents.AddRange(contents.OrderBy(d => ImageViewerUtils.GetDateValueFromEXIF(d)));                      else                          FolderContents.AddRange(contents.OrderByDescending(d => ImageViewerUtils.GetDateValueFromEXIF(d)));                      break;                  }                  case SortBy.DateModified:                  {                      if (SortImagesByDir == SortDirection.Ascending)                          FolderContents.AddRange(contents.OrderBy(d => new FileInfo(d).LastWriteTime));                      else                          FolderContents.AddRange(contents.OrderByDescending(d => new FileInfo(d).LastWriteTime));                      break;                  }                  case SortBy.DateCreated:                  {                      if (SortImagesByDir == SortDirection.Ascending)                          FolderContents.AddRange(contents.OrderBy(d => new FileInfo(d).CreationTime));                      else                          FolderContents.AddRange(contents.OrderByDescending(d => new FileInfo(d).CreationTime));                      break;                  }                  case SortBy.Size:                  {                      if (SortImagesByDir == SortDirection.Ascending)                          FolderContents.AddRange(contents.OrderBy(d => new FileInfo(d).Length));                      else                          FolderContents.AddRange(contents.OrderByDescending(d => new FileInfo(d).Length));                      break;                  }              }
Missing Default,vimage,ImageViewer,D:\research\architectureSmells\repos1\Torrunt_vimage\vimage\Source\ImageViewer.cs,ApplyArguments,The following switch statement is missing a default case: switch (args[i])                  {                      case "-x":                          if (val != -1)                          {                              NextWindowPos.X = val;                              i++;                          }                          break;                      case "-y":                          if (val != -1)                          {                              NextWindowPos.Y = val;                              i++;                          }                          break;                      case "-sizeX":                          if (val != -1)                          {                              Size.X = (uint)val;                              i++;                          }                          break;                      case "-sizeY":                          if (val != -1)                          {                              Size.Y = (uint)val;                              i++;                          }                          break;                      case "-centerX":                          valf = -1;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = -1;                          if (valf != -1)                          {                              viewCenter.X = valf;                              Updated = true;                              i++;                          }                          break;                      case "-centerY":                          valf = -1;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = -1;                          if (valf != -1)                          {                              viewCenter.Y = valf;                              Updated = true;                              i++;                          }                          break;                      case "-zoom":                          valf = 0;                          if (!float.TryParse(args[i + 1]' out valf))                              valf = 0;                          if (valf != 0)                              Zoom(valf' true);                          i++;                          break;                      case "-rotation":                          if (val != -1)                          {                              if (Rotation != val)                                  RotateImage(val);                              i++;                          }                          break;                      case "-color":                      case "-colour":                          System.Drawing.Color colour = System.Drawing.ColorTranslator.FromHtml(args[i + 1]);                          ImageColor = new Color(colour.R' colour.G' colour.B' colour.A);                          Image.Color = ImageColor;                          Updated = true;                          i++;                          break;                      case "-alpha":                          if (val != -1)                          {                              if (val >= 0 && val <= 255)                                  SetImageTransparency((byte)val);                              i++;                          }                          break;                        case "-frame":                          if (val != -1)                          {                              if (Image is AnimatedImage)                              {                                  (Image as AnimatedImage).SetFrame(val);                                  Updated = true;                              }                                i++;                          }                          break;                      case "-next": NextImage(); break;                      case "-prev": PrevImage(); break;                      case "-random": RandomImage(); break;                      case "-reset": ResetImage(); break;                      case "-clearMemory": Graphics.ClearMemory(Image' File); break;                      case "-rerenderSVG": RenderSVGAtCurrentZoom(); break;                        case "-fitToMonitorHeight": ToggleFitToMonitor(Config.HEIGHT); break;                      case "-fitToMonitorWidth": ToggleFitToMonitor(Config.WIDTH); break;                      case "-fitToMonitorAuto": ToggleFitToMonitor(Config.AUTO); break;                        case "-toggleSync": toggleSync = 0; break;                        case "-flip":                          if (val == 0 || val == 1)                          {                              FlipImage(val);                              i++;                          }                          else                              t = FlipImage(toggleSyncVal);                          break;                      case "-smoothing":                          if (val == 0 || val == 1)                          {                              ToggleSmoothing(val);                              i++;                          }                          else                              t = ToggleSmoothing(toggleSyncVal);                          break;                      case "-mipmap":                          if (val == 0 || val == 1)                          {                              ToggleMipmap(val);                              i++;                          }                          else                              t = ToggleMipmap(toggleSyncVal);                          break;                      case "-background":                          if (val == 0 || val == 1)                          {                              ToggleBackground(val);                              i++;                          }                          else                              t = ToggleBackground(toggleSyncVal);                          break;                      case "-lock":                          if (val == 0 || val == 1)                          {                              ToggleLock(val);                              i++;                          }                          else                              t = ToggleLock(toggleSyncVal);                          break;                      case "-alwaysOnTop":                          if (val == 0 || val == 1)                          {                              ToggleAlwaysOnTop(val);                              i++;                          }                          else                              t = ToggleAlwaysOnTop(toggleSyncVal);                          break;                      case "-clickThrough":                          if (val == 0 || val == 1)                          {                              ToggleClickThroughAble(val);                              i++;                          }                          else                              t = ToggleClickThroughAble(toggleSyncVal);                          break;                      case "-titleBar":                          if (val == 0 || val == 1)                          {                              ToggleTitleBar(val);                              i++;                          }                          else                              t = ToggleTitleBar(toggleSyncVal);                          break;                      case "-taskbarIcon":                          if (val == 0 || val == 1)                          {                              ToggleTaskBarIconVisible(val);                              i++;                          }                          else                              t = ToggleTaskBarIconVisible(toggleSyncVal);                          break;                      case "-animation":                          if (val == 0 || val == 1)                          {                              ToggleAnimation(val);                              i++;                          }                          else                              t = ToggleAnimation(toggleSyncVal);                          break;                      case "-defaultTransparency":                          if (val == 0 || val == 1)                          {                              ToggleImageTransparency(val);                              i++;                          }                          else                              t = ToggleImageTransparency(toggleSyncVal);                          break;                  }
