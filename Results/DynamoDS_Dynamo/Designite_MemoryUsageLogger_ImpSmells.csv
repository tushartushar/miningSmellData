Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Dynamo.Utils,MemoryUsageLogger,C:\repos\DynamoDS_Dynamo\src\Tools\MemoryUsageLogger\Program.cs,Main,The following statement contains a magic number: using (ManagedMemoryCounter counter = new ManagedMemoryCounter(process))              {                  Stopwatch timer = Stopwatch.StartNew();                   timer.Start();                    while (!counter.HasProcessExited())                  {                      var bytesInHeap = counter.BytesInAllHeaps / 1024;                      maxNetMemory = Math.Max(maxNetMemory' bytesInHeap);                        var privateWorkingSet = counter.PrivateWorkingSet / 1024;                      maxPrivateWorkingSet = Math.Max(maxPrivateWorkingSet' privateWorkingSet);                      Thread.Sleep(100);                  }                    timer.Stop();                  Console.WriteLine("{0}'{1}'{2}"' timer.ElapsedMilliseconds' maxNetMemory' maxPrivateWorkingSet);              }
Magic Number,Dynamo.Utils,MemoryUsageLogger,C:\repos\DynamoDS_Dynamo\src\Tools\MemoryUsageLogger\Program.cs,Main,The following statement contains a magic number: using (ManagedMemoryCounter counter = new ManagedMemoryCounter(process))              {                  Stopwatch timer = Stopwatch.StartNew();                   timer.Start();                    while (!counter.HasProcessExited())                  {                      var bytesInHeap = counter.BytesInAllHeaps / 1024;                      maxNetMemory = Math.Max(maxNetMemory' bytesInHeap);                        var privateWorkingSet = counter.PrivateWorkingSet / 1024;                      maxPrivateWorkingSet = Math.Max(maxPrivateWorkingSet' privateWorkingSet);                      Thread.Sleep(100);                  }                    timer.Stop();                  Console.WriteLine("{0}'{1}'{2}"' timer.ElapsedMilliseconds' maxNetMemory' maxPrivateWorkingSet);              }
Magic Number,Dynamo.Utils,MemoryUsageLogger,C:\repos\DynamoDS_Dynamo\src\Tools\MemoryUsageLogger\Program.cs,Main,The following statement contains a magic number: using (ManagedMemoryCounter counter = new ManagedMemoryCounter(process))              {                  Stopwatch timer = Stopwatch.StartNew();                   timer.Start();                    while (!counter.HasProcessExited())                  {                      var bytesInHeap = counter.BytesInAllHeaps / 1024;                      maxNetMemory = Math.Max(maxNetMemory' bytesInHeap);                        var privateWorkingSet = counter.PrivateWorkingSet / 1024;                      maxPrivateWorkingSet = Math.Max(maxPrivateWorkingSet' privateWorkingSet);                      Thread.Sleep(100);                  }                    timer.Stop();                  Console.WriteLine("{0}'{1}'{2}"' timer.ElapsedMilliseconds' maxNetMemory' maxPrivateWorkingSet);              }
