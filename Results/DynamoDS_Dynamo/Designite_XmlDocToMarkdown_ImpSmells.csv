Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XmlDocToMarkdown,MarkDownExtensions,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\MarkDownExtensions.cs,ReOrderXMLElements,Cyclomatic complexity of the method is 8
Complex Method,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,Cyclomatic complexity of the method is 8
Magic Number,XmlDocToMarkdown,Helper,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\Helper.cs,HandleConstructors,The following statement contains a magic number: try              {                  foreach (var constructor in constructors)                  {                      int pos = 3; //this is the default position of ctor.                      var text = constructor.Attribute("name").Value;                      var name = text.Split('.').ToArray();                      //replace the string "ctor" with actual method name                      string ctorName =  name.First(x => x.Contains("ctor"));                      if (!String.IsNullOrEmpty(ctorName))                      {                          pos = Array.IndexOf(name' ctorName);                      }                      text = new StringBuilder(text).Replace("#ctor"' name[pos - 1]).ToString();                      constructor.Attribute("name").Value = text;                  }              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);              }
Magic Number,XmlDocToMarkdown,MarkDownLibrary,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\MarkDownLibrary.cs,ConvertGenericParameterName,The following statement contains a magic number: for (int i = 0; i < temp.Count(); i++)              {                  switch (i)                  {                      case 0:                          returnText = temp[0] + toReplace;                          break;                      case 1:                          if (temp[1].Contains("."))                          {                              returnText = returnText + "." + temp[1].Split('.')[1];                          }                          break;                      case 2:                          returnText = returnText + "(" + temp[2] + ")";                          break;                  }              }
Magic Number,XmlDocToMarkdown,MarkDownLibrary,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\MarkDownLibrary.cs,ConvertGenericParameterName,The following statement contains a magic number: for (int i = 0; i < temp.Count(); i++)              {                  switch (i)                  {                      case 0:                          returnText = temp[0] + toReplace;                          break;                      case 1:                          if (temp[1].Contains("."))                          {                              returnText = returnText + "." + temp[1].Split('.')[1];                          }                          break;                      case 2:                          returnText = returnText + "(" + temp[2] + ")";                          break;                  }              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following statement contains a magic number: if (e.NodeType == XmlNodeType.Element)              {                  var el = (XElement)e;                  name = el.Name.LocalName;                  if (name == "member")                  {                      switch (el.Attribute("name").Value[0])                      {                          case 'F': name = "field"; break;                          case 'P': name = "property"; break;                          case 'T': name = "type"; break;                          case 'E': name = "event"; break;                          case 'M': name = "method"; break;                          default: name = "none"; break;                      }                  }                  if (name == "see")                  {                      var anchor = el.Attribute("cref").Value.StartsWith("!:#");                      name = anchor ? "seeAnchor" : "seePage";                  }                    if (!methods.ContainsKey(name))                  {                      return "";                  }                    var vals = methods[name](el).ToArray();                    string str = "";                  switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }                    return str;              }
Magic Number,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToCodeBlock,The following statement contains a magic number: var blank = lines[0].TakeWhile(x => x == ' ').Count() - 4;
Missing Default,XmlDocToMarkdown,MarkDownExtensions,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\MarkDownExtensions.cs,MarkDownFormat,The following switch statement is missing a default case: switch (format)                  {                      case "Bold":                          //string can be Test or Test | stability.                          var splits = name.Split('|');                          if (splits.Count() > 1)                          {                              returnString = "**" + splits[0].Trim() + "**";                              returnString = returnString + " | " + splits[1];                          }                          else                          {                              returnString = "**" + name + "**";                          }                          break;                        case "Italic":                          if (!string.IsNullOrEmpty(name))                          {                              returnString = "*" + name.Trim() + "*";                          }                          break;                    }
Missing Default,XmlDocToMarkdown,MarkDownLibrary,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\MarkDownLibrary.cs,ConvertGenericParameterName,The following switch statement is missing a default case: switch (i)                  {                      case 0:                          returnText = temp[0] + toReplace;                          break;                      case 1:                          if (temp[1].Contains("."))                          {                              returnText = returnText + "." + temp[1].Split('.')[1];                          }                          break;                      case 2:                          returnText = returnText + "(" + temp[2] + ")";                          break;                  }
Missing Default,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following switch statement is missing a default case: switch (vals.Length)                  {                      case 1:                          str = string.Format(templates[name]' vals[0]);                          if (name.Equals("returns") && (e.Parent != null))                          {                              switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }                          }                          break;                      case 2:                          //return empty row for TypeParam.                          str = (string) vals[0] == "" ? "| &nbsp;\n" : string.Format(templates[name]' vals[0]' vals[1]);                            if (name.Equals("param"))                          {                              if (String.IsNullOrEmpty((string)vals[1]))                              {                                  Console.WriteLine(e.Parent.FirstAttribute.Value);                              }                          }                          break;                      case 3: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]); break;                      case 4: str = string.Format(templates[name]' vals[0]' vals[1]' vals[2]' vals[3]); break;                  }
Missing Default,XmlDocToMarkdown,XmlToMarkdown,C:\repos\DynamoDS_Dynamo\tools\XmlDocToMarkdown\XmlDocToMarkdown\XmlMarkDown.cs,ToMarkDown,The following switch statement is missing a default case: switch((string)vals[0])                              {                                  case "":                                  case "none":                                      Console.WriteLine(e.Parent.FirstAttribute.Value);                                      break;                              }
