Implementation smell,Namespace,Class,File,Method,Description
Long Method,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The method has 103 lines of code.
Long Method,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The method has 103 lines of code.
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_ReadArea,The method has 7 parameters. Parameters: Client' Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,ReadArea,The method has 6 parameters. Parameters: Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_WriteArea,The method has 7 parameters. Parameters: Client' Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,WriteArea,The method has 6 parameters. Parameters: Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_DBRead,The method has 5 parameters. Parameters: Client' DBNumber' Start' Size' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_DBWrite,The method has 5 parameters. Parameters: Client' DBNumber' Start' Size' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_Upload,The method has 5 parameters. Parameters: Client' BlockType' BlockNum' UsrData' Size
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_FullUpload,The method has 5 parameters. Parameters: Client' BlockType' BlockNum' UsrData' Size
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_ReadSZL,The method has 5 parameters. Parameters: Client' ID' Index' Data' Size
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsReadArea,The method has 7 parameters. Parameters: Client' Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,AsReadArea,The method has 6 parameters. Parameters: Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsWriteArea,The method has 7 parameters. Parameters: Client' Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,AsWriteArea,The method has 6 parameters. Parameters: Area' DBNumber' Start' Amount' WordLen' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsDBRead,The method has 5 parameters. Parameters: Client' DBNumber' Start' Size' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsDBWrite,The method has 5 parameters. Parameters: Client' DBNumber' Start' Size' Buffer
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsReadSZL,The method has 5 parameters. Parameters: Client' ID' Index' Data' Size
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsUpload,The method has 5 parameters. Parameters: Client' BlockType' BlockNum' UsrData' Size
Long Parameter List,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Cli_AsFullUpload,The method has 5 parameters. Parameters: Client' BlockType' BlockNum' UsrData' Size
Long Parameter List,Snap7,S7Server,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Srv_RegisterArea,The method has 5 parameters. Parameters: Server' AreaCode' Index' pUsrData' Size
Long Parameter List,Snap7,S7Partner,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Par_StartTo,The method has 5 parameters. Parameters: Partner' LocalAddress' RemoteAddress' LocalTSAP' RemoteTSAP
Long Parameter List,Snap7,S7Partner,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Par_BRecv,The method has 5 parameters. Parameters: Partner' R_ID' Buffer' Size' Timeout
Long Parameter List,Snap7,S7Partner,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Par_CheckAsBRecvCompletion,The method has 5 parameters. Parameters: Partner' opResult' R_ID' Buffer' Size
Long Parameter List,Snap7,S7Partner,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,Par_GetStats,The method has 5 parameters. Parameters: Partner' BytesSent' BytesRecv' SendErrors' RecvErrors
Long Statement,S7.Net.UnitTest,ProtocolUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ProtocolTests.cs,TPKT_Read,The length of the statement  "            var m = new MemoryStream(StringToByteArray("0300002902f0803203000000010002001400000401ff0400807710000100000103000000033f8ccccd")); " is 130.
Long Statement,S7.Net.UnitTest,ProtocolUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ProtocolTests.cs,COTP_ReadTSDU,The length of the statement  "            var m = new MemoryStream(StringToByteArray("0300000702f0000300000702f0000300002102f080320700000400000800080001120411440100ff09000400000000")); " is 142.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsNullIfPlcIsNotConnected,The length of the statement  "                Assert.IsFalse(notConnectedPlc.IsConnected' "Before executing this test' the plc must be connected. Check constructor."); " is 121.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The length of the statement  "            Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3)); " is 124.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteDouble,The length of the statement  "            Assert.AreEqual(test_value' test_value2' 0.01' "Compare Write/Read"); //Need delta here because S7 only has 32 bit reals " is 120.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T15_ReadClassWithGenericThrowsIfPlcIsNotConnected,The length of the statement  "                Assert.IsFalse(notConnectedPlc.IsConnected' "Before executing this test' the plc must be connected. Check constructor."); " is 121.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The length of the statement  "            Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3)); " is 124.
Long Statement,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T26_ReadWriteDouble,The length of the statement  "            Assert.AreEqual(test_value' test_value2' 0.01' "Compare Write/Read"); //Need delta here because S7 only has 32 bit reals " is 120.
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(16' 0' 16' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7200' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(16' 0' 16' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7200' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_300,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7300' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_300,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 1)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7300' 0' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_300,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7300' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_300,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7300' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_400,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7400' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_400,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 1)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7400' 0' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_400,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7400' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_400,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S7400' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71200' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 1)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71200' 0' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71200' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1200,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(1' 0' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71200' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1500,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(0x10' 0x2' 3' 0)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71500' 0' 0));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1500,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(0x10' 0x2' 3' 1)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71500' 0' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1500,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(0x10' 0x2' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71500' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,Test_ConnectionRequest_S7_1500,The following statement contains a magic number: CollectionAssert.AreEqual(MakeConnectionRequest(0x10' 0x2' 3' 33)'                  ConnectionRequest.GetCOTPConnectionRequest(CpuType.S71500' 1' 1));
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConnectionRequestTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConnectionRequestTest.cs,MakeConnectionRequest,The following statement contains a magic number: return new byte[]              {                  3' 0' 0' 22' //TPKT                  17' //COTP Header Length                  224' //Connect Request                   0' 0' //Destination Reference                  0' 46' //Source Reference                  0' //Flags                  193' //Parameter Code (src-tasp)                  2' //Parameter Length                  sourceTsap1' sourceTsap2' //Source TASP                  194' //Parameter Code (dst-tasp)                  2' //Parameter Length                  destTsap1' destTsap2' //Destination TASP                  192' //Parameter Code (tpdu-size)                  1' //Parameter Length                  10 //TPDU Size (2^11 = 2048)              };
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: byte dummyByte = 5;
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsTrue(dummyByte.SelectBit(2));
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsFalse(dummyByte.SelectBit(3));
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsFalse(dummyByte.SelectBit(4));
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsFalse(dummyByte.SelectBit(5));
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsFalse(dummyByte.SelectBit(6));
Magic Number,S7.Net.UnitTest,ConvertersUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ConvertersUnitTest.cs,T00_TestSelectBit,The following statement contains a magic number: Assert.IsFalse(dummyByte.SelectBit(7));
Magic Number,S7.Net.UnitTest,ProtocolUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ProtocolTests.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,S7.Net.UnitTest,ProtocolUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ProtocolTests.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,S7.Net.UnitTest,ProtocolUnitTest,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\ProtocolTests.cs,StringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16Variable,The following statement contains a magic number: ushort val = 40000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16Variable,The following statement contains a magic number: short value = -100;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt32Variable,The following statement contains a magic number: int val = 1000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt32Variable,The following statement contains a magic number: int value = -60000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadRealVariables,The following statement contains a magic number: double val = 35.68729;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadRealVariables,The following statement contains a magic number: Assert.AreEqual(val' Math.Round(result' 5));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadRealVariables,The following statement contains a magic number: float val2 = 1234567;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadRealVariables,The following statement contains a magic number: float val3 = 12.34567f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteClass,The following statement contains a magic number: Assert.AreEqual(tc.RealVariableDouble' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteNestedClass,The following statement contains a magic number: TestClassWithNestedClass tc = new TestClassWithNestedClass              {                  BitVariable00 = true'                  BitVariable01 = new TestClassInnerWithBool { BitVariable00 = true }'                  ByteVariable02 = new TestClassInnerWithByte { ByteVariable00 = 128 }'                  BitVariable03 = true'                  ShortVariable04 = new TestClassInnerWithShort { ShortVarialbe00 = -15000 }              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteNestedClass,The following statement contains a magic number: TestClassWithNestedClass tc = new TestClassWithNestedClass              {                  BitVariable00 = true'                  BitVariable01 = new TestClassInnerWithBool { BitVariable00 = true }'                  ByteVariable02 = new TestClassInnerWithByte { ByteVariable00 = 128 }'                  BitVariable03 = true'                  ShortVariable04 = new TestClassInnerWithShort { ShortVarialbe00 = -15000 }              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: TestStruct tc = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: TestStruct tc = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: TestStruct tc = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: TestStruct tc = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: TestStruct tc = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteStruct,The following statement contains a magic number: Assert.AreEqual(tc.RealVariableDouble' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongStruct,The following statement contains a magic number: TestLongStruct tc = new TestLongStruct              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadAndWriteLongClass,The following statement contains a magic number: TestLongClass tc = new TestLongClass              {                  IntVariable0 = 0'                  IntVariable1 = 1'                  IntVariable10 = 10'                  IntVariable11 = 11'                  IntVariable20 = 20'                  IntVariable21 = 21'                  IntVariable30 = 30'                  IntVariable31 = 31'                  IntVariable40 = 40'                  IntVariable41 = 41'                  IntVariable50 = 50'                  IntVariable51 = 51'                  IntVariable60 = 60'                  IntVariable61 = 61'                  IntVariable70 = 70'                  IntVariable71 = 71'                  IntVariable80 = 80'                  IntVariable81 = 81'                  IntVariable90 = 90'                  IntVariable91 = 91'                  IntVariable100 = 100'                  IntVariable101 = 101'                  IntVariable110 = 200'                  IntVariable111 = 201              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16VariableAddress8192,The following statement contains a magic number: ushort val = 8192;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16VariableAddress8192,The following statement contains a magic number: short value = -8192;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16VariableAddress16384,The following statement contains a magic number: ushort val = 16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_WriteAndReadInt16VariableAddress16384,The following statement contains a magic number: short value = -16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: ushort val1 = 16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: ushort val3 = 129;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val2' dataItemsRes[2].Value);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val3' dataItemsRes[3].Value);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val4[0]' dataItemsRes[4].Value);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val4[0]' ((byte[])dataItemsRes[5].Value)[0]);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val4[1]' ((byte[])dataItemsRes[5].Value)[1]);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(val6' dataItemsRes[6].Value);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: TestClassWithPrivateSetters tc = new TestClassWithPrivateSetters              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: TestClassWithPrivateSetters tc = new TestClassWithPrivateSetters              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: TestClassWithPrivateSetters tc = new TestClassWithPrivateSetters              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: TestClassWithPrivateSetters tc = new TestClassWithPrivateSetters              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: TestClassWithPrivateSetters tc = new TestClassWithPrivateSetters              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: Assert.AreEqual(tc.RealVariableDouble' tc2.RealVariableDouble' 0.1);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2.RealVariableDouble' 3)' Math.Round(tc2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2.RealVariableDouble' 3)' Math.Round(tc2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: Assert.AreEqual(6' Types.Class.GetClassSize(new TestClassWithNestedClass()));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: tc.ByteVariable02.ByteVariable00 = 128;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: tc.ShortVariable04.ShortVarialbe00 = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: TestStruct ts = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: TestStruct ts = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: TestStruct ts = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: TestStruct ts = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: TestStruct ts = new TestStruct              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(ts2.RealVariableDouble' 3)' Math.Round(ts2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(ts2.RealVariableDouble' 3)' Math.Round(ts2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: TestClass tc = new TestClass              {                  BitVariable00 = true'                  BitVariable10 = true'                  DIntVariable = -100000'                  IntVariable = -15000'                  RealVariableDouble = -154.789'                  RealVariableFloat = -154.789f'                  DWordVariable = 850              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteDouble,The following statement contains a magic number: double test_value = 55.66;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteDouble,The following statement contains a magic number: Assert.AreEqual(test_value' test_value2' 0.01' "Compare Write/Read");
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteSingle,The following statement contains a magic number: float test_value = 55.6632f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteBytesMany,The following statement contains a magic number: var count = 2000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteBytesMany,The following statement contains a magic number: dataItems.Add((byte)(i % 256));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteBytesMany,The following statement contains a magic number: await plc.WriteBytesAsync(DataType.DataBlock' 2' 0' dataItems.ToArray());
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteBytesMany,The following statement contains a magic number: var res = await plc.ReadBytesAsync(DataType.DataBlock' 2' 0' count);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,Test_Async_ReadWriteBytesMany,The following statement contains a magic number: Assert.AreEqual(x % 256' res[x]' string.Format("Bit {0} failed"' x));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,S7NetTests,The following statement contains a magic number: plc = new Plc(CpuType.S7300' "127.0.0.1"' 0' 2);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T01_WriteAndReadInt16Variable,The following statement contains a magic number: ushort val = 40000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T01_WriteAndReadInt16Variable,The following statement contains a magic number: short value = -100;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T02_WriteAndReadInt32Variable,The following statement contains a magic number: uint val = 1000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T02_WriteAndReadInt32Variable,The following statement contains a magic number: int value = -60000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T03_WriteAndReadRealVariables,The following statement contains a magic number: double val = 35.68729;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T03_WriteAndReadRealVariables,The following statement contains a magic number: Assert.AreEqual(val' Math.Round(result' 5));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T03_WriteAndReadRealVariables,The following statement contains a magic number: float val2 = 1234567;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T03_WriteAndReadRealVariables,The following statement contains a magic number: float val3 = 12.34567f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc.RealVariableDouble' 3)' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T04_ReadAndWriteClass,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc.RealVariableDouble' 3)' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T05_ReadAndWriteStruct,The following statement contains a magic number: Assert.AreEqual(tc.RealVariableDouble' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable10 = 10;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable11 = 11;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable20 = 20;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable21 = 21;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable30 = 30;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable31 = 31;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable40 = 40;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable41 = 41;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable50 = 50;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable51 = 51;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable60 = 60;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable61 = 61;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable70 = 70;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable71 = 71;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable80 = 80;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable81 = 81;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable90 = 90;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable91 = 91;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable100 = 100;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable101 = 101;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable110 = 200;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T06_ReadAndWriteLongStruct,The following statement contains a magic number: tc.IntVariable111 = 201;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable10 = 10;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable11 = 11;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable20 = 20;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable21 = 21;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable30 = 30;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable31 = 31;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable40 = 40;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable41 = 41;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable50 = 50;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable51 = 51;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable60 = 60;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable61 = 61;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable70 = 70;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable71 = 71;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable80 = 80;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable81 = 81;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable90 = 90;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable91 = 91;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable100 = 100;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable101 = 101;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable110 = 200;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T07_ReadAndWriteLongClass,The following statement contains a magic number: tc.IntVariable111 = 201;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T08_WriteAndReadInt16VariableAddress8192,The following statement contains a magic number: ushort val = 8192;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T08_WriteAndReadInt16VariableAddress8192,The following statement contains a magic number: short value = -8192;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T09_WriteAndReadInt16VariableAddress16384,The following statement contains a magic number: ushort val = 16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T09_WriteAndReadInt16VariableAddress16384,The following statement contains a magic number: short value = -16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: ushort val1 = 16384;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: ushort val3 = 129;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: var dataItems = new List<DataItem>()              {                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 0'                      BitAdr = 5'                      VarType = VarType.Bit                  }                  'new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      VarType = VarType.Word                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 8192'                      BitAdr = 7'                      VarType = VarType.Bit                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16'                      VarType = VarType.Word                  }'                  // single byte                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  // multiple bytes                  new DataItem                  {                      Count = 2'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 2048'                      VarType = VarType.Byte                  }'                  new DataItem                  {                      Count = 1'                      DataType = DataType.DataBlock'                      DB = 2'                      StartByteAdr = 16384'                      BitAdr = 6'                      VarType = VarType.Bit                  }'              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(dataItems[2].Value' val2);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(dataItems[3].Value' val3);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(dataItems[4].Value' val4[0]);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(((byte[])dataItems[5].Value)[0]' val4[0]);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(((byte[])dataItems[5].Value)[1]' val4[1]);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T10_ReadMultipleBytes,The following statement contains a magic number: Assert.AreEqual(dataItems[6].Value' val6);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc.RealVariableDouble' 3)' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T12_ReadClassIgnoresNonPublicSetters,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc.RealVariableDouble' 3)' Math.Round(tc2.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2.RealVariableDouble' 3)' Math.Round(tc2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T14_ReadClassWithGenericReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2.RealVariableDouble' 3)' Math.Round(tc2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T16_ReadClassWithGenericAndClassFactoryReturnsSameResultAsReadClassWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(tc2Generic.RealVariableDouble' 3)' Math.Round(tc2GenericWithClassFactory.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T31_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: Assert.AreEqual(6' Types.Class.GetClassSize(new TestClassWithNestedClass()));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T31_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: tc.ByteVariable02.ByteVariable00 = 128;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T31_ReadClassWithNestedClassAfterBit,The following statement contains a magic number: tc.ShortVariable04.ShortVarialbe00 = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T32_ReadAndWriteNestedClass,The following statement contains a magic number: TestClassWithNestedClass tc = new TestClassWithNestedClass              {                  BitVariable00 = true'                  BitVariable01 = new TestClassInnerWithBool { BitVariable00 = true }'                  ByteVariable02 = new TestClassInnerWithByte { ByteVariable00 = 128 }'                  BitVariable03 = true'                  ShortVariable04 = new TestClassInnerWithShort { ShortVarialbe00 = -15000 }              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T32_ReadAndWriteNestedClass,The following statement contains a magic number: TestClassWithNestedClass tc = new TestClassWithNestedClass              {                  BitVariable00 = true'                  BitVariable01 = new TestClassInnerWithBool { BitVariable00 = true }'                  ByteVariable02 = new TestClassInnerWithByte { ByteVariable00 = 128 }'                  BitVariable03 = true'                  ShortVariable04 = new TestClassInnerWithShort { ShortVarialbe00 = -15000 }              };
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: ts.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: ts.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: ts.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: ts.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: ts.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(ts2.RealVariableDouble' 3)' Math.Round(ts2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T19_ReadStructWithGenericReturnsSameResultAsReadStructWithoutGeneric,The following statement contains a magic number: Assert.AreEqual(Math.Round(ts2.RealVariableDouble' 3)' Math.Round(ts2Generic.RealVariableDouble' 3));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T21_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: tc.DIntVariable = -100000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T21_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: tc.IntVariable = -15000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T21_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: tc.RealVariableDouble = -154.789;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T21_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: tc.RealVariableFloat = -154.789f;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T21_ReadClassReturnsNumberOfReadBytesFromThePlc,The following statement contains a magic number: tc.DWordVariable = 850;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T24_IsAvailableReturnsFalseIfIPAddressIsNotReachable,The following statement contains a magic number: var unreachablePlc = new Plc(CpuType.S7300' "255.255.255.255"' 0' 2);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T25_IsAvailableReturnsTrueIfIPAddressIsReachable,The following statement contains a magic number: var reachablePlc = new Plc(CpuType.S7300' "127.0.0.1"' 0' 2);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T26_ReadWriteDouble,The following statement contains a magic number: double test_value = 55.66;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T26_ReadWriteDouble,The following statement contains a magic number: Assert.AreEqual(test_value' test_value2' 0.01' "Compare Write/Read");
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: var count = 2000;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: dataItems.Add((byte)(i % 256));
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: plc.WriteBytes(DataType.DataBlock' 2' 0' dataItems.ToArray());
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: var res = plc.ReadBytes(DataType.DataBlock' 2' 0' count);
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: Assert.AreEqual(x % 256' res[x]' $"Mismatch at offset {x}' expected {x % 256}' actual {res[x]}.");
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T27_ReadWriteBytesMany,The following statement contains a magic number: Assert.AreEqual(x % 256' res[x]' $"Mismatch at offset {x}' expected {x % 256}' actual {res[x]}.");
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T29_Read_Write_ThrowsWhenPlcIsNotReachable,The following statement contains a magic number: double test_value = 55.66;
Magic Number,S7.Net.UnitTest,S7NetTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\S7NetTestsAsync.cs,T30_ReadWriteSingle,The following statement contains a magic number: float test_value = 55.6632f;
Magic Number,S7.Net.UnitTest.Helpers,S7TestServer,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Helpers\S7TestServer.cs,Start,The following statement contains a magic number: Server.RegisterArea(S7Server.srvAreaDB' 2' DB2' DB2.Length);
Magic Number,S7.Net.UnitTest.Helpers,S7TestServer,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Helpers\S7TestServer.cs,Start,The following statement contains a magic number: Server.RegisterArea(S7Server.srvAreaDB' 3' DB3' DB3.Length);
Magic Number,S7.Net.UnitTest.Helpers,S7TestServer,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Helpers\S7TestServer.cs,Start,The following statement contains a magic number: Server.RegisterArea(S7Server.srvAreaDB' 4' DB4' DB4.Length);
Magic Number,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,GetPlcDateTime,The following statement contains a magic number: DateTime PlcDT = new DateTime(tm.tm_year+1900' tm.tm_mon+1' tm.tm_mday' tm.tm_hour' tm.tm_min' tm.tm_sec);
Magic Number,Snap7,S7Client,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,SetPlcDateTime,The following statement contains a magic number: tm.tm_year = DT.Year - 1900;
Magic Number,Snap7,S7Server,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\Snap7\snap7.net.cs,EvtTimeToDateTime,The following statement contains a magic number: DateTime UnixStartEpoch = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnLessThan8Bytes,The following statement contains a magic number: Types.DateTime.FromByteArray(new byte[7]);
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnMoreTHan8Bytes,The following statement contains a magic number: Types.DateTime.FromByteArray(new byte[9]);
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnZeroDay,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(2' 0x00));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnTooLargeDay,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(2' 0x32));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidHour,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(3' 0x24));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidMinute,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(4' 0x60));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidSecond,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(5' 0x60));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidFirstTwoMillisecondDigits,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(6' 0xa0));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidThirdMillisecondDigit,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 10 << 4));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidThirdMillisecondDigit,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 10 << 4));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnInvalidThirdMillisecondDigit,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 10 << 4));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnZeroDayOfWeek,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 0));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnTooLargeDayOfWeek,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 8));
Magic Number,S7.Net.UnitTest.TypeTests,FromByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnTooLargeDayOfWeek,The following statement contains a magic number: Types.DateTime.FromByteArray(MutateSample(7' 8));
Magic Number,S7.Net.UnitTest.TypeTests,ToByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnTimeBeforeSpecMinimum,The following statement contains a magic number: Types.DateTime.ToByteArray(new DateTime(1970' 1' 1));
Magic Number,S7.Net.UnitTest.TypeTests,ToByteArray,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\DateTimeTests.cs,ThrowsOnTimeAfterSpecMaximum,The following statement contains a magic number: Types.DateTime.ToByteArray(new DateTime(2090' 1' 1));
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,ReadAbc,The following statement contains a magic number: AssertFromByteArrayEquals("Abc"' 1' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("A"' 2' 2' 1' (byte) 'A');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("A"' 2' 2' 1' (byte) 'A');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 2' 2' 2' (byte) 'A'' (byte) 'b');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 2' 2' 2' (byte) 'A'' (byte) 'b');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 2' 2' 2' (byte) 'A'' (byte) 'b');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthThree,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 3' 3' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthThree,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 3' 3' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthThree,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 3' 3' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthFour,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 4' 4' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthFour,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 4' 4' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringExTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringExTests.cs,WriteAbcWithReservedLengthFour,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 4' 4' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringTests.cs,WriteAWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("A"' 2' (byte) 'A'' 0);
Magic Number,S7.Net.UnitTest.TypeTests,StringTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringTests.cs,WriteAbcWithReservedLengthTwo,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 2' (byte) 'A'' (byte) 'b');
Magic Number,S7.Net.UnitTest.TypeTests,StringTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringTests.cs,WriteAbcWithReservedLengthThree,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 3' (byte) 'A'' (byte) 'b'' (byte) 'c');
Magic Number,S7.Net.UnitTest.TypeTests,StringTests,D:\research\architectureSmells\repos\killnine_s7netplus\S7.Net.UnitTest\TypeTests\StringTests.cs,WriteAbcWithReservedLengthFour,The following statement contains a magic number: AssertToByteArrayEquals("Abc"' 4' (byte) 'A'' (byte) 'b'' (byte) 'c'' 0);
