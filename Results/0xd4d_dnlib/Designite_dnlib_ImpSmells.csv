Implementation smell,Namespace,Class,File,Method,Description
Long Method,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,AddOtherAssemblySearchPaths,The method has 104 lines of code.
Long Method,dnlib.DotNet,CustomAttributeReader,C:\repos\0xd4d_dnlib\src\DotNet\CustomAttributeReader.cs,ReadValue,The method has 111 lines of code.
Long Method,dnlib.DotNet,FrameworkRedirect,C:\repos\0xd4d_dnlib\src\DotNet\FrameworkRedirect.cs,InitFrameworkRedirectV4,The method has 207 lines of code.
Long Method,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,CreateTypeSigName,The method has 201 lines of code.
Long Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,The method has 112 lines of code.
Long Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,The method has 128 lines of code.
Long Method,dnlib.DotNet,SignatureReader,C:\repos\0xd4d_dnlib\src\DotNet\SignatureReader.cs,ReadType,The method has 112 lines of code.
Long Method,dnlib.DotNet,ReflectionTypeNameParser,C:\repos\0xd4d_dnlib\src\DotNet\TypeNameParser.cs,ReadTSpecs,The method has 101 lines of code.
Long Method,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The method has 158 lines of code.
Long Method,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The method has 160 lines of code.
Long Method,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,InitializeInternal,The method has 115 lines of code.
Long Method,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The method has 279 lines of code.
Long Method,dnlib.DotNet.Pdb,PdbState,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbState.cs,CreateScope,The method has 127 lines of code.
Long Method,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobReader.cs,ReadCore,The method has 186 lines of code.
Long Method,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The method has 152 lines of code.
Long Method,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The method has 154 lines of code.
Long Method,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The method has 215 lines of code.
Long Method,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,WriteElem,The method has 163 lines of code.
Long Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,InitializeTypeDefsAndMemberDefs,The method has 104 lines of code.
Long Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WriteMethodBodies,The method has 112 lines of code.
Long Method,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,OnMetaDataEvent,The method has 123 lines of code.
Long Method,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The method has 124 lines of code.
Long Method,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,WriteTo,The method has 103 lines of code.
Long Method,dnlib.DotNet.Writer,SignatureWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\SignatureWriter.cs,Write,The method has 104 lines of code.
Complex Method,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,IsFriendAssemblyOf,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,InitializeTargetFrameworkAttribute,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryCreateTargetFrameworkInfo,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ToTypeSig,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,AssemblyNameComparer,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyNameComparer.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,AssemblyNameComparer,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyNameComparer.cs,CompareClosest,Cyclomatic complexity of the method is 25
Complex Method,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,AssemblyResolver,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,Resolve,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet,CustomAttributeReader,C:\repos\0xd4d_dnlib\src\DotNet\CustomAttributeReader.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,DeclSecurity,C:\repos\0xd4d_dnlib\src\DotNet\DeclSecurity.cs,GetNet1xXmlStringInternal,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,Import,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,MemberFinder,C:\repos\0xd4d_dnlib\src\DotNet\MemberFinder.cs,GetObjectType2,Cyclomatic complexity of the method is 13
Complex Method,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateSymbolReader,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,FindCorLibAssemblyRef,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateResourceStream,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,ModuleLoader,C:\repos\0xd4d_dnlib\src\DotNet\ModuleLoader.cs,LoadObj,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,ReflectionExtensions,C:\repos\0xd4d_dnlib\src\DotNet\ReflectionExtensions.cs,GetElementType2,Cyclomatic complexity of the method is 25
Complex Method,dnlib.DotNet,Resolver,C:\repos\0xd4d_dnlib\src\DotNet\Resolver.cs,Resolve,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,Resolver,C:\repos\0xd4d_dnlib\src\DotNet\Resolver.cs,GetDeclaringType,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,EqualsResolutionScope,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,EqualsImplementation,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,EqualsScope,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,GetInfo,Cyclomatic complexity of the method is 13
Complex Method,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,CheckEquivalent,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,Equivalent,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,Info,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,stricmp,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,Remove,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,GetClassSize,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,FindMethodImplMethod,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet,ReflectionTypeNameParser,C:\repos\0xd4d_dnlib\src\DotNet\TypeNameParser.cs,ReadAssemblyRef,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,CreateAssembly,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,DynamicMethodBodyReader,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CalculateStackUsageCall,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeBranches,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetFieldRidList,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetMethodRidList,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetEventRidList,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetPropertyRidList,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,FindAllRows,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,InitializeInverseGenericParamOwnerRidList,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,InitializeNestedClassesDictionary,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet.MD,MetaDataCreator,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataCreator.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,dnlib.DotNet.Pdb,PdbState,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbState.cs,CreateScope,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Pdb,PdbState,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbState.cs,GetInstruction,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetMethodProps,Cyclomatic complexity of the method is 12
Complex Method,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetTypeDefProps,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadInternal,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Pdb.Portable,DocumentNameReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\DocumentNameReader.cs,ReadSeparatorChar,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoWriter.cs,WriteAsyncMethodSteppingInformation,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,GetNestedType,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,WindowsPdbWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,ShouldAddMethod,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,WindowsPdbWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Pdb.WindowsPdb,SequencePointHelper,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Resources,ResourceReader,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceReader.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet.Writer,MaxStackCalculator,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MaxStackCalculator.cs,Calculate,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,InitializeTypeDefsAndMemberDefs,Cyclomatic complexity of the method is 17
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WriteTypeDefAndMemberDefCustomAttributesAndCustomDebugInfos,Cyclomatic complexity of the method is 15
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,SortTables,Cyclomatic complexity of the method is 16
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WriteMethodBodies,Cyclomatic complexity of the method is 20
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,AddMethodDebugInformation,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,GetSingleDocument,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteFile,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,AllocateMemberDefRids,Cyclomatic complexity of the method is 22
Complex Method,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetAllTypeDefs,Cyclomatic complexity of the method is 10
Complex Method,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,CreateEmptyTableRows,Cyclomatic complexity of the method is 11
Complex Method,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,AllocateMemberDefRids,Cyclomatic complexity of the method is 28
Complex Method,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,ReUseDeletedParamRows,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,FindMemberDefs,Cyclomatic complexity of the method is 14
Complex Method,dnlib.DotNet.Writer,SignatureWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\SignatureWriter.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,Cyclomatic complexity of the method is 8
Complex Method,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,Populate,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,Cyclomatic complexity of the method is 9
Complex Method,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,Cyclomatic complexity of the method is 10
Complex Method,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,Cyclomatic complexity of the method is 10
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Error,The method has 5 parameters. Parameters: logger' sender' message' arg1' arg2
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Error,The method has 6 parameters. Parameters: logger' sender' message' arg1' arg2' arg3
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Error,The method has 7 parameters. Parameters: logger' sender' message' arg1' arg2' arg3' arg4
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Warning,The method has 5 parameters. Parameters: logger' sender' message' arg1' arg2
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Warning,The method has 6 parameters. Parameters: logger' sender' message' arg1' arg2' arg3
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Warning,The method has 7 parameters. Parameters: logger' sender' message' arg1' arg2' arg3' arg4
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Info,The method has 5 parameters. Parameters: logger' sender' message' arg1' arg2
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Info,The method has 6 parameters. Parameters: logger' sender' message' arg1' arg2' arg3
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Info,The method has 7 parameters. Parameters: logger' sender' message' arg1' arg2' arg3' arg4
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Verbose,The method has 5 parameters. Parameters: logger' sender' message' arg1' arg2
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Verbose,The method has 6 parameters. Parameters: logger' sender' message' arg1' arg2' arg3
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,Verbose,The method has 7 parameters. Parameters: logger' sender' message' arg1' arg2' arg3' arg4
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,VeryVerbose,The method has 5 parameters. Parameters: logger' sender' message' arg1' arg2
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,VeryVerbose,The method has 6 parameters. Parameters: logger' sender' message' arg1' arg2' arg3
Long Parameter List,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,VeryVerbose,The method has 7 parameters. Parameters: logger' sender' message' arg1' arg2' arg3' arg4
Long Parameter List,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateStaticGeneric,The method has 5 parameters. Parameters: genParamCount' retType' argType1' argType2' argType3
Long Parameter List,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The method has 5 parameters. Parameters: genParamCount' retType' argType1' argType2' argType3
Long Parameter List,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,MethodSig,The method has 5 parameters. Parameters: callingConvention' genParamCount' retType' argType1' argType2
Long Parameter List,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,MethodSig,The method has 6 parameters. Parameters: callingConvention' genParamCount' retType' argType1' argType2' argType3
Long Parameter List,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,MethodSig,The method has 5 parameters. Parameters: callingConvention' genParamCount' retType' argTypes' paramsAfterSentinel
Long Parameter List,dnlib.DotNet,PropertySig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,PropertySig,The method has 5 parameters. Parameters: hasThis' retType' argType1' argType2' argType3
Long Parameter List,dnlib.DotNet,PropertySig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,PropertySig,The method has 5 parameters. Parameters: callingConvention' genParamCount' retType' argTypes' paramsAfterSentinel
Long Parameter List,dnlib.DotNet,ExportedTypeUser,C:\repos\0xd4d_dnlib\src\DotNet\ExportedType.cs,ExportedTypeUser,The method has 6 parameters. Parameters: module' typeDefId' typeNamespace' typeName' flags' implementation
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,PropertyFullName,The method has 5 parameters. Parameters: declaringType' name' propertySig' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,PropertyFullNameSB,The method has 5 parameters. Parameters: declaringType' name' propertySig' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,EventFullName,The method has 5 parameters. Parameters: declaringType' name' typeDefOrRef' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,EventFullNameSB,The method has 5 parameters. Parameters: declaringType' name' typeDefOrRef' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,FieldFullName,The method has 5 parameters. Parameters: declaringType' name' fieldSig' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,FieldFullNameSB,The method has 5 parameters. Parameters: declaringType' name' fieldSig' typeGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,MethodFullName,The method has 7 parameters. Parameters: declaringType' name' methodSig' typeGenArgs' methodGenArgs' gppMethod' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,MethodFullNameSB,The method has 7 parameters. Parameters: declaringType' name' methodSig' typeGenArgs' methodGenArgs' gppMethod' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,MethodBaseSigFullName,The method has 5 parameters. Parameters: declType' name' sig' gppMethod' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,MethodBaseSigFullNameSB,The method has 5 parameters. Parameters: declType' name' sig' gppMethod' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,FullName,The method has 6 parameters. Parameters: typeSig' isReflection' helper' typeGenArgs' methodGenArgs' sb
Long Parameter List,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,FullNameSB,The method has 6 parameters. Parameters: typeSig' isReflection' helper' typeGenArgs' methodGenArgs' sb
Long Parameter List,dnlib.DotNet,IMethodDecrypter,C:\repos\0xd4d_dnlib\src\DotNet\IDecrypters.cs,GetMethodBody,The method has 5 parameters. Parameters: rid' rva' parameters' gpContext' methodBody
Long Parameter List,dnlib.DotNet,SignatureReader,C:\repos\0xd4d_dnlib\src\DotNet\SignatureReader.cs,ReadTypeSig,The method has 5 parameters. Parameters: helper' corLibTypes' signature' gpContext' extraData
Long Parameter List,dnlib.DotNet,SignatureReader,C:\repos\0xd4d_dnlib\src\DotNet\SignatureReader.cs,ReadTypeSig,The method has 5 parameters. Parameters: helper' corLibTypes' signature' gpContext' extraData
Long Parameter List,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeEvent,The method has 5 parameters. Parameters: evt' addMethod' invokeMethod' removeMethod' otherMethods
Long Parameter List,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetAssemblyNameString,The method has 5 parameters. Parameters: name' version' culture' publicKey' attributes
Long Parameter List,dnlib.DotNet,ProjectedClass,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,ProjectedClass,The method has 8 parameters. Parameters: mdns' mdname' clrns' clrname' clrAsm' contractAsm' winMDValueType' clrValueType
Long Parameter List,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The method has 5 parameters. Parameters: opResolver' code' exceptions' parameters' gpContext
Long Parameter List,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The method has 5 parameters. Parameters: opResolver' codeReader' ehReader' parameters' gpContext
Long Parameter List,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The method has 8 parameters. Parameters: opResolver' code' exceptions' parameters' flags' maxStack' codeSize' localVarSigTok
Long Parameter List,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The method has 9 parameters. Parameters: opResolver' code' exceptions' parameters' flags' maxStack' codeSize' localVarSigTok' gpContext
Long Parameter List,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,MethodBodyReader,The method has 5 parameters. Parameters: opResolver' codeReader' ehReader' parameters' gpContext
Long Parameter List,dnlib.DotNet.Emit,OpCode,C:\repos\0xd4d_dnlib\src\DotNet\Emit\OpCode.cs,OpCode,The method has 7 parameters. Parameters: name' code' operandType' flowControl' opCodeType' push' pop
Long Parameter List,dnlib.DotNet.MD,ColumnInfo,C:\repos\0xd4d_dnlib\src\DotNet\MD\ColumnInfo.cs,ColumnInfo,The method has 5 parameters. Parameters: index' name' columnSize' offset' size
Long Parameter List,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,InitializeSizes,The method has 5 parameters. Parameters: bigStrings' bigGuid' bigBlob' systemRowCounts' debugRowCounts
Long Parameter List,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,Create,The method has 5 parameters. Parameters: version' imageStream' streamHeader' fullStream' baseOffset
Long Parameter List,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawModuleRow,The method has 5 parameters. Parameters: Generation' Name' Mvid' EncId' EncBaseId
Long Parameter List,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawTypeDefRow,The method has 6 parameters. Parameters: Flags' Name' Namespace' Extends' FieldList' MethodList
Long Parameter List,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawMethodRow,The method has 6 parameters. Parameters: RVA' ImplFlags' Flags' Name' Signature' ParamList
Long Parameter List,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawAssemblyRow,The method has 9 parameters. Parameters: HashAlgId' MajorVersion' MinorVersion' BuildNumber' RevisionNumber' Flags' PublicKey' Name' Locale
Long Parameter List,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawAssemblyRefRow,The method has 9 parameters. Parameters: MajorVersion' MinorVersion' BuildNumber' RevisionNumber' Flags' PublicKeyOrToken' Name' Locale' HashValue
Long Parameter List,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawExportedTypeRow,The method has 5 parameters. Parameters: Flags' TypeDefId' TypeName' TypeNamespace' Implementation
Long Parameter List,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawGenericParamRow,The method has 5 parameters. Parameters: Number' Flags' Owner' Name' Kind
Long Parameter List,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,RawLocalScopeRow,The method has 6 parameters. Parameters: Method' ImportScope' VariableList' ConstantList' StartOffset' Length
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The method has 5 parameters. Parameters: rid' generation' name' mvid' encId
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The method has 5 parameters. Parameters: rid' rva' implFlags' flags' name
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The method has 6 parameters. Parameters: rid' hashAlgId' version' attributes' publicKey' name
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The method has 6 parameters. Parameters: rid' version' attributes' publicKeyOrToken' name' culture
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The method has 5 parameters. Parameters: rid' attributes' typeDefId' name' namespace
Long Parameter List,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalScopeRow2,The method has 5 parameters. Parameters: rid' importScope' variableList' constantList' startOffset
Long Parameter List,dnlib.DotNet.Pdb,PdbDocument,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbDocument.cs,PdbDocument,The method has 6 parameters. Parameters: url' language' languageVendor' documentType' checkSumAlgorithmId' checkSum
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataDispenser,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,OpenScopeOnMemory,The method has 5 parameters. Parameters: pData' cbData' dwOpenFlags' riid' ppIUnk
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetDocument,The method has 5 parameters. Parameters: url' language' languageVendor' documentType' pRetVal
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetSymAttribute,The method has 5 parameters. Parameters: parent' name' cBuffer' pcBuffer' buffer
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetMethodsFromDocumentPosition,The method has 6 parameters. Parameters: document' line' column' cMethod' pcMethod' pRetVal
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedDocument,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetSourceRange,The method has 7 parameters. Parameters: startLine' startColumn' endLine' endColumn' cSourceBytes' pcSourceBytes' source
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedMethod,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetRanges,The method has 6 parameters. Parameters: document' line' column' cRanges' pcRanges' ranges
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedMethod,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetSequencePoints,The method has 8 parameters. Parameters: cPoints' pcPoints' offsets' documents' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedAsyncMethod,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetAsyncStepInfo,The method has 5 parameters. Parameters: cStepInfo' pcStepInfo' yieldOffsets' breakpointOffset' breakpointMethod
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumInterfaceImpls,The method has 5 parameters. Parameters: phEnum' td' rImpls' cMax' pcImpls
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetTypeDefProps,The method has 6 parameters. Parameters: td' szTypeDef' cchTypeDef' pchTypeDef' pdwTypeDefFlags' ptkExtends
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetTypeRefProps,The method has 5 parameters. Parameters: tr' ptkResolutionScope' szName' cchName' pchName
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMembers,The method has 5 parameters. Parameters: phEnum' cl' rMembers' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMembersWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rMembers' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMethods,The method has 5 parameters. Parameters: phEnum' cl' rMethods' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMethodsWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rMethods' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumFields,The method has 5 parameters. Parameters: phEnum' cl' rFields' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumFieldsWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rFields' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumParams,The method has 5 parameters. Parameters: phEnum' mb' rParams' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMemberRefs,The method has 5 parameters. Parameters: phEnum' tkParent' rMemberRefs' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMethodImpls,The method has 6 parameters. Parameters: phEnum' td' rMethodBody' rMethodDecl' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumPermissionSets,The method has 6 parameters. Parameters: phEnum' tk' dwActions' rPermission' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,FindMember,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,FindMethod,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,FindField,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,FindMemberRef,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetMethodProps,The method has 10 parameters. Parameters: mb' pClass' szMethod' cchMethod' pchMethod' pdwAttr' ppvSigBlob' pcbSigBlob' pulCodeRVA' pdwImplFlags
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetMemberRefProps,The method has 7 parameters. Parameters: mr' ptk' szMember' cchMember' pchMember' ppvSigBlob' pbSig
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumProperties,The method has 5 parameters. Parameters: phEnum' td' rProperties' cMax' pcProperties
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumEvents,The method has 5 parameters. Parameters: phEnum' td' rEvents' cMax' pcEvents
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetEventProps,The method has 13 parameters. Parameters: ev' pClass' szEvent' cchEvent' pchEvent' pdwEventFlags' ptkEventType' pmdAddOn' pmdRemoveOn' pmdFire' rmdOtherMethod' cMax' pcOtherMethod
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumMethodSemantics,The method has 5 parameters. Parameters: phEnum' mb' rEventProp' cMax' pcEventProp
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetClassLayout,The method has 6 parameters. Parameters: td' pdwPackSize' rFieldOffset' cMax' pcFieldOffset' pulClassSize
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetPinvokeMap,The method has 6 parameters. Parameters: tk' pdwMappingFlags' szImportName' cchImportName' pchImportName' pmrImportDLL
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,EnumCustomAttributes,The method has 6 parameters. Parameters: phEnum' tk' tkType' rCustomAttributes' cMax' pcCustomAttributes
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetCustomAttributeProps,The method has 5 parameters. Parameters: cv' ptkObj' ptkType' ppBlob' pcbSize
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetMemberProps,The method has 13 parameters. Parameters: mb' pClass' szMember' cchMember' pchMember' pdwAttr' ppvSigBlob' pcbSigBlob' pulCodeRVA' pdwImplFlags' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetFieldProps,The method has 11 parameters. Parameters: mb' pClass' szField' cchField' pchField' pdwAttr' ppvSigBlob' pcbSigBlob' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetPropertyProps,The method has 16 parameters. Parameters: prop' pClass' szProperty' cchProperty' pchProperty' pdwPropFlags' ppvSig' pbSig' pdwCPlusTypeFlag' ppDefaultValue' pcchDefaultValue' pmdSetter' pmdGetter' rmdOtherMethod' cMax' pcOtherMethod
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataImport,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,GetParamProps,The method has 10 parameters. Parameters: tk' pmd' pulSequence' szName' cchName' pchName' pdwAttr' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineTypeDef,The method has 5 parameters. Parameters: szTypeDef' dwTypeDefFlags' tkExtends' rtkImplements' ptd
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineNestedType,The method has 6 parameters. Parameters: szTypeDef' dwTypeDefFlags' tkExtends' rtkImplements' tdEncloser' ptd
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineMethod,The method has 8 parameters. Parameters: td' szName' dwMethodFlags' pvSigBlob' cbSigBlob' ulCodeRVA' dwImplFlags' pmd
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineImportType,The method has 7 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' pImport' tdImport' pAssemEmit' ptr
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineMemberRef,The method has 5 parameters. Parameters: tkImport' szName' pvSigBlob' cbSigBlob' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineImportMember,The method has 8 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' pImport' mbMember' pAssemEmit' tkParent' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineEvent,The method has 9 parameters. Parameters: td' szEvent' dwEventFlags' tkEventType' mdAddOn' mdRemoveOn' mdFire' rmdOtherMethods' pmdEvent
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefinePermissionSet,The method has 5 parameters. Parameters: tk' dwAction' pvPermission' cbPermission' ppm
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetEventProps,The method has 7 parameters. Parameters: ev' dwEventFlags' tkEventType' mdAddOn' mdRemoveOn' mdFire' rmdOtherMethods
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetPermissionSetProps,The method has 5 parameters. Parameters: tk' dwAction' pvPermission' cbPermission' ppm
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineCustomAttribute,The method has 5 parameters. Parameters: tkOwner' tkCtor' pCustomAttribute' cbCustomAttribute' pcv
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineField,The method has 9 parameters. Parameters: td' szName' dwFieldFlags' pvSigBlob' cbSigBlob' dwCPlusTypeFlag' pValue' cchValue' pmd
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineProperty,The method has 12 parameters. Parameters: td' szProperty' dwPropFlags' pvSig' cbSig' dwCPlusTypeFlag' pValue' cchValue' mdSetter' mdGetter' rmdOtherMethods' pmdProp
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineParam,The method has 8 parameters. Parameters: md' ulParamSeq' szName' dwParamFlags' dwCPlusTypeFlag' pValue' cchValue' ppd
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetFieldProps,The method has 5 parameters. Parameters: fd' dwFieldFlags' dwCPlusTypeFlag' pValue' cchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetPropertyProps,The method has 8 parameters. Parameters: pr' dwPropFlags' dwCPlusTypeFlag' pValue' cchValue' mdSetter' mdGetter' rmdOtherMethods
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetParamProps,The method has 6 parameters. Parameters: pd' szName' dwParamFlags' dwCPlusTypeFlag' pValue' cchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,IMetaDataEmit,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,TranslateSigWithScope,The method has 11 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' import' pbSigBlob' cbSigBlob' pAssemEmit' emit' pvTranslatedSig' cbTranslatedSigMax' pcbTranslatedSig
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineDocument,The method has 5 parameters. Parameters: url' language' languageVendor' documentType' pRetVal
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineLocalVariable,The method has 10 parameters. Parameters: name' attributes' cSig' signature' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineParameter,The method has 7 parameters. Parameters: name' attributes' sequence' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineField,The method has 9 parameters. Parameters: parent' name' attributes' cSig' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineGlobalVariable,The method has 8 parameters. Parameters: name' attributes' cSig' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetMethodSourceRange,The method has 6 parameters. Parameters: startDoc' startLine' startColumn' endDoc' endLine' endColumn
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineSequencePoints,The method has 7 parameters. Parameters: document' spCount' offsets' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,Initialize2,The method has 5 parameters. Parameters: emitter' tempfilename' pIStream' fFullBuild' finalfilename
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineDocument,The method has 5 parameters. Parameters: url' language' languageVendor' documentType' pRetVal
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineLocalVariable,The method has 10 parameters. Parameters: name' attributes' cSig' signature' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineParameter,The method has 7 parameters. Parameters: name' attributes' sequence' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineField,The method has 9 parameters. Parameters: parent' name' attributes' cSig' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineGlobalVariable,The method has 8 parameters. Parameters: name' attributes' cSig' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,SetMethodSourceRange,The method has 6 parameters. Parameters: startDoc' startLine' startColumn' endDoc' endLine' endColumn
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineSequencePoints,The method has 7 parameters. Parameters: document' spCount' offsets' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,Initialize2,The method has 5 parameters. Parameters: emitter' tempfilename' pIStream' fFullBuild' finalfilename
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineLocalVariable2,The method has 9 parameters. Parameters: name' attributes' sigToken' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.Dss,ISymUnmanagedWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ComInterfaces.cs,DefineGlobalVariable2,The method has 7 parameters. Parameters: name' attributes' sigToken' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetMethodProps,The method has 10 parameters. Parameters: mb' pClass' szMethod' cchMethod' pchMethod' pdwAttr' ppvSigBlob' pcbSigBlob' pulCodeRVA' pdwImplFlags
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetTypeDefProps,The method has 6 parameters. Parameters: td' szTypeDef' cchTypeDef' pchTypeDef' pdwTypeDefFlags' ptkExtends
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumInterfaceImpls,The method has 5 parameters. Parameters: phEnum' td' rImpls' cMax' pcImpls
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetTypeRefProps,The method has 5 parameters. Parameters: tr' ptkResolutionScope' szName' cchName' pchName
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMembers,The method has 5 parameters. Parameters: phEnum' cl' rMembers' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMembersWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rMembers' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMethods,The method has 5 parameters. Parameters: phEnum' cl' rMethods' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMethodsWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rMethods' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumFields,The method has 5 parameters. Parameters: phEnum' cl' rFields' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumFieldsWithName,The method has 6 parameters. Parameters: phEnum' cl' szName' rFields' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumParams,The method has 5 parameters. Parameters: phEnum' mb' rParams' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMemberRefs,The method has 5 parameters. Parameters: phEnum' tkParent' rMemberRefs' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMethodImpls,The method has 6 parameters. Parameters: phEnum' td' rMethodBody' rMethodDecl' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumPermissionSets,The method has 6 parameters. Parameters: phEnum' tk' dwActions' rPermission' cMax' pcTokens
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,FindMember,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,FindMethod,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,FindField,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmb
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,FindMemberRef,The method has 5 parameters. Parameters: td' szName' pvSigBlob' cbSigBlob' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetMemberRefProps,The method has 7 parameters. Parameters: mr' ptk' szMember' cchMember' pchMember' ppvSigBlob' pbSig
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumProperties,The method has 5 parameters. Parameters: phEnum' td' rProperties' cMax' pcProperties
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumEvents,The method has 5 parameters. Parameters: phEnum' td' rEvents' cMax' pcEvents
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetEventProps,The method has 13 parameters. Parameters: ev' pClass' szEvent' cchEvent' pchEvent' pdwEventFlags' ptkEventType' pmdAddOn' pmdRemoveOn' pmdFire' rmdOtherMethod' cMax' pcOtherMethod
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumMethodSemantics,The method has 5 parameters. Parameters: phEnum' mb' rEventProp' cMax' pcEventProp
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetClassLayout,The method has 6 parameters. Parameters: td' pdwPackSize' rFieldOffset' cMax' pcFieldOffset' pulClassSize
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetPinvokeMap,The method has 6 parameters. Parameters: tk' pdwMappingFlags' szImportName' cchImportName' pchImportName' pmrImportDLL
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,EnumCustomAttributes,The method has 6 parameters. Parameters: phEnum' tk' tkType' rCustomAttributes' cMax' pcCustomAttributes
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetCustomAttributeProps,The method has 5 parameters. Parameters: cv' ptkObj' ptkType' ppBlob' pcbSize
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetMemberProps,The method has 13 parameters. Parameters: mb' pClass' szMember' cchMember' pchMember' pdwAttr' ppvSigBlob' pcbSigBlob' pulCodeRVA' pdwImplFlags' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetFieldProps,The method has 11 parameters. Parameters: mb' pClass' szField' cchField' pchField' pdwAttr' ppvSigBlob' pcbSigBlob' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetPropertyProps,The method has 16 parameters. Parameters: prop' pClass' szProperty' cchProperty' pchProperty' pdwPropFlags' ppvSig' pbSig' pdwCPlusTypeFlag' ppDefaultValue' pcchDefaultValue' pmdSetter' pmdGetter' rmdOtherMethod' cMax' pcOtherMethod
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetParamProps,The method has 10 parameters. Parameters: tk' pmd' pulSequence' szName' cchName' pchName' pdwAttr' pdwCPlusTypeFlag' ppValue' pcchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineTypeDef,The method has 5 parameters. Parameters: szTypeDef' dwTypeDefFlags' tkExtends' rtkImplements' ptd
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineNestedType,The method has 6 parameters. Parameters: szTypeDef' dwTypeDefFlags' tkExtends' rtkImplements' tdEncloser' ptd
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineMethod,The method has 8 parameters. Parameters: td' szName' dwMethodFlags' pvSigBlob' cbSigBlob' ulCodeRVA' dwImplFlags' pmd
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineImportType,The method has 7 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' pImport' tdImport' pAssemEmit' ptr
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineMemberRef,The method has 5 parameters. Parameters: tkImport' szName' pvSigBlob' cbSigBlob' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineImportMember,The method has 8 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' pImport' mbMember' pAssemEmit' tkParent' pmr
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineEvent,The method has 9 parameters. Parameters: td' szEvent' dwEventFlags' tkEventType' mdAddOn' mdRemoveOn' mdFire' rmdOtherMethods' pmdEvent
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefinePermissionSet,The method has 5 parameters. Parameters: tk' dwAction' pvPermission' cbPermission' ppm
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,SetEventProps,The method has 7 parameters. Parameters: ev' dwEventFlags' tkEventType' mdAddOn' mdRemoveOn' mdFire' rmdOtherMethods
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,SetPermissionSetProps,The method has 5 parameters. Parameters: tk' dwAction' pvPermission' cbPermission' ppm
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineCustomAttribute,The method has 5 parameters. Parameters: tkOwner' tkCtor' pCustomAttribute' cbCustomAttribute' pcv
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineField,The method has 9 parameters. Parameters: td' szName' dwFieldFlags' pvSigBlob' cbSigBlob' dwCPlusTypeFlag' pValue' cchValue' pmd
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineProperty,The method has 12 parameters. Parameters: td' szProperty' dwPropFlags' pvSig' cbSig' dwCPlusTypeFlag' pValue' cchValue' mdSetter' mdGetter' rmdOtherMethods' pmdProp
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,DefineParam,The method has 8 parameters. Parameters: md' ulParamSeq' szName' dwParamFlags' dwCPlusTypeFlag' pValue' cchValue' ppd
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,SetFieldProps,The method has 5 parameters. Parameters: fd' dwFieldFlags' dwCPlusTypeFlag' pValue' cchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,SetPropertyProps,The method has 8 parameters. Parameters: pr' dwPropFlags' dwCPlusTypeFlag' pValue' cchValue' mdSetter' mdGetter' rmdOtherMethods
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,SetParamProps,The method has 6 parameters. Parameters: pd' szName' dwParamFlags' dwCPlusTypeFlag' pValue' cchValue
Long Parameter List,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,TranslateSigWithScope,The method has 11 parameters. Parameters: pAssemImport' pbHashValue' cbHashValue' import' pbSigBlob' cbSigBlob' pAssemEmit' emit' pvTranslatedSig' cbTranslatedSigMax' pcbTranslatedSig
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CoCreateInstance,The method has 5 parameters. Parameters: rclsid' pUnkOuter' dwClsContext' riid' ppv
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineField,The method has 8 parameters. Parameters: parent' name' attributes' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineGlobalVariable,The method has 7 parameters. Parameters: name' attributes' signature' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineGlobalVariable2,The method has 7 parameters. Parameters: name' attributes' sigToken' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineLocalVariable,The method has 9 parameters. Parameters: name' attributes' signature' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineParameter,The method has 7 parameters. Parameters: name' attributes' sequence' addrKind' addr1' addr2' addr3
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineSequencePoints,The method has 6 parameters. Parameters: document' offsets' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineSequencePoints,The method has 7 parameters. Parameters: document' arraySize' offsets' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,SetMethodSourceRange,The method has 6 parameters. Parameters: startDoc' startLine' startColumn' endDoc' endLine' endColumn
Long Parameter List,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineLocalVariable2,The method has 9 parameters. Parameters: name' attributes' sigToken' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.Managed,DbiScope,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiScope.cs,DbiScope,The method has 5 parameters. Parameters: method' parent' name' offset' length
Long Parameter List,dnlib.DotNet.Pdb.Portable,ImportScopeBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportScopeBlobWriter.cs,Write,The method has 5 parameters. Parameters: helper' systemMetaData' writer' blobHeap' imports
Long Parameter List,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The method has 5 parameters. Parameters: helper' systemMetaData' writer' type' value
Long Parameter List,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,The method has 6 parameters. Parameters: module' typeOpt' bodyOpt' gpContext' kind' data
Long Parameter List,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,PortablePdbCustomDebugInfoReader,The method has 5 parameters. Parameters: module' typeOpt' bodyOpt' gpContext' reader
Long Parameter List,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoWriter.cs,Write,The method has 5 parameters. Parameters: helper' methodContext' systemMetaData' cdi' context
Long Parameter List,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,GetCustomDebugInfos,The method has 6 parameters. Parameters: token' gpContext' result' methodOpt' bodyOpt' asyncStepInfo
Long Parameter List,dnlib.DotNet.Pdb.Portable,SymbolDocumentImpl,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolDocumentImpl.cs,SymbolDocumentImpl,The method has 7 parameters. Parameters: url' language' languageVendor' documentType' checkSumAlgorithmId' checkSum' customDebugInfos
Long Parameter List,dnlib.DotNet.Pdb.Portable,SymbolMethodImpl,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolMethodImpl.cs,SymbolMethodImpl,The method has 5 parameters. Parameters: reader' token' rootScope' sequencePoints' kickoffMethod
Long Parameter List,dnlib.DotNet.Pdb.Portable,SymbolScopeImpl,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolScopeImpl.cs,SymbolScopeImpl,The method has 5 parameters. Parameters: owner' parent' startOffset' endOffset' customDebugInfos
Long Parameter List,dnlib.DotNet.Pdb.WindowsPdb,ISymbolWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\ISymbolWriter2.cs,DefineSequencePoints,The method has 7 parameters. Parameters: document' arraySize' offsets' lines' columns' endLines' endColumns
Long Parameter List,dnlib.DotNet.Pdb.WindowsPdb,ISymbolWriter2,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\ISymbolWriter2.cs,DefineLocalVariable2,The method has 9 parameters. Parameters: name' attributes' sigToken' addrKind' addr1' addr2' addr3' startOffset' endOffset
Long Parameter List,dnlib.DotNet.Pdb.WindowsPdb,PseudoCustomDebugInfoFactory,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PseudoCustomDebugInfoFactory.cs,TryCreateAsyncMethod,The method has 6 parameters. Parameters: module' method' body' asyncKickoffMethod' asyncStepInfos' asyncCatchHandlerILOffset
Long Parameter List,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,Create,The method has 6 parameters. Parameters: module' constants' methodBodies' netResources' options' debugKind
Long Parameter List,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,MetaData,The method has 7 parameters. Parameters: module' constants' methodBodies' netResources' options' debugKind' isStandaloneDebugMetadata
Long Parameter List,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,InitializeEnhancedStrongNameSigning,The method has 5 parameters. Parameters: module' signatureKey' signaturePubKey' identityKey' identityPubKey
Long Parameter List,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,CalculateRvasAndFileOffsets,The method has 5 parameters. Parameters: chunks' offset' rva' fileAlignment' sectionAlignment
Long Parameter List,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,NormalMetaData,The method has 7 parameters. Parameters: module' constants' methodBodies' netResources' options' debugKind' isStandaloneDebugMetadata
Long Parameter List,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,PreserveTokensMetaData,The method has 7 parameters. Parameters: module' constants' methodBodies' netResources' options' debugKind' isStandaloneDebugMetadata
Long Parameter List,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateFileMapping,The method has 6 parameters. Parameters: hFile' lpAttributes' flProtect' dwMaximumSizeHigh' dwMaximumSizeLow' lpName
Long Parameter List,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,MapViewOfFile,The method has 5 parameters. Parameters: hFileMappingObject' dwDesiredAccess' dwFileOffsetHigh' dwFileOffsetLow' dwNumberOfBytesToMap
Long Parameter List,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,mmap32,The method has 6 parameters. Parameters: addr' length' prot' flags' fd' offset
Long Parameter List,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,mmap64,The method has 6 parameters. Parameters: addr' length' prot' flags' fd' offset
Long Parameter List,dnlib.Threading,Extensions,C:\repos\0xd4d_dnlib\src\Threading\Extensions.cs,Iterate,The method has 5 parameters. Parameters: list' startIndex' endIndex' reverseOrder' handler
Long Identifier,dnlib.DotNet,DummyLogger,C:\repos\0xd4d_dnlib\src\DotNet\ILogger.cs,,The length of the parameter ThrowModuleWriterExceptionOnErrorInstance is 41.
Long Identifier,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,,The length of the parameter nativeAndManagedEntryPoint_initialized is 38.
Long Identifier,dnlib.DotNet,FieldEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveCompareDeclaringTypes is 36.
Long Identifier,dnlib.DotNet,FieldEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveDontCompareDeclaringTypes is 40.
Long Identifier,dnlib.DotNet,MethodEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveCompareDeclaringTypes is 36.
Long Identifier,dnlib.DotNet,MethodEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveDontCompareDeclaringTypes is 40.
Long Identifier,dnlib.DotNet,PropertyEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveCompareDeclaringTypes is 36.
Long Identifier,dnlib.DotNet,PropertyEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveDontCompareDeclaringTypes is 40.
Long Identifier,dnlib.DotNet,EventEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveCompareDeclaringTypes is 36.
Long Identifier,dnlib.DotNet,EventEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,,The length of the parameter CaseInsensitiveDontCompareDeclaringTypes is 40.
Long Identifier,dnlib.DotNet,TypeSpec,C:\repos\0xd4d_dnlib\src\DotNet\TypeSpec.cs,,The length of the parameter typeSigAndExtraData_isInitialized is 33.
Long Identifier,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,,The length of the parameter clrAsmName_SystemNumericsVectors is 32.
Long Identifier,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,,The length of the parameter clrAsmName_SystemRuntimeInteropServicesWindowsRuntime is 53.
Long Identifier,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,,The length of the parameter clrAsmName_SystemRuntimeWindowsRuntime is 38.
Long Identifier,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,,The length of the parameter clrAsmName_SystemRuntimeWindowsRuntimeUIXaml is 44.
Long Identifier,dnlib.DotNet.Pdb,CustomDebugInfoGuids,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\CustomDebugInfoGuids.cs,,The length of the parameter AsyncMethodSteppingInformationBlob is 34.
Long Identifier,dnlib.DotNet.Pdb,CustomDebugInfoGuids,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\CustomDebugInfoGuids.cs,,The length of the parameter StateMachineHoistedLocalScopes is 30.
Long Identifier,dnlib.DotNet.Writer,DebugDirectory,C:\repos\0xd4d_dnlib\src\DotNet\Writer\DebugDirectory.cs,,The length of the parameter DEFAULT_DEBUGDIRECTORY_ALIGNMENT is 32.
Long Identifier,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,,The length of the parameter methodDebugInformationInfosUsed is 31.
Long Identifier,dnlib.DotNet.Writer,ModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriter.cs,,The length of the parameter DEFAULT_IMPORTDIRECTORY_ALIGNMENT is 33.
Long Identifier,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,,The length of the parameter DEFAULT_METHODBODIES_ALIGNMENT is 30.
Long Identifier,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,,The length of the parameter DEFAULT_NETRESOURCES_ALIGNMENT is 30.
Long Identifier,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,,The length of the parameter DEFAULT_WIN32_RESOURCES_ALIGNMENT is 33.
Long Identifier,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,,The length of the parameter DEFAULT_STRONGNAMESIG_ALIGNMENT is 31.
Long Identifier,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteFile,The length of the parameter entryPointIsManagedOrNoEntryPoint is 33.
Long Identifier,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The length of the parameter entryPointIsManagedOrNoEntryPoint is 33.
Long Identifier,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,,The length of the parameter referencedTypeSystemTablesInitd is 31.
Long Identifier,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,,The length of the parameter RESOURCE_DATA_HEADER_ALIGNMENT is 30.
Long Identifier,dnlib.PE,PEImage,C:\repos\0xd4d_dnlib\src\PE\PEImage.cs,,The length of the parameter USE_MEMORY_LAYOUT_WITH_MAPPED_FILES is 35.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,Load,The length of the statement  "					throw new BadImageFormatException(string.Format("{0} is only a .NET module' not a .NET assembly. Use ModuleDef.Load()."' fileName)); " is 132.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,Load,The length of the statement  "					throw new BadImageFormatException(string.Format("{0} is only a .NET module' not a .NET assembly. Use ModuleDef.Load()."' module.ToString())); " is 141.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,Load,The length of the statement  "					throw new BadImageFormatException(string.Format("{0} (addr: {1:X8}) is only a .NET module' not a .NET assembly. Use ModuleDef.Load()."' module.ToString()' addr.ToInt64())); " is 172.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,Load,The length of the statement  "					throw new BadImageFormatException(string.Format("{0} is only a .NET module' not a .NET assembly. Use ModuleDef.Load()."' module.ToString())); " is 141.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,UpdateOrCreateAssemblySignatureKeyAttribute,The length of the statement  "			ca.ConstructorArguments[0] = new CAArgument(manifestModule.CorLibTypes.String' new UTF8String(signaturePubKey.ToString())); " is 123.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,CreateAssemblySignatureKeyAttribute,The length of the statement  "			var owner = manifestModule.UpdateRowId(new TypeRefUser(manifestModule' "System.Reflection"' "AssemblySignatureKeyAttribute"' manifestModule.CorLibTypes.AssemblyRef)); " is 166.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,CreateAssemblySignatureKeyAttribute,The length of the statement  "			var methodSig = MethodSig.CreateInstance(manifestModule.CorLibTypes.Void' manifestModule.CorLibTypes.String' manifestModule.CorLibTypes.String); " is 144.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,CreateAssemblySignatureKeyAttribute,The length of the statement  "			var ctor = manifestModule.UpdateRowId(new MemberRefUser(manifestModule' MethodDef.InstanceConstructorName' methodSig' owner)); " is 126.
Long Statement,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,OnAdd,The length of the statement  "				throw new InvalidOperationException("Module already has an assembly. Remove it from that assembly before adding it to this assembly."); " is 135.
Long Statement,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,InitializeDeclSecurities,The length of the statement  "			var tmp = new LazyList<DeclSecurity>((int)list.Length' list' (list2' index) => readerModule.ResolveDeclSecurity(((RidList)list2)[index])); " is 138.
Long Statement,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The length of the statement  "				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value)' ParseInt32(m.Groups[4].Value)); " is 146.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ResolveTypeDefThrow,The length of the statement  "			throw new TypeResolveException(string.Format("Could not resolve type: {0} ({1})"' tdr' tdr == null ? null : tdr.DefinitionAssembly)); " is 133.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetCorLibTypeSig,The length of the statement  "			return self.GetCorLibTypeSig(UTF8String.ToSystemStringOrEmpty(@namespace)' UTF8String.ToSystemStringOrEmpty(name)' defAsm); " is 123.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ResolveThrow,The length of the statement  "			throw new TypeResolveException(string.Format("Could not resolve type: {0} ({1})"' typeRef' typeRef == null ? null : typeRef.DefinitionAssembly)); " is 145.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ResolveThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve method/field: {0} ({1})"' memberRef' memberRef == null ? null : memberRef.GetDefinitionAssembly())); " is 169.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ResolveFieldThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve field: {0} ({1})"' memberRef' memberRef == null ? null : memberRef.GetDefinitionAssembly())); " is 162.
Long Statement,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,ResolveMethodThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve method: {0} ({1})"' memberRef' memberRef == null ? null : memberRef.GetDefinitionAssembly())); " is 163.
Long Statement,dnlib.DotNet,AssemblyRefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyRef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,Resolve2,The length of the statement  "				resolvedAssembly = FindClosestAssembly(assembly' resolvedAssembly' PreFindAssemblies(assembly' sourceModule' false)' moduleContext); " is 132.
Long Statement,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,Resolve2,The length of the statement  "				resolvedAssembly = FindClosestAssembly(assembly' resolvedAssembly' FindAssemblies(assembly' sourceModule' false)' moduleContext); " is 129.
Long Statement,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,Resolve2,The length of the statement  "				resolvedAssembly = FindClosestAssembly(assembly' resolvedAssembly' PostFindAssemblies(assembly' sourceModule' false)' moduleContext); " is 133.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateStaticGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.Generic' genParamCount' retType' argType1' argType2); " is 120.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateStaticGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.Generic' genParamCount' retType' argType1' argType2' argType3); " is 130.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.HasThis | CallingConvention.Generic' genParamCount' retType); " is 128.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.HasThis | CallingConvention.Generic' genParamCount' retType' argType1); " is 138.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.HasThis | CallingConvention.Generic' genParamCount' retType' argType1' argType2); " is 148.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.HasThis | CallingConvention.Generic' genParamCount' retType' argType1' argType2' argType3); " is 158.
Long Statement,dnlib.DotNet,MethodSig,C:\repos\0xd4d_dnlib\src\DotNet\CallingConventionSig.cs,CreateInstanceGeneric,The length of the statement  "			return new MethodSig(CallingConvention.Default | CallingConvention.HasThis | CallingConvention.Generic' genParamCount' retType' argTypes); " is 138.
Long Statement,dnlib.DotNet,CANamedArgument,C:\repos\0xd4d_dnlib\src\DotNet\CustomAttribute.cs,ToString,The length of the statement  "			return string.Format("({0}) {1} {2} = {3} ({4})"' isField ? "field" : "property"' type' name' v == null ? "null" : v' ArgumentType); " is 132.
Long Statement,dnlib.DotNet,CustomAttributeReader,C:\repos\0xd4d_dnlib\src\DotNet\CustomAttributeReader.cs,ReadType,The length of the statement  "			var type = TypeNameParser.ParseAsTypeSigReflection(module' UTF8String.ToSystemStringOrEmpty(name)' asmRefFinder' gpContext); " is 124.
Long Statement,dnlib.DotNet,DeclSecurityMD,C:\repos\0xd4d_dnlib\src\DotNet\DeclSecurity.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,DeclSecurityReader,C:\repos\0xd4d_dnlib\src\DotNet\DeclSecurityReader.cs,ReadBinaryFormat,The length of the statement  "				var attrRef = TypeNameParser.ParseReflection(module' UTF8String.ToSystemStringOrEmpty(name)' new CAAssemblyRefFinder(module)' gpContext); " is 137.
Long Statement,dnlib.DotNet,EventDefMD,C:\repos\0xd4d_dnlib\src\DotNet\EventDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,EventDefMD,C:\repos\0xd4d_dnlib\src\DotNet\EventDef.cs,InitializeCustomDebugInfos,The length of the statement  "			readerModule.InitializeCustomDebugInfos(new MDToken(MDToken.Table' origRid)' new GenericParamContext(declaringType2)' list); " is 124.
Long Statement,dnlib.DotNet,ExportedTypeMD,C:\repos\0xd4d_dnlib\src\DotNet\ExportedType.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,FieldDefMD,C:\repos\0xd4d_dnlib\src\DotNet\FieldDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,FieldDefMD,C:\repos\0xd4d_dnlib\src\DotNet\FieldDef.cs,InitializeCustomDebugInfos,The length of the statement  "			readerModule.InitializeCustomDebugInfos(new MDToken(MDToken.Table' origRid)' new GenericParamContext(declaringType2)' list); " is 124.
Long Statement,dnlib.DotNet,FileDefMD,C:\repos\0xd4d_dnlib\src\DotNet\FileDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,FrameworkRedirect,C:\repos\0xd4d_dnlib\src\DotNet\FrameworkRedirect.cs,InitFrameworkRedirectV4,The length of the statement  "			frmRedir4["Microsoft.Windows.ApplicationServer.Applications"] = new FrameworkRedirectInfo("31bf3856ad364e35"' "4.0.0.0"); " is 121.
Long Statement,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,GetAssemblyName,The length of the statement  "			return Utils.GetAssemblyNameString(EscapeAssemblyName(assembly.Name)' assembly.Version' assembly.Culture' pk' assembly.Attributes); " is 131.
Long Statement,dnlib.DotNet,GenericParam,C:\repos\0xd4d_dnlib\src\DotNet\GenericParam.cs,OnAdd,The length of the statement  "				throw new InvalidOperationException("Generic param constraint is already owned by another generic param. Set Owner to null first."); " is 132.
Long Statement,dnlib.DotNet,GenericParamMD,C:\repos\0xd4d_dnlib\src\DotNet\GenericParam.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,GenericParamMD,C:\repos\0xd4d_dnlib\src\DotNet\GenericParam.cs,InitializeGenericParamConstraints,The length of the statement  "			var tmp = new LazyList<GenericParamConstraint>((int)list.Length' this' list' (list2' index) => readerModule.ResolveGenericParamConstraint(((RidList)list2)[index]' GetGenericParamContext(owner))); " is 195.
Long Statement,dnlib.DotNet,GenericParamMD,C:\repos\0xd4d_dnlib\src\DotNet\GenericParam.cs,OnLazyAdd2,The length of the statement  "				value = readerModule.ForceUpdateRowId(readerModule.ReadGenericParamConstraint(value.Rid' GetGenericParamContext(owner)).InitializeAll()); " is 137.
Long Statement,dnlib.DotNet,GenericParamConstraintMD,C:\repos\0xd4d_dnlib\src\DotNet\GenericParamConstraint.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,ImportAsTypeSig,The length of the statement  "				var git = new GenericInstSig(ImportAsTypeSig(type.GetGenericTypeDefinition()) as ClassOrValueTypeSig' (uint)typeGenArgs.Length); " is 128.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,CreateTypeRef2,The length of the statement  "				return module.UpdateRowId(new TypeRefUser(module' type.Namespace ?? string.Empty' type.Name ?? string.Empty' CreateScopeReference(type))); " is 138.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,CreateTypeRef2,The length of the statement  "			return module.UpdateRowId(new TypeRefUser(module' string.Empty' type.Name ?? string.Empty' CreateTypeRef2(type.DeclaringType))); " is 128.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,CreateScopeReference,The length of the statement  "			return module.UpdateRowId(new AssemblyRefUser(asmName.Name' asmName.Version' PublicKeyBase.CreatePublicKeyToken(pkt)' asmName.CultureInfo.Name)); " is 145.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,ImportInternal,The length of the statement  "					method = module.UpdateRowId(new MemberRefUser(module' methodBase.Name' CreateMethodSig(origMethod)' Import(methodBase.DeclaringType))); " is 135.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,ImportAsTypeSig,The length of the statement  "			return ImportAsTypeSig(p.ParameterType' p.GetRequiredCustomModifiers()' p.GetOptionalCustomModifiers()' declaringType.MustTreatTypeAsGenericInstType(p.ParameterType)); " is 167.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,GetModuleParent,The length of the statement  "				UTF8String.ToSystemStringOrEmpty(modAsm.Name).Equals(module2.Assembly.GetName().Name' StringComparison.OrdinalIgnoreCase); " is 122.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,Import,The length of the statement  "				var fieldSig = new FieldSig(ImportAsTypeSig(fieldInfo.FieldType' fieldInfo.GetRequiredCustomModifiers()' fieldInfo.GetOptionalCustomModifiers())); " is 146.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,Import2,The length of the statement  "				result = module.UpdateRowId(new TypeRefUser(module' type.Namespace' type.Name' CreateScopeReference(type.DefinitionAssembly' type.Module))); " is 140.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,CreateScopeReference,The length of the statement  "			return module.UpdateRowId(new AssemblyRefUser(defAsm.Name' defAsm.Version' pkt' defAsm.Culture) { Attributes = defAsm.Attributes & ~AssemblyAttributes.PublicKey }); " is 164.
Long Statement,dnlib.DotNet,Importer,C:\repos\0xd4d_dnlib\src\DotNet\Importer.cs,Import2,The length of the statement  "				result = module.UpdateRowId(new TypeRefUser(module' type.Namespace' type.Name' CreateScopeReference(type.DefinitionAssembly' type.Module))); " is 140.
Long Statement,dnlib.DotNet,InterfaceImplMD,C:\repos\0xd4d_dnlib\src\DotNet\InterfaceImpl.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,ManifestResourceMD,C:\repos\0xd4d_dnlib\src\DotNet\ManifestResource.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,MarshalBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\MarshalBlobReader.cs,Read,The length of the statement  "					var udtRef = (object)udtName == null ? null : TypeNameParser.ParseReflection(module' UTF8String.ToSystemStringOrEmpty(udtName)' null' gpContext); " is 145.
Long Statement,dnlib.DotNet,MarshalBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\MarshalBlobReader.cs,Read,The length of the statement  "					var cmRef = TypeNameParser.ParseReflection(module' UTF8String.ToSystemStringOrEmpty(custMarshalerName)' new CAAssemblyRefFinder(module)' gpContext); " is 148.
Long Statement,dnlib.DotNet,MemberRef,C:\repos\0xd4d_dnlib\src\DotNet\MemberRef.cs,ResolveThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve method/field: {0} ({1})"' this' this.GetDefinitionAssembly())); " is 132.
Long Statement,dnlib.DotNet,MemberRef,C:\repos\0xd4d_dnlib\src\DotNet\MemberRef.cs,ResolveFieldThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve field: {0} ({1})"' this' this.GetDefinitionAssembly())); " is 125.
Long Statement,dnlib.DotNet,MemberRef,C:\repos\0xd4d_dnlib\src\DotNet\MemberRef.cs,ResolveMethodThrow,The length of the statement  "			throw new MemberRefResolveException(string.Format("Could not resolve method: {0} ({1})"' this' this.GetDefinitionAssembly())); " is 126.
Long Statement,dnlib.DotNet,MemberRefMD,C:\repos\0xd4d_dnlib\src\DotNet\MemberRef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,MethodDefMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodDef.cs,InitializeParamDefs,The length of the statement  "			var tmp = new LazyList<ParamDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveParam(((RidList)list2)[index])); " is 133.
Long Statement,dnlib.DotNet,MethodDefMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodDef.cs,InitializeGenericParameters,The length of the statement  "			var tmp = new LazyList<GenericParam>((int)list.Length' this' list' (list2' index) => readerModule.ResolveGenericParam(((RidList)list2)[index])); " is 144.
Long Statement,dnlib.DotNet,MethodDefMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodDef.cs,InitializeDeclSecurities,The length of the statement  "			var tmp = new LazyList<DeclSecurity>((int)list.Length' list' (list2' index) => readerModule.ResolveDeclSecurity(((RidList)list2)[index])); " is 138.
Long Statement,dnlib.DotNet,MethodDefMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,MethodDefMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodDef.cs,InitializeOverrides,The length of the statement  "			var tmp = dt == null ? ThreadSafeListCreator.Create<MethodOverride>() : dt.GetMethodOverrides(this' new GenericParamContext(declaringType2' this)); " is 147.
Long Statement,dnlib.DotNet,MethodSpecMD,C:\repos\0xd4d_dnlib\src\DotNet\MethodSpec.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,OnAdd,The length of the statement  "				throw new InvalidOperationException("Type is already owned by another module. Remove it from that module's type list."); " is 120.
Long Statement,dnlib.DotNet,ModuleDefUser,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,CreateModuleType,The length of the statement  "			type.Attributes = TypeAttributes.NotPublic | TypeAttributes.AutoLayout | TypeAttributes.Class | TypeAttributes.AnsiClass; " is 121.
Long Statement,dnlib.DotNet,ModuleDefMD2,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,InitializeTypes,The length of the statement  "			var tmp = new LazyList<TypeDef>((int)list.Length' this' list' (list2' index) => ResolveTypeDef(((RidList)list2)[index])); " is 121.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listModuleDefMD = new SimpleLazyList<ModuleDefMD2>(ts.ModuleTable.Rows' rid2 => rid2 == 1 ? this : new ModuleDefMD2(this' rid2)); " is 129.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listInterfaceImplMD = new SimpleLazyList2<InterfaceImplMD>(ts.InterfaceImplTable.Rows' (rid2' gpContext) => new InterfaceImplMD(this' rid2' gpContext)); " is 152.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listMemberRefMD = new SimpleLazyList2<MemberRefMD>(ts.MemberRefTable.Rows' (rid2' gpContext) => new MemberRefMD(this' rid2' gpContext)); " is 136.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listDeclSecurityMD = new SimpleLazyList<DeclSecurityMD>(ts.DeclSecurityTable.Rows' rid2 => new DeclSecurityMD(this' rid2)); " is 123.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listStandAloneSigMD = new SimpleLazyList2<StandAloneSigMD>(ts.StandAloneSigTable.Rows' (rid2' gpContext) => new StandAloneSigMD(this' rid2' gpContext)); " is 152.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listTypeSpecMD = new SimpleLazyList2<TypeSpecMD>(ts.TypeSpecTable.Rows' (rid2' gpContext) => new TypeSpecMD(this' rid2' gpContext)); " is 132.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listExportedTypeMD = new SimpleLazyList<ExportedTypeMD>(ts.ExportedTypeTable.Rows' rid2 => new ExportedTypeMD(this' rid2)); " is 123.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listManifestResourceMD = new SimpleLazyList<ManifestResourceMD>(ts.ManifestResourceTable.Rows' rid2 => new ManifestResourceMD(this' rid2)); " is 139.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listGenericParamMD = new SimpleLazyList<GenericParamMD>(ts.GenericParamTable.Rows' rid2 => new GenericParamMD(this' rid2)); " is 123.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listMethodSpecMD = new SimpleLazyList2<MethodSpecMD>(ts.MethodSpecTable.Rows' (rid2' gpContext) => new MethodSpecMD(this' rid2' gpContext)); " is 140.
Long Statement,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The length of the statement  "			listGenericParamConstraintMD = new SimpleLazyList2<GenericParamConstraintMD>(ts.GenericParamConstraintTable.Rows' (rid2' gpContext) => new GenericParamConstraintMD(this' rid2' gpContext)); " is 188.
Long Statement,dnlib.DotNet,ModuleRefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleRef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,ParamDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ParamDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,ParamDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ParamDef.cs,InitializeCustomDebugInfos,The length of the statement  "			readerModule.InitializeCustomDebugInfos(new MDToken(MDToken.Table' origRid)' GenericParamContext.Create(declaringMethod)' list); " is 128.
Long Statement,dnlib.DotNet,PropertyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\PropertyDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,PropertyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\PropertyDef.cs,InitializeCustomDebugInfos,The length of the statement  "			readerModule.InitializeCustomDebugInfos(new MDToken(MDToken.Table' origRid)' new GenericParamContext(declaringType2)' list); " is 124.
Long Statement,dnlib.DotNet,ReflectionExtensions,C:\repos\0xd4d_dnlib\src\DotNet\ReflectionExtensions.cs,IsSZArray,The length of the statement  "			var prop = self.GetType().GetProperty("IsSzArray"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 121.
Long Statement,dnlib.DotNet,LinkedResource,C:\repos\0xd4d_dnlib\src\DotNet\Resource.cs,ToString,The length of the statement  "			return string.Format("{0} - file: {1}"' UTF8String.ToSystemStringOrEmpty(Name)' UTF8String.ToSystemStringOrEmpty(FileName)); " is 124.
Long Statement,dnlib.DotNet,SecurityAttribute,C:\repos\0xd4d_dnlib\src\DotNet\SecurityAttribute.cs,CreateFromXml,The length of the statement  "			var namedArg = new CANamedArgument(false' module.CorLibTypes.String' "XML"' new CAArgument(module.CorLibTypes.String' utf8Xml)); " is 128.
Long Statement,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals_Names,The length of the statement  "				return UTF8String.ToSystemStringOrEmpty(a).Equals(UTF8String.ToSystemStringOrEmpty(b)' StringComparison.OrdinalIgnoreCase); " is 123.
Long Statement,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The length of the statement  "				hash = HASHCODE_MAGIC_ET_GENERICINST + GetHashCode(a.GetGenericTypeDefinition()) + GetHashCode(a.GetGenericArguments()); " is 120.
Long Statement,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,The length of the statement  "				(!CompareAssemblyPublicKeyToken || PublicKeyBase.TokenEquals(a.PublicKeyOrToken' new PublicKeyToken(bAsmName.GetPublicKeyToken()))) && " is 134.
Long Statement,dnlib.DotNet,StandAloneSigMD,C:\repos\0xd4d_dnlib\src\DotNet\StandAloneSig.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,FindStaticConstructor,The length of the statement  "			return Methods.ExecuteLocked<MethodDef' object' MethodDef>(null' (tsList' arg) => FindStaticConstructor_NoMethodsLock()); " is 121.
Long Statement,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,OnAdd,The length of the statement  "				throw new InvalidOperationException("Type is already owned by another module. Remove it from that module's type list."); " is 120.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeFields,The length of the statement  "			var tmp = new LazyList<FieldDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveField(((RidList)list2)[index])); " is 133.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeMethods,The length of the statement  "			var tmp = new LazyList<MethodDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveMethod(((RidList)list2)[index])); " is 135.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeGenericParameters,The length of the statement  "			var tmp = new LazyList<GenericParam>((int)list.Length' this' list' (list2' index) => readerModule.ResolveGenericParam(((RidList)list2)[index])); " is 144.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeInterfaces,The length of the statement  "			var tmp = new LazyList<InterfaceImpl>((int)list.Length' list' (list2' index) => readerModule.ResolveInterfaceImpl(((RidList)list2)[index]' new GenericParamContext(this))); " is 171.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeDeclSecurities,The length of the statement  "			var tmp = new LazyList<DeclSecurity>((int)list.Length' list' (list2' index) => readerModule.ResolveDeclSecurity(((RidList)list2)[index])); " is 138.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeEvents,The length of the statement  "			var tmp = new LazyList<EventDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveEvent(((RidList)list2)[index])); " is 133.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeProperties,The length of the statement  "			var tmp = new LazyList<PropertyDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveProperty(((RidList)list2)[index])); " is 139.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeNestedTypes,The length of the statement  "			var tmp = new LazyList<TypeDef>((int)list.Length' this' list' (list2' index) => readerModule.ResolveTypeDef(((RidList)list2)[index])); " is 134.
Long Statement,dnlib.DotNet,TypeDefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,TypeRefMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeRef.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,TypeSpecMD,C:\repos\0xd4d_dnlib\src\DotNet\TypeSpec.cs,InitializeCustomAttributes,The length of the statement  "			var tmp = new CustomAttributeCollection((int)list.Length' list' (list2' index) => readerModule.ReadCustomAttribute(((RidList)list2)[index])); " is 141.
Long Statement,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,CreateAssembly,The length of the statement  "			var asm = new AssemblyRefUser(GetName(clrAsm)' contractAsmVersion' new PublicKeyToken(GetPublicKeyToken(clrAsm))' UTF8String.Empty); " is 132.
Long Statement,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,GetName,The length of the statement  "			case ClrAssembly.SystemRuntimeInteropServicesWindowsRuntime: return clrAsmName_SystemRuntimeInteropServicesWindowsRuntime; " is 122.
Long Statement,dnlib.DotNet,WinMDHelpers,C:\repos\0xd4d_dnlib\src\DotNet\WinMDHelpers.cs,ToCLR,The length of the statement  "			return new ExportedTypeUser(module' 0' pc.ClrClass.Namespace' pc.ClrClass.Name' et.Attributes' CreateAssembly(module' pc.ContractAssembly)); " is 140.
Long Statement,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,Create,The length of the statement  "			if (opCode.OperandType != OperandType.InlineField && opCode.OperandType != OperandType.InlineMethod && opCode.OperandType != OperandType.InlineTok) " is 147.
Long Statement,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The length of the statement  "			return CreateCilBody(opResolver' MemoryImageStream.Create(code)' exceptions == null ? null : MemoryImageStream.Create(exceptions)' parameters' new GenericParamContext()); " is 170.
Long Statement,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The length of the statement  "			return CreateCilBody(opResolver' MemoryImageStream.Create(code)' exceptions == null ? null : MemoryImageStream.Create(exceptions)' parameters' gpContext); " is 154.
Long Statement,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The length of the statement  "			return CreateCilBody(opResolver' code' exceptions' parameters' flags' maxStack' codeSize' localVarSigTok' new GenericParamContext()); " is 133.
Long Statement,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetTypeNET45,The length of the statement  "			var createdMethod = tb.CreateType().GetMethod(METHOD_NAME' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 179.
Long Statement,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetTypeNET40,The length of the statement  "			var createdMethod = tb.CreateType().GetMethod(METHOD_NAME' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 179.
Long Statement,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetHotHeapVersion,The length of the statement  "			if (nativeImages40 != null && fileName != null && fileName.StartsWith(nativeImages40' StringComparison.OrdinalIgnoreCase)) " is 122.
Long Statement,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,InitializeInternal,The length of the statement  "			var hotHeapVersion = peImage == null ? HotHeapVersion.CLR20 : GetHotHeapVersion(peImage.FileName' mdHeader.VersionString); " is 122.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.AssemblyProcessor] = new TableInfo(Table.AssemblyProcessor' "AssemblyProcessor"' new ColumnInfo[] { " is 121.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.AssemblyRefProcessor] = new TableInfo(Table.AssemblyRefProcessor' "AssemblyRefProcessor"' new ColumnInfo[] { " is 130.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.GenericParamConstraint] = new TableInfo(Table.GenericParamConstraint' "GenericParamConstraint"' new ColumnInfo[] { " is 136.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.MethodDebugInformation] = new TableInfo(Table.MethodDebugInformation' "MethodDebugInformation"' new ColumnInfo[] { " is 136.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.StateMachineMethod] = new TableInfo(Table.StateMachineMethod' "StateMachineMethod"' new ColumnInfo[] { " is 124.
Long Statement,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The length of the statement  "			tableInfos[(int)Table.CustomDebugInformation] = new TableInfo(Table.CustomDebugInformation' "CustomDebugInformation"' new ColumnInfo[] { " is 136.
Long Statement,dnlib.DotNet.MD,MetaDataCreator,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataCreator.cs,Create,The length of the statement  "				var cor20Header = new ImageCor20Header(cor20HeaderStream = peImage.CreateStream(dotNetDir.VirtualAddress' 0x48)' verify); " is 121.
Long Statement,dnlib.DotNet.Pdb,PdbConstant,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbConstant.cs,ToString,The length of the statement  "			return (type == null ? "" : type.ToString()) + " " + Name + " = " + (Value == null ? "null" : Value.ToString() + " (" + Value.GetType().FullName + ")"); " is 152.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolReaderImpl,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderImpl.cs,GetCustomDebugInfos,The length of the statement  "			var asyncMethod = PseudoCustomDebugInfoFactory.TryCreateAsyncMethod(method.Module' method' body' symMethod.AsyncKickoffMethod' symMethod.AsyncStepInfos' symMethod.AsyncCatchHandlerILOffset); " is 190.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineField,The length of the statement  "			writer.DefineField((uint)parent.GetToken()' name' (uint)attributes' (uint)signature.Length' signature' (uint)addrKind' (uint)addr1' (uint)addr2' (uint)addr3); " is 158.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineGlobalVariable,The length of the statement  "			writer.DefineGlobalVariable(name' (uint)attributes' (uint)signature.Length' signature' (uint)addrKind' (uint)addr1' (uint)addr2' (uint)addr3); " is 142.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineLocalVariable,The length of the statement  "			writer.DefineLocalVariable(name' (uint)attributes' (uint)signature.Length' signature' (uint)addrKind' (uint)addr1' (uint)addr2' (uint)addr3' (uint)startOffset' (uint)endOffset); " is 177.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineSequencePoints,The length of the statement  "			writer.DefineSequencePoints(doc.SymUnmanagedDocumentWriter' (uint)offsets.Length' offsets' lines' columns' endLines' endColumns); " is 129.
Long Statement,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,SetMethodSourceRange,The length of the statement  "			writer.SetMethodSourceRange(sdoc.SymUnmanagedDocumentWriter' (uint)startLine' (uint)startColumn' edoc.SymUnmanagedDocumentWriter' (uint)endLine' (uint)endColumn); " is 162.
Long Statement,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The length of the statement  "				res[i] = new SymbolAsyncStepInfo(BitConverter.ToUInt32(data' pos)' BitConverter.ToUInt32(data' pos + 8)' BitConverter.ToUInt32(data' pos + 4)); " is 143.
Long Statement,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,GetCustomDebugInfos,The length of the statement  "			var asyncMethod = PseudoCustomDebugInfoFactory.TryCreateAsyncMethod(method.Module' method' body' symMethod.AsyncKickoffMethod' symMethod.AsyncStepInfos' symMethod.AsyncCatchHandlerILOffset); " is 190.
Long Statement,dnlib.DotNet.Pdb.Portable,DocumentNameReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\DocumentNameReader.cs,ReadSeparatorChar,The length of the statement  "				decoder.Convert(bytes' 0' 1' prevSepChars' 0' prevSepChars.Length' isLastByte' out bytesUsed' out prevSepCharsLength' out completed); " is 133.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,The length of the statement  "				using (var reader = new PortablePdbCustomDebugInfoReader(module' typeOpt' bodyOpt' gpContext' MemoryImageStream.Create(data))) { " is 128.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoWriter.cs,GetOffsetSlow,The length of the statement  "			helper.Error("Couldn't find an instruction' maybe it was removed. It's still being referenced by some code or by the PDB"); " is 123.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,GetLanguageVendor,The length of the statement  "			if (language == PdbDocumentConstants.LanguageCSharp || language == PdbDocumentConstants.LanguageVisualBasic || language == PdbDocumentConstants.LanguageFSharp) " is 159.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,ReadDocuments,The length of the statement  "				uint languageIndex = pdbMetaData.TablesStream.ReadDocumentRow2((uint)i + 1' out nameOffset' out hashAlgorithmIndex' out hashOffset); " is 132.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,ReadDocuments,The length of the statement  "				docs[i] = new SymbolDocumentImpl(url' language' languageVendor' documentType' checkSumAlgorithmId' checkSum' custInfosArray); " is 125.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,ReadScope,The length of the statement  "					uint length = pdbMetaData.TablesStream.ReadLocalScopeRow2(rid' out importScope' out variableList' out constantList' out startOffset); " is 133.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,GetEndOfLists,The length of the statement  "				pdbMetaData.TablesStream.ReadLocalScopeRow2(nextRid' out nextImportScope' out nextVariableList' out nextConstantList' out nextStartOffset); " is 139.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,GetCustomDebugInfos,The length of the statement  "			GetCustomDebugInfos(method.MDToken.ToInt32()' GenericParamContext.Create(method)' result' method' body' out asyncStepInfo); " is 123.
Long Statement,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,GetCustomDebugInfos,The length of the statement  "				var asyncMethod = TryCreateAsyncMethod(module' symMethod.KickoffMethod' asyncStepInfo.AsyncStepInfos' asyncStepInfo.CatchHandler); " is 130.
Long Statement,dnlib.DotNet.Pdb.Portable,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolReaderCreator.cs,TryCreate,The length of the statement  "						return new PortablePdbReader(pdbStream' isEmbeddedPortablePdb ? PdbFileKind.EmbeddedPortablePDB : PdbFileKind.PortablePDB); " is 123.
Long Statement,dnlib.DotNet.Pdb.Portable,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolReaderCreator.cs,TryCreate,The length of the statement  "					using (var deflateStream = new DeflateStream(new MemoryStream(reader.ReadRemainingBytes())' CompressionMode.Decompress)) { " is 122.
Long Statement,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,GetInstructionOffset,The length of the statement  "			Error("Instruction is missing in body but it's still being referenced by PDB data. Method {0} (0x{1:X8})' instruction: {2}"' method' method.MDToken.Raw' instr); " is 160.
Long Statement,dnlib.DotNet.Pdb.WindowsPdb,WindowsPdbWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,WriteAsyncMethod,The length of the statement  "				breakpointOffset[i] = (uint)GetExternalInstructionOffset(ref info' stepInfo.BreakpointMethod' stepInfo.BreakpointInstruction); " is 126.
Long Statement,dnlib.DotNet.Pdb.WindowsPdb,WindowsPdbWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,GetExternalInstructionOffset,The length of the statement  "			Error("Async method instruction has been removed but it's still being referenced by PDB info: BP Instruction: {0}' BP Method: {1} (0x{2:X8})' Current Method: {3} (0x{4:X8})"' instr' method' method.MDToken.Raw' info.Method' info.Method.MDToken.Raw); " is 248.
Long Statement,dnlib.DotNet.Pdb.WindowsPdb,SequencePointHelper,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,The length of the statement  "						pdbWriter.writer.DefineSequencePoints(pdbWriter.Add(currPdbDoc)' (uint)index' instrOffsets' startLines' startColumns' endLines' endColumns); " is 140.
Long Statement,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The length of the statement  "			var formatter = new BinaryFormatter(null' new StreamingContext(StreamingContextStates.File | StreamingContextStates.Persistence)); " is 130.
Long Statement,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,Write,The length of the statement  "				if ((ca.ConstructorArguments != null && ca.ConstructorArguments.Count > 0) || (ca.NamedArguments != null && ca.NamedArguments.Count > 0)) " is 137.
Long Statement,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,AddMethodDebugInformation,The length of the statement  "				if (seqPoint.StartLine == SequencePointConstants.HIDDEN_LINE && seqPoint.EndLine == SequencePointConstants.HIDDEN_LINE) { " is 121.
Long Statement,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,AddCustomDebugInformation,The length of the statement  "				AddCustomDebugInformationCore(serializerMethodContext' encodedToken' cdi' CustomDebugInfoGuids.AsyncMethodSteppingInformationBlob); " is 131.
Long Statement,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,AddLocalVariable,The length of the statement  "			var row = new RawLocalVariableRow((ushort)local.Attributes' (ushort)local.Index' debugMetaData.stringsHeap.Add(local.Name)); " is 124.
Long Statement,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,GetMaxStack,The length of the statement  "				Error("Error calculating max stack value. If the method's obfuscated' set CilBody.KeepOldMaxStack or MetaDataOptions.Flags (KeepOldMaxStack' global option) to ignore this error. Otherwise fix your generated CIL code so it conforms to the ECMA standard."); " is 255.
Long Statement,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,GetOffset,The length of the statement  "			Error("Found some other method's instruction or a removed instruction. You probably removed an instruction that is the target of a branch instruction or an instruction that's the first/last instruction in an exception handler."); " is 229.
Long Statement,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteShortInlineBrTarget,The length of the statement  "				Error("Target instruction is too far away for a short branch. Use the long branch or call CilBody.SimplifyBranches() and CilBody.OptimizeBranches()"); " is 150.
Long Statement,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,Write,The length of the statement  "				Debug.Assert(TheOptions.StrongNamePublicKey != null' "Options.StrongNamePublicKey must be initialized when delay signing the assembly"); " is 136.
Long Statement,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,CreateMetaDataChunks,The length of the statement  "			if (pdbState != null && (pdbState.PdbFileKind == PdbFileKind.PortablePDB || pdbState.PdbFileKind == PdbFileKind.EmbeddedPortablePDB)) " is 133.
Long Statement,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,GetModuleName,The length of the statement  "			if (name.EndsWith(".dll"' StringComparison.OrdinalIgnoreCase) || name.EndsWith(".exe"' StringComparison.OrdinalIgnoreCase) || name.EndsWith(".netmodule"' StringComparison.OrdinalIgnoreCase)) " is 190.
Long Statement,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,GetDefaultPdbFileName,The length of the statement  "				Error("TheOptions.WritePdb is true but it's not possible to guess the default PDB file name. Set PdbFileName to the name of the PDB file."); " is 140.
Long Statement,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,CreateRawSections,The length of the statement  "				newSection.Chunk = new BinaryReaderChunk(peImage.CreateStream(peSection.VirtualAddress' sectionSize)' peSection.VirtualSize); " is 125.
Long Statement,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteFile,The length of the statement  "			CalculateRvasAndFileOffsets(chunks' 0' 0' peImage.ImageNTHeaders.OptionalHeader.FileAlignment' peImage.ImageNTHeaders.OptionalHeader.SectionAlignment); " is 151.
Long Statement,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The length of the statement  "			var sectionSizes = new SectionSizes(fileAlignment' sectionAlignment' headerSection.GetVirtualSize()' GetSectionSizeInfos); " is 122.
Long Statement,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,ToWriterOffset,The length of the statement  "				if (section.VirtualAddress <= rva && rva < section.VirtualAddress + Math.Max(section.VirtualSize' section.SizeOfRawData)) " is 121.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("TypeDef {0} ({1:X8}) is not defined in this module ({2}). A type was removed that is still referenced by this module."' td' td.MDToken.Raw' module); " is 155.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("Field {0} ({1:X8}) is not defined in this module ({2}). A field was removed that is still referenced by this module."' fd' fd.MDToken.Raw' module); " is 154.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("Method {0} ({1:X8}) is not defined in this module ({2}). A method was removed that is still referenced by this module."' md' md.MDToken.Raw' module); " is 156.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("Param {0} ({1:X8}) is not defined in this module ({2}). A parameter was removed that is still referenced by this module."' pd' pd.MDToken.Raw' module); " is 158.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("Event {0} ({1:X8}) is not defined in this module ({2}). An event was removed that is still referenced by this module."' ed' ed.MDToken.Raw' module); " is 155.
Long Statement,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,GetRid,The length of the statement  "				Error("Property {0} ({1:X8}) is not defined in this module ({2}). A property was removed that is still referenced by this module."' pd' pd.MDToken.Raw' module); " is 160.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "			Error("TypeDef {0} ({1:X8}) is not defined in this module ({2}). A type was removed that is still referenced by this module."' td' td.MDToken.Raw' module); " is 155.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "				Error("Field {0} ({1:X8}) is not defined in this module ({2}). A field was removed that is still referenced by this module."' fd' fd.MDToken.Raw' module); " is 154.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "				Error("Method {0} ({1:X8}) is not defined in this module ({2}). A method was removed that is still referenced by this module."' md' md.MDToken.Raw' module); " is 156.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "				Error("Param {0} ({1:X8}) is not defined in this module ({2}). A parameter was removed that is still referenced by this module."' pd' pd.MDToken.Raw' module); " is 158.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "				Error("Event {0} ({1:X8}) is not defined in this module ({2}). An event was removed that is still referenced by this module."' ed' ed.MDToken.Raw' module); " is 155.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,GetRid,The length of the statement  "				Error("Property {0} ({1:X8}) is not defined in this module ({2}). A property was removed that is still referenced by this module."' pd' pd.MDToken.Raw' module); " is 160.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,ReUseDeletedMethodRows,The length of the statement  "				mrow.Flags = (ushort)(MethodAttributes.Public | MethodAttributes.Virtual | MethodAttributes.HideBySig | MethodAttributes.NewSlot | MethodAttributes.Abstract); " is 158.
Long Statement,dnlib.DotNet.Writer,PreserveTokensMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PreserveTokensMetaData.cs,ReUseDeletedParamRows,The length of the statement  "					(ushort)(MethodAttributes.Public | MethodAttributes.Virtual | MethodAttributes.HideBySig | MethodAttributes.NewSlot | MethodAttributes.Abstract)' " is 145.
Long Statement,dnlib.DotNet.Writer,SerializerMethodContext,C:\repos\0xd4d_dnlib\src\DotNet\Writer\SerializerMethodContext.cs,GetOffset,The length of the statement  "			helper.Error("Couldn't find an instruction' maybe it was removed. It's still being referenced by some code or by the PDB"); " is 123.
Long Statement,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,UnsafeDisableMemoryMappedIO,The length of the statement  "				throw new InvalidOperationException("Can't convert to non-memory mapped I/O because the PDB reader uses the address. Use the managed PDB reader instead."); " is 155.
Long Statement,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "				using (var fileHandle = CreateFile(creator.theFileName' GENERIC_READ' FILE_SHARE_READ' IntPtr.Zero' OPEN_EXISTING' FILE_ATTRIBUTE_NORMAL' IntPtr.Zero)) { " is 153.
Long Statement,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "						throw new IOException(string.Format("Could not open file {0} for reading. Error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 141.
Long Statement,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "					using (var fileMapping = CreateFileMapping(fileHandle' IntPtr.Zero' PAGE_READONLY | (mapAsImage ? SEC_IMAGE : 0)' 0' 0' null)) { " is 128.
Long Statement,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not create a file mapping object. File: {0}' error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 179.
Long Statement,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 152.
Long Statement,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not get length of {0} (lseek failed): {1}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 162.
Long Statement,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 149.
Long Statement,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not get length of {0} (lseek failed): {1}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 162.
Long Statement,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The length of the statement  "							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1}"' creator.theFileName' Marshal.GetLastWin32Error())); " is 149.
Long Statement,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,Create,The length of the statement  "			return new UnmanagedMemoryImageStream(owner' (FileOffset)((long)fileOffset + (long)offset)' startAddr + (long)offs' len); " is 121.
Long Statement,dnlib.PE,PEInfo,C:\repos\0xd4d_dnlib\src\PE\PEInfo.cs,ToImageSectionHeader,The length of the statement  "				if (rva >= section.VirtualAddress && rva < section.VirtualAddress + Math.Max(section.VirtualSize' section.SizeOfRawData)) " is 121.
Complex Conditional,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,Equals,The conditional expression  "(fa = a as IField) != null && (fb = b as IField) != null && fa.IsField && fb.IsField"  is complex.
Complex Conditional,dnlib.DotNet,ReflectionTypeNameParser,C:\repos\0xd4d_dnlib\src\DotNet\TypeNameParser.cs,ReadTSpecs,The conditional expression  "peeked == '*' || peeked == ''' || peeked == '-' || char.IsDigit((char)peeked)"  is complex.
Complex Conditional,dnlib.DotNet.MD,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataHeader.cs,MetaDataHeader,The conditional expression  "verify && !((majorVersion == 1 && minorVersion == 1) || (majorVersion == 0 && minorVersion >= 19))"  is complex.
Complex Conditional,dnlib.DotNet.Pdb.Dss,SymbolScopeImpl,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolScopeImpl.cs,GetSignatureBytes,The conditional expression  "bufSize == 0 || (hr < 0 && hr != E_FAIL && hr != E_NOTIMPL)"  is complex.
Complex Conditional,dnlib.DotNet.Pdb.Dss,SymbolWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolWriter.cs,DefineSequencePoints,The conditional expression  "offsets == null || lines == null || columns == null ||  				endLines == null || endColumns == null ||  				offsets.Length != lines.Length ||  				offsets.Length != columns.Length ||  				offsets.Length != endLines.Length ||  				offsets.Length != endColumns.Length"  is complex.
Complex Conditional,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,Write,The conditional expression  "(ca.ConstructorArguments != null && ca.ConstructorArguments.Count > 0) || (ca.NamedArguments != null && ca.NamedArguments.Count > 0)"  is complex.
Complex Conditional,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,WriteString,The conditional expression  "c > 0xFF || (1 <= c && c <= 8) || (0x0E <= c && c <= 0x1F) || c == 0x27 || c == 0x2D || c == 0x7F"  is complex.
Virtual Method Call from Constructor,dnlib.DotNet.Pdb,PdbState,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\PdbState.cs,PdbState,The constructor "PdbState" calls a virtual method "Initialize".
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,FindExactAssembly,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,FindClosestAssembly,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetDirs,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetModulePrivateSearchPaths,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetPrivatePaths,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetPrivatePaths,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetPrivatePaths,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,AddSilverlightDirs,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,GetBaseDirectoryOfImage,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,GetBaseDirectoryOfImage,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet,UTF8String,C:\repos\0xd4d_dnlib\src\DotNet\UTF8String.cs,ConvertFromUTF8,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.MD,HotTableStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.MD,HotTableStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb,ImageStreamUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\ImageStreamUtils.cs,OpenImageStream,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb,ImageStreamUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\ImageStreamUtils.cs,OpenImageStream,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb,ImageStreamUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\ImageStreamUtils.cs,OpenImageStream,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb,ManagedSymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\ManagedSymbolReaderCreator.cs,CreateCore,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,PinnedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\PinnedMetaData.cs,Dispose,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CreateFromAssemblyFile,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CreateFromAssemblyFile,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CreateFromAssemblyFile,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CreateFromAssemblyFile,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,CreateFromAssemblyFile,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,Create,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,Create,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Dss,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\SymbolReaderCreator.cs,Create,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Managed,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\SymbolReaderCreator.cs,Create,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Managed,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\SymbolReaderCreator.cs,Create,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolReaderCreator.cs,TryCreate,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.Portable,SymbolReaderCreator,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\SymbolReaderCreator.cs,TryCreate,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Resources,ResourceDataCreator,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceDataCreator.cs,GetSerializedTypeAndAssemblyName,The method has an empty catch block.
Empty Catch Block,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,DeleteFileNoThrow,The method has an empty catch block.
Empty Catch Block,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateWindows,The method has an empty catch block.
Empty Catch Block,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateWindows,The method has an empty catch block.
Empty Catch Block,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateUnix,The method has an empty catch block.
Empty Catch Block,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,CreateUnix,The method has an empty catch block.
Empty Catch Block,dnlib.IO,MemoryMappedFileStreamCreator,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,FreeMemoryMappedIoData,The method has an empty catch block.
Empty Catch Block,dnlib.PE,PEImage,C:\repos\0xd4d_dnlib\src\PE\PEImage.cs,ReadImageDebugDirectories,The method has an empty catch block.
Magic Number,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,IsValidAssemblySignatureKeyAttribute,The following statement contains a magic number: if (sig == null || sig.Params.Count != 2)  				return false;
Magic Number,dnlib.DotNet,AssemblyDef,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,IsValidAssemblySignatureKeyAttribute,The following statement contains a magic number: if (ca.ConstructorArguments.Count != 2)  				return false;
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryCreateTargetFrameworkInfo,The following statement contains a magic number: if (values.Length < 2 || values.Length > 3)  				return false;
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryCreateTargetFrameworkInfo,The following statement contains a magic number: if (values.Length < 2 || values.Length > 3)  				return false;
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryCreateTargetFrameworkInfo,The following statement contains a magic number: for (int i = 1; i < values.Length; i++) {  				var kvp = values[i].Split('=');  				if (kvp.Length != 2)  					return false;    				var key = kvp[0].Trim();  				var value = kvp[1].Trim();    				if (key.Equals("Version"' StringComparison.OrdinalIgnoreCase)) {  					if (value.StartsWith("v"' StringComparison.OrdinalIgnoreCase))  						value = value.Substring(1);  					if (!TryParse(value' out versionRes))  						return false;  					versionRes = new Version(versionRes.Major' versionRes.Minor' versionRes.Build == -1 ? 0 : versionRes.Build' 0);  				}  				else if (key.Equals("Profile"' StringComparison.OrdinalIgnoreCase)) {  					if (!string.IsNullOrEmpty(value))  						profileRes = value;  				}  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 3) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 3) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 4) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 4) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 4) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 5) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value)' ParseInt32(m.Groups[4].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 5) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value)' ParseInt32(m.Groups[4].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 5) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value)' ParseInt32(m.Groups[4].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyDefMD,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyDef.cs,TryParse,The following statement contains a magic number: if (m.Groups.Count == 5) {  				version = new Version(ParseInt32(m.Groups[1].Value)' ParseInt32(m.Groups[2].Value)' ParseInt32(m.Groups[3].Value)' ParseInt32(m.Groups[4].Value));  				return true;  			}
Magic Number,dnlib.DotNet,AssemblyHash,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHash.cs,CreatePublicKeyToken,The following statement contains a magic number: byte[] pkt = new byte[8];
Magic Number,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetPrimitiveSize,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  			case ElementType.I1:  			case ElementType.U1:  				return 1;    			case ElementType.Char:  			case ElementType.I2:  			case ElementType.U2:  				return 2;    			case ElementType.I4:  			case ElementType.U4:  			case ElementType.R4:  				return 4;    			case ElementType.I8:  			case ElementType.U8:  			case ElementType.R8:  				return 8;    			case ElementType.Ptr:  			case ElementType.FnPtr:  			case ElementType.I:  			case ElementType.U:  				return ptrSize;    			default:  				return -1;  			}
Magic Number,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetPrimitiveSize,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  			case ElementType.I1:  			case ElementType.U1:  				return 1;    			case ElementType.Char:  			case ElementType.I2:  			case ElementType.U2:  				return 2;    			case ElementType.I4:  			case ElementType.U4:  			case ElementType.R4:  				return 4;    			case ElementType.I8:  			case ElementType.U8:  			case ElementType.R8:  				return 8;    			case ElementType.Ptr:  			case ElementType.FnPtr:  			case ElementType.I:  			case ElementType.U:  				return ptrSize;    			default:  				return -1;  			}
Magic Number,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetPrimitiveSize,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  			case ElementType.I1:  			case ElementType.U1:  				return 1;    			case ElementType.Char:  			case ElementType.I2:  			case ElementType.U2:  				return 2;    			case ElementType.I4:  			case ElementType.U4:  			case ElementType.R4:  				return 4;    			case ElementType.I8:  			case ElementType.U8:  			case ElementType.R8:  				return 8;    			case ElementType.Ptr:  			case ElementType.FnPtr:  			case ElementType.I:  			case ElementType.U:  				return ptrSize;    			default:  				return -1;  			}
Magic Number,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetNonNestedTypeRefScope,The following statement contains a magic number: for (int i = 0; i < 100; i++) {  				var dt = tr.ResolutionScope as TypeRef;  				if (dt == null)  					return tr;  				tr = dt;  			}
Magic Number,dnlib.DotNet,AssemblyRefUser,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyRef.cs,CreateMscorlibReferenceCLR10,The following statement contains a magic number: return new AssemblyRefUser("mscorlib"' new Version(1' 0' 3300' 0)' new PublicKeyToken("b77a5c561934e089"));
Magic Number,dnlib.DotNet,AssemblyRefUser,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyRef.cs,CreateMscorlibReferenceCLR11,The following statement contains a magic number: return new AssemblyRefUser("mscorlib"' new Version(1' 0' 5000' 0)' new PublicKeyToken("b77a5c561934e089"));
Magic Number,dnlib.DotNet,AssemblyRefUser,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyRef.cs,CreateMscorlibReferenceCLR20,The following statement contains a magic number: return new AssemblyRefUser("mscorlib"' new Version(2' 0' 0' 0)' new PublicKeyToken("b77a5c561934e089"));
Magic Number,dnlib.DotNet,AssemblyRefUser,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyRef.cs,CreateMscorlibReferenceCLR40,The following statement contains a magic number: return new AssemblyRefUser("mscorlib"' new Version(4' 0' 0' 0)' new PublicKeyToken("b77a5c561934e089"));
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,AssemblyResolver,The following statement contains a magic number: if (Type.GetType("Mono.Runtime") != null) {  				var dirs = new Dictionary<string' bool>(StringComparer.OrdinalIgnoreCase);  				var extraMonoPathsList = new List<string>();  				foreach (var prefix in FindMonoPrefixes()) {  					var dir = Path.Combine(Path.Combine(Path.Combine(prefix' "lib")' "mono")' "gac");  					if (dirs.ContainsKey(dir))  						continue;  					dirs[dir] = true;    					if (Directory.Exists(dir)) {  						gacInfos.Add(new GacInfo(-1' ""' Path.GetDirectoryName(dir)' new string[] {  							Path.GetFileName(dir)  						}));  					}    					dir = Path.GetDirectoryName(dir);  					foreach (var verDir in monoVerDirs) {  						var dir2 = dir;  						foreach (var d in verDir.Split(new char[] { '\\' }))  							dir2 = Path.Combine(dir2' d);  						if (Directory.Exists(dir2))  							extraMonoPathsList.Add(dir2);  					}  				}    				var paths = Environment.GetEnvironmentVariable("MONO_PATH");  				if (paths != null) {  					foreach (var tmp in paths.Split(Path.PathSeparator)) {  						var path = tmp.Trim();  						if (path != string.Empty && Directory.Exists(path))  							extraMonoPathsList.Add(path);  					}  				}  				extraMonoPaths = extraMonoPathsList.ToArray();  			}  			else {  				var windir = Environment.GetEnvironmentVariable("WINDIR");  				if (!string.IsNullOrEmpty(windir)) {  					string path;    					// .NET 1.x and 2.x  					path = Path.Combine(windir' "assembly");  					if (Directory.Exists(path)) {  						gacInfos.Add(new GacInfo(2' ""' path' new string[] {  							"GAC_32"' "GAC_64"' "GAC_MSIL"' "GAC"  						}));  					}    					// .NET 4.x  					path = Path.Combine(Path.Combine(windir' "Microsoft.NET")' "assembly");  					if (Directory.Exists(path)) {  						gacInfos.Add(new GacInfo(4' "v4.0_"' path' new string[] {  							"GAC_32"' "GAC_64"' "GAC_MSIL"  						}));  					}  				}  			}
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,AssemblyResolver,The following statement contains a magic number: if (Type.GetType("Mono.Runtime") != null) {  				var dirs = new Dictionary<string' bool>(StringComparer.OrdinalIgnoreCase);  				var extraMonoPathsList = new List<string>();  				foreach (var prefix in FindMonoPrefixes()) {  					var dir = Path.Combine(Path.Combine(Path.Combine(prefix' "lib")' "mono")' "gac");  					if (dirs.ContainsKey(dir))  						continue;  					dirs[dir] = true;    					if (Directory.Exists(dir)) {  						gacInfos.Add(new GacInfo(-1' ""' Path.GetDirectoryName(dir)' new string[] {  							Path.GetFileName(dir)  						}));  					}    					dir = Path.GetDirectoryName(dir);  					foreach (var verDir in monoVerDirs) {  						var dir2 = dir;  						foreach (var d in verDir.Split(new char[] { '\\' }))  							dir2 = Path.Combine(dir2' d);  						if (Directory.Exists(dir2))  							extraMonoPathsList.Add(dir2);  					}  				}    				var paths = Environment.GetEnvironmentVariable("MONO_PATH");  				if (paths != null) {  					foreach (var tmp in paths.Split(Path.PathSeparator)) {  						var path = tmp.Trim();  						if (path != string.Empty && Directory.Exists(path))  							extraMonoPathsList.Add(path);  					}  				}  				extraMonoPaths = extraMonoPathsList.ToArray();  			}  			else {  				var windir = Environment.GetEnvironmentVariable("WINDIR");  				if (!string.IsNullOrEmpty(windir)) {  					string path;    					// .NET 1.x and 2.x  					path = Path.Combine(windir' "assembly");  					if (Directory.Exists(path)) {  						gacInfos.Add(new GacInfo(2' ""' path' new string[] {  							"GAC_32"' "GAC_64"' "GAC_MSIL"' "GAC"  						}));  					}    					// .NET 4.x  					path = Path.Combine(Path.Combine(windir' "Microsoft.NET")' "assembly");  					if (Directory.Exists(path)) {  						gacInfos.Add(new GacInfo(4' "v4.0_"' path' new string[] {  							"GAC_32"' "GAC_64"' "GAC_MSIL"  						}));  					}  				}  			}
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetCurrentMonoPrefix,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				path = Path.GetDirectoryName(path);
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetGacInfos,The following statement contains a magic number: int version = sourceModule == null ? int.MinValue : sourceModule.IsClr40 ? 4 : 2;
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,GetGacInfos,The following statement contains a magic number: int version = sourceModule == null ? int.MinValue : sourceModule.IsClr40 ? 4 : 2;
Magic Number,dnlib.DotNet,AssemblyResolver,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyResolver.cs,FindAssembliesModuleSearchPaths,The following statement contains a magic number: foreach (var ext in exts) {  				foreach (var path in searchPaths.GetSafeEnumerable()) {  					for (int i = 0; i < 2; i++) {  						string path2;  						if (i == 0)  							path2 = Path.Combine(path' asmSimpleName + ext);  						else  							path2 = Path.Combine(Path.Combine(path' asmSimpleName)' asmSimpleName + ext);  						if (File.Exists(path2))  							yield return path2;  					}  				}  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,ConstantMD,C:\repos\0xd4d_dnlib\src\DotNet\Constant.cs,GetValue,The following statement contains a magic number: switch (etype) {  			case ElementType.Boolean:  				if (data == null || data.Length < 1)  					return false;  				return BitConverter.ToBoolean(data' 0);    			case ElementType.Char:  				if (data == null || data.Length < 2)  					return (char)0;  				return BitConverter.ToChar(data' 0);    			case ElementType.I1:  				if (data == null || data.Length < 1)  					return (sbyte)0;  				return (sbyte)data[0];    			case ElementType.U1:  				if (data == null || data.Length < 1)  					return (byte)0;  				return data[0];    			case ElementType.I2:  				if (data == null || data.Length < 2)  					return (short)0;  				return BitConverter.ToInt16(data' 0);    			case ElementType.U2:  				if (data == null || data.Length < 2)  					return (ushort)0;  				return BitConverter.ToUInt16(data' 0);    			case ElementType.I4:  				if (data == null || data.Length < 4)  					return (int)0;  				return BitConverter.ToInt32(data' 0);    			case ElementType.U4:  				if (data == null || data.Length < 4)  					return (uint)0;  				return BitConverter.ToUInt32(data' 0);    			case ElementType.I8:  				if (data == null || data.Length < 8)  					return (long)0;  				return BitConverter.ToInt64(data' 0);    			case ElementType.U8:  				if (data == null || data.Length < 8)  					return (ulong)0;  				return BitConverter.ToUInt64(data' 0);    			case ElementType.R4:  				if (data == null || data.Length < 4)  					return (float)0;  				return BitConverter.ToSingle(data' 0);    			case ElementType.R8:  				if (data == null || data.Length < 8)  					return (double)0;  				return BitConverter.ToDouble(data' 0);    			case ElementType.String:  				if (data == null)  					return string.Empty;  				return Encoding.Unicode.GetString(data' 0' data.Length / 2 * 2);    			case ElementType.Class:  				return null;    			default:  				return null;  			}
Magic Number,dnlib.DotNet,FieldDef,C:\repos\0xd4d_dnlib\src\DotNet\FieldDef.cs,GetPointerSize,The following statement contains a magic number: if (declaringType == null)  				return 4;
Magic Number,dnlib.DotNet,FieldDef,C:\repos\0xd4d_dnlib\src\DotNet\FieldDef.cs,GetPointerSize,The following statement contains a magic number: if (module == null)  				return 4;
Magic Number,dnlib.DotNet,ImplMap,C:\repos\0xd4d_dnlib\src\DotNet\ImplMap.cs,GetDllName,The following statement contains a magic number: if (dllName.EndsWith(".dll"' StringComparison.OrdinalIgnoreCase))  				return dllName.Substring(0' dllName.Length - 4);
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,CalculateRuntimeVersionWinMD,The following statement contains a magic number: if (s.StartsWith("CLR"' StringComparison.OrdinalIgnoreCase))  				s = s.Substring(3);
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: return GetPointerSize(4);
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: if (machine == Machine.AMD64 || machine == Machine.IA64 || machine == Machine.ARM64)  				return 8;
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: if (machine != Machine.I386)  				return 4;
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: if (GetCor20RuntimeVersion() < 0x00020005)  				return 4;
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: if ((flags & ComImageFlags.ILOnly) == 0)  				return 4;
Magic Number,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following statement contains a magic number: switch (flags & (ComImageFlags._32BitRequired | ComImageFlags._32BitPreferred)) {  			case 0:  				// Machine and ILOnly flag should be checked  				break;    			case ComImageFlags._32BitPreferred:  				// Illegal  				break;    			case ComImageFlags._32BitRequired:  				// x86 image (32-bit process)  				return 4;    			case ComImageFlags._32BitRequired | ComImageFlags._32BitPreferred:  				// Platform neutral but prefers to be 32-bit  				return prefer32bitPointerSize;  			}
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ModuleDefMD,The following statement contains a magic number: this.Cor20HeaderRuntimeVersion = (uint)(MetaData.ImageCor20Header.MajorRuntimeVersion << 16) | MetaData.ImageCor20Header.MinorRuntimeVersion;
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 64; i++) {  				var tbl = TablesStream.Get((Table)i);  				lastUsedRids[i] = tbl == null ? 0 : (int)tbl.Rows;  			}
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateResourceStream,The following statement contains a magic number: try {  				var peImage = metaData.PEImage;  				var cor20Header = metaData.ImageCor20Header;  				var resources = cor20Header.Resources;  				if (resources.VirtualAddress == 0 || resources.Size == 0)  					return MemoryImageStream.CreateEmpty();  				fs = peImage.CreateFullStream();    				var resourceOffset = (long)peImage.ToFileOffset(resources.VirtualAddress);  				if (resourceOffset <= 0 || resourceOffset + offset < resourceOffset)  					return MemoryImageStream.CreateEmpty();  				if (offset + 3 <= offset || offset + 3 >= resources.Size)  					return MemoryImageStream.CreateEmpty();  				if (resourceOffset + offset + 3 < resourceOffset || resourceOffset + offset + 3 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				fs.Position = resourceOffset + offset;  				uint length = fs.ReadUInt32();	// Could throw  				if (length == 0 || fs.Position + length - 1 < fs.Position || fs.Position + length - 1 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				if (fs.Position - resourceOffset + length - 1 >= resources.Size)  					return MemoryImageStream.CreateEmpty();    				imageStream = peImage.CreateStream((FileOffset)fs.Position' length);  				if (peImage.MayHaveInvalidAddresses) {  					for (; imageStream.Position < imageStream.Length; imageStream.Position += 0x1000)  						imageStream.ReadByte();	// Could throw  					imageStream.Position = imageStream.Length - 1;	// length is never 0 if we're here  					imageStream.ReadByte();	// Could throw  					imageStream.Position = 0;  				}  			}  			catch (AccessViolationException) {  				if (imageStream != null)  					imageStream.Dispose();  				return MemoryImageStream.CreateEmpty();  			}  			finally {  				if (fs != null)  					fs.Dispose();  			}
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateResourceStream,The following statement contains a magic number: try {  				var peImage = metaData.PEImage;  				var cor20Header = metaData.ImageCor20Header;  				var resources = cor20Header.Resources;  				if (resources.VirtualAddress == 0 || resources.Size == 0)  					return MemoryImageStream.CreateEmpty();  				fs = peImage.CreateFullStream();    				var resourceOffset = (long)peImage.ToFileOffset(resources.VirtualAddress);  				if (resourceOffset <= 0 || resourceOffset + offset < resourceOffset)  					return MemoryImageStream.CreateEmpty();  				if (offset + 3 <= offset || offset + 3 >= resources.Size)  					return MemoryImageStream.CreateEmpty();  				if (resourceOffset + offset + 3 < resourceOffset || resourceOffset + offset + 3 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				fs.Position = resourceOffset + offset;  				uint length = fs.ReadUInt32();	// Could throw  				if (length == 0 || fs.Position + length - 1 < fs.Position || fs.Position + length - 1 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				if (fs.Position - resourceOffset + length - 1 >= resources.Size)  					return MemoryImageStream.CreateEmpty();    				imageStream = peImage.CreateStream((FileOffset)fs.Position' length);  				if (peImage.MayHaveInvalidAddresses) {  					for (; imageStream.Position < imageStream.Length; imageStream.Position += 0x1000)  						imageStream.ReadByte();	// Could throw  					imageStream.Position = imageStream.Length - 1;	// length is never 0 if we're here  					imageStream.ReadByte();	// Could throw  					imageStream.Position = 0;  				}  			}  			catch (AccessViolationException) {  				if (imageStream != null)  					imageStream.Dispose();  				return MemoryImageStream.CreateEmpty();  			}  			finally {  				if (fs != null)  					fs.Dispose();  			}
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateResourceStream,The following statement contains a magic number: try {  				var peImage = metaData.PEImage;  				var cor20Header = metaData.ImageCor20Header;  				var resources = cor20Header.Resources;  				if (resources.VirtualAddress == 0 || resources.Size == 0)  					return MemoryImageStream.CreateEmpty();  				fs = peImage.CreateFullStream();    				var resourceOffset = (long)peImage.ToFileOffset(resources.VirtualAddress);  				if (resourceOffset <= 0 || resourceOffset + offset < resourceOffset)  					return MemoryImageStream.CreateEmpty();  				if (offset + 3 <= offset || offset + 3 >= resources.Size)  					return MemoryImageStream.CreateEmpty();  				if (resourceOffset + offset + 3 < resourceOffset || resourceOffset + offset + 3 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				fs.Position = resourceOffset + offset;  				uint length = fs.ReadUInt32();	// Could throw  				if (length == 0 || fs.Position + length - 1 < fs.Position || fs.Position + length - 1 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				if (fs.Position - resourceOffset + length - 1 >= resources.Size)  					return MemoryImageStream.CreateEmpty();    				imageStream = peImage.CreateStream((FileOffset)fs.Position' length);  				if (peImage.MayHaveInvalidAddresses) {  					for (; imageStream.Position < imageStream.Length; imageStream.Position += 0x1000)  						imageStream.ReadByte();	// Could throw  					imageStream.Position = imageStream.Length - 1;	// length is never 0 if we're here  					imageStream.ReadByte();	// Could throw  					imageStream.Position = 0;  				}  			}  			catch (AccessViolationException) {  				if (imageStream != null)  					imageStream.Dispose();  				return MemoryImageStream.CreateEmpty();  			}  			finally {  				if (fs != null)  					fs.Dispose();  			}
Magic Number,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,CreateResourceStream,The following statement contains a magic number: try {  				var peImage = metaData.PEImage;  				var cor20Header = metaData.ImageCor20Header;  				var resources = cor20Header.Resources;  				if (resources.VirtualAddress == 0 || resources.Size == 0)  					return MemoryImageStream.CreateEmpty();  				fs = peImage.CreateFullStream();    				var resourceOffset = (long)peImage.ToFileOffset(resources.VirtualAddress);  				if (resourceOffset <= 0 || resourceOffset + offset < resourceOffset)  					return MemoryImageStream.CreateEmpty();  				if (offset + 3 <= offset || offset + 3 >= resources.Size)  					return MemoryImageStream.CreateEmpty();  				if (resourceOffset + offset + 3 < resourceOffset || resourceOffset + offset + 3 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				fs.Position = resourceOffset + offset;  				uint length = fs.ReadUInt32();	// Could throw  				if (length == 0 || fs.Position + length - 1 < fs.Position || fs.Position + length - 1 >= fs.Length)  					return MemoryImageStream.CreateEmpty();  				if (fs.Position - resourceOffset + length - 1 >= resources.Size)  					return MemoryImageStream.CreateEmpty();    				imageStream = peImage.CreateStream((FileOffset)fs.Position' length);  				if (peImage.MayHaveInvalidAddresses) {  					for (; imageStream.Position < imageStream.Length; imageStream.Position += 0x1000)  						imageStream.ReadByte();	// Could throw  					imageStream.Position = imageStream.Length - 1;	// length is never 0 if we're here  					imageStream.ReadByte();	// Could throw  					imageStream.Position = 0;  				}  			}  			catch (AccessViolationException) {  				if (imageStream != null)  					imageStream.Dispose();  				return MemoryImageStream.CreateEmpty();  			}  			finally {  				if (fs != null)  					fs.Dispose();  			}
Magic Number,dnlib.DotNet,Resolver,C:\repos\0xd4d_dnlib\src\DotNet\Resolver.cs,ResolveExportedType,The following statement contains a magic number: for (int i = 0; i < 30; i++) {  				var exportedType = FindExportedType(modules' typeRef);  				if (exportedType == null)  					return null;    				var asmResolver = modules[0].Context.AssemblyResolver;  				var etAsm = asmResolver.Resolve(exportedType.DefinitionAssembly' sourceModule ?? typeRef.Module);  				if (etAsm == null)  					return null;    				var td = etAsm.Find(typeRef);  				if (td != null)  					return td;    				modules = etAsm.Modules;  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < numGenericParams; i++) {  				hash += (uint)(etypeHashCode + i);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < numGenericParams; i++) {  				hash += (uint)(etypeHashCode + i);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]' declaringType);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SigComparer,C:\repos\0xd4d_dnlib\src\DotNet\SigComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < a.Count; i++) {  				hash += (uint)GetHashCode(a[i]' declaringType);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,SignatureReader,C:\repos\0xd4d_dnlib\src\DotNet\SignatureReader.cs,ReadType,The following statement contains a magic number: switch ((ElementType)reader.ReadByte()) {  			case ElementType.Void:		result = corLibTypes.Void; break;  			case ElementType.Boolean:	result = corLibTypes.Boolean; break;  			case ElementType.Char:		result = corLibTypes.Char; break;  			case ElementType.I1:		result = corLibTypes.SByte; break;  			case ElementType.U1:		result = corLibTypes.Byte; break;  			case ElementType.I2:		result = corLibTypes.Int16; break;  			case ElementType.U2:		result = corLibTypes.UInt16; break;  			case ElementType.I4:		result = corLibTypes.Int32; break;  			case ElementType.U4:		result = corLibTypes.UInt32; break;  			case ElementType.I8:		result = corLibTypes.Int64; break;  			case ElementType.U8:		result = corLibTypes.UInt64; break;  			case ElementType.R4:		result = corLibTypes.Single; break;  			case ElementType.R8:		result = corLibTypes.Double; break;  			case ElementType.String:	result = corLibTypes.String; break;  			case ElementType.TypedByRef:result = corLibTypes.TypedReference; break;  			case ElementType.I:			result = corLibTypes.IntPtr; break;  			case ElementType.U:			result = corLibTypes.UIntPtr; break;  			case ElementType.Object:	result = corLibTypes.Object; break;    			case ElementType.Ptr:		result = new PtrSig(ReadType()); break;  			case ElementType.ByRef:		result = new ByRefSig(ReadType()); break;  			case ElementType.ValueType:	result = new ValueTypeSig(ReadTypeDefOrRef()); break;  			case ElementType.Class:		result = new ClassSig(ReadTypeDefOrRef()); break;  			case ElementType.FnPtr:		result = new FnPtrSig(ReadSig()); break;  			case ElementType.SZArray:	result = new SZArraySig(ReadType()); break;  			case ElementType.CModReqd:	result = new CModReqdSig(ReadTypeDefOrRef()' ReadType()); break;  			case ElementType.CModOpt:	result = new CModOptSig(ReadTypeDefOrRef()' ReadType()); break;  			case ElementType.Sentinel:	result = new SentinelSig(); break;  			case ElementType.Pinned:	result = new PinnedSig(ReadType()); break;    			case ElementType.Var:  				if (!reader.ReadCompressedUInt32(out num))  					break;  				result = new GenericVar(num' gpContext.Type);  				break;    			case ElementType.MVar:  				if (!reader.ReadCompressedUInt32(out num))  					break;  				result = new GenericMVar(num' gpContext.Method);  				break;    			case ElementType.ValueArray:  				nextType = ReadType();  				if (!reader.ReadCompressedUInt32(out num))  					break;  				result = new ValueArraySig(nextType' num);  				break;    			case ElementType.Module:  				if (!reader.ReadCompressedUInt32(out num))  					break;  				result = new ModuleSig(num' ReadType());  				break;    			case ElementType.GenericInst:  				nextType = ReadType();  				if (!reader.ReadCompressedUInt32(out num))  					break;  				var genericInstSig = new GenericInstSig(nextType as ClassOrValueTypeSig' num);  				var args = genericInstSig.GenericArguments;  				for (uint i = 0; i < num; i++)  					args.Add(ReadType());  				result = genericInstSig;  				break;    			case ElementType.Array:  				nextType = ReadType();  				uint rank;  				if (!reader.ReadCompressedUInt32(out rank))  					break;  				if (rank == 0) {  					result = new ArraySig(nextType' rank);  					break;  				}  				if (!reader.ReadCompressedUInt32(out num))  					break;  				var sizes = new List<uint>((int)num);  				for (uint i = 0; i < num; i++) {  					uint size;  					if (!reader.ReadCompressedUInt32(out size))  						goto exit;  					sizes.Add(size);  				}  				if (!reader.ReadCompressedUInt32(out num))  					break;  				var lowerBounds = new List<int>((int)num);  				for (uint i = 0; i < num; i++) {  					int size;  					if (!reader.ReadCompressedInt32(out size))  						goto exit;  					lowerBounds.Add(size);  				}  				result = new ArraySig(nextType' rank' sizes' lowerBounds);  				break;    			case ElementType.Internal:  				IntPtr address;  				if (IntPtr.Size == 4)  					address = new IntPtr(reader.ReadInt32());  				else  					address = new IntPtr(reader.ReadInt64());  				result = helper.ConvertRTInternalAddress(address);  				break;    			case ElementType.End:  			case ElementType.R:  			default:  				result = null;  				break;  			}
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				// Read PublicKeyBlob  				signatureAlgorithm = (SignatureAlgorithm)reader.ReadUInt32();  				hashAlgorithm = (AssemblyHashAlgorithm)reader.ReadUInt32();  				/*int pkLen = */reader.ReadInt32();    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 6)  					throw new InvalidKeyException("Not a public key");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA1_SIG)	// magic = RSA1  					throw new InvalidKeyException("Invalid RSA1 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				modulus = reader.ReadBytesReverse((int)(bitLength / 8));  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Invalid public key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				// Read PublicKeyBlob  				signatureAlgorithm = (SignatureAlgorithm)reader.ReadUInt32();  				hashAlgorithm = (AssemblyHashAlgorithm)reader.ReadUInt32();  				/*int pkLen = */reader.ReadInt32();    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 6)  					throw new InvalidKeyException("Not a public key");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA1_SIG)	// magic = RSA1  					throw new InvalidKeyException("Invalid RSA1 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				modulus = reader.ReadBytesReverse((int)(bitLength / 8));  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Invalid public key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				// Read PublicKeyBlob  				signatureAlgorithm = (SignatureAlgorithm)reader.ReadUInt32();  				hashAlgorithm = (AssemblyHashAlgorithm)reader.ReadUInt32();  				/*int pkLen = */reader.ReadInt32();    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 6)  					throw new InvalidKeyException("Not a public key");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA1_SIG)	// magic = RSA1  					throw new InvalidKeyException("Invalid RSA1 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				modulus = reader.ReadBytesReverse((int)(bitLength / 8));  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Invalid public key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				// Read PublicKeyBlob  				signatureAlgorithm = (SignatureAlgorithm)reader.ReadUInt32();  				hashAlgorithm = (AssemblyHashAlgorithm)reader.ReadUInt32();  				/*int pkLen = */reader.ReadInt32();    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 6)  					throw new InvalidKeyException("Not a public key");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA1_SIG)	// magic = RSA1  					throw new InvalidKeyException("Invalid RSA1 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				modulus = reader.ReadBytesReverse((int)(bitLength / 8));  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Invalid public key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreatePublicKey,The following statement contains a magic number: writer.Write((byte)6);
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreatePublicKey,The following statement contains a magic number: writer.Write((byte)2);
Magic Number,dnlib.DotNet,StrongNamePublicKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreatePublicKey,The following statement contains a magic number: writer.Write(modulus.Length * 8);
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				publicKey = null;    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 7)  					throw new InvalidKeyException("Not a public/private key pair");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA2_SIG)	// magic = RSA2  					throw new InvalidKeyException("Invalid RSA2 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				int len8 = (int)(bitLength / 8);  				int len16 = (int)(bitLength / 16);    				// Read the rest  				modulus = reader.ReadBytesReverse(len8);  				prime1 = reader.ReadBytesReverse(len16);  				prime2 = reader.ReadBytesReverse(len16);  				exponent1 = reader.ReadBytesReverse(len16);  				exponent2 = reader.ReadBytesReverse(len16);  				coefficient = reader.ReadBytesReverse(len16);  				privateExponent = reader.ReadBytesReverse(len8);  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Couldn't read strong name key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				publicKey = null;    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 7)  					throw new InvalidKeyException("Not a public/private key pair");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA2_SIG)	// magic = RSA2  					throw new InvalidKeyException("Invalid RSA2 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				int len8 = (int)(bitLength / 8);  				int len16 = (int)(bitLength / 16);    				// Read the rest  				modulus = reader.ReadBytesReverse(len8);  				prime1 = reader.ReadBytesReverse(len16);  				prime2 = reader.ReadBytesReverse(len16);  				exponent1 = reader.ReadBytesReverse(len16);  				exponent2 = reader.ReadBytesReverse(len16);  				coefficient = reader.ReadBytesReverse(len16);  				privateExponent = reader.ReadBytesReverse(len8);  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Couldn't read strong name key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				publicKey = null;    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 7)  					throw new InvalidKeyException("Not a public/private key pair");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA2_SIG)	// magic = RSA2  					throw new InvalidKeyException("Invalid RSA2 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				int len8 = (int)(bitLength / 8);  				int len16 = (int)(bitLength / 16);    				// Read the rest  				modulus = reader.ReadBytesReverse(len8);  				prime1 = reader.ReadBytesReverse(len16);  				prime2 = reader.ReadBytesReverse(len16);  				exponent1 = reader.ReadBytesReverse(len16);  				exponent2 = reader.ReadBytesReverse(len16);  				coefficient = reader.ReadBytesReverse(len16);  				privateExponent = reader.ReadBytesReverse(len8);  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Couldn't read strong name key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				publicKey = null;    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 7)  					throw new InvalidKeyException("Not a public/private key pair");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA2_SIG)	// magic = RSA2  					throw new InvalidKeyException("Invalid RSA2 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				int len8 = (int)(bitLength / 8);  				int len16 = (int)(bitLength / 16);    				// Read the rest  				modulus = reader.ReadBytesReverse(len8);  				prime1 = reader.ReadBytesReverse(len16);  				prime2 = reader.ReadBytesReverse(len16);  				exponent1 = reader.ReadBytesReverse(len16);  				exponent2 = reader.ReadBytesReverse(len16);  				coefficient = reader.ReadBytesReverse(len16);  				privateExponent = reader.ReadBytesReverse(len8);  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Couldn't read strong name key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,Initialize,The following statement contains a magic number: try {  				publicKey = null;    				// Read PUBLICKEYSTRUC  				if (reader.ReadByte() != 7)  					throw new InvalidKeyException("Not a public/private key pair");  				if (reader.ReadByte() != 2)  					throw new InvalidKeyException("Invalid version");  				reader.ReadUInt16();	// reserved  				if ((SignatureAlgorithm)reader.ReadUInt32() != SignatureAlgorithm.CALG_RSA_SIGN)  					throw new InvalidKeyException("Not RSA sign");    				// Read RSAPUBKEY  				if (reader.ReadUInt32() != RSA2_SIG)	// magic = RSA2  					throw new InvalidKeyException("Invalid RSA2 magic");  				uint bitLength = reader.ReadUInt32();  				publicExponent = reader.ReadBytesReverse(4);    				int len8 = (int)(bitLength / 8);  				int len16 = (int)(bitLength / 16);    				// Read the rest  				modulus = reader.ReadBytesReverse(len8);  				prime1 = reader.ReadBytesReverse(len16);  				prime2 = reader.ReadBytesReverse(len16);  				exponent1 = reader.ReadBytesReverse(len16);  				exponent2 = reader.ReadBytesReverse(len16);  				coefficient = reader.ReadBytesReverse(len16);  				privateExponent = reader.ReadBytesReverse(len8);  			}  			catch (IOException ex) {  				throw new InvalidKeyException("Couldn't read strong name key"' ex);  			}
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreateStrongName,The following statement contains a magic number: writer.Write((byte)7);
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreateStrongName,The following statement contains a magic number: writer.Write((byte)2);
Magic Number,dnlib.DotNet,StrongNameKey,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameKey.cs,CreateStrongName,The following statement contains a magic number: writer.Write(modulus.Length * 8);
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,StrongNameSigner,C:\repos\0xd4d_dnlib\src\DotNet\StrongNameSigner.cs,StrongNameHashData,The following statement contains a magic number: using (var hasher = new AssemblyHash(hashAlg)) {  				byte[] buffer = new byte[0x8000];    				// Hash the DOS header. It's defined to be all data from the start of  				// the file up to the NT headers.  				stream.Position = baseOffset + 0x3C;  				uint ntHeadersOffs = reader.ReadUInt32();  				stream.Position = baseOffset;  				hasher.Hash(stream' ntHeadersOffs' buffer);    				// Hash NT headers' but hash authenticode + checksum as 0s  				stream.Position += 6;  				int numSections = reader.ReadUInt16();  				stream.Position -= 8;  				hasher.Hash(stream' 0x18' buffer);	// magic + FileHeader    				bool is32bit = reader.ReadUInt16() == 0x010B;  				stream.Position -= 2;  				int optHeaderSize = is32bit ? 0x60 : 0x70;  				if (stream.Read(buffer' 0' optHeaderSize) != optHeaderSize)  					throw new IOException("Could not read data");  				// Clear checksum  				for (int i = 0; i < 4; i++)  					buffer[0x40 + i] = 0;  				hasher.Hash(buffer' 0' optHeaderSize);    				const int imageDirsSize = 16 * 8;  				if (stream.Read(buffer' 0' imageDirsSize) != imageDirsSize)  					throw new IOException("Could not read data");  				// Clear authenticode data dir  				for (int i = 0; i < 8; i++)  					buffer[4 * 8 + i] = 0;  				hasher.Hash(buffer' 0' imageDirsSize);    				// Hash section headers  				long sectHeadersOffs = stream.Position;  				hasher.Hash(stream' (uint)numSections * 0x28' buffer);    				// Hash all raw section data but make sure we don't hash the location  				// where the strong name signature will be stored.  				for (int i = 0; i < numSections; i++) {  					stream.Position = sectHeadersOffs + i * 0x28 + 0x10;  					uint sizeOfRawData = reader.ReadUInt32();  					uint pointerToRawData = reader.ReadUInt32();    					stream.Position = baseOffset + pointerToRawData;  					while (sizeOfRawData > 0) {  						var pos = stream.Position;    						if (snSigOffset <= pos && pos < snSigOffsetEnd) {  							uint skipSize = (uint)(snSigOffsetEnd - pos);  							if (skipSize >= sizeOfRawData)  								break;  							sizeOfRawData -= skipSize;  							stream.Position += skipSize;  							continue;  						}    						if (pos >= snSigOffsetEnd) {  							hasher.Hash(stream' sizeOfRawData' buffer);  							break;  						}    						uint maxLen = (uint)Math.Min(snSigOffset - pos' sizeOfRawData);  						hasher.Hash(stream' maxLen' buffer);  						sizeOfRawData -= maxLen;  					}  				}    				return hasher.ComputeHash();  			}
Magic Number,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,GetInfo,The following statement contains a magic number: if (tia != null) {  				if (tia.ConstructorArguments.Count >= 2) {  					if (tia.ConstructorArguments[0].Type.GetElementType() != ElementType.String)  						return null;  					if (tia.ConstructorArguments[1].Type.GetElementType() != ElementType.String)  						return null;  					scope = tia.ConstructorArguments[0].Value as UTF8String ?? tia.ConstructorArguments[0].Value as string;  					identifier = tia.ConstructorArguments[1].Value as UTF8String ?? tia.ConstructorArguments[1].Value as string;  				}  			}  			else {  				var mod = td.Module;  				var asm = mod == null ? null : mod.Assembly;  				if (asm == null)  					return null;  				bool isTypeLib = asm.CustomAttributes.IsDefined("System.Runtime.InteropServices.ImportedFromTypeLibAttribute") ||  								asm.CustomAttributes.IsDefined("System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute");  				if (!isTypeLib)  					return null;  			}
Magic Number,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,CheckEquivalent,The following statement contains a magic number: for (int i = 0; td != null && i < 1000; i++) {  				if (i != 0) {  					var info = GetInfo(td);  					if (info == null)  						return false;  				}    				bool f;  				if (td.IsInterface)  					f = td.IsImport || td.CustomAttributes.IsDefined("System.Runtime.InteropServices.ComEventInterfaceAttribute");  				else  					f = td.IsValueType || td.IsDelegate;  				if (!f)  					return false;  				if (td.GenericParameters.Count > 0)  					return false;    				var declType = td.DeclaringType;  				if (declType == null)  					return td.IsPublic;    				if (!td.IsNestedPublic)  					return false;  				td = declType;  			}
Magic Number,dnlib.DotNet,TIAHelper,C:\repos\0xd4d_dnlib\src\DotNet\TIAHelper.cs,Equivalent,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  				if (td1.IsInterface) {  					if (!td2.IsInterface)  						return false;  				}  				else {  					var bt1 = td1.BaseType;  					var bt2 = td2.BaseType;  					if (bt1 == null || bt2 == null)  						return false;  					if (td1.IsDelegate) {  						if (!td2.IsDelegate)  							return false;  						if (!DelegateEquals(td1' td2))  							return false;  					}  					else if (td1.IsValueType) {  						if (td1.IsEnum != td2.IsEnum)  							return false;  						if (!td2.IsValueType)  							return false;  						if (!ValueTypeEquals(td1' td2' td1.IsEnum))  							return false;  					}  					else  						return false;  				}    				td1 = td1.DeclaringType;  				td2 = td2.DeclaringType;  				if (td1 == null && td2 == null)  					break;  				if (td1 == null || td2 == null)  					return false;  			}
Magic Number,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,FindOrCreateStaticConstructor,The following statement contains a magic number: body.MaxStack = 8;
Magic Number,dnlib.DotNet,TypeDef,C:\repos\0xd4d_dnlib\src\DotNet\TypeDef.cs,FindMethodImplMethod,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				var ts = parent as TypeSpec;  				if (ts == null)  					break;    				var gis = ts.TypeSig as GenericInstSig;  				if (gis == null || gis.GenericType == null)  					return null;  				parent = gis.GenericType.TypeDefOrRef;  			}
Magic Number,dnlib.DotNet,TypeNameParser,C:\repos\0xd4d_dnlib\src\DotNet\TypeNameParser.cs,ReadUInt32,The following statement contains a magic number: while (true) {  				int c = PeekChar();  				if (c == -1 || !(c >= '0' && c <= '9'))  					break;  				ReadChar();  				uint newVal = val * 10 + (uint)(c - '0');  				Verify(newVal >= val' "Integer overflow");  				val = newVal;  				readInt = true;  			}
Magic Number,dnlib.DotNet,TypeRef,C:\repos\0xd4d_dnlib\src\DotNet\TypeRef.cs,GetNonNestedTypeRef,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  				var next = typeRef.ResolutionScope as TypeRef;  				if (next == null)  					return typeRef;  				typeRef = next;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ToHex,The following statement contains a magic number: var chars = new char[bytes.Length * 2];
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ToHex,The following statement contains a magic number: for (int i = 0' j = 0; i < bytes.Length; i++) {  				byte b = bytes[i];  				chars[j++] = ToHexChar(b >> 4' upper);  				chars[j++] = ToHexChar(b & 0x0F' upper);  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ToHexChar,The following statement contains a magic number: if (0 <= val && val <= 9)  				return (char)(val + (int)'0');
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ToHexChar,The following statement contains a magic number: return (char)(val - 10 + (upper ? (int)'A' : (int)'a'));
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ParseBytes,The following statement contains a magic number: try {  				if (hexString.Length % 2 != 0)  					return null;  				var bytes = new byte[hexString.Length / 2];  				for (int i = 0; i < hexString.Length; i += 2) {  					int upper = TryParseHexChar(hexString[i]);  					int lower = TryParseHexChar(hexString[i + 1]);  					if (upper < 0 || lower < 0)  						return null;  					bytes[i / 2] = (byte)((upper << 4) | lower);  				}  				return bytes;  			}  			catch {  				return null;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ParseBytes,The following statement contains a magic number: try {  				if (hexString.Length % 2 != 0)  					return null;  				var bytes = new byte[hexString.Length / 2];  				for (int i = 0; i < hexString.Length; i += 2) {  					int upper = TryParseHexChar(hexString[i]);  					int lower = TryParseHexChar(hexString[i + 1]);  					if (upper < 0 || lower < 0)  						return null;  					bytes[i / 2] = (byte)((upper << 4) | lower);  				}  				return bytes;  			}  			catch {  				return null;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ParseBytes,The following statement contains a magic number: try {  				if (hexString.Length % 2 != 0)  					return null;  				var bytes = new byte[hexString.Length / 2];  				for (int i = 0; i < hexString.Length; i += 2) {  					int upper = TryParseHexChar(hexString[i]);  					int lower = TryParseHexChar(hexString[i + 1]);  					if (upper < 0 || lower < 0)  						return null;  					bytes[i / 2] = (byte)((upper << 4) | lower);  				}  				return bytes;  			}  			catch {  				return null;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ParseBytes,The following statement contains a magic number: try {  				if (hexString.Length % 2 != 0)  					return null;  				var bytes = new byte[hexString.Length / 2];  				for (int i = 0; i < hexString.Length; i += 2) {  					int upper = TryParseHexChar(hexString[i]);  					int lower = TryParseHexChar(hexString[i + 1]);  					if (upper < 0 || lower < 0)  						return null;  					bytes[i / 2] = (byte)((upper << 4) | lower);  				}  				return bytes;  			}  			catch {  				return null;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,ParseBytes,The following statement contains a magic number: try {  				if (hexString.Length % 2 != 0)  					return null;  				var bytes = new byte[hexString.Length / 2];  				for (int i = 0; i < hexString.Length; i += 2) {  					int upper = TryParseHexChar(hexString[i]);  					int lower = TryParseHexChar(hexString[i + 1]);  					if (upper < 0 || lower < 0)  						return null;  					bytes[i / 2] = (byte)((upper << 4) | lower);  				}  				return bytes;  			}  			catch {  				return null;  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,TryParseHexChar,The following statement contains a magic number: if ('a' <= c && c <= 'f')  				return 10 + (ushort)c - (ushort)'a';
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,TryParseHexChar,The following statement contains a magic number: if ('A' <= c && c <= 'F')  				return 10 + (ushort)c - (ushort)'A';
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetHashCode,The following statement contains a magic number: int count = Math.Min(a.Length / 2' 20);
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetHashCode,The following statement contains a magic number: int count = Math.Min(a.Length / 2' 20);
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetHashCode,The following statement contains a magic number: for (int i = 0' j = a.Length - 1; i < count; i++' j--) {  				hash ^= a[i] | ((uint)a[j] << 8);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetHashCode,The following statement contains a magic number: for (int i = 0' j = a.Length - 1; i < count; i++' j--) {  				hash ^= a[i] | ((uint)a[j] << 8);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetHashCode,The following statement contains a magic number: for (int i = 0' j = a.Length - 1; i < count; i++' j--) {  				hash ^= a[i] | ((uint)a[j] << 8);  				hash = (hash << 13) | (hash >> 19);  			}
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetCompressedUInt32Length,The following statement contains a magic number: if (value <= 0x3FFF)  				return 2;
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,GetCompressedUInt32Length,The following statement contains a magic number: if (value <= 0x1FFFFFFF)  				return 4;
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedUInt32,The following statement contains a magic number: if (value <= 0x7F)  				writer.Write((byte)value);  			else if (value <= 0x3FFF) {  				writer.Write((byte)((value >> 8) | 0x80));  				writer.Write((byte)value);  			}  			else if (value <= 0x1FFFFFFF) {  				writer.Write((byte)((value >> 24) | 0xC0));  				writer.Write((byte)(value >> 16));  				writer.Write((byte)(value >> 8));  				writer.Write((byte)value);  			}  			else  				throw new ArgumentOutOfRangeException("UInt32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedUInt32,The following statement contains a magic number: if (value <= 0x7F)  				writer.Write((byte)value);  			else if (value <= 0x3FFF) {  				writer.Write((byte)((value >> 8) | 0x80));  				writer.Write((byte)value);  			}  			else if (value <= 0x1FFFFFFF) {  				writer.Write((byte)((value >> 24) | 0xC0));  				writer.Write((byte)(value >> 16));  				writer.Write((byte)(value >> 8));  				writer.Write((byte)value);  			}  			else  				throw new ArgumentOutOfRangeException("UInt32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedUInt32,The following statement contains a magic number: if (value <= 0x7F)  				writer.Write((byte)value);  			else if (value <= 0x3FFF) {  				writer.Write((byte)((value >> 8) | 0x80));  				writer.Write((byte)value);  			}  			else if (value <= 0x1FFFFFFF) {  				writer.Write((byte)((value >> 24) | 0xC0));  				writer.Write((byte)(value >> 16));  				writer.Write((byte)(value >> 8));  				writer.Write((byte)value);  			}  			else  				throw new ArgumentOutOfRangeException("UInt32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedUInt32,The following statement contains a magic number: if (value <= 0x7F)  				writer.Write((byte)value);  			else if (value <= 0x3FFF) {  				writer.Write((byte)((value >> 8) | 0x80));  				writer.Write((byte)value);  			}  			else if (value <= 0x1FFFFFFF) {  				writer.Write((byte)((value >> 24) | 0xC0));  				writer.Write((byte)(value >> 16));  				writer.Write((byte)(value >> 8));  				writer.Write((byte)value);  			}  			else  				throw new ArgumentOutOfRangeException("UInt32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedInt32,The following statement contains a magic number: uint sign = (uint)value >> 31;
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedInt32,The following statement contains a magic number: if (-0x40 <= value && value <= 0x3F) {  				uint v = (uint)((value & 0x3F) << 1) | sign;  				writer.Write((byte)v);  			}  			else if (-0x2000 <= value && value <= 0x1FFF) {  				uint v = ((uint)(value & 0x1FFF) << 1) | sign;  				writer.Write((byte)((v >> 8) | 0x80));  				writer.Write((byte)v);  			}  			else if (-0x10000000 <= value && value <= 0x0FFFFFFF) {  				uint v = ((uint)(value & 0x0FFFFFFF) << 1) | sign;  				writer.Write((byte)((v >> 24) | 0xC0));  				writer.Write((byte)(v >> 16));  				writer.Write((byte)(v >> 8));  				writer.Write((byte)v);  			}  			else  				throw new ArgumentOutOfRangeException("Int32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedInt32,The following statement contains a magic number: if (-0x40 <= value && value <= 0x3F) {  				uint v = (uint)((value & 0x3F) << 1) | sign;  				writer.Write((byte)v);  			}  			else if (-0x2000 <= value && value <= 0x1FFF) {  				uint v = ((uint)(value & 0x1FFF) << 1) | sign;  				writer.Write((byte)((v >> 8) | 0x80));  				writer.Write((byte)v);  			}  			else if (-0x10000000 <= value && value <= 0x0FFFFFFF) {  				uint v = ((uint)(value & 0x0FFFFFFF) << 1) | sign;  				writer.Write((byte)((v >> 24) | 0xC0));  				writer.Write((byte)(v >> 16));  				writer.Write((byte)(v >> 8));  				writer.Write((byte)v);  			}  			else  				throw new ArgumentOutOfRangeException("Int32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedInt32,The following statement contains a magic number: if (-0x40 <= value && value <= 0x3F) {  				uint v = (uint)((value & 0x3F) << 1) | sign;  				writer.Write((byte)v);  			}  			else if (-0x2000 <= value && value <= 0x1FFF) {  				uint v = ((uint)(value & 0x1FFF) << 1) | sign;  				writer.Write((byte)((v >> 8) | 0x80));  				writer.Write((byte)v);  			}  			else if (-0x10000000 <= value && value <= 0x0FFFFFFF) {  				uint v = ((uint)(value & 0x0FFFFFFF) << 1) | sign;  				writer.Write((byte)((v >> 24) | 0xC0));  				writer.Write((byte)(v >> 16));  				writer.Write((byte)(v >> 8));  				writer.Write((byte)v);  			}  			else  				throw new ArgumentOutOfRangeException("Int32 value can't be compressed");
Magic Number,dnlib.DotNet,Utils,C:\repos\0xd4d_dnlib\src\DotNet\Utils.cs,WriteCompressedInt32,The following statement contains a magic number: if (-0x40 <= value && value <= 0x3F) {  				uint v = (uint)((value & 0x3F) << 1) | sign;  				writer.Write((byte)v);  			}  			else if (-0x2000 <= value && value <= 0x1FFF) {  				uint v = ((uint)(value & 0x1FFF) << 1) | sign;  				writer.Write((byte)((v >> 8) | 0x80));  				writer.Write((byte)v);  			}  			else if (-0x10000000 <= value && value <= 0x0FFFFFFF) {  				uint v = ((uint)(value & 0x0FFFFFFF) << 1) | sign;  				writer.Write((byte)((v >> 24) | 0xC0));  				writer.Write((byte)(v >> 16));  				writer.Write((byte)(v >> 8));  				writer.Write((byte)v);  			}  			else  				throw new ArgumentOutOfRangeException("Int32 value can't be compressed");
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: this.vtables = ThreadSafeListCreator.Create<VTable>((int)info.Size / 8);
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: using (var reader = peImage.CreateFullStream()) {  				reader.Position = (long)peImage.ToFileOffset(info.VirtualAddress);  				long endPos = reader.Position + info.Size;  				while (reader.Position + 8 <= endPos && reader.CanRead(8)) {  					RVA tableRva = (RVA)reader.ReadUInt32();  					int numSlots = reader.ReadUInt16();  					var flags = (VTableFlags)reader.ReadUInt16();  					var vtable = new VTable(tableRva' flags' numSlots);  					vtables.Add(vtable);    					var pos = reader.Position;  					reader.Position = (long)peImage.ToFileOffset(tableRva);  					int slotSize = vtable.Is64Bit ? 8 : 4;  					while (numSlots-- > 0 && reader.CanRead(slotSize)) {  						vtable.Methods.Add(module.ResolveToken(reader.ReadUInt32()) as IMethod);  						if (slotSize == 8)  							reader.ReadUInt32();  					}  					reader.Position = pos;  				}  			}
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: using (var reader = peImage.CreateFullStream()) {  				reader.Position = (long)peImage.ToFileOffset(info.VirtualAddress);  				long endPos = reader.Position + info.Size;  				while (reader.Position + 8 <= endPos && reader.CanRead(8)) {  					RVA tableRva = (RVA)reader.ReadUInt32();  					int numSlots = reader.ReadUInt16();  					var flags = (VTableFlags)reader.ReadUInt16();  					var vtable = new VTable(tableRva' flags' numSlots);  					vtables.Add(vtable);    					var pos = reader.Position;  					reader.Position = (long)peImage.ToFileOffset(tableRva);  					int slotSize = vtable.Is64Bit ? 8 : 4;  					while (numSlots-- > 0 && reader.CanRead(slotSize)) {  						vtable.Methods.Add(module.ResolveToken(reader.ReadUInt32()) as IMethod);  						if (slotSize == 8)  							reader.ReadUInt32();  					}  					reader.Position = pos;  				}  			}
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: using (var reader = peImage.CreateFullStream()) {  				reader.Position = (long)peImage.ToFileOffset(info.VirtualAddress);  				long endPos = reader.Position + info.Size;  				while (reader.Position + 8 <= endPos && reader.CanRead(8)) {  					RVA tableRva = (RVA)reader.ReadUInt32();  					int numSlots = reader.ReadUInt16();  					var flags = (VTableFlags)reader.ReadUInt16();  					var vtable = new VTable(tableRva' flags' numSlots);  					vtables.Add(vtable);    					var pos = reader.Position;  					reader.Position = (long)peImage.ToFileOffset(tableRva);  					int slotSize = vtable.Is64Bit ? 8 : 4;  					while (numSlots-- > 0 && reader.CanRead(slotSize)) {  						vtable.Methods.Add(module.ResolveToken(reader.ReadUInt32()) as IMethod);  						if (slotSize == 8)  							reader.ReadUInt32();  					}  					reader.Position = pos;  				}  			}
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: using (var reader = peImage.CreateFullStream()) {  				reader.Position = (long)peImage.ToFileOffset(info.VirtualAddress);  				long endPos = reader.Position + info.Size;  				while (reader.Position + 8 <= endPos && reader.CanRead(8)) {  					RVA tableRva = (RVA)reader.ReadUInt32();  					int numSlots = reader.ReadUInt16();  					var flags = (VTableFlags)reader.ReadUInt16();  					var vtable = new VTable(tableRva' flags' numSlots);  					vtables.Add(vtable);    					var pos = reader.Position;  					reader.Position = (long)peImage.ToFileOffset(tableRva);  					int slotSize = vtable.Is64Bit ? 8 : 4;  					while (numSlots-- > 0 && reader.CanRead(slotSize)) {  						vtable.Methods.Add(module.ResolveToken(reader.ReadUInt32()) as IMethod);  						if (slotSize == 8)  							reader.ReadUInt32();  					}  					reader.Position = pos;  				}  			}
Magic Number,dnlib.DotNet,VTableFixups,C:\repos\0xd4d_dnlib\src\DotNet\VTableFixups.cs,Initialize,The following statement contains a magic number: using (var reader = peImage.CreateFullStream()) {  				reader.Position = (long)peImage.ToFileOffset(info.VirtualAddress);  				long endPos = reader.Position + info.Size;  				while (reader.Position + 8 <= endPos && reader.CanRead(8)) {  					RVA tableRva = (RVA)reader.ReadUInt32();  					int numSlots = reader.ReadUInt16();  					var flags = (VTableFlags)reader.ReadUInt16();  					var vtable = new VTable(tableRva' flags' numSlots);  					vtables.Add(vtable);    					var pos = reader.Position;  					reader.Position = (long)peImage.ToFileOffset(tableRva);  					int slotSize = vtable.Is64Bit ? 8 : 4;  					while (numSlots-- > 0 && reader.CanRead(slotSize)) {  						vtable.Methods.Add(module.ResolveToken(reader.ReadUInt32()) as IMethod);  						if (slotSize == 8)  							reader.ReadUInt32();  					}  					reader.Position = pos;  				}  			}
Magic Number,dnlib.DotNet.Emit,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Code.cs,ToOpCode,The following statement contains a magic number: int hi = (ushort)code >> 8;
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,CreateExceptionHandlers,The following statement contains a magic number: if (ehHeader != null) {  				if (ehHeader.Length < 4)  					return;  				var reader = new BinaryReader(new MemoryStream(ehHeader));  				byte b = reader.ReadByte();  				if ((b & 0x40) == 0) { // DynamicResolver only checks bit 6  					// Calculate num ehs exactly the same way that DynamicResolver does  					int numHandlers = (ushort)((reader.ReadByte() - 2) / 12);  					reader.ReadUInt16();  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 12 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt16();  						int offs = reader.ReadUInt16();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadByte() + offs));  						offs = reader.ReadUInt16();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadByte() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  				else {  					reader.BaseStream.Position--;  					int numHandlers = (ushort)(((reader.ReadUInt32() >> 8) - 4) / 24);  					for (int i = 0; i < numHandlers; i++) {  						if (reader.BaseStream.Position + 24 > reader.BaseStream.Length)  							break;  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)reader.ReadUInt32();  						var offs = reader.ReadUInt32();  						eh.TryStart = GetInstructionThrow((uint)offs);  						eh.TryEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));  						offs = reader.ReadUInt32();  						eh.HandlerStart = GetInstructionThrow((uint)offs);  						eh.HandlerEnd = GetInstruction((uint)(reader.ReadUInt32() + offs));    						if (eh.HandlerType == ExceptionHandlerType.Catch)  							eh.CatchType = ReadToken(reader.ReadUInt32()) as ITypeDefOrRef;  						else if (eh.HandlerType == ExceptionHandlerType.Filter)  							eh.FilterStart = GetInstruction(reader.ReadUInt32());  						else  							reader.ReadUInt32();    						exceptionHandlers.Add(eh);  					}  				}  			}  			else if (ehInfos != null) {  				foreach (var ehInfo in CreateExceptionInfos(ehInfos)) {  					var tryStart = GetInstructionThrow((uint)ehInfo.StartAddr);  					var tryEnd = GetInstruction((uint)ehInfo.EndAddr);  					var endFinally = ehInfo.EndFinally < 0 ? null : GetInstruction((uint)ehInfo.EndFinally);  					for (int i = 0; i < ehInfo.CurrentCatch; i++) {  						var eh = new ExceptionHandler();  						eh.HandlerType = (ExceptionHandlerType)ehInfo.Type[i];  						eh.TryStart = tryStart;  						eh.TryEnd = eh.HandlerType == ExceptionHandlerType.Finally ? endFinally : tryEnd;  						eh.FilterStart = null;	// not supported by DynamicMethod.ILGenerator  						eh.HandlerStart = GetInstructionThrow((uint)ehInfo.CatchAddr[i]);  						eh.HandlerEnd = GetInstruction((uint)ehInfo.CatchEndAddr[i]);  						eh.CatchType = importer.Import(ehInfo.CatchClass[i]);  						exceptionHandlers.Add(eh);  					}  				}  			}
Magic Number,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,ReadToken,The following statement contains a magic number: switch (token >> 24) {  			case 0x02:  				return ImportType(rid);    			case 0x04:  				return ImportField(rid);    			case 0x06:  			case 0x0A:  				return ImportMethod(rid);    			case 0x11:  				return ImportSignature(rid);    			case 0x70:  				return Resolve(rid) as string;    			default:  				return null;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following statement contains a magic number: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetSize,The following statement contains a magic number: switch (opCode.OperandType) {  			case OperandType.InlineBrTarget:  			case OperandType.InlineField:  			case OperandType.InlineI:  			case OperandType.InlineMethod:  			case OperandType.InlineSig:  			case OperandType.InlineString:  			case OperandType.InlineTok:  			case OperandType.InlineType:  			case OperandType.ShortInlineR:  				return opCode.Size + 4;    			case OperandType.InlineI8:  			case OperandType.InlineR:  				return opCode.Size + 8;    			case OperandType.InlineNone:  			case OperandType.InlinePhi:  			default:  				return opCode.Size;    			case OperandType.InlineSwitch:  				var targets = Operand as IList<Instruction>;  				return opCode.Size + 4 + (targets == null ? 0 : targets.Count * 4);    			case OperandType.InlineVar:  				return opCode.Size + 2;    			case OperandType.ShortInlineBrTarget:  			case OperandType.ShortInlineI:  			case OperandType.ShortInlineVar:  				return opCode.Size + 1;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetSize,The following statement contains a magic number: switch (opCode.OperandType) {  			case OperandType.InlineBrTarget:  			case OperandType.InlineField:  			case OperandType.InlineI:  			case OperandType.InlineMethod:  			case OperandType.InlineSig:  			case OperandType.InlineString:  			case OperandType.InlineTok:  			case OperandType.InlineType:  			case OperandType.ShortInlineR:  				return opCode.Size + 4;    			case OperandType.InlineI8:  			case OperandType.InlineR:  				return opCode.Size + 8;    			case OperandType.InlineNone:  			case OperandType.InlinePhi:  			default:  				return opCode.Size;    			case OperandType.InlineSwitch:  				var targets = Operand as IList<Instruction>;  				return opCode.Size + 4 + (targets == null ? 0 : targets.Count * 4);    			case OperandType.InlineVar:  				return opCode.Size + 2;    			case OperandType.ShortInlineBrTarget:  			case OperandType.ShortInlineI:  			case OperandType.ShortInlineVar:  				return opCode.Size + 1;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetSize,The following statement contains a magic number: switch (opCode.OperandType) {  			case OperandType.InlineBrTarget:  			case OperandType.InlineField:  			case OperandType.InlineI:  			case OperandType.InlineMethod:  			case OperandType.InlineSig:  			case OperandType.InlineString:  			case OperandType.InlineTok:  			case OperandType.InlineType:  			case OperandType.ShortInlineR:  				return opCode.Size + 4;    			case OperandType.InlineI8:  			case OperandType.InlineR:  				return opCode.Size + 8;    			case OperandType.InlineNone:  			case OperandType.InlinePhi:  			default:  				return opCode.Size;    			case OperandType.InlineSwitch:  				var targets = Operand as IList<Instruction>;  				return opCode.Size + 4 + (targets == null ? 0 : targets.Count * 4);    			case OperandType.InlineVar:  				return opCode.Size + 2;    			case OperandType.ShortInlineBrTarget:  			case OperandType.ShortInlineI:  			case OperandType.ShortInlineVar:  				return opCode.Size + 1;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetSize,The following statement contains a magic number: switch (opCode.OperandType) {  			case OperandType.InlineBrTarget:  			case OperandType.InlineField:  			case OperandType.InlineI:  			case OperandType.InlineMethod:  			case OperandType.InlineSig:  			case OperandType.InlineString:  			case OperandType.InlineTok:  			case OperandType.InlineType:  			case OperandType.ShortInlineR:  				return opCode.Size + 4;    			case OperandType.InlineI8:  			case OperandType.InlineR:  				return opCode.Size + 8;    			case OperandType.InlineNone:  			case OperandType.InlinePhi:  			default:  				return opCode.Size;    			case OperandType.InlineSwitch:  				var targets = Operand as IList<Instruction>;  				return opCode.Size + 4 + (targets == null ? 0 : targets.Count * 4);    			case OperandType.InlineVar:  				return opCode.Size + 2;    			case OperandType.ShortInlineBrTarget:  			case OperandType.ShortInlineI:  			case OperandType.ShortInlineVar:  				return opCode.Size + 1;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetSize,The following statement contains a magic number: switch (opCode.OperandType) {  			case OperandType.InlineBrTarget:  			case OperandType.InlineField:  			case OperandType.InlineI:  			case OperandType.InlineMethod:  			case OperandType.InlineSig:  			case OperandType.InlineString:  			case OperandType.InlineTok:  			case OperandType.InlineType:  			case OperandType.ShortInlineR:  				return opCode.Size + 4;    			case OperandType.InlineI8:  			case OperandType.InlineR:  				return opCode.Size + 8;    			case OperandType.InlineNone:  			case OperandType.InlinePhi:  			default:  				return opCode.Size;    			case OperandType.InlineSwitch:  				var targets = Operand as IList<Instruction>;  				return opCode.Size + 4 + (targets == null ? 0 : targets.Count * 4);    			case OperandType.InlineVar:  				return opCode.Size + 2;    			case OperandType.ShortInlineBrTarget:  			case OperandType.ShortInlineI:  			case OperandType.ShortInlineVar:  				return opCode.Size + 1;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CalculateStackUsageNonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Push0:  				break;    			case StackBehaviour.Push1:  			case StackBehaviour.Pushi:  			case StackBehaviour.Pushi8:  			case StackBehaviour.Pushr4:  			case StackBehaviour.Pushr8:  			case StackBehaviour.Pushref:  				pushes++;  				break;    			case StackBehaviour.Push1_push1:  				pushes += 2;  				break;    			case StackBehaviour.Varpush:	// only call' calli' callvirt which are handled elsewhere  			default:  				break;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CalculateStackUsageNonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Pop0:  				break;    			case StackBehaviour.Pop1:  			case StackBehaviour.Popi:  			case StackBehaviour.Popref:  				pops++;  				break;    			case StackBehaviour.Pop1_pop1:  			case StackBehaviour.Popi_pop1:  			case StackBehaviour.Popi_popi:  			case StackBehaviour.Popi_popi8:  			case StackBehaviour.Popi_popr4:  			case StackBehaviour.Popi_popr8:  			case StackBehaviour.Popref_pop1:  			case StackBehaviour.Popref_popi:  				pops += 2;  				break;    			case StackBehaviour.Popi_popi_popi:  			case StackBehaviour.Popref_popi_popi:  			case StackBehaviour.Popref_popi_popi8:  			case StackBehaviour.Popref_popi_popr4:  			case StackBehaviour.Popref_popi_popr8:  			case StackBehaviour.Popref_popi_popref:  			case StackBehaviour.Popref_popi_pop1:  				pops += 3;  				break;    			case StackBehaviour.PopAll:  				pops = -1;  				break;    			case StackBehaviour.Varpop:	// call' calli' callvirt' newobj (all handled elsewhere)' and ret  				if (hasReturnValue)  					pops++;  				break;    			default:  				break;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CalculateStackUsageNonCall,The following statement contains a magic number: switch (stackBehavior) {  			case StackBehaviour.Pop0:  				break;    			case StackBehaviour.Pop1:  			case StackBehaviour.Popi:  			case StackBehaviour.Popref:  				pops++;  				break;    			case StackBehaviour.Pop1_pop1:  			case StackBehaviour.Popi_pop1:  			case StackBehaviour.Popi_popi:  			case StackBehaviour.Popi_popi8:  			case StackBehaviour.Popi_popr4:  			case StackBehaviour.Popi_popr8:  			case StackBehaviour.Popref_pop1:  			case StackBehaviour.Popref_popi:  				pops += 2;  				break;    			case StackBehaviour.Popi_popi_popi:  			case StackBehaviour.Popref_popi_popi:  			case StackBehaviour.Popref_popi_popi8:  			case StackBehaviour.Popref_popi_popr4:  			case StackBehaviour.Popref_popi_popr8:  			case StackBehaviour.Popref_popi_popref:  			case StackBehaviour.Popref_popi_pop1:  				pops += 3;  				break;    			case StackBehaviour.PopAll:  				pops = -1;  				break;    			case StackBehaviour.Varpop:	// call' calli' callvirt' newobj (all handled elsewhere)' and ret  				if (hasReturnValue)  					pops++;  				break;    			default:  				break;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetLdcI4Value,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldc_I4_M1:return -1;  			case Code.Ldc_I4_0:	return 0;  			case Code.Ldc_I4_1:	return 1;  			case Code.Ldc_I4_2:	return 2;  			case Code.Ldc_I4_3:	return 3;  			case Code.Ldc_I4_4:	return 4;  			case Code.Ldc_I4_5:	return 5;  			case Code.Ldc_I4_6:	return 6;  			case Code.Ldc_I4_7:	return 7;  			case Code.Ldc_I4_8:	return 8;  			case Code.Ldc_I4_S:	return (sbyte)Operand;  			case Code.Ldc_I4:	return (int)Operand;  			default:  				throw new InvalidOperationException(string.Format("Not a ldc.i4 instruction: {0}"' this));  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetParameterIndex,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Starg:  			case Code.Starg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				var parameter = Operand as Parameter;  				if (parameter != null)  					return parameter.Index;  				break;  			}
Magic Number,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetParameterIndex,The following statement contains a magic number: switch (OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Starg:  			case Code.Starg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				var parameter = Operand as Parameter;  				if (parameter != null)  					return parameter.Index;  				break;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadHeader,The following statement contains a magic number: switch (b & 7) {  			case 2:  			case 6:  				// Tiny header. [7:2] = code size' max stack is 8' no locals or exception handlers  				flags = 2;  				maxStack = 8;  				codeSize = (uint)(b >> 2);  				localVarSigTok = 0;  				headerSize = 1;  				break;    			case 3:  				// Fat header. Can have locals and exception handlers  				flags = (ushort)((reader.ReadByte() << 8) | b);  				headerSize = (byte)(flags >> 12);  				maxStack = reader.ReadUInt16();  				codeSize = reader.ReadUInt32();  				localVarSigTok = reader.ReadUInt32();    				// The CLR allows the code to start inside the method header. But if it does'  				// the CLR doesn't read any exceptions.  				reader.Position += -12 + headerSize * 4;  				if (headerSize < 3)  					flags &= 0xFFF7;  				headerSize *= 4;  				break;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadExceptionHandlers,The following statement contains a magic number: if ((flags & 8) == 0)  				return;
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadExceptionHandlers,The following statement contains a magic number: if (exceptionsReader != null)  				ehReader = exceptionsReader;  			else {  				ehReader = reader;  				ehReader.Position = (ehReader.Position + 3) & ~3;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadExceptionHandlers,The following statement contains a magic number: if (exceptionsReader != null)  				ehReader = exceptionsReader;  			else {  				ehReader = reader;  				ehReader.Position = (ehReader.Position + 3) & ~3;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadFatExceptionHandlers,The following statement contains a magic number: int num = GetNumberOfExceptionHandlers((ehReader.ReadUInt32() >> 8) / 24);
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadFatExceptionHandlers,The following statement contains a magic number: int num = GetNumberOfExceptionHandlers((ehReader.ReadUInt32() >> 8) / 24);
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadSmallExceptionHandlers,The following statement contains a magic number: int num = GetNumberOfExceptionHandlers((uint)ehReader.ReadByte() / 12);
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,ReadSmallExceptionHandlers,The following statement contains a magic number: ehReader.Position += 2;
Magic Number,dnlib.DotNet.Emit,MethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReader.cs,CreateCilBody,The following statement contains a magic number: bool initLocals = flags == 2 || (flags & 0x10) != 0;
Magic Number,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,GetInstruction,The following statement contains a magic number: while (lo <= hi && hi != -1) {  				int i = (lo + hi) / 2;  				var instr = instructions[i];  				if (instr.Offset == offset)  					return instr;  				if (offset < instr.Offset)  					hi = i - 1;  				else  					lo = i + 1;  			}
Magic Number,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,ReadOneInstruction,The following statement contains a magic number: if (instr.OpCode.Code == Code.Switch) {  				var targets = (IList<uint>)instr.Operand;  				currentOffset += (uint)(instr.OpCode.Size + 4 + 4 * targets.Count);  			}  			else  				currentOffset += (uint)instr.GetSize();
Magic Number,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,ReadOneInstruction,The following statement contains a magic number: if (instr.OpCode.Code == Code.Switch) {  				var targets = (IList<uint>)instr.Operand;  				currentOffset += (uint)(instr.OpCode.Size + 4 + 4 * targets.Count);  			}  			else  				currentOffset += (uint)instr.GetSize();
Magic Number,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,ReadInlineSwitch,The following statement contains a magic number: long offsetAfterInstr = (long)instr.Offset + (long)instr.OpCode.Size + 4L + (long)num * 4;
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetTypeNET45,The following statement contains a magic number: int maxStack = 8;
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetTypeNET45,The following statement contains a magic number: setMethodBodyMethodInfo.Invoke(mb' new object[5] { code' maxStack' locals' null' null });
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodTableToTypeConverter,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodTableToTypeConverter.cs,GetLocalSignature,The following statement contains a magic number: if (IntPtr.Size == 4) {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  				};  			}  			else {  				return new byte[] {  					0x07'  					0x01'  					(byte)ElementType.Internal'  					(byte)mtValue'  					(byte)(mtValue >> 8)'  					(byte)(mtValue >> 16)'  					(byte)(mtValue >> 24)'  					(byte)(mtValue >> 32)'  					(byte)(mtValue >> 40)'  					(byte)(mtValue >> 48)'  					(byte)(mtValue >> 56)'  				};  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,OptimizeMacros,The following statement contains a magic number: foreach (var instr in instructions.GetSafeEnumerable()) {  				Parameter arg;  				Local local;  				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (arg.Index == 0) {  						instr.OpCode = OpCodes.Ldarg_0;  						instr.Operand = null;  					}  					else if (arg.Index == 1) {  						instr.OpCode = OpCodes.Ldarg_1;  						instr.Operand = null;  					}  					else if (arg.Index == 2) {  						instr.OpCode = OpCodes.Ldarg_2;  						instr.Operand = null;  					}  					else if (arg.Index == 3) {  						instr.OpCode = OpCodes.Ldarg_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarg_S;  					break;    				case Code.Ldarga:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldarga_S;  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  					int i4;  					if (instr.Operand is int)  						i4 = (int)instr.Operand;  					else if (instr.Operand is sbyte)  						i4 = (sbyte)instr.Operand;  					else  						break;  					switch (i4) {  					case 0:  						instr.OpCode = OpCodes.Ldc_I4_0;  						instr.Operand = null;  						break;    					case 1:  						instr.OpCode = OpCodes.Ldc_I4_1;  						instr.Operand = null;  						break;    					case 2:  						instr.OpCode = OpCodes.Ldc_I4_2;  						instr.Operand = null;  						break;    					case 3:  						instr.OpCode = OpCodes.Ldc_I4_3;  						instr.Operand = null;  						break;    					case 4:  						instr.OpCode = OpCodes.Ldc_I4_4;  						instr.Operand = null;  						break;    					case 5:  						instr.OpCode = OpCodes.Ldc_I4_5;  						instr.Operand = null;  						break;    					case 6:  						instr.OpCode = OpCodes.Ldc_I4_6;  						instr.Operand = null;  						break;    					case 7:  						instr.OpCode = OpCodes.Ldc_I4_7;  						instr.Operand = null;  						break;    					case 8:  						instr.OpCode = OpCodes.Ldc_I4_8;  						instr.Operand = null;  						break;    					case -1:  						instr.OpCode = OpCodes.Ldc_I4_M1;  						instr.Operand = null;  						break;    					default:  						if (sbyte.MinValue <= i4 && i4 <= sbyte.MaxValue) {  							instr.OpCode = OpCodes.Ldc_I4_S;  							instr.Operand = (sbyte)i4;  						}  						break;  					}  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Ldloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Ldloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Ldloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Ldloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloc_S;  					break;    				case Code.Ldloca:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Ldloca_S;  					break;    				case Code.Starg:  					arg = instr.Operand as Parameter;  					if (arg == null)  						break;  					if (byte.MinValue <= arg.Index && arg.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Starg_S;  					break;    				case Code.Stloc:  				case Code.Stloc_S:  					local = instr.Operand as Local;  					if (local == null)  						break;  					if (local.Index == 0) {  						instr.OpCode = OpCodes.Stloc_0;  						instr.Operand = null;  					}  					else if (local.Index == 1) {  						instr.OpCode = OpCodes.Stloc_1;  						instr.Operand = null;  					}  					else if (local.Index == 2) {  						instr.OpCode = OpCodes.Stloc_2;  						instr.Operand = null;  					}  					else if (local.Index == 3) {  						instr.OpCode = OpCodes.Stloc_3;  						instr.Operand = null;  					}  					else if (byte.MinValue <= local.Index && local.Index <= byte.MaxValue)  						instr.OpCode = OpCodes.Stloc_S;  					break;  				}  			}
Magic Number,dnlib.DotNet.Emit,OpCode,C:\repos\0xd4d_dnlib\src\DotNet\Emit\OpCode.cs,OpCode,The following statement contains a magic number: if (((ushort)code >> 8) == 0)  				OpCodes.OneByteOpCodes[(byte)code] = this;  			else if (((ushort)code >> 8) == 0xFE)  				OpCodes.TwoByteOpCodes[(byte)code] = this;
Magic Number,dnlib.DotNet.Emit,OpCode,C:\repos\0xd4d_dnlib\src\DotNet\Emit\OpCode.cs,OpCode,The following statement contains a magic number: if (((ushort)code >> 8) == 0)  				OpCodes.OneByteOpCodes[(byte)code] = this;  			else if (((ushort)code >> 8) == 0xFE)  				OpCodes.TwoByteOpCodes[(byte)code] = this;
Magic Number,dnlib.DotNet.MD,ColumnInfo,C:\repos\0xd4d_dnlib\src\DotNet\MD\ColumnInfo.cs,Read,The following statement contains a magic number: switch (size) {  			case 1: return reader.ReadByte();  			case 2: return reader.ReadUInt16();  			case 4: return reader.ReadUInt32();  			default: throw new InvalidOperationException("Invalid column size");  			}
Magic Number,dnlib.DotNet.MD,ColumnInfo,C:\repos\0xd4d_dnlib\src\DotNet\MD\ColumnInfo.cs,Read,The following statement contains a magic number: switch (size) {  			case 1: return reader.ReadByte();  			case 2: return reader.ReadUInt16();  			case 4: return reader.ReadUInt32();  			default: throw new InvalidOperationException("Invalid column size");  			}
Magic Number,dnlib.DotNet.MD,ColumnInfo,C:\repos\0xd4d_dnlib\src\DotNet\MD\ColumnInfo.cs,Write,The following statement contains a magic number: switch (size) {  			case 1: writer.Write((byte)value); break;  			case 2: writer.Write((ushort)value); break;  			case 4: writer.Write(value); break;  			default: throw new InvalidOperationException("Invalid column size");  			}
Magic Number,dnlib.DotNet.MD,ColumnInfo,C:\repos\0xd4d_dnlib\src\DotNet\MD\ColumnInfo.cs,Write,The following statement contains a magic number: switch (size) {  			case 1: writer.Write((byte)value); break;  			case 2: writer.Write((ushort)value); break;  			case 4: writer.Write(value); break;  			default: throw new InvalidOperationException("Invalid column size");  			}
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetPointerSize,The following statement contains a magic number: if (peImage == null)  				return 4;
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetPointerSize,The following statement contains a magic number: return peImage.ImageNTHeaders.OptionalHeader.Magic == 0x10B ? 4 : 8;
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetPointerSize,The following statement contains a magic number: return peImage.ImageNTHeaders.OptionalHeader.Magic == 0x10B ? 4 : 8;
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,InitializeHotStreams,The following statement contains a magic number: long offsetMask = GetPointerSize() == 8 ? -1L : uint.MaxValue;
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetFieldRidList,The following statement contains a magic number: return GetRidList(tablesStream.TypeDefTable' typeDefRid' 4' tablesStream.FieldTable);
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetMethodRidList,The following statement contains a magic number: return GetRidList(tablesStream.TypeDefTable' typeDefRid' 5' tablesStream.MethodTable);
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,GetParamRidList,The following statement contains a magic number: return GetRidList(tablesStream.MethodTable' methodRid' 5' tablesStream.ParamTable);
Magic Number,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,BinarySearch_NoLock,The following statement contains a magic number: while (ridLo <= ridHi) {  				uint rid = (ridLo + ridHi) / 2;  				uint key2;  				if (!tablesStream.ReadColumn_NoLock(tableSource' rid' keyColumn' out key2))  					break;	// Never happens since rid is valid  				if (key == key2)  					return rid;  				if (key2 > key)  					ridHi = rid - 1;  				else  					ridLo = rid + 1;  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following statement contains a magic number: if (ColumnSize.Module <= columnSize && columnSize <= ColumnSize.CustomDebugInformation) {  				int table = (int)(columnSize - ColumnSize.Module);  				uint count = table >= rowCounts.Count ? 0 : rowCounts[table];  				return count > 0xFFFF ? 4 : 2;  			}  			else if (ColumnSize.TypeDefOrRef <= columnSize && columnSize <= ColumnSize.HasCustomDebugInformation) {  				CodedToken info;  				switch (columnSize) {  				case ColumnSize.TypeDefOrRef:		info = CodedToken.TypeDefOrRef; break;  				case ColumnSize.HasConstant:		info = CodedToken.HasConstant; break;  				case ColumnSize.HasCustomAttribute:	info = CodedToken.HasCustomAttribute; break;  				case ColumnSize.HasFieldMarshal:	info = CodedToken.HasFieldMarshal; break;  				case ColumnSize.HasDeclSecurity:	info = CodedToken.HasDeclSecurity; break;  				case ColumnSize.MemberRefParent:	info = CodedToken.MemberRefParent; break;  				case ColumnSize.HasSemantic:		info = CodedToken.HasSemantic; break;  				case ColumnSize.MethodDefOrRef:		info = CodedToken.MethodDefOrRef; break;  				case ColumnSize.MemberForwarded:	info = CodedToken.MemberForwarded; break;  				case ColumnSize.Implementation:		info = CodedToken.Implementation; break;  				case ColumnSize.CustomAttributeType:info = CodedToken.CustomAttributeType; break;  				case ColumnSize.ResolutionScope:	info = CodedToken.ResolutionScope; break;  				case ColumnSize.TypeOrMethodDef:	info = CodedToken.TypeOrMethodDef; break;  				case ColumnSize.HasCustomDebugInformation:info = CodedToken.HasCustomDebugInformation; break;  				default: throw new InvalidOperationException(string.Format("Invalid ColumnSize: {0}"' columnSize));  				}  				uint maxRows = 0;  				foreach (var tableType in info.TableTypes) {  					int index = (int)tableType;  					var tableRows = index >= rowCounts.Count ? 0 : rowCounts[index];  					if (tableRows > maxRows)  						maxRows = tableRows;  				}  				// Can't overflow since maxRows <= 0x00FFFFFF and info.Bits < 8  				uint finalRows = maxRows << info.Bits;  				return finalRows > 0xFFFF ? 4 : 2;  			}  			else {  				switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Module] = new TableInfo(Table.Module' "Module"' new ColumnInfo[] {  				new ColumnInfo(0' "Generation"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Mvid"' ColumnSize.GUID)'  				new ColumnInfo(3' "EncId"' ColumnSize.GUID)'  				new ColumnInfo(4' "EncBaseId"' ColumnSize.GUID)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Module] = new TableInfo(Table.Module' "Module"' new ColumnInfo[] {  				new ColumnInfo(0' "Generation"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Mvid"' ColumnSize.GUID)'  				new ColumnInfo(3' "EncId"' ColumnSize.GUID)'  				new ColumnInfo(4' "EncBaseId"' ColumnSize.GUID)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Module] = new TableInfo(Table.Module' "Module"' new ColumnInfo[] {  				new ColumnInfo(0' "Generation"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Mvid"' ColumnSize.GUID)'  				new ColumnInfo(3' "EncId"' ColumnSize.GUID)'  				new ColumnInfo(4' "EncBaseId"' ColumnSize.GUID)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.TypeRef] = new TableInfo(Table.TypeRef' "TypeRef"' new ColumnInfo[] {  				new ColumnInfo(0' "ResolutionScope"' ColumnSize.ResolutionScope)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Namespace"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.TypeDef] = new TableInfo(Table.TypeDef' "TypeDef"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Namespace"' ColumnSize.Strings)'  				new ColumnInfo(3' "Extends"' ColumnSize.TypeDefOrRef)'  				new ColumnInfo(4' "FieldList"' ColumnSize.Field)'  				new ColumnInfo(5' "MethodList"' ColumnSize.Method)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.TypeDef] = new TableInfo(Table.TypeDef' "TypeDef"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Namespace"' ColumnSize.Strings)'  				new ColumnInfo(3' "Extends"' ColumnSize.TypeDefOrRef)'  				new ColumnInfo(4' "FieldList"' ColumnSize.Field)'  				new ColumnInfo(5' "MethodList"' ColumnSize.Method)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.TypeDef] = new TableInfo(Table.TypeDef' "TypeDef"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Namespace"' ColumnSize.Strings)'  				new ColumnInfo(3' "Extends"' ColumnSize.TypeDefOrRef)'  				new ColumnInfo(4' "FieldList"' ColumnSize.Field)'  				new ColumnInfo(5' "MethodList"' ColumnSize.Method)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.TypeDef] = new TableInfo(Table.TypeDef' "TypeDef"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Namespace"' ColumnSize.Strings)'  				new ColumnInfo(3' "Extends"' ColumnSize.TypeDefOrRef)'  				new ColumnInfo(4' "FieldList"' ColumnSize.Field)'  				new ColumnInfo(5' "MethodList"' ColumnSize.Method)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Field] = new TableInfo(Table.Field' "Field"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Signature"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Method] = new TableInfo(Table.Method' "Method"' new ColumnInfo[] {  				new ColumnInfo(0' "RVA"' ColumnSize.UInt32)'  				new ColumnInfo(1' "ImplFlags"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				new ColumnInfo(4' "Signature"' ColumnSize.Blob)'  				new ColumnInfo(5' "ParamList"' ColumnSize.Param)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Method] = new TableInfo(Table.Method' "Method"' new ColumnInfo[] {  				new ColumnInfo(0' "RVA"' ColumnSize.UInt32)'  				new ColumnInfo(1' "ImplFlags"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				new ColumnInfo(4' "Signature"' ColumnSize.Blob)'  				new ColumnInfo(5' "ParamList"' ColumnSize.Param)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Method] = new TableInfo(Table.Method' "Method"' new ColumnInfo[] {  				new ColumnInfo(0' "RVA"' ColumnSize.UInt32)'  				new ColumnInfo(1' "ImplFlags"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				new ColumnInfo(4' "Signature"' ColumnSize.Blob)'  				new ColumnInfo(5' "ParamList"' ColumnSize.Param)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Method] = new TableInfo(Table.Method' "Method"' new ColumnInfo[] {  				new ColumnInfo(0' "RVA"' ColumnSize.UInt32)'  				new ColumnInfo(1' "ImplFlags"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				new ColumnInfo(4' "Signature"' ColumnSize.Blob)'  				new ColumnInfo(5' "ParamList"' ColumnSize.Param)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Param] = new TableInfo(Table.Param' "Param"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Sequence"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Name"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.MemberRef] = new TableInfo(Table.MemberRef' "MemberRef"' new ColumnInfo[] {  				new ColumnInfo(0' "Class"' ColumnSize.MemberRefParent)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Signature"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Constant] = new TableInfo(Table.Constant' "Constant"' new ColumnInfo[] {  				new ColumnInfo(0' "Type"' ColumnSize.Byte)'  				new ColumnInfo(1' "Parent"' ColumnSize.HasConstant)'  				new ColumnInfo(2' "Value"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.CustomAttribute] = new TableInfo(Table.CustomAttribute' "CustomAttribute"' new ColumnInfo[] {  				new ColumnInfo(0' "Parent"' ColumnSize.HasCustomAttribute)'  				new ColumnInfo(1' "Type"' ColumnSize.CustomAttributeType)'  				new ColumnInfo(2' "Value"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.DeclSecurity] = new TableInfo(Table.DeclSecurity' "DeclSecurity"' new ColumnInfo[] {  				new ColumnInfo(0' "Action"' ColumnSize.Int16)'  				new ColumnInfo(1' "Parent"' ColumnSize.HasDeclSecurity)'  				new ColumnInfo(2' "PermissionSet"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ClassLayout] = new TableInfo(Table.ClassLayout' "ClassLayout"' new ColumnInfo[] {  				new ColumnInfo(0' "PackingSize"' ColumnSize.UInt16)'  				new ColumnInfo(1' "ClassSize"' ColumnSize.UInt32)'  				new ColumnInfo(2' "Parent"' ColumnSize.TypeDef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Event] = new TableInfo(Table.Event' "Event"' new ColumnInfo[] {  				new ColumnInfo(0' "EventFlags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "EventType"' ColumnSize.TypeDefOrRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Property] = new TableInfo(Table.Property' "Property"' new ColumnInfo[] {  				new ColumnInfo(0' "PropFlags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "Type"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.MethodSemantics] = new TableInfo(Table.MethodSemantics' "MethodSemantics"' new ColumnInfo[] {  				new ColumnInfo(0' "Semantic"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Method"' ColumnSize.Method)'  				new ColumnInfo(2' "Association"' ColumnSize.HasSemantic)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.MethodImpl] = new TableInfo(Table.MethodImpl' "MethodImpl"' new ColumnInfo[] {  				new ColumnInfo(0' "Class"' ColumnSize.TypeDef)'  				new ColumnInfo(1' "MethodBody"' ColumnSize.MethodDefOrRef)'  				new ColumnInfo(2' "MethodDeclaration"' ColumnSize.MethodDefOrRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ImplMap] = new TableInfo(Table.ImplMap' "ImplMap"' new ColumnInfo[] {  				new ColumnInfo(0' "MappingFlags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MemberForwarded"' ColumnSize.MemberForwarded)'  				new ColumnInfo(2' "ImportName"' ColumnSize.Strings)'  				new ColumnInfo(3' "ImportScope"' ColumnSize.ModuleRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ImplMap] = new TableInfo(Table.ImplMap' "ImplMap"' new ColumnInfo[] {  				new ColumnInfo(0' "MappingFlags"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MemberForwarded"' ColumnSize.MemberForwarded)'  				new ColumnInfo(2' "ImportName"' ColumnSize.Strings)'  				new ColumnInfo(3' "ImportScope"' ColumnSize.ModuleRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Assembly] = new TableInfo(Table.Assembly' "Assembly"' new ColumnInfo[] {  				new ColumnInfo(0' "HashAlgId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(3' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(5' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(6' "PublicKey"' ColumnSize.Blob)'  				new ColumnInfo(7' "Name"' ColumnSize.Strings)'  				new ColumnInfo(8' "Locale"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyOS] = new TableInfo(Table.AssemblyOS' "AssemblyOS"' new ColumnInfo[] {  				new ColumnInfo(0' "OSPlatformId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "OSMajorVersion"' ColumnSize.UInt32)'  				new ColumnInfo(2' "OSMinorVersion"' ColumnSize.UInt32)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRef] = new TableInfo(Table.AssemblyRef' "AssemblyRef"' new ColumnInfo[] {  				new ColumnInfo(0' "MajorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(1' "MinorVersion"' ColumnSize.UInt16)'  				new ColumnInfo(2' "BuildNumber"' ColumnSize.UInt16)'  				new ColumnInfo(3' "RevisionNumber"' ColumnSize.UInt16)'  				new ColumnInfo(4' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(5' "PublicKeyOrToken"' ColumnSize.Blob)'  				new ColumnInfo(6' "Name"' ColumnSize.Strings)'  				new ColumnInfo(7' "Locale"' ColumnSize.Strings)'  				new ColumnInfo(8' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRefOS] = new TableInfo(Table.AssemblyRefOS' "AssemblyRefOS"' new ColumnInfo[] {  				new ColumnInfo(0' "OSPlatformId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "OSMajorVersion"' ColumnSize.UInt32)'  				new ColumnInfo(2' "OSMinorVersion"' ColumnSize.UInt32)'  				new ColumnInfo(3' "AssemblyRef"' ColumnSize.AssemblyRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.AssemblyRefOS] = new TableInfo(Table.AssemblyRefOS' "AssemblyRefOS"' new ColumnInfo[] {  				new ColumnInfo(0' "OSPlatformId"' ColumnSize.UInt32)'  				new ColumnInfo(1' "OSMajorVersion"' ColumnSize.UInt32)'  				new ColumnInfo(2' "OSMinorVersion"' ColumnSize.UInt32)'  				new ColumnInfo(3' "AssemblyRef"' ColumnSize.AssemblyRef)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.File] = new TableInfo(Table.File' "File"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Name"' ColumnSize.Strings)'  				new ColumnInfo(2' "HashValue"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ExportedType] = new TableInfo(Table.ExportedType' "ExportedType"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "TypeDefId"' ColumnSize.UInt32)'  				new ColumnInfo(2' "TypeName"' ColumnSize.Strings)'  				new ColumnInfo(3' "TypeNamespace"' ColumnSize.Strings)'  				new ColumnInfo(4' "Implementation"' ColumnSize.Implementation)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ExportedType] = new TableInfo(Table.ExportedType' "ExportedType"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "TypeDefId"' ColumnSize.UInt32)'  				new ColumnInfo(2' "TypeName"' ColumnSize.Strings)'  				new ColumnInfo(3' "TypeNamespace"' ColumnSize.Strings)'  				new ColumnInfo(4' "Implementation"' ColumnSize.Implementation)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ExportedType] = new TableInfo(Table.ExportedType' "ExportedType"' new ColumnInfo[] {  				new ColumnInfo(0' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(1' "TypeDefId"' ColumnSize.UInt32)'  				new ColumnInfo(2' "TypeName"' ColumnSize.Strings)'  				new ColumnInfo(3' "TypeNamespace"' ColumnSize.Strings)'  				new ColumnInfo(4' "Implementation"' ColumnSize.Implementation)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ManifestResource] = new TableInfo(Table.ManifestResource' "ManifestResource"' new ColumnInfo[] {  				new ColumnInfo(0' "Offset"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(2' "Name"' ColumnSize.Strings)'  				new ColumnInfo(3' "Implementation"' ColumnSize.Implementation)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.ManifestResource] = new TableInfo(Table.ManifestResource' "ManifestResource"' new ColumnInfo[] {  				new ColumnInfo(0' "Offset"' ColumnSize.UInt32)'  				new ColumnInfo(1' "Flags"' ColumnSize.UInt32)'  				new ColumnInfo(2' "Name"' ColumnSize.Strings)'  				new ColumnInfo(3' "Implementation"' ColumnSize.Implementation)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: if (majorVersion == 1 && minorVersion == 1) {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  					new ColumnInfo(4' "Kind"' ColumnSize.TypeDefOrRef)'  				});  			}  			else {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				});  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: if (majorVersion == 1 && minorVersion == 1) {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  					new ColumnInfo(4' "Kind"' ColumnSize.TypeDefOrRef)'  				});  			}  			else {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				});  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: if (majorVersion == 1 && minorVersion == 1) {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  					new ColumnInfo(4' "Kind"' ColumnSize.TypeDefOrRef)'  				});  			}  			else {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				});  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: if (majorVersion == 1 && minorVersion == 1) {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  					new ColumnInfo(4' "Kind"' ColumnSize.TypeDefOrRef)'  				});  			}  			else {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				});  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: if (majorVersion == 1 && minorVersion == 1) {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  					new ColumnInfo(4' "Kind"' ColumnSize.TypeDefOrRef)'  				});  			}  			else {  				tableInfos[(int)Table.GenericParam] = new TableInfo(Table.GenericParam' "GenericParam"' new ColumnInfo[] {  					new ColumnInfo(0' "Number"' ColumnSize.UInt16)'  					new ColumnInfo(1' "Flags"' ColumnSize.UInt16)'  					new ColumnInfo(2' "Owner"' ColumnSize.TypeOrMethodDef)'  					new ColumnInfo(3' "Name"' ColumnSize.Strings)'  				});  			}
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Document] = new TableInfo(Table.Document' "Document"' new ColumnInfo[] {  				new ColumnInfo(0' "Name"' ColumnSize.Blob)'  				new ColumnInfo(1' "HashAlgorithm"' ColumnSize.GUID)'  				new ColumnInfo(2' "Hash"' ColumnSize.Blob)'  				new ColumnInfo(3' "Language"' ColumnSize.GUID)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.Document] = new TableInfo(Table.Document' "Document"' new ColumnInfo[] {  				new ColumnInfo(0' "Name"' ColumnSize.Blob)'  				new ColumnInfo(1' "HashAlgorithm"' ColumnSize.GUID)'  				new ColumnInfo(2' "Hash"' ColumnSize.Blob)'  				new ColumnInfo(3' "Language"' ColumnSize.GUID)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.LocalScope] = new TableInfo(Table.LocalScope' "LocalScope"' new ColumnInfo[] {  				new ColumnInfo(0' "Method"' ColumnSize.Method)'  				new ColumnInfo(1' "ImportScope"' ColumnSize.ImportScope)'  				new ColumnInfo(2' "VariableList"' ColumnSize.LocalVariable)'  				new ColumnInfo(3' "ConstantList"' ColumnSize.LocalConstant)'  				new ColumnInfo(4' "StartOffset"' ColumnSize.UInt32)'  				new ColumnInfo(5' "Length"' ColumnSize.UInt32)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.LocalScope] = new TableInfo(Table.LocalScope' "LocalScope"' new ColumnInfo[] {  				new ColumnInfo(0' "Method"' ColumnSize.Method)'  				new ColumnInfo(1' "ImportScope"' ColumnSize.ImportScope)'  				new ColumnInfo(2' "VariableList"' ColumnSize.LocalVariable)'  				new ColumnInfo(3' "ConstantList"' ColumnSize.LocalConstant)'  				new ColumnInfo(4' "StartOffset"' ColumnSize.UInt32)'  				new ColumnInfo(5' "Length"' ColumnSize.UInt32)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.LocalScope] = new TableInfo(Table.LocalScope' "LocalScope"' new ColumnInfo[] {  				new ColumnInfo(0' "Method"' ColumnSize.Method)'  				new ColumnInfo(1' "ImportScope"' ColumnSize.ImportScope)'  				new ColumnInfo(2' "VariableList"' ColumnSize.LocalVariable)'  				new ColumnInfo(3' "ConstantList"' ColumnSize.LocalConstant)'  				new ColumnInfo(4' "StartOffset"' ColumnSize.UInt32)'  				new ColumnInfo(5' "Length"' ColumnSize.UInt32)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.LocalScope] = new TableInfo(Table.LocalScope' "LocalScope"' new ColumnInfo[] {  				new ColumnInfo(0' "Method"' ColumnSize.Method)'  				new ColumnInfo(1' "ImportScope"' ColumnSize.ImportScope)'  				new ColumnInfo(2' "VariableList"' ColumnSize.LocalVariable)'  				new ColumnInfo(3' "ConstantList"' ColumnSize.LocalConstant)'  				new ColumnInfo(4' "StartOffset"' ColumnSize.UInt32)'  				new ColumnInfo(5' "Length"' ColumnSize.UInt32)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.LocalVariable] = new TableInfo(Table.LocalVariable' "LocalVariable"' new ColumnInfo[] {  				new ColumnInfo(0' "Attributes"' ColumnSize.UInt16)'  				new ColumnInfo(1' "Index"' ColumnSize.UInt16)'  				new ColumnInfo(2' "Name"' ColumnSize.Strings)'  			});
Magic Number,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,CreateTables,The following statement contains a magic number: tableInfos[(int)Table.CustomDebugInformation] = new TableInfo(Table.CustomDebugInformation' "CustomDebugInformation"' new ColumnInfo[] {  				new ColumnInfo(0' "Parent"' ColumnSize.HasCustomDebugInformation)'  				new ColumnInfo(1' "Kind"' ColumnSize.GUID)'  				new ColumnInfo(2' "Value"' ColumnSize.Blob)'  			});
Magic Number,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetFieldRidList,The following statement contains a magic number: var list = GetRidList(tablesStream.TypeDefTable' typeDefRid' 4' tablesStream.FieldTable);
Magic Number,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetMethodRidList,The following statement contains a magic number: var list = GetRidList(tablesStream.TypeDefTable' typeDefRid' 5' tablesStream.MethodTable);
Magic Number,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,GetParamRidList,The following statement contains a magic number: var list = GetRidList(tablesStream.MethodTable' methodRid' 5' tablesStream.ParamTable);
Magic Number,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,BinarySearch_NoLock,The following statement contains a magic number: while (ridLo <= ridHi) {  				uint rid = (ridLo + ridHi) / 2;  				uint key2;  				if (!tablesStream.ReadColumn_NoLock(tableSource' rid' keyColumn' out key2))  					break;	// Never happens since rid is valid  				if (key == key2)  					return rid;  				if (key2 > key)  					ridHi = rid - 1;  				else  					ridLo = rid + 1;  			}
Magic Number,dnlib.DotNet.MD,GuidStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\GuidStream.cs,IsValidIndex,The following statement contains a magic number: return index == 0 || (index <= 0x10000000 && IsValidOffset((index - 1) * 16' 16));
Magic Number,dnlib.DotNet.MD,GuidStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\GuidStream.cs,IsValidIndex,The following statement contains a magic number: return index == 0 || (index <= 0x10000000 && IsValidOffset((index - 1) * 16' 16));
Magic Number,dnlib.DotNet.MD,GuidStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\GuidStream.cs,Read,The following statement contains a magic number: var reader = GetReader_NoLock((index - 1) * 16);
Magic Number,dnlib.DotNet.MD,GuidStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\GuidStream.cs,Read,The following statement contains a magic number: return new Guid(reader.ReadBytes(16));
Magic Number,dnlib.DotNet.MD,HotHeapStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,BinarySearch,The following statement contains a magic number: while (lo <= hi && hi != uint.MaxValue) {  				uint index = (lo + hi) / 2;  				uint val = reader.ReadUInt32At(posRids + index * 4);  				if (originalHeapOffset == val)  					return index;  				if (originalHeapOffset > val)  					lo = index + 1;  				else  					hi = index - 1;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,BinarySearch,The following statement contains a magic number: while (lo <= hi && hi != uint.MaxValue) {  				uint index = (lo + hi) / 2;  				uint val = reader.ReadUInt32At(posRids + index * 4);  				if (originalHeapOffset == val)  					return index;  				if (originalHeapOffset > val)  					lo = index + 1;  				else  					hi = index - 1;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,Initialize,The following statement contains a magic number: try {  				offsetMask = mask;  				reader.Position = baseOffset;  				posData = (baseOffset - reader.ReadInt32()) & mask;  				posIndexes = (baseOffset - (reader.ReadInt32() & ~3)) & mask;  				uint ridsOffset = reader.ReadUInt32();  				numRids = ridsOffset / 4;  				posRids = (baseOffset - numRids * 4) & mask;  			}  			// Ignore exceptions. The CLR only reads these values when needed. Assume  			// that this was invalid data that the CLR will never read anyway.  			catch (AccessViolationException) {  				invalid = true;  			}  			catch (IOException) {  				invalid = true;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,Initialize,The following statement contains a magic number: try {  				offsetMask = mask;  				reader.Position = baseOffset;  				posData = (baseOffset - reader.ReadInt32()) & mask;  				posIndexes = (baseOffset - (reader.ReadInt32() & ~3)) & mask;  				uint ridsOffset = reader.ReadUInt32();  				numRids = ridsOffset / 4;  				posRids = (baseOffset - numRids * 4) & mask;  			}  			// Ignore exceptions. The CLR only reads these values when needed. Assume  			// that this was invalid data that the CLR will never read anyway.  			catch (AccessViolationException) {  				invalid = true;  			}  			catch (IOException) {  				invalid = true;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,Initialize,The following statement contains a magic number: try {  				offsetMask = mask;  				reader.Position = baseOffset;  				posData = (baseOffset - reader.ReadInt32()) & mask;  				posIndexes = (baseOffset - (reader.ReadInt32() & ~3)) & mask;  				uint ridsOffset = reader.ReadUInt32();  				numRids = ridsOffset / 4;  				posRids = (baseOffset - numRids * 4) & mask;  			}  			// Ignore exceptions. The CLR only reads these values when needed. Assume  			// that this was invalid data that the CLR will never read anyway.  			catch (AccessViolationException) {  				invalid = true;  			}  			catch (IOException) {  				invalid = true;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,GetBlobOffset,The following statement contains a magic number: if (index == 0)  				dataOffset = posData;  			else  				dataOffset = posData + reader.ReadUInt32At((posIndexes + (index - 1) * 4) & offsetMask);
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,Initialize,The following statement contains a magic number: try {  				offsetMask = mask;  				reader.Position = baseOffset;  				uint ridsOffset = reader.ReadUInt32();  				numRids = ridsOffset / 4;  				posRids = (baseOffset - ridsOffset) & mask;  				posIndexes = (baseOffset - reader.ReadInt32()) & mask;  				posData = (baseOffset - reader.ReadInt32()) & mask;  			}  			// Ignore exceptions. The CLR only reads these values when needed. Assume  			// that this was invalid data that the CLR will never read anyway.  			catch (AccessViolationException) {  				invalid = true;  			}  			catch (IOException) {  				invalid = true;  			}
Magic Number,dnlib.DotNet.MD,HotHeapStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotHeapStream.cs,GetBlobOffset,The following statement contains a magic number: dataOffset = posData + reader.ReadUInt32At((posIndexes + index * 4) & offsetMask);
Magic Number,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,CreateHotHeapStreams2,The following statement contains a magic number: try {  				long dirBaseOffs = GetHotHeapDirectoryBaseOffset();  				for (long offs = dirBaseOffs; offs + 8 <= endOffset - 8; offs += 8) {  					fullStream.Position = offs;  					HeapType heapType;  					long hotHeapOffset;  					ReadHotHeapDirectory(fullStream' dirBaseOffs' out heapType' out hotHeapOffset);    					IImageStream dataStream = null;  					HotHeapStream hotHeapStream = null;  					try {  						dataStream = fullStream.Clone();  						list.Add(hotHeapStream = CreateHotHeapStream(heapType' dataStream' hotHeapOffset));  						dataStream = null;  						hotHeapStream = null;  					}  					catch {  						if (hotHeapStream != null)  							hotHeapStream.Dispose();  						if (dataStream != null)  							dataStream.Dispose();  						throw;  					}  				}  			}  			catch {  				foreach (var h in list)  					h.Dispose();  				throw;  			}
Magic Number,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,CreateHotHeapStreams2,The following statement contains a magic number: try {  				long dirBaseOffs = GetHotHeapDirectoryBaseOffset();  				for (long offs = dirBaseOffs; offs + 8 <= endOffset - 8; offs += 8) {  					fullStream.Position = offs;  					HeapType heapType;  					long hotHeapOffset;  					ReadHotHeapDirectory(fullStream' dirBaseOffs' out heapType' out hotHeapOffset);    					IImageStream dataStream = null;  					HotHeapStream hotHeapStream = null;  					try {  						dataStream = fullStream.Clone();  						list.Add(hotHeapStream = CreateHotHeapStream(heapType' dataStream' hotHeapOffset));  						dataStream = null;  						hotHeapStream = null;  					}  					catch {  						if (hotHeapStream != null)  							hotHeapStream.Dispose();  						if (dataStream != null)  							dataStream.Dispose();  						throw;  					}  				}  			}  			catch {  				foreach (var h in list)  					h.Dispose();  				throw;  			}
Magic Number,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,CreateHotHeapStreams2,The following statement contains a magic number: try {  				long dirBaseOffs = GetHotHeapDirectoryBaseOffset();  				for (long offs = dirBaseOffs; offs + 8 <= endOffset - 8; offs += 8) {  					fullStream.Position = offs;  					HeapType heapType;  					long hotHeapOffset;  					ReadHotHeapDirectory(fullStream' dirBaseOffs' out heapType' out hotHeapOffset);    					IImageStream dataStream = null;  					HotHeapStream hotHeapStream = null;  					try {  						dataStream = fullStream.Clone();  						list.Add(hotHeapStream = CreateHotHeapStream(heapType' dataStream' hotHeapOffset));  						dataStream = null;  						hotHeapStream = null;  					}  					catch {  						if (hotHeapStream != null)  							hotHeapStream.Dispose();  						if (dataStream != null)  							dataStream.Dispose();  						throw;  					}  				}  			}  			catch {  				foreach (var h in list)  					h.Dispose();  				throw;  			}
Magic Number,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotTableBaseOffset,The following statement contains a magic number: return endOffset - 8 - HotTableStream.HOT_HEAP_DIR_SIZE - fullStream.ReadUInt32At(endOffset - 8);
Magic Number,dnlib.DotNet.MD,HotStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotTableBaseOffset,The following statement contains a magic number: return endOffset - 8 - HotTableStream.HOT_HEAP_DIR_SIZE - fullStream.ReadUInt32At(endOffset - 8);
Magic Number,dnlib.DotNet.MD,HotStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - (fullStream.ReadUInt32At(endOffset - 8 + 4) & ~3);
Magic Number,dnlib.DotNet.MD,HotStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - (fullStream.ReadUInt32At(endOffset - 8 + 4) & ~3);
Magic Number,dnlib.DotNet.MD,HotStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - (fullStream.ReadUInt32At(endOffset - 8 + 4) & ~3);
Magic Number,dnlib.DotNet.MD,HotStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - (fullStream.ReadUInt32At(endOffset - 8 + 4) & ~3);
Magic Number,dnlib.DotNet.MD,HotStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,ReadHotHeapDirectory,The following statement contains a magic number: hotHeapOffs = dirBaseOffs - (reader.ReadUInt32() & ~3);
Magic Number,dnlib.DotNet.MD,HotStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - fullStream.ReadUInt32At(endOffset - 8 + 4);
Magic Number,dnlib.DotNet.MD,HotStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - fullStream.ReadUInt32At(endOffset - 8 + 4);
Magic Number,dnlib.DotNet.MD,HotStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotStream.cs,GetHotHeapDirectoryBaseOffset,The following statement contains a magic number: return endOffset - 8 - fullStream.ReadUInt32At(endOffset - 8 + 4);
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < tableHeaders.Length; i++) {  				fullStream.Position = baseOffset + 4 + i * 4;  				int headerOffs = fullStream.ReadInt32();  				if (headerOffs == 0)  					continue;  				var headerBaseOffs = (baseOffset + headerOffs) & mask;  				fullStream.Position = headerBaseOffs;  				try {  					var header = new TableHeader {  						numRows = fullStream.ReadUInt32()'  						posTable1 = AddOffsets(mask' headerBaseOffs' fullStream.ReadInt32())'  						posTable2 = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posData = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						shift = fullStream.ReadUInt16()'  					};  					header.mask = (1U << header.shift) - 1;  					tableHeaders[i] = header;  				}  				// Ignore exceptions. The CLR only reads these values when needed. Assume  				// that this was invalid data that the CLR will never read anyway.  				catch (AccessViolationException) {  				}  				catch (IOException) {  				}  			}
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < tableHeaders.Length; i++) {  				fullStream.Position = baseOffset + 4 + i * 4;  				int headerOffs = fullStream.ReadInt32();  				if (headerOffs == 0)  					continue;  				var headerBaseOffs = (baseOffset + headerOffs) & mask;  				fullStream.Position = headerBaseOffs;  				try {  					var header = new TableHeader {  						numRows = fullStream.ReadUInt32()'  						posTable1 = AddOffsets(mask' headerBaseOffs' fullStream.ReadInt32())'  						posTable2 = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posData = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						shift = fullStream.ReadUInt16()'  					};  					header.mask = (1U << header.shift) - 1;  					tableHeaders[i] = header;  				}  				// Ignore exceptions. The CLR only reads these values when needed. Assume  				// that this was invalid data that the CLR will never read anyway.  				catch (AccessViolationException) {  				}  				catch (IOException) {  				}  			}
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR20,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,GetRowOffset,The following statement contains a magic number: fullStream.Position = header.posTable1 + (rid & header.mask) * 2;
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < tableHeaders.Length; i++) {  				fullStream.Position = baseOffset + 4 + i * 4;  				int headerOffs = fullStream.ReadInt32();  				if (headerOffs == 0)  					continue;  				var headerBaseOffs = (baseOffset + headerOffs) & mask;  				fullStream.Position = headerBaseOffs;  				try {  					var header = new TableHeader {  						numRows = fullStream.ReadUInt32()'  						posTable1 = AddOffsets(mask' headerBaseOffs' fullStream.ReadInt32())'  						posTable2 = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posIndexes = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posData = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						shift = fullStream.ReadUInt16()'  					};  					header.mask = (1U << header.shift) - 1;  					tableHeaders[i] = header;  				}  				// Ignore exceptions. The CLR only reads these values when needed. Assume  				// that this was invalid data that the CLR will never read anyway.  				catch (AccessViolationException) {  				}  				catch (IOException) {  				}  			}
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < tableHeaders.Length; i++) {  				fullStream.Position = baseOffset + 4 + i * 4;  				int headerOffs = fullStream.ReadInt32();  				if (headerOffs == 0)  					continue;  				var headerBaseOffs = (baseOffset + headerOffs) & mask;  				fullStream.Position = headerBaseOffs;  				try {  					var header = new TableHeader {  						numRows = fullStream.ReadUInt32()'  						posTable1 = AddOffsets(mask' headerBaseOffs' fullStream.ReadInt32())'  						posTable2 = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posIndexes = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						posData = (headerBaseOffs + fullStream.ReadInt32()) & mask'  						shift = fullStream.ReadUInt16()'  					};  					header.mask = (1U << header.shift) - 1;  					tableHeaders[i] = header;  				}  				// Ignore exceptions. The CLR only reads these values when needed. Assume  				// that this was invalid data that the CLR will never read anyway.  				catch (AccessViolationException) {  				}  				catch (IOException) {  				}  			}
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,GetRowOffset,The following statement contains a magic number: fullStream.Position = header.posTable1 + (rid & header.mask) * 2;
Magic Number,dnlib.DotNet.MD,HotTableStreamCLR40,C:\repos\0xd4d_dnlib\src\DotNet\MD\HotTableStream.cs,GetRowOffset,The following statement contains a magic number: while (index < stop) {  				if (fullStream.ReadByte() == highBits) {  					index = fullStream.ReadUInt16At(header.posIndexes + index * 2);  					offset = header.posData + index * table.RowSize;  					return true;  				}  				index++;  			}
Magic Number,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,GetGenericParamRidList,The following statement contains a magic number: return FindAllRowsUnsorted(tablesStream.GenericParamTable' 2' codedToken);
Magic Number,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,GetMethodSemanticsRidList,The following statement contains a magic number: return FindAllRowsUnsorted(tablesStream.MethodSemanticsTable' 2' codedToken);
Magic Number,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,GetClassLayoutRid,The following statement contains a magic number: var list = FindAllRowsUnsorted(tablesStream.ClassLayoutTable' 2' typeDefRid);
Magic Number,dnlib.DotNet.MD,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,InitializeInverseGenericParamOwnerRidList,The following statement contains a magic number: var ownerCol = gpTable.TableInfo.Columns[2];
Magic Number,dnlib.DotNet.MD,SortedTable,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaData.cs,BinarySearch,The following statement contains a magic number: while (lo <= hi && hi != -1) {  					int curr = (lo + hi) / 2;  					uint key2 = rows[curr].key;  					if (key == key2)  						return curr;  					if (key2 > key)  						hi = curr - 1;  					else  						lo = curr + 1;  				}
Magic Number,dnlib.DotNet.MD,MetaDataCreator,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataCreator.cs,Create,The following statement contains a magic number: try {  				var dotNetDir = peImage.ImageNTHeaders.OptionalHeader.DataDirectories[14];  				if (dotNetDir.VirtualAddress == 0)  					throw new BadImageFormatException(".NET data directory RVA is 0");  				if (dotNetDir.Size < 0x48)  					throw new BadImageFormatException(".NET data directory size < 0x48");  				var cor20Header = new ImageCor20Header(cor20HeaderStream = peImage.CreateStream(dotNetDir.VirtualAddress' 0x48)' verify);  				if (cor20Header.MetaData.VirtualAddress == 0)  					throw new BadImageFormatException(".NET MetaData RVA is 0");  				if (cor20Header.MetaData.Size < 16)  					throw new BadImageFormatException(".NET MetaData size is too small");  				var mdSize = cor20Header.MetaData.Size;  				var mdRva = cor20Header.MetaData.VirtualAddress;  				var mdHeader = new MetaDataHeader(mdHeaderStream = peImage.CreateStream(mdRva' mdSize)' verify);  				if (verify) {  					foreach (var sh in mdHeader.StreamHeaders) {  						if (sh.Offset + sh.StreamSize < sh.Offset || sh.Offset + sh.StreamSize > mdSize)  							throw new BadImageFormatException("Invalid stream header");  					}  				}    				switch (GetMetaDataType(mdHeader.StreamHeaders)) {  				case MetaDataType.Compressed:  					md = new CompressedMetaData(peImage' cor20Header' mdHeader);  					break;    				case MetaDataType.ENC:  					md = new ENCMetaData(peImage' cor20Header' mdHeader);  					break;    				default:  					throw new BadImageFormatException("No #~ or #- stream found");  				}  				md.Initialize(null);    				return md;  			}  			catch {  				if (md != null)  					md.Dispose();  				throw;  			}  			finally {  				if (cor20HeaderStream != null)  					cor20HeaderStream.Dispose();  				if (mdHeaderStream != null)  					mdHeaderStream.Dispose();  			}
Magic Number,dnlib.DotNet.MD,MetaDataCreator,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataCreator.cs,Create,The following statement contains a magic number: try {  				var dotNetDir = peImage.ImageNTHeaders.OptionalHeader.DataDirectories[14];  				if (dotNetDir.VirtualAddress == 0)  					throw new BadImageFormatException(".NET data directory RVA is 0");  				if (dotNetDir.Size < 0x48)  					throw new BadImageFormatException(".NET data directory size < 0x48");  				var cor20Header = new ImageCor20Header(cor20HeaderStream = peImage.CreateStream(dotNetDir.VirtualAddress' 0x48)' verify);  				if (cor20Header.MetaData.VirtualAddress == 0)  					throw new BadImageFormatException(".NET MetaData RVA is 0");  				if (cor20Header.MetaData.Size < 16)  					throw new BadImageFormatException(".NET MetaData size is too small");  				var mdSize = cor20Header.MetaData.Size;  				var mdRva = cor20Header.MetaData.VirtualAddress;  				var mdHeader = new MetaDataHeader(mdHeaderStream = peImage.CreateStream(mdRva' mdSize)' verify);  				if (verify) {  					foreach (var sh in mdHeader.StreamHeaders) {  						if (sh.Offset + sh.StreamSize < sh.Offset || sh.Offset + sh.StreamSize > mdSize)  							throw new BadImageFormatException("Invalid stream header");  					}  				}    				switch (GetMetaDataType(mdHeader.StreamHeaders)) {  				case MetaDataType.Compressed:  					md = new CompressedMetaData(peImage' cor20Header' mdHeader);  					break;    				case MetaDataType.ENC:  					md = new ENCMetaData(peImage' cor20Header' mdHeader);  					break;    				default:  					throw new BadImageFormatException("No #~ or #- stream found");  				}  				md.Initialize(null);    				return md;  			}  			catch {  				if (md != null)  					md.Dispose();  				throw;  			}  			finally {  				if (cor20HeaderStream != null)  					cor20HeaderStream.Dispose();  				if (mdHeaderStream != null)  					mdHeaderStream.Dispose();  			}
Magic Number,dnlib.DotNet.MD,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\MD\MetaDataHeader.cs,MetaDataHeader,The following statement contains a magic number: if (verify && !((majorVersion == 1 && minorVersion == 1) || (majorVersion == 0 && minorVersion >= 19)))  				throw new BadImageFormatException(string.Format("Unknown MetaData header version: {0}.{1}"' majorVersion' minorVersion));
Magic Number,dnlib.DotNet.MD,PdbStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\PdbStream.cs,PdbStream,The following statement contains a magic number: using (var stream = GetClonedImageStream()) {  				Id = stream.ReadBytes(20);  				EntryPoint = new MDToken(stream.ReadUInt32());  				var tables = stream.ReadUInt64();  				ReferencedTypeSystemTables = tables;  				var rows = new uint[64];  				for (int i = 0; i < rows.Length; i++' tables >>= 1) {  					if (((uint)tables & 1) != 0)  						rows[i] = stream.ReadUInt32();  				}  				TypeSystemTableRows = rows;  			}
Magic Number,dnlib.DotNet.MD,PdbStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\PdbStream.cs,PdbStream,The following statement contains a magic number: using (var stream = GetClonedImageStream()) {  				Id = stream.ReadBytes(20);  				EntryPoint = new MDToken(stream.ReadUInt32());  				var tables = stream.ReadUInt64();  				ReferencedTypeSystemTables = tables;  				var rows = new uint[64];  				for (int i = 0; i < rows.Length; i++' tables >>= 1) {  					if (((uint)tables & 1) != 0)  						rows[i] = stream.ReadUInt32();  				}  				TypeSystemTableRows = rows;  			}
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,rol,The following statement contains a magic number: return (int)((val << shift) | (val >> (32 - shift)));
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Generation +  				rol(obj.Name' 3) +  				rol(obj.Mvid' 7) +  				rol(obj.EncId' 11) +  				rol(obj.EncBaseId' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Generation +  				rol(obj.Name' 3) +  				rol(obj.Mvid' 7) +  				rol(obj.EncId' 11) +  				rol(obj.EncBaseId' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Generation +  				rol(obj.Name' 3) +  				rol(obj.Mvid' 7) +  				rol(obj.EncId' 11) +  				rol(obj.EncBaseId' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Generation +  				rol(obj.Name' 3) +  				rol(obj.Mvid' 7) +  				rol(obj.EncId' 11) +  				rol(obj.EncBaseId' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.ResolutionScope +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.ResolutionScope +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7) +  				rol(obj.Extends' 11) +  				rol(obj.FieldList' 15) +  				rol(obj.MethodList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7) +  				rol(obj.Extends' 11) +  				rol(obj.FieldList' 15) +  				rol(obj.MethodList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7) +  				rol(obj.Extends' 11) +  				rol(obj.FieldList' 15) +  				rol(obj.MethodList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7) +  				rol(obj.Extends' 11) +  				rol(obj.FieldList' 15) +  				rol(obj.MethodList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Namespace' 7) +  				rol(obj.Extends' 11) +  				rol(obj.FieldList' 15) +  				rol(obj.MethodList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Signature' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.Signature' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.ImplFlags' 3) +  				rol(obj.Flags' 7) +  				rol(obj.Name' 11) +  				rol(obj.Signature' 15) +  				rol(obj.ParamList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.ImplFlags' 3) +  				rol(obj.Flags' 7) +  				rol(obj.Name' 11) +  				rol(obj.Signature' 15) +  				rol(obj.ParamList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.ImplFlags' 3) +  				rol(obj.Flags' 7) +  				rol(obj.Name' 11) +  				rol(obj.Signature' 15) +  				rol(obj.ParamList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.ImplFlags' 3) +  				rol(obj.Flags' 7) +  				rol(obj.Name' 11) +  				rol(obj.Signature' 15) +  				rol(obj.ParamList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.ImplFlags' 3) +  				rol(obj.Flags' 7) +  				rol(obj.Name' 11) +  				rol(obj.Signature' 15) +  				rol(obj.ParamList' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Sequence' 3) +  				rol(obj.Name' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Sequence' 3) +  				rol(obj.Name' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Class +  				rol(obj.Interface' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Class +  				rol(obj.Name' 3) +  				rol(obj.Signature' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Class +  				rol(obj.Name' 3) +  				rol(obj.Signature' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Type +  				rol(obj.Padding' 3) +  				rol(obj.Parent' 7) +  				rol(obj.Value' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Type +  				rol(obj.Padding' 3) +  				rol(obj.Parent' 7) +  				rol(obj.Value' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Type +  				rol(obj.Padding' 3) +  				rol(obj.Parent' 7) +  				rol(obj.Value' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.Type' 3) +  				rol(obj.Value' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.Type' 3) +  				rol(obj.Value' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.NativeType' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Action +  				rol(obj.Parent' 3) +  				rol(obj.PermissionSet' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Action +  				rol(obj.Parent' 3) +  				rol(obj.PermissionSet' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.PackingSize +  				rol(obj.ClassSize' 3) +  				rol(obj.Parent' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.PackingSize +  				rol(obj.ClassSize' 3) +  				rol(obj.Parent' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OffSet +  				rol(obj.Field' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.EventList' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.EventFlags +  				rol(obj.Name' 3) +  				rol(obj.EventType' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.EventFlags +  				rol(obj.Name' 3) +  				rol(obj.EventType' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.PropertyList' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.PropFlags +  				rol(obj.Name' 3) +  				rol(obj.Type' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.PropFlags +  				rol(obj.Name' 3) +  				rol(obj.Type' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Semantic +  				rol(obj.Method' 3) +  				rol(obj.Association' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Semantic +  				rol(obj.Method' 3) +  				rol(obj.Association' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Class +  				rol(obj.MethodBody' 3) +  				rol(obj.MethodDeclaration' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Class +  				rol(obj.MethodBody' 3) +  				rol(obj.MethodDeclaration' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MappingFlags +  				rol(obj.MemberForwarded' 3) +  				rol(obj.ImportName' 7) +  				rol(obj.ImportScope' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MappingFlags +  				rol(obj.MemberForwarded' 3) +  				rol(obj.ImportName' 7) +  				rol(obj.ImportScope' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MappingFlags +  				rol(obj.MemberForwarded' 3) +  				rol(obj.ImportName' 7) +  				rol(obj.ImportScope' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.RVA +  				rol(obj.Field' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Token +  				rol(obj.FuncCode' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.HashAlgId +  				rol(obj.MajorVersion' 3) +  				rol(obj.MinorVersion' 7) +  				rol(obj.BuildNumber' 11) +  				rol(obj.RevisionNumber' 15) +  				rol(obj.Flags' 19) +  				rol(obj.PublicKey' 23) +  				rol(obj.Name' 27) +  				rol(obj.Locale' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OSPlatformId +  				rol(obj.OSMajorVersion' 3) +  				rol(obj.OSMinorVersion' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OSPlatformId +  				rol(obj.OSMajorVersion' 3) +  				rol(obj.OSMinorVersion' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MajorVersion +  				rol(obj.MinorVersion' 3) +  				rol(obj.BuildNumber' 7) +  				rol(obj.RevisionNumber' 11) +  				rol(obj.Flags' 15) +  				rol(obj.PublicKeyOrToken' 19) +  				rol(obj.Name' 23) +  				rol(obj.Locale' 27) +  				rol(obj.HashValue' 31);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Processor +  				rol(obj.AssemblyRef' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OSPlatformId +  				rol(obj.OSMajorVersion' 3) +  				rol(obj.OSMinorVersion' 7) +  				rol(obj.AssemblyRef' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OSPlatformId +  				rol(obj.OSMajorVersion' 3) +  				rol(obj.OSMinorVersion' 7) +  				rol(obj.AssemblyRef' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.OSPlatformId +  				rol(obj.OSMajorVersion' 3) +  				rol(obj.OSMinorVersion' 7) +  				rol(obj.AssemblyRef' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.HashValue' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.Name' 3) +  				rol(obj.HashValue' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.TypeDefId' 3) +  				rol(obj.TypeName' 7) +  				rol(obj.TypeNamespace' 11) +  				rol(obj.Implementation' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.TypeDefId' 3) +  				rol(obj.TypeName' 7) +  				rol(obj.TypeNamespace' 11) +  				rol(obj.Implementation' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.TypeDefId' 3) +  				rol(obj.TypeName' 7) +  				rol(obj.TypeNamespace' 11) +  				rol(obj.Implementation' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Flags +  				rol(obj.TypeDefId' 3) +  				rol(obj.TypeName' 7) +  				rol(obj.TypeNamespace' 11) +  				rol(obj.Implementation' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Offset +  				rol(obj.Flags' 3) +  				rol(obj.Name' 7) +  				rol(obj.Implementation' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Offset +  				rol(obj.Flags' 3) +  				rol(obj.Name' 7) +  				rol(obj.Implementation' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Offset +  				rol(obj.Flags' 3) +  				rol(obj.Name' 7) +  				rol(obj.Implementation' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.NestedClass +  				rol(obj.EnclosingClass' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Number +  				rol(obj.Flags' 3) +  				rol(obj.Owner' 7) +  				rol(obj.Name' 11) +  				rol(obj.Kind' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Number +  				rol(obj.Flags' 3) +  				rol(obj.Owner' 7) +  				rol(obj.Name' 11) +  				rol(obj.Kind' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Number +  				rol(obj.Flags' 3) +  				rol(obj.Owner' 7) +  				rol(obj.Name' 11) +  				rol(obj.Kind' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Number +  				rol(obj.Flags' 3) +  				rol(obj.Owner' 7) +  				rol(obj.Name' 11) +  				rol(obj.Kind' 15);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.Instantiation' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Owner +  				rol(obj.Constraint' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Name +  				rol(obj.HashAlgorithm' 3) +  				rol(obj.Hash' 7) +  				rol(obj.Language' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Name +  				rol(obj.HashAlgorithm' 3) +  				rol(obj.Hash' 7) +  				rol(obj.Language' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Name +  				rol(obj.HashAlgorithm' 3) +  				rol(obj.Hash' 7) +  				rol(obj.Language' 11);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Document +  				rol(obj.SequencePoints' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.ImportScope' 3) +  				rol(obj.VariableList' 7) +  				rol(obj.ConstantList' 11) +  				rol(obj.StartOffset' 15) +  				rol(obj.Length' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.ImportScope' 3) +  				rol(obj.VariableList' 7) +  				rol(obj.ConstantList' 11) +  				rol(obj.StartOffset' 15) +  				rol(obj.Length' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.ImportScope' 3) +  				rol(obj.VariableList' 7) +  				rol(obj.ConstantList' 11) +  				rol(obj.StartOffset' 15) +  				rol(obj.Length' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.ImportScope' 3) +  				rol(obj.VariableList' 7) +  				rol(obj.ConstantList' 11) +  				rol(obj.StartOffset' 15) +  				rol(obj.Length' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Method +  				rol(obj.ImportScope' 3) +  				rol(obj.VariableList' 7) +  				rol(obj.ConstantList' 11) +  				rol(obj.StartOffset' 15) +  				rol(obj.Length' 19);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Attributes +  				rol(obj.Index' 3) +  				rol(obj.Name' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return obj.Attributes +  				rol(obj.Index' 3) +  				rol(obj.Name' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Name +  				rol(obj.Signature' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.Imports' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.MoveNextMethod +  				rol(obj.KickoffMethod' 3);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.Kind' 3) +  				rol(obj.Value' 7);
Magic Number,dnlib.DotNet.MD,RawRowEqualityComparer,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawRowEqualityComparer.cs,GetHashCode,The following statement contains a magic number: return (int)obj.Parent +  				rol(obj.Kind' 3) +  				rol(obj.Value' 7);
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Generation;  			case 1: return Name;  			case 2: return Mvid;  			case 3: return EncId;  			case 4: return EncBaseId;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Generation;  			case 1: return Name;  			case 2: return Mvid;  			case 3: return EncId;  			case 4: return EncBaseId;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Generation;  			case 1: return Name;  			case 2: return Mvid;  			case 3: return EncId;  			case 4: return EncBaseId;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Generation = (ushort)value; break;  			case 1: Name = value; break;  			case 2: Mvid = value; break;  			case 3: EncId = value; break;  			case 4: EncBaseId = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Generation = (ushort)value; break;  			case 1: Name = value; break;  			case 2: Mvid = value; break;  			case 3: EncId = value; break;  			case 4: EncBaseId = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawModuleRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Generation = (ushort)value; break;  			case 1: Name = value; break;  			case 2: Mvid = value; break;  			case 3: EncId = value; break;  			case 4: EncBaseId = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawTypeRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return ResolutionScope;  			case 1: return Name;  			case 2: return Namespace;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawTypeRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: ResolutionScope = value; break;  			case 1: Name = value; break;  			case 2: Namespace = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return Namespace;  			case 3: return Extends;  			case 4: return FieldList;  			case 5: return MethodList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return Namespace;  			case 3: return Extends;  			case 4: return FieldList;  			case 5: return MethodList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return Namespace;  			case 3: return Extends;  			case 4: return FieldList;  			case 5: return MethodList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return Namespace;  			case 3: return Extends;  			case 4: return FieldList;  			case 5: return MethodList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: Name = value; break;  			case 2: Namespace = value; break;  			case 3: Extends = value; break;  			case 4: FieldList = value; break;  			case 5: MethodList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: Name = value; break;  			case 2: Namespace = value; break;  			case 3: Extends = value; break;  			case 4: FieldList = value; break;  			case 5: MethodList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: Name = value; break;  			case 2: Namespace = value; break;  			case 3: Extends = value; break;  			case 4: FieldList = value; break;  			case 5: MethodList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawTypeDefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: Name = value; break;  			case 2: Namespace = value; break;  			case 3: Extends = value; break;  			case 4: FieldList = value; break;  			case 5: MethodList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawFieldRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return Signature;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawFieldRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = (ushort)value; break;  			case 1: Name = value; break;  			case 2: Signature = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return RVA;  			case 1: return ImplFlags;  			case 2: return Flags;  			case 3: return Name;  			case 4: return Signature;  			case 5: return ParamList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return RVA;  			case 1: return ImplFlags;  			case 2: return Flags;  			case 3: return Name;  			case 4: return Signature;  			case 5: return ParamList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return RVA;  			case 1: return ImplFlags;  			case 2: return Flags;  			case 3: return Name;  			case 4: return Signature;  			case 5: return ParamList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return RVA;  			case 1: return ImplFlags;  			case 2: return Flags;  			case 3: return Name;  			case 4: return Signature;  			case 5: return ParamList;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: RVA = value; break;  			case 1: ImplFlags = (ushort)value; break;  			case 2: Flags = (ushort)value; break;  			case 3: Name = value; break;  			case 4: Signature = value; break;  			case 5: ParamList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: RVA = value; break;  			case 1: ImplFlags = (ushort)value; break;  			case 2: Flags = (ushort)value; break;  			case 3: Name = value; break;  			case 4: Signature = value; break;  			case 5: ParamList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: RVA = value; break;  			case 1: ImplFlags = (ushort)value; break;  			case 2: Flags = (ushort)value; break;  			case 3: Name = value; break;  			case 4: Signature = value; break;  			case 5: ParamList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: RVA = value; break;  			case 1: ImplFlags = (ushort)value; break;  			case 2: Flags = (ushort)value; break;  			case 3: Name = value; break;  			case 4: Signature = value; break;  			case 5: ParamList = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Sequence;  			case 2: return Name;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = (ushort)value; break;  			case 1: Sequence = (ushort)value; break;  			case 2: Name = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMemberRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Class;  			case 1: return Name;  			case 2: return Signature;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMemberRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Class = value; break;  			case 1: Name = value; break;  			case 2: Signature = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawConstantRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Type;  			case 1: return Parent;  			case 2: return Value;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawConstantRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Type = (byte)value; break;  			case 1: Parent = value; break;  			case 2: Value = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawCustomAttributeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Parent;  			case 1: return Type;  			case 2: return Value;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawCustomAttributeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Parent = value; break;  			case 1: Type = value; break;  			case 2: Value = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawDeclSecurityRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return (uint)(int)Action;  			case 1: return Parent;  			case 2: return PermissionSet;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawDeclSecurityRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Action = (short)value; break;  			case 1: Parent = value; break;  			case 2: PermissionSet = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawClassLayoutRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return PackingSize;  			case 1: return ClassSize;  			case 2: return Parent;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawClassLayoutRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: PackingSize = (ushort)value; break;  			case 1: ClassSize = value; break;  			case 2: Parent = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawEventRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return EventFlags;  			case 1: return Name;  			case 2: return EventType;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawEventRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: EventFlags = (ushort)value; break;  			case 1: Name = value; break;  			case 2: EventType = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawPropertyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return PropFlags;  			case 1: return Name;  			case 2: return Type;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawPropertyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: PropFlags = (ushort)value; break;  			case 1: Name = value; break;  			case 2: Type = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodSemanticsRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Semantic;  			case 1: return Method;  			case 2: return Association;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodSemanticsRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Semantic = (ushort)value; break;  			case 1: Method = value; break;  			case 2: Association = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawMethodImplRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Class;  			case 1: return MethodBody;  			case 2: return MethodDeclaration;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawMethodImplRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Class = value; break;  			case 1: MethodBody = value; break;  			case 2: MethodDeclaration = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawImplMapRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MappingFlags;  			case 1: return MemberForwarded;  			case 2: return ImportName;  			case 3: return ImportScope;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawImplMapRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MappingFlags;  			case 1: return MemberForwarded;  			case 2: return ImportName;  			case 3: return ImportScope;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawImplMapRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MappingFlags = (ushort)value; break;  			case 1: MemberForwarded = value; break;  			case 2: ImportName = value; break;  			case 3: ImportScope = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawImplMapRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MappingFlags = (ushort)value; break;  			case 1: MemberForwarded = value; break;  			case 2: ImportName = value; break;  			case 3: ImportScope = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return HashAlgId;  			case 1: return MajorVersion;  			case 2: return MinorVersion;  			case 3: return BuildNumber;  			case 4: return RevisionNumber;  			case 5: return Flags;  			case 6: return PublicKey;  			case 7: return Name;  			case 8: return Locale;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: HashAlgId = value; break;  			case 1: MajorVersion = (ushort)value; break;  			case 2: MinorVersion = (ushort)value; break;  			case 3: BuildNumber = (ushort)value; break;  			case 4: RevisionNumber = (ushort)value; break;  			case 5: Flags = value; break;  			case 6: PublicKey = value; break;  			case 7: Name = value; break;  			case 8: Locale = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return OSPlatformId;  			case 1: return OSMajorVersion;  			case 2: return OSMinorVersion;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: OSPlatformId = value; break;  			case 1: OSMajorVersion = value; break;  			case 2: OSMinorVersion = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return MajorVersion;  			case 1: return MinorVersion;  			case 2: return BuildNumber;  			case 3: return RevisionNumber;  			case 4: return Flags;  			case 5: return PublicKeyOrToken;  			case 6: return Name;  			case 7: return Locale;  			case 8: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: MajorVersion = (ushort)value; break;  			case 1: MinorVersion = (ushort)value; break;  			case 2: BuildNumber = (ushort)value; break;  			case 3: RevisionNumber = (ushort)value; break;  			case 4: Flags = value; break;  			case 5: PublicKeyOrToken = value; break;  			case 6: Name = value; break;  			case 7: Locale = value; break;  			case 8: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return OSPlatformId;  			case 1: return OSMajorVersion;  			case 2: return OSMinorVersion;  			case 3: return AssemblyRef;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return OSPlatformId;  			case 1: return OSMajorVersion;  			case 2: return OSMinorVersion;  			case 3: return AssemblyRef;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: OSPlatformId = value; break;  			case 1: OSMajorVersion = value; break;  			case 2: OSMinorVersion = value; break;  			case 3: AssemblyRef = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawAssemblyRefOSRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: OSPlatformId = value; break;  			case 1: OSMajorVersion = value; break;  			case 2: OSMinorVersion = value; break;  			case 3: AssemblyRef = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawFileRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return Name;  			case 2: return HashValue;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawFileRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: Name = value; break;  			case 2: HashValue = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return TypeDefId;  			case 2: return TypeName;  			case 3: return TypeNamespace;  			case 4: return Implementation;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return TypeDefId;  			case 2: return TypeName;  			case 3: return TypeNamespace;  			case 4: return Implementation;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Flags;  			case 1: return TypeDefId;  			case 2: return TypeName;  			case 3: return TypeNamespace;  			case 4: return Implementation;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: TypeDefId = value; break;  			case 2: TypeName = value; break;  			case 3: TypeNamespace = value; break;  			case 4: Implementation = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: TypeDefId = value; break;  			case 2: TypeName = value; break;  			case 3: TypeNamespace = value; break;  			case 4: Implementation = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawExportedTypeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Flags = value; break;  			case 1: TypeDefId = value; break;  			case 2: TypeName = value; break;  			case 3: TypeNamespace = value; break;  			case 4: Implementation = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawManifestResourceRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Offset;  			case 1: return Flags;  			case 2: return Name;  			case 3: return Implementation;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawManifestResourceRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Offset;  			case 1: return Flags;  			case 2: return Name;  			case 3: return Implementation;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawManifestResourceRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Offset = value; break;  			case 1: Flags = value; break;  			case 2: Name = value; break;  			case 3: Implementation = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawManifestResourceRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Offset = value; break;  			case 1: Flags = value; break;  			case 2: Name = value; break;  			case 3: Implementation = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Number;  			case 1: return Flags;  			case 2: return Owner;  			case 3: return Name;  			case 4: return Kind;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Number;  			case 1: return Flags;  			case 2: return Owner;  			case 3: return Name;  			case 4: return Kind;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Number;  			case 1: return Flags;  			case 2: return Owner;  			case 3: return Name;  			case 4: return Kind;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Number = (ushort)value; break;  			case 1: Flags = (ushort)value; break;  			case 2: Owner = value; break;  			case 3: Name = value; break;  			case 4: Kind = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Number = (ushort)value; break;  			case 1: Flags = (ushort)value; break;  			case 2: Owner = value; break;  			case 3: Name = value; break;  			case 4: Kind = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawGenericParamRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Number = (ushort)value; break;  			case 1: Flags = (ushort)value; break;  			case 2: Owner = value; break;  			case 3: Name = value; break;  			case 4: Kind = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawDocumentRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Name;  			case 1: return HashAlgorithm;  			case 2: return Hash;  			case 3: return Language;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawDocumentRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Name;  			case 1: return HashAlgorithm;  			case 2: return Hash;  			case 3: return Language;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawDocumentRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Name = value; break;  			case 1: HashAlgorithm = value; break;  			case 2: Hash = value; break;  			case 3: Language = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawDocumentRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Name = value; break;  			case 1: HashAlgorithm = value; break;  			case 2: Hash = value; break;  			case 3: Language = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Method;  			case 1: return ImportScope;  			case 2: return VariableList;  			case 3: return ConstantList;  			case 4: return StartOffset;  			case 5: return Length;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Method;  			case 1: return ImportScope;  			case 2: return VariableList;  			case 3: return ConstantList;  			case 4: return StartOffset;  			case 5: return Length;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Method;  			case 1: return ImportScope;  			case 2: return VariableList;  			case 3: return ConstantList;  			case 4: return StartOffset;  			case 5: return Length;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Method;  			case 1: return ImportScope;  			case 2: return VariableList;  			case 3: return ConstantList;  			case 4: return StartOffset;  			case 5: return Length;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Method = value; break;  			case 1: ImportScope = value; break;  			case 2: VariableList = value; break;  			case 3: ConstantList = value; break;  			case 4: StartOffset = value; break;  			case 5: Length = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Method = value; break;  			case 1: ImportScope = value; break;  			case 2: VariableList = value; break;  			case 3: ConstantList = value; break;  			case 4: StartOffset = value; break;  			case 5: Length = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Method = value; break;  			case 1: ImportScope = value; break;  			case 2: VariableList = value; break;  			case 3: ConstantList = value; break;  			case 4: StartOffset = value; break;  			case 5: Length = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawLocalScopeRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Method = value; break;  			case 1: ImportScope = value; break;  			case 2: VariableList = value; break;  			case 3: ConstantList = value; break;  			case 4: StartOffset = value; break;  			case 5: Length = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawLocalVariableRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Attributes;  			case 1: return Index;  			case 2: return Name;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawLocalVariableRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Attributes = (ushort)value; break;  			case 1: Index = (ushort)value; break;  			case 2: Name = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,RawCustomDebugInformationRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Read,The following statement contains a magic number: switch (index) {  			case 0: return Parent;  			case 1: return Kind;  			case 2: return Value;  			default: return 0;  			}
Magic Number,dnlib.DotNet.MD,RawCustomDebugInformationRow,C:\repos\0xd4d_dnlib\src\DotNet\MD\RawTableRows.cs,Write,The following statement contains a magic number: switch (index) {  			case 0: Parent = value; break;  			case 1: Kind = value; break;  			case 2: Value = value; break;  			default: break;  			}
Magic Number,dnlib.DotNet.MD,StreamHeader,C:\repos\0xd4d_dnlib\src\DotNet\MD\StreamHeader.cs,StreamHeader,The following statement contains a magic number: this.name = ReadString(reader' 32' verify);
Magic Number,dnlib.DotNet.MD,StreamHeader,C:\repos\0xd4d_dnlib\src\DotNet\MD\StreamHeader.cs,ReadString,The following statement contains a magic number: if (i != maxLen)  				reader.Position = origPos + ((i + 1 + 3) & ~3);
Magic Number,dnlib.DotNet.MD,StreamHeader,C:\repos\0xd4d_dnlib\src\DotNet\MD\StreamHeader.cs,ReadString,The following statement contains a magic number: if (i != maxLen)  				reader.Position = origPos + ((i + 1 + 3) & ~3);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,Initialize,The following statement contains a magic number: var sizes = new uint[64];
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 64; valid >>= 1' i++) {  				uint rows = (valid & 1) == 0 ? 0 : imageStream.ReadUInt32();  				if (i >= maxPresentTables)  					rows = 0;  				sizes[i] = rows;  				if (i < mdTables.Length)  					mdTables[i] = new MDTable((Table)i' rows' tableInfos[i]);  			}
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,Initialize,The following statement contains a magic number: if (typeSystemTableRows != null) {  				debugSizes = new uint[sizes.Length];  				for (int i = 0; i < 64; i++) {  					if (DotNetTableSizes.IsSystemTable((Table)i))  						debugSizes[i] = typeSystemTableRows[i];  					else  						debugSizes[i] = sizes[i];  				}  			}
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,IsSorted,The following statement contains a magic number: if ((uint)index >= 64)  				return false;
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: return new RawModuleRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: return new RawModuleRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: return new RawModuleRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: mvid = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: encId = columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadModuleRow,The following statement contains a magic number: return columns[4].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeRefRow,The following statement contains a magic number: return new RawTypeRefRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeRefRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: return new RawTypeDefRow(reader.ReadUInt32()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: return new RawTypeDefRow(reader.ReadUInt32()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: return new RawTypeDefRow(reader.ReadUInt32()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: return new RawTypeDefRow(reader.ReadUInt32()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: @namespace = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadTypeDefRow,The following statement contains a magic number: return columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadFieldRow,The following statement contains a magic number: return new RawFieldRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadFieldRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The following statement contains a magic number: return new RawMethodRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The following statement contains a magic number: return new RawMethodRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The following statement contains a magic number: return new RawMethodRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[3].Read(reader)'  				columns[4].Read(reader)'  				columns[5].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The following statement contains a magic number: name = columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodRow,The following statement contains a magic number: return columns[4].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadParamRow,The following statement contains a magic number: return new RawParamRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadParamRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMemberRefRow,The following statement contains a magic number: return new RawMemberRefRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMemberRefRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadConstantRow,The following statement contains a magic number: return new RawConstantRow(reader.ReadByte()'  				reader.ReadByte()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadConstantRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadCustomAttributeRow,The following statement contains a magic number: return new RawCustomAttributeRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDeclSecurityRow,The following statement contains a magic number: return new RawDeclSecurityRow(reader.ReadInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDeclSecurityRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadClassLayoutRow,The following statement contains a magic number: return new RawClassLayoutRow(reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadEventRow,The following statement contains a magic number: return new RawEventRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadEventRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadPropertyRow,The following statement contains a magic number: return new RawPropertyRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadPropertyRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodSemanticsRow,The following statement contains a magic number: return new RawMethodSemanticsRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodImplRow,The following statement contains a magic number: return new RawMethodImplRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadMethodImplRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadImplMapRow,The following statement contains a magic number: return new RawImplMapRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadImplMapRow,The following statement contains a magic number: return new RawImplMapRow(reader.ReadUInt16()'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadImplMapRow,The following statement contains a magic number: name = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadImplMapRow,The following statement contains a magic number: return columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: return new RawAssemblyRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: return new RawAssemblyRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: return new RawAssemblyRow(reader.ReadUInt32()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: publicKey = columns[6].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: name = columns[7].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRow,The following statement contains a magic number: return columns[8].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: return new RawAssemblyRefRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[5].Read(reader)'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: return new RawAssemblyRefRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[5].Read(reader)'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: return new RawAssemblyRefRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[5].Read(reader)'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: return new RawAssemblyRefRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt16()'  				reader.ReadUInt32()'  				columns[5].Read(reader)'  				columns[6].Read(reader)'  				columns[7].Read(reader)'  				columns[8].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: publicKeyOrToken = columns[5].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: name = columns[6].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: culture = columns[7].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefRow,The following statement contains a magic number: return columns[8].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadAssemblyRefOSRow,The following statement contains a magic number: return new RawAssemblyRefOSRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadFileRow,The following statement contains a magic number: return new RawFileRow(reader.ReadUInt32()'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadFileRow,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: return new RawExportedTypeRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: return new RawExportedTypeRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: return new RawExportedTypeRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: name = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: @namespace = columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadExportedTypeRow,The following statement contains a magic number: return columns[4].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadManifestResourceRow,The following statement contains a magic number: return new RawManifestResourceRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadManifestResourceRow,The following statement contains a magic number: return new RawManifestResourceRow(reader.ReadUInt32()'  				reader.ReadUInt32()'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadManifestResourceRow,The following statement contains a magic number: name = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadManifestResourceRow,The following statement contains a magic number: return columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: if (columns.Count == 4) {  				return new RawGenericParamRow(reader.ReadUInt16()'  					reader.ReadUInt16()'  					columns[2].Read(reader)'  					columns[3].Read(reader));  			}
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: if (columns.Count == 4) {  				return new RawGenericParamRow(reader.ReadUInt16()'  					reader.ReadUInt16()'  					columns[2].Read(reader)'  					columns[3].Read(reader));  			}
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: if (columns.Count == 4) {  				return new RawGenericParamRow(reader.ReadUInt16()'  					reader.ReadUInt16()'  					columns[2].Read(reader)'  					columns[3].Read(reader));  			}
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: return new RawGenericParamRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: return new RawGenericParamRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: return new RawGenericParamRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				columns[4].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: reader.Position += columns[2].Size;
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: name = columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: if (columns.Count == 4)  				return 0;
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadGenericParamRow,The following statement contains a magic number: return columns[4].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDocumentRow,The following statement contains a magic number: return new RawDocumentRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDocumentRow,The following statement contains a magic number: return new RawDocumentRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDocumentRow2,The following statement contains a magic number: hash = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadDocumentRow2,The following statement contains a magic number: return columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalScopeRow,The following statement contains a magic number: return new RawLocalScopeRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				reader.ReadUInt32()'  				reader.ReadUInt32());
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalScopeRow,The following statement contains a magic number: return new RawLocalScopeRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader)'  				columns[3].Read(reader)'  				reader.ReadUInt32()'  				reader.ReadUInt32());
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalScopeRow2,The following statement contains a magic number: variableList = columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalScopeRow2,The following statement contains a magic number: constantList = columns[3].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalVariableRow,The following statement contains a magic number: return new RawLocalVariableRow(reader.ReadUInt16()'  				reader.ReadUInt16()'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadLocalVariableRow2,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadCustomDebugInformationRow,The following statement contains a magic number: return new RawCustomDebugInformationRow(columns[0].Read(reader)'  				columns[1].Read(reader)'  				columns[2].Read(reader));
Magic Number,dnlib.DotNet.MD,TablesStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\TablesStream.cs,ReadCustomDebugInformationRow2,The following statement contains a magic number: return columns[2].Read(reader);
Magic Number,dnlib.DotNet.MD,USStream,C:\repos\0xd4d_dnlib\src\DotNet\MD\USStream.cs,Read,The following statement contains a magic number: try {  				return reader.ReadString((int)(length / 2));  			}  			catch (OutOfMemoryException) {  				throw;  			}  			catch {  				// It's possible that an exception is thrown when converting a char* to  				// a string. If so' return an empty string.  				return string.Empty;  			}
Magic Number,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetMethodProps,The following statement contains a magic number: if ((mb >> 24) != 0x06)  				throw new ArgumentException();
Magic Number,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetTypeDefProps,The following statement contains a magic number: if ((td >> 24) != 0x02)  				throw new ArgumentException();
Magic Number,dnlib.DotNet.Pdb.Dss,MDEmitter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\MDEmitter.cs,GetNestedClassProps,The following statement contains a magic number: if ((tdNestedClass >> 24) != 0x02)  				throw new ArgumentException();
Magic Number,dnlib.DotNet.Pdb.Dss,StreamIStream,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\StreamIStream.cs,Stat,The following statement contains a magic number: s.grfMode = 2;
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: if (stream.Position + 2 > end)  				return false;
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,NumericReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\NumericReader.cs,TryReadNumeric,The following statement contains a magic number: switch (numLeaf) {  			case NumericLeaf.LF_CHAR:  				if (stream.Position > end)  					return false;  				value = stream.ReadSByte();  				return true;    			case NumericLeaf.LF_SHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadInt16();  				return true;    			case NumericLeaf.LF_USHORT:  				if (stream.Position + 2 > end)  					return false;  				value = stream.ReadUInt16();  				return true;    			case NumericLeaf.LF_LONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadInt32();  				return true;    			case NumericLeaf.LF_ULONG:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadUInt32();  				return true;    			case NumericLeaf.LF_REAL32:  				if (stream.Position + 4 > end)  					return false;  				value = stream.ReadSingle();  				return true;    			case NumericLeaf.LF_REAL64:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadDouble();  				return true;    			case NumericLeaf.LF_QUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadInt64();  				return true;    			case NumericLeaf.LF_UQUADWORD:  				if (stream.Position + 8 > end)  					return false;  				value = stream.ReadUInt64();  				return true;    			case NumericLeaf.LF_VARSTRING:  				if (stream.Position + 2 > end)  					return false;  				int varStrLen = stream.ReadUInt16();  				if (stream.Position + varStrLen > end)  					return false;  				value = Encoding.UTF8.GetString(stream.ReadBytes(varStrLen));  				return true;    			case NumericLeaf.LF_VARIANT:  				if (stream.Position + 0x10 > end)  					return false;  				int v0 = stream.ReadInt32();  				int v1 = stream.ReadInt32();  				int v2 = stream.ReadInt32();  				int v3 = stream.ReadInt32();  				byte scale = (byte)(v0 >> 16);  				if (scale <= 28)  					value = new decimal(v2' v3' v1' v0 < 0' scale);  				else  					value = null;  				return true;    			default:  				return false;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,PdbAddress,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbAddress.cs,GetHashCode,The following statement contains a magic number: return (Section << 16) ^ (int)Offset;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,Read,The following statement contains a magic number: stream.Position += 4;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,Read,The following statement contains a magic number: stream.Position += 4;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,Read,The following statement contains a magic number: stream.Position += 8;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,Read,The following statement contains a magic number: stream.Position += 1 + 2;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: int pos = 8;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: pos += 4;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: if (pos + (long)count * 12 > data.Length)  				return emptySymbolAsyncStepInfos;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: for (int i = 0; i < res.Length; i++) {  				res[i] = new SymbolAsyncStepInfo(BitConverter.ToUInt32(data' pos)' BitConverter.ToUInt32(data' pos + 8)' BitConverter.ToUInt32(data' pos + 4));  				pos += 12;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: for (int i = 0; i < res.Length; i++) {  				res[i] = new SymbolAsyncStepInfo(BitConverter.ToUInt32(data' pos)' BitConverter.ToUInt32(data' pos + 8)' BitConverter.ToUInt32(data' pos + 4));  				pos += 12;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiFunction,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiFunction.cs,CreateSymbolAsyncStepInfos,The following statement contains a magic number: for (int i = 0; i < res.Length; i++) {  				res[i] = new SymbolAsyncStepInfo(BitConverter.ToUInt32(data' pos)' BitConverter.ToUInt32(data' pos + 8)' BitConverter.ToUInt32(data' pos + 4));  				pos += 12;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,Read,The following statement contains a magic number: stream.Position += 34;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,Read,The following statement contains a magic number: stream.Position += 16;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,Read,The following statement contains a magic number: stream.Position = (stream.Position + 3) & (~3);
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,Read,The following statement contains a magic number: stream.Position = (stream.Position + 3) & (~3);
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadFunctions,The following statement contains a magic number: if (stream.ReadUInt32() != 4)  				throw new PdbException("Invalid signature");
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < stream.Length) {  				var sig = (ModuleStreamType)stream.ReadUInt32();  				var size = stream.ReadUInt32();  				var begin = stream.Position;  				var end = (begin + size + 3) & ~3;    				if (sig == ModuleStreamType.FileInfo)  					ReadFiles(reader' docs' stream' end);    				stream.Position = end;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < stream.Length) {  				var sig = (ModuleStreamType)stream.ReadUInt32();  				var size = stream.ReadUInt32();  				var begin = stream.Position;  				var end = (begin + size + 3) & ~3;    				if (sig == ModuleStreamType.FileInfo)  					ReadFiles(reader' docs' stream' end);    				stream.Position = end;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadFiles,The following statement contains a magic number: while (stream.Position < end) {  				var id = stream.Position - begin;    				var nameId = stream.ReadUInt32();  				var len = stream.ReadByte();  				/*var type = */stream.ReadByte();  				var doc = reader.GetDocument(nameId);  				documents.Add(id' doc);    				stream.Position += len;  				stream.Position = (stream.Position + 3) & (~3);  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadFiles,The following statement contains a magic number: while (stream.Position < end) {  				var id = stream.Position - begin;    				var nameId = stream.ReadUInt32();  				var len = stream.ReadByte();  				/*var type = */stream.ReadByte();  				var doc = reader.GetDocument(nameId);  				documents.Add(id' doc);    				stream.Position += len;  				stream.Position = (stream.Position + 3) & (~3);  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: stream.Position += 4;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < end) {  				var document = documents[stream.ReadUInt32()];  				var count = stream.ReadUInt32();  				stream.Position += 4;    				const int LINE_ENTRY_SIZE = 8;  				const int COL_ENTRY_SIZE = 4;  				var lineTablePos = stream.Position;  				var colTablePos = stream.Position + count * LINE_ENTRY_SIZE;    				for (uint i = 0; i < count; i++) {  					stream.Position = lineTablePos + i * LINE_ENTRY_SIZE;    					var line = new SymbolSequencePoint {  						Document = document  					};  					line.Offset = stream.ReadInt32();  					var lineFlags = stream.ReadUInt32();    					line.Line = (int)(lineFlags & 0x00ffffff);  					line.EndLine = line.Line + (int)((lineFlags >> 24) & 0x7F);  					if ((flags & 1) != 0) {  						stream.Position = colTablePos + i * COL_ENTRY_SIZE;  						line.Column = stream.ReadUInt16();  						line.EndColumn = stream.ReadUInt16();  					}    					func.Lines.Add(line);  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < end) {  				var document = documents[stream.ReadUInt32()];  				var count = stream.ReadUInt32();  				stream.Position += 4;    				const int LINE_ENTRY_SIZE = 8;  				const int COL_ENTRY_SIZE = 4;  				var lineTablePos = stream.Position;  				var colTablePos = stream.Position + count * LINE_ENTRY_SIZE;    				for (uint i = 0; i < count; i++) {  					stream.Position = lineTablePos + i * LINE_ENTRY_SIZE;    					var line = new SymbolSequencePoint {  						Document = document  					};  					line.Offset = stream.ReadInt32();  					var lineFlags = stream.ReadUInt32();    					line.Line = (int)(lineFlags & 0x00ffffff);  					line.EndLine = line.Line + (int)((lineFlags >> 24) & 0x7F);  					if ((flags & 1) != 0) {  						stream.Position = colTablePos + i * COL_ENTRY_SIZE;  						line.Column = stream.ReadUInt16();  						line.EndColumn = stream.ReadUInt16();  					}    					func.Lines.Add(line);  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < end) {  				var document = documents[stream.ReadUInt32()];  				var count = stream.ReadUInt32();  				stream.Position += 4;    				const int LINE_ENTRY_SIZE = 8;  				const int COL_ENTRY_SIZE = 4;  				var lineTablePos = stream.Position;  				var colTablePos = stream.Position + count * LINE_ENTRY_SIZE;    				for (uint i = 0; i < count; i++) {  					stream.Position = lineTablePos + i * LINE_ENTRY_SIZE;    					var line = new SymbolSequencePoint {  						Document = document  					};  					line.Offset = stream.ReadInt32();  					var lineFlags = stream.ReadUInt32();    					line.Line = (int)(lineFlags & 0x00ffffff);  					line.EndLine = line.Line + (int)((lineFlags >> 24) & 0x7F);  					if ((flags & 1) != 0) {  						stream.Position = colTablePos + i * COL_ENTRY_SIZE;  						line.Column = stream.ReadUInt16();  						line.EndColumn = stream.ReadUInt16();  					}    					func.Lines.Add(line);  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiModule,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiModule.cs,ReadLines,The following statement contains a magic number: while (stream.Position < end) {  				var document = documents[stream.ReadUInt32()];  				var count = stream.ReadUInt32();  				stream.Position += 4;    				const int LINE_ENTRY_SIZE = 8;  				const int COL_ENTRY_SIZE = 4;  				var lineTablePos = stream.Position;  				var colTablePos = stream.Position + count * LINE_ENTRY_SIZE;    				for (uint i = 0; i < count; i++) {  					stream.Position = lineTablePos + i * LINE_ENTRY_SIZE;    					var line = new SymbolSequencePoint {  						Document = document  					};  					line.Offset = stream.ReadInt32();  					var lineFlags = stream.ReadUInt32();    					line.Line = (int)(lineFlags & 0x00ffffff);  					line.EndLine = line.Line + (int)((lineFlags >> 24) & 0x7F);  					if ((flags & 1) != 0) {  						stream.Position = colTablePos + i * COL_ENTRY_SIZE;  						line.Column = stream.ReadUInt16();  						line.EndColumn = stream.ReadUInt16();  					}    					func.Lines.Add(line);  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiScope,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiScope.cs,Read,The following statement contains a magic number: while (stream.Position < scopeEnd) {  				var size = stream.ReadUInt16();  				var begin = stream.Position;  				var end = begin + size;    				var type = (SymbolType)stream.ReadUInt16();  				DbiScope child = null;  				uint? childEnd = null;  				string name;  				switch (type) {  					case SymbolType.S_BLOCK32: {  						stream.Position += 4;  						childEnd = stream.ReadUInt32();  						var len = stream.ReadUInt32();  						var addr = PdbAddress.ReadAddress(stream);  						name = PdbReader.ReadCString(stream);  						child = new DbiScope(method' this' name' addr.Offset' len);  						break;  					}  					case SymbolType.S_UNAMESPACE:  						namespacesList.Add(new DbiNamespace(PdbReader.ReadCString(stream)));  						break;  					case SymbolType.S_MANSLOT: {  						var variable = new DbiVariable();  						variable.Read(stream);  						localsList.Add(variable);  						break;  					}  					case SymbolType.S_OEM:  						if (stream.Position + 20 > end)  							break;  						if (!ReadAndCompareBytes(stream' end' dotNetOemGuid)) {  							Debug.Fail("Unknown OEM record GUID' not .NET GUID");  							break;  						}  						stream.Position += 4;// typeIndex or 0  						name = ReadUnicodeString(stream' end);  						Debug.Assert(name != null);  						if (name == null)  							break;  						var data = stream.ReadBytes((int)(end - stream.Position));  						if (oemInfos == null)  							oemInfos = new List<OemInfo>(1);  						oemInfos.Add(new OemInfo(name' data));	  						break;  					case SymbolType.S_MANCONSTANT:  						uint signatureToken = stream.ReadUInt32();  						object value;  						if (!NumericReader.TryReadNumeric(stream' end' out value))  							break;  						name = PdbReader.ReadCString(stream);  						if (constants == null)  							constants = new List<ConstantInfo>();  						constants.Add(new ConstantInfo(name' signatureToken' value));  						break;  					case SymbolType.S_END:  						break;  					default:  						break;  				}    				stream.Position = end;  				if (child != null) {  					child.Read(counter' stream' childEnd.Value);  					childrenList.Add(child);  					child = null;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiScope,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiScope.cs,Read,The following statement contains a magic number: while (stream.Position < scopeEnd) {  				var size = stream.ReadUInt16();  				var begin = stream.Position;  				var end = begin + size;    				var type = (SymbolType)stream.ReadUInt16();  				DbiScope child = null;  				uint? childEnd = null;  				string name;  				switch (type) {  					case SymbolType.S_BLOCK32: {  						stream.Position += 4;  						childEnd = stream.ReadUInt32();  						var len = stream.ReadUInt32();  						var addr = PdbAddress.ReadAddress(stream);  						name = PdbReader.ReadCString(stream);  						child = new DbiScope(method' this' name' addr.Offset' len);  						break;  					}  					case SymbolType.S_UNAMESPACE:  						namespacesList.Add(new DbiNamespace(PdbReader.ReadCString(stream)));  						break;  					case SymbolType.S_MANSLOT: {  						var variable = new DbiVariable();  						variable.Read(stream);  						localsList.Add(variable);  						break;  					}  					case SymbolType.S_OEM:  						if (stream.Position + 20 > end)  							break;  						if (!ReadAndCompareBytes(stream' end' dotNetOemGuid)) {  							Debug.Fail("Unknown OEM record GUID' not .NET GUID");  							break;  						}  						stream.Position += 4;// typeIndex or 0  						name = ReadUnicodeString(stream' end);  						Debug.Assert(name != null);  						if (name == null)  							break;  						var data = stream.ReadBytes((int)(end - stream.Position));  						if (oemInfos == null)  							oemInfos = new List<OemInfo>(1);  						oemInfos.Add(new OemInfo(name' data));	  						break;  					case SymbolType.S_MANCONSTANT:  						uint signatureToken = stream.ReadUInt32();  						object value;  						if (!NumericReader.TryReadNumeric(stream' end' out value))  							break;  						name = PdbReader.ReadCString(stream);  						if (constants == null)  							constants = new List<ConstantInfo>();  						constants.Add(new ConstantInfo(name' signatureToken' value));  						break;  					case SymbolType.S_END:  						break;  					default:  						break;  				}    				stream.Position = end;  				if (child != null) {  					child.Read(counter' stream' childEnd.Value);  					childrenList.Add(child);  					child = null;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiScope,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiScope.cs,Read,The following statement contains a magic number: while (stream.Position < scopeEnd) {  				var size = stream.ReadUInt16();  				var begin = stream.Position;  				var end = begin + size;    				var type = (SymbolType)stream.ReadUInt16();  				DbiScope child = null;  				uint? childEnd = null;  				string name;  				switch (type) {  					case SymbolType.S_BLOCK32: {  						stream.Position += 4;  						childEnd = stream.ReadUInt32();  						var len = stream.ReadUInt32();  						var addr = PdbAddress.ReadAddress(stream);  						name = PdbReader.ReadCString(stream);  						child = new DbiScope(method' this' name' addr.Offset' len);  						break;  					}  					case SymbolType.S_UNAMESPACE:  						namespacesList.Add(new DbiNamespace(PdbReader.ReadCString(stream)));  						break;  					case SymbolType.S_MANSLOT: {  						var variable = new DbiVariable();  						variable.Read(stream);  						localsList.Add(variable);  						break;  					}  					case SymbolType.S_OEM:  						if (stream.Position + 20 > end)  							break;  						if (!ReadAndCompareBytes(stream' end' dotNetOemGuid)) {  							Debug.Fail("Unknown OEM record GUID' not .NET GUID");  							break;  						}  						stream.Position += 4;// typeIndex or 0  						name = ReadUnicodeString(stream' end);  						Debug.Assert(name != null);  						if (name == null)  							break;  						var data = stream.ReadBytes((int)(end - stream.Position));  						if (oemInfos == null)  							oemInfos = new List<OemInfo>(1);  						oemInfos.Add(new OemInfo(name' data));	  						break;  					case SymbolType.S_MANCONSTANT:  						uint signatureToken = stream.ReadUInt32();  						object value;  						if (!NumericReader.TryReadNumeric(stream' end' out value))  							break;  						name = PdbReader.ReadCString(stream);  						if (constants == null)  							constants = new List<ConstantInfo>();  						constants.Add(new ConstantInfo(name' signatureToken' value));  						break;  					case SymbolType.S_END:  						break;  					default:  						break;  				}    				stream.Position = end;  				if (child != null) {  					child.Read(counter' stream' childEnd.Value);  					childrenList.Add(child);  					child = null;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiScope,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiScope.cs,ReadUnicodeString,The following statement contains a magic number: for (;;) {  				if (stream.Position + 2 > end)  					return null;  				var c = (char)stream.ReadUInt16();  				if (c == 0)  					break;  				sb.Append(c);  			}
Magic Number,dnlib.DotNet.Pdb.Managed,DbiVariable,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiVariable.cs,Read,The following statement contains a magic number: stream.Position += 10;
Magic Number,dnlib.DotNet.Pdb.Managed,DbiVariable,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\DbiVariable.cs,GetAttributes,The following statement contains a magic number: const int fCompGenx = 4;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadInternal,The following statement contains a magic number: string sig = Encoding.ASCII.GetString(stream.ReadBytes(30));
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadInternal,The following statement contains a magic number: stream.Position += 2;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadInternal,The following statement contains a magic number: var numOfPtrPages = RoundUpDiv(numOfRootPages * 4' pageSize);
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadNames,The following statement contains a magic number: stream.Position = 8;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadNames,The following statement contains a magic number: using (var nameData = stream.Create(stream.FileOffset + stream.Position' nameSize)) {  				stream.Position += nameSize;    				/*uint entryCount = */stream.ReadUInt32();  				uint entryCapacity = stream.ReadUInt32();  				var entryOk = new BitArray(stream.ReadBytes(stream.ReadInt32() * 4));  				if (stream.ReadUInt32() != 0)  					throw new NotSupportedException();    				names = new Dictionary<string' uint>(StringComparer.OrdinalIgnoreCase);  				entryCapacity = Math.Min(entryCapacity' (uint)entryOk.Count);  				for (int i = 0; i < entryCapacity; i++) {  					if (!entryOk[i])  						continue;    					var pos = stream.ReadUInt32();  					var streamId = stream.ReadUInt32();  					nameData.Position = pos;  					var streamName = ReadCString(nameData);  					names[streamName] = streamId;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadStringTable,The following statement contains a magic number: stream.Position = 8;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadModules,The following statement contains a magic number: stream.Position = 20;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadModules,The following statement contains a magic number: stream.Position += 2;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadModules,The following statement contains a magic number: stream.Position += 8;
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadModules,The following statement contains a magic number: if (dbghdrSize != 0) {  				stream.Position += gpmodiSize;  				stream.Position += otherSize;  				stream.Position += 12;  				return stream.ReadUInt16();  			}
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadGlobalSymbols,The following statement contains a magic number: while (stream.Position < stream.Length) {  				var size = stream.ReadUInt16();  				var begin = stream.Position;  				var end = begin + size;    				if ((SymbolType)stream.ReadUInt16() == SymbolType.S_PUB32) {  					stream.Position += 4;  					var offset = stream.ReadUInt32();  					stream.Position += 2;  					var name = ReadCString(stream);    					if (name == "COM+_Entry_Point") {  						entryPt = offset;  						break;  					}  				}    				stream.Position = end;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ReadGlobalSymbols,The following statement contains a magic number: while (stream.Position < stream.Length) {  				var size = stream.ReadUInt16();  				var begin = stream.Position;  				var end = begin + size;    				if ((SymbolType)stream.ReadUInt16() == SymbolType.S_PUB32) {  					stream.Position += 4;  					var offset = stream.ReadUInt32();  					stream.Position += 2;  					var name = ReadCString(stream);    					if (name == "COM+_Entry_Point") {  						entryPt = offset;  						break;  					}  				}    				stream.Position = end;  			}
Magic Number,dnlib.DotNet.Pdb.Managed,PdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Managed\PdbReader.cs,ApplyRidMap,The following statement contains a magic number: var map = new uint[stream.Length / 4];
Magic Number,dnlib.DotNet.Pdb.Portable,DocumentNameReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\DocumentNameReader.cs,DocumentNameReader,The following statement contains a magic number: prevSepChars = new char[2];
Magic Number,dnlib.DotNet.Pdb.Portable,DocumentNameReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\DocumentNameReader.cs,DocumentNameReader,The following statement contains a magic number: prevSepCharBytes = new byte[3];
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToPdbImportDefinitionKind,The following statement contains a magic number: switch (value) {  			case 1:		return PdbImportDefinitionKind.ImportNamespace;  			case 2:		return PdbImportDefinitionKind.ImportAssemblyNamespace;  			case 3:		return PdbImportDefinitionKind.ImportType;  			case 4:		return PdbImportDefinitionKind.ImportXmlNamespace;  			case 5:		return PdbImportDefinitionKind.ImportAssemblyReferenceAlias;  			case 6:		return PdbImportDefinitionKind.AliasAssemblyReference;  			case 7:		return PdbImportDefinitionKind.AliasNamespace;  			case 8:		return PdbImportDefinitionKind.AliasAssemblyNamespace;  			case 9:		return PdbImportDefinitionKind.AliasType;  			default:  				Debug.Fail("Unknown import definition kind: 0x" + value.ToString("X"));  				return UNKNOWN_IMPORT_KIND;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,ImportDefinitionKindUtils,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\ImportDefinitionKindUtils.cs,ToImportDefinitionKind,The following statement contains a magic number: switch (kind) {  			case PdbImportDefinitionKind.ImportNamespace:				rawKind = 1; return true;  			case PdbImportDefinitionKind.ImportAssemblyNamespace:		rawKind = 2; return true;  			case PdbImportDefinitionKind.ImportType:					rawKind = 3; return true;  			case PdbImportDefinitionKind.ImportXmlNamespace:			rawKind = 4; return true;  			case PdbImportDefinitionKind.ImportAssemblyReferenceAlias:	rawKind = 5; return true;  			case PdbImportDefinitionKind.AliasAssemblyReference:		rawKind = 6; return true;  			case PdbImportDefinitionKind.AliasNamespace:				rawKind = 7; return true;  			case PdbImportDefinitionKind.AliasAssemblyNamespace:		rawKind = 8; return true;  			case PdbImportDefinitionKind.AliasType:						rawKind = 9; return true;  			default:													rawKind = uint.MaxValue; return false;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobReader.cs,ReadCore,The following statement contains a magic number: switch (et) {  			case ElementType.Boolean:  				type = module.CorLibTypes.Boolean;  				value = reader.ReadBoolean();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.Char:  				type = module.CorLibTypes.Char;  				value = (char)reader.ReadUInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I1:  				type = module.CorLibTypes.SByte;  				value = reader.ReadSByte();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U1:  				type = module.CorLibTypes.Byte;  				value = reader.ReadByte();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I2:  				type = module.CorLibTypes.Int16;  				value = reader.ReadInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U2:  				type = module.CorLibTypes.UInt16;  				value = reader.ReadUInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I4:  				type = module.CorLibTypes.Int32;  				value = reader.ReadInt32();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U4:  				type = module.CorLibTypes.UInt32;  				value = reader.ReadUInt32();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I8:  				type = module.CorLibTypes.Int64;  				value = reader.ReadInt64();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U8:  				type = module.CorLibTypes.UInt64;  				value = reader.ReadUInt64();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.R4:  				type = module.CorLibTypes.Single;  				value = reader.ReadSingle();  				res = true;  				break;    			case ElementType.R8:  				type = module.CorLibTypes.Double;  				value = reader.ReadDouble();  				res = true;  				break;    			case ElementType.String:  				type = module.CorLibTypes.String;  				value = ReadString();  				res = true;  				break;    			case ElementType.Ptr:  				res = Read(out type' out value);  				if (res)  					type = new PtrSig(type);  				break;    			case ElementType.ByRef:  				res = Read(out type' out value);  				if (res)  					type = new ByRefSig(type);  				break;    			case ElementType.Object:  				type = module.CorLibTypes.Object;  				value = null;  				res = true;  				break;    			case ElementType.ValueType:  				tdr = ReadTypeDefOrRef();  				type = tdr.ToTypeSig();  				value = null;  				if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  					if (name == stringDecimal) {  						if (reader.Length - reader.Position != 13)  							goto default;  						try {  							byte b = reader.ReadByte();  							value = new Decimal(reader.ReadInt32()' reader.ReadInt32()' reader.ReadInt32()' (b & 0x80) != 0' (byte)(b & 0x7F));  						}  						catch {  							goto default;  						}  					}  					else if (name == stringDateTime) {  						if (reader.Length - reader.Position != 8)  							goto default;  						try {  							value = new DateTime(reader.ReadInt64());  						}  						catch {  							goto default;  						}  					}  				}  				if (value == null && reader.Position != reader.Length)  					value = reader.ReadRemainingBytes();  				res = true;  				break;    			case ElementType.Class:  				type = new ClassSig(ReadTypeDefOrRef());  				value = reader.Position == reader.Length ? null : reader.ReadRemainingBytes();  				res = true;  				break;    			case ElementType.CModReqd:  				tdr = ReadTypeDefOrRef();  				res = Read(out type' out value);  				if (res)  					type = new CModReqdSig(tdr' type);  				break;    			case ElementType.CModOpt:  				tdr = ReadTypeDefOrRef();  				res = Read(out type' out value);  				if (res)  					type = new CModOptSig(tdr' type);  				break;    			case ElementType.Var:  			case ElementType.Array:  			case ElementType.GenericInst:  			case ElementType.TypedByRef:  			case ElementType.I:  			case ElementType.U:  			case ElementType.FnPtr:  			case ElementType.SZArray:  			case ElementType.MVar:  			case ElementType.End:  			case ElementType.Void:  			case ElementType.ValueArray:  			case ElementType.R:  			case ElementType.Internal:  			case ElementType.Module:  			case ElementType.Sentinel:  			case ElementType.Pinned:  			default:  				Debug.Fail("Unsupported element type in LocalConstant sig blob: " + et.ToString());  				res = false;  				type = null;  				value = null;  				break;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobReader.cs,ReadCore,The following statement contains a magic number: switch (et) {  			case ElementType.Boolean:  				type = module.CorLibTypes.Boolean;  				value = reader.ReadBoolean();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.Char:  				type = module.CorLibTypes.Char;  				value = (char)reader.ReadUInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I1:  				type = module.CorLibTypes.SByte;  				value = reader.ReadSByte();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U1:  				type = module.CorLibTypes.Byte;  				value = reader.ReadByte();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I2:  				type = module.CorLibTypes.Int16;  				value = reader.ReadInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U2:  				type = module.CorLibTypes.UInt16;  				value = reader.ReadUInt16();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I4:  				type = module.CorLibTypes.Int32;  				value = reader.ReadInt32();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U4:  				type = module.CorLibTypes.UInt32;  				value = reader.ReadUInt32();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.I8:  				type = module.CorLibTypes.Int64;  				value = reader.ReadInt64();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.U8:  				type = module.CorLibTypes.UInt64;  				value = reader.ReadUInt64();  				if (reader.Position < reader.Length)  					type = ReadTypeDefOrRefSig();  				res = true;  				break;    			case ElementType.R4:  				type = module.CorLibTypes.Single;  				value = reader.ReadSingle();  				res = true;  				break;    			case ElementType.R8:  				type = module.CorLibTypes.Double;  				value = reader.ReadDouble();  				res = true;  				break;    			case ElementType.String:  				type = module.CorLibTypes.String;  				value = ReadString();  				res = true;  				break;    			case ElementType.Ptr:  				res = Read(out type' out value);  				if (res)  					type = new PtrSig(type);  				break;    			case ElementType.ByRef:  				res = Read(out type' out value);  				if (res)  					type = new ByRefSig(type);  				break;    			case ElementType.Object:  				type = module.CorLibTypes.Object;  				value = null;  				res = true;  				break;    			case ElementType.ValueType:  				tdr = ReadTypeDefOrRef();  				type = tdr.ToTypeSig();  				value = null;  				if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  					if (name == stringDecimal) {  						if (reader.Length - reader.Position != 13)  							goto default;  						try {  							byte b = reader.ReadByte();  							value = new Decimal(reader.ReadInt32()' reader.ReadInt32()' reader.ReadInt32()' (b & 0x80) != 0' (byte)(b & 0x7F));  						}  						catch {  							goto default;  						}  					}  					else if (name == stringDateTime) {  						if (reader.Length - reader.Position != 8)  							goto default;  						try {  							value = new DateTime(reader.ReadInt64());  						}  						catch {  							goto default;  						}  					}  				}  				if (value == null && reader.Position != reader.Length)  					value = reader.ReadRemainingBytes();  				res = true;  				break;    			case ElementType.Class:  				type = new ClassSig(ReadTypeDefOrRef());  				value = reader.Position == reader.Length ? null : reader.ReadRemainingBytes();  				res = true;  				break;    			case ElementType.CModReqd:  				tdr = ReadTypeDefOrRef();  				res = Read(out type' out value);  				if (res)  					type = new CModReqdSig(tdr' type);  				break;    			case ElementType.CModOpt:  				tdr = ReadTypeDefOrRef();  				res = Read(out type' out value);  				if (res)  					type = new CModOptSig(tdr' type);  				break;    			case ElementType.Var:  			case ElementType.Array:  			case ElementType.GenericInst:  			case ElementType.TypedByRef:  			case ElementType.I:  			case ElementType.U:  			case ElementType.FnPtr:  			case ElementType.SZArray:  			case ElementType.MVar:  			case ElementType.End:  			case ElementType.Void:  			case ElementType.ValueArray:  			case ElementType.R:  			case ElementType.Internal:  			case ElementType.Module:  			case ElementType.Sentinel:  			case ElementType.Pinned:  			default:  				Debug.Fail("Unsupported element type in LocalConstant sig blob: " + et.ToString());  				res = false;  				type = null;  				value = null;  				break;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,LocalConstantSigBlobWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\LocalConstantSigBlobWriter.cs,Write,The following statement contains a magic number: for (; ; type = type.Next) {  				if (type == null)  					return;    				var et = type.ElementType;  				writer.Write((byte)et);  				switch (et) {  				case ElementType.Boolean:  				case ElementType.Char:  				case ElementType.I1:  				case ElementType.U1:  				case ElementType.I2:  				case ElementType.U2:  				case ElementType.I4:  				case ElementType.U4:  				case ElementType.I8:  				case ElementType.U8:  					WritePrimitiveValue(writer' et' value);  					return;    				case ElementType.R4:  					if (value is float)  						writer.Write((float)value);  					else {  						helper.Error("Expected a Single constant");  						writer.Write((float)0);  					}  					return;    				case ElementType.R8:  					if (value is double)  						writer.Write((double)value);  					else {  						helper.Error("Expected a Double constant");  						writer.Write((double)0);  					}  					return;    				case ElementType.String:  					if (value == null)  						writer.Write((byte)0xFF);  					else if (value is string)  						writer.Write(Encoding.Unicode.GetBytes((string)value));  					else  						helper.Error("Expected a String constant");  					return;    				case ElementType.Ptr:  				case ElementType.ByRef:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.Object:  					return;    				case ElementType.ValueType:  					var tdr = ((ValueTypeSig)type).TypeDefOrRef;  					var td = tdr.ResolveTypeDef();  					if (td == null)  						helper.Error(string.Format("Couldn't resolve type 0x{0:X8}"' tdr == null ? 0 : tdr.MDToken.Raw));  					else if (td.IsEnum) {  						var underlyingType = td.GetEnumUnderlyingType().RemovePinnedAndModifiers();  						switch (underlyingType.GetElementType()) {  						case ElementType.Boolean:  						case ElementType.Char:  						case ElementType.I1:  						case ElementType.U1:  						case ElementType.I2:  						case ElementType.U2:  						case ElementType.I4:  						case ElementType.U4:  						case ElementType.I8:  						case ElementType.U8:  							writer.BaseStream.Position--;  							writer.Write((byte)underlyingType.GetElementType());  							WritePrimitiveValue(writer' underlyingType.GetElementType()' value);  							WriteTypeDefOrRef(writer' tdr);  							return;  						default:  							helper.Error("Invalid enum underlying type");  							return;  						}  					}  					else {  						WriteTypeDefOrRef(writer' tdr);  						UTF8String ns' name;  						bool valueWritten = false;  						if (GetName(tdr' out ns' out name) && ns == stringSystem && tdr.DefinitionAssembly.IsCorLib()) {  							if (name == stringDecimal) {  								if (value is decimal) {  									var bits = decimal.GetBits((decimal)value);  									writer.Write((byte)((((uint)bits[3] >> 31) << 7) | (((uint)bits[3] >> 16) & 0x7F)));  									writer.Write(bits[0]);  									writer.Write(bits[1]);  									writer.Write(bits[2]);  								}  								else {  									helper.Error("Expected a Decimal constant");  									writer.Write(new byte[13]);  								}  								valueWritten = true;  							}  							else if (name == stringDateTime) {  								if (value is DateTime)  									writer.Write(((DateTime)value).Ticks);  								else {  									helper.Error("Expected a DateTime constant");  									writer.Write(0L);  								}  								valueWritten = true;  							}  						}  						if (!valueWritten) {  							if (value is byte[])  								writer.Write((byte[])value);  							else if (value != null) {  								helper.Error("Unsupported constant: " + value.GetType().FullName);  								return;  							}  						}  					}  					return;    				case ElementType.Class:  					WriteTypeDefOrRef(writer' ((ClassSig)type).TypeDefOrRef);  					if (value is byte[])  						writer.Write((byte[])value);  					else if (value != null)  						helper.Error("Expected a null constant");  					return;    				case ElementType.CModReqd:  				case ElementType.CModOpt:  					WriteTypeDefOrRef(writer' ((ModifierSig)type).Modifier);  					break;    				case ElementType.Var:  				case ElementType.Array:  				case ElementType.GenericInst:  				case ElementType.TypedByRef:  				case ElementType.I:  				case ElementType.U:  				case ElementType.FnPtr:  				case ElementType.SZArray:  				case ElementType.MVar:  					WriteTypeDefOrRef(writer' new TypeSpecUser(type));  					return;    				case ElementType.End:  				case ElementType.Void:  				case ElementType.ValueArray:  				case ElementType.R:  				case ElementType.Internal:  				case ElementType.Module:  				case ElementType.Sentinel:  				case ElementType.Pinned:  				default:  					helper.Error("Unsupported element type in LocalConstant sig blob: " + et.ToString());  					return;  				}  			}
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,ReadDynamicLocalVariables,The following statement contains a magic number: var flags = new bool[(int)reader.Length * 8];
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,ReadStateMachineHoistedLocalScopes,The following statement contains a magic number: int count = (int)(reader.Length / 8);
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,GetInstruction,The following statement contains a magic number: while (lo <= hi && hi != -1) {  				int i = (lo + hi) / 2;  				var instr = instructions[i];  				if (instr.Offset == offset)  					return instr;  				if (offset < instr.Offset)  					hi = i - 1;  				else  					lo = i + 1;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoReader.cs,GetInstruction,The following statement contains a magic number: while (lo <= hi && hi != -1) {  				int i = (lo + hi) / 2;  				var instr = instructions[i];  				if (instr.Offset == offset)  					return instr;  				if (offset < instr.Offset)  					hi = i - 1;  				else  					lo = i + 1;  			}
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbCustomDebugInfoWriter.cs,WriteDynamicLocalVariables,The following statement contains a magic number: for (int i = 0; i < flags.Length; i += 8)  				writer.Write(ToByte(flags' i));
Magic Number,dnlib.DotNet.Pdb.Portable,PortablePdbReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Portable\PortablePdbReader.cs,ReadPdbImportScope,The following statement contains a magic number: const int MAX = 1000;
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: if (reader.Length < 4)  				return;
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: reader.Position += 2;
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,Read,The following statement contains a magic number: while (reader.Position + 8 <= reader.Length) {  				int recVersion = reader.ReadByte();  				Debug.Assert(recVersion == CustomDebugInfoConstants.RecordVersion);  				var recKind = (PdbCustomDebugInfoKind)reader.ReadByte();  				reader.Position++;  				int alignmentSize = reader.ReadByte();  				int recSize = reader.ReadInt32();  				if (recSize < 8 || reader.Position - 8 + (uint)recSize > reader.Length)  					return;  				if (recKind <= PdbCustomDebugInfoKind.DynamicLocals)  					alignmentSize = 0;  				if (alignmentSize > 3)  					return;  				var nextRecPos = reader.Position - 8 + recSize;    				if (recVersion == CustomDebugInfoConstants.RecordVersion) {  					var recPosEnd = reader.Position - 8 + recSize - alignmentSize;  					var cdi = ReadRecord(recKind' recPosEnd);  					Debug.Assert(cdi != null);  					Debug.Assert(reader.Position <= recPosEnd);  					if (reader.Position > recPosEnd)  						return;  					if (cdi != null) {  						Debug.Assert(cdi.Kind == recKind);  						result.Add(cdi);  					}  				}    				reader.Position = nextRecPos;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,ReadRecord,The following statement contains a magic number: switch (recKind) {  			case PdbCustomDebugInfoKind.UsingGroups:  				count = reader.ReadUInt16();  				if (count < 0)  					return null;  				var usingCountRec = new PdbUsingGroupsCustomDebugInfo(count);  				for (int i = 0; i < count; i++)  					usingCountRec.UsingCounts.Add(reader.ReadUInt16());  				return usingCountRec;    			case PdbCustomDebugInfoKind.ForwardMethodInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardMethodInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.ForwardModuleInfo:  				method = module.ResolveToken(reader.ReadUInt32()' gpContext) as IMethodDefOrRef;  				if (method == null)  					return null;  				return new PdbForwardModuleInfoCustomDebugInfo(method);    			case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var smScope = new PdbStateMachineHoistedLocalScopesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					uint startOffset = reader.ReadUInt32();  					uint endOffset = reader.ReadUInt32();  					if (startOffset > endOffset)  						return null;  					// Try to detect synthesized locals' whose start==end==0. The problem is that endOffset  					// read from the PDB is inclusive (add 1 to get 'end')' so a synthesized local and a  					// local at [0' 1) will be encoded the same {0' 0}.  					if (endOffset == 0)  						smScope.Scopes.Add(new StateMachineHoistedLocalScope());  					else {  						var start = GetInstruction(startOffset);  						var end = GetInstruction(endOffset + 1);  						if (start == null)  							return null;  						smScope.Scopes.Add(new StateMachineHoistedLocalScope(start' end));  					}  				}  				return smScope;    			case PdbCustomDebugInfoKind.StateMachineTypeName:  				var name = ReadUnicodeZ(recPosEnd' needZeroChar: true);  				if (name == null)  					return null;  				var type = GetNestedType(name);  				if (type == null)  					return null;  				return new PdbStateMachineTypeNameCustomDebugInfo(type);    			case PdbCustomDebugInfoKind.DynamicLocals:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				const int dynLocalRecSize = 64 + 4 + 4 + 2 * 64;  				if (reader.Position + (long)(uint)count * dynLocalRecSize > recPosEnd)  					return null;  				var dynLocListRec = new PdbDynamicLocalsCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					reader.Position += 64;  					int flagsCount = reader.ReadInt32();  					if ((uint)flagsCount > 64)  						return null;  					var dynLocRec = new PdbDynamicLocal(flagsCount);  					var afterPos = reader.Position;    					reader.Position -= 64 + 4;  					for (int j = 0; j < flagsCount; j++)  						dynLocRec.Flags.Add(reader.ReadByte());  					reader.Position = afterPos;    					localIndex = reader.ReadInt32();  					// 'const' locals have index -1 but they're encoded as 0 by Roslyn  					if (localIndex != 0 && (uint)localIndex >= (uint)bodyOpt.Variables.Count)  						return null;    					var nameEndPos = reader.Position + 2 * 64;  					name = ReadUnicodeZ(nameEndPos' needZeroChar: false);  					reader.Position = nameEndPos;    					local = localIndex < bodyOpt.Variables.Count ? bodyOpt.Variables[localIndex] : null;  					// Roslyn writes 0 to localIndex if it's a 'const' local' try to undo that now  					if (localIndex == 0 && local != null && local.Name != name)  						local = null;  					if (local != null && local.Name == name)  						name = null;  					dynLocRec.Name = name;  					dynLocRec.Local = local;  					dynLocListRec.Locals.Add(dynLocRec);  				}  				return dynLocListRec;    			case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLocalSlotMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbEditAndContinueLambdaMapCustomDebugInfo(data);    			case PdbCustomDebugInfoKind.TupleElementNames:  				if (bodyOpt == null)  					return null;  				count = reader.ReadInt32();  				if (count < 0)  					return null;  				var tupleListRec = new PdbTupleElementNamesCustomDebugInfo(count);  				for (int i = 0; i < count; i++) {  					int nameCount = reader.ReadInt32();  					if ((uint)nameCount >= 10000)  						return null;  					var tupleInfo = new PdbTupleElementNames(nameCount);    					for (int j = 0; j < nameCount; j++) {  						var s = ReadUTF8Z(recPosEnd);  						if (s == null)  							return null;  						tupleInfo.TupleElementNames.Add(s);  					}    					localIndex = reader.ReadInt32();  					uint scopeStart = reader.ReadUInt32();  					uint scopeEnd = reader.ReadUInt32();  					name = ReadUTF8Z(recPosEnd);  					if (name == null)  						return null;  					Debug.Assert(localIndex >= -1);  					// -1 = 'const' local. Only 'const' locals have a scope  					Debug.Assert((localIndex == -1) ^ (scopeStart == 0 && scopeEnd == 0));    					if (localIndex == -1) {  						local = null;  						tupleInfo.ScopeStart = GetInstruction(scopeStart);  						tupleInfo.ScopeEnd = GetInstruction(scopeEnd);  						if (tupleInfo.ScopeStart == null)  							return null;  					}  					else {  						if ((uint)localIndex >= (uint)bodyOpt.Variables.Count)  							return null;  						local = bodyOpt.Variables[localIndex];  					}    					if (local != null && local.Name == name)  						name = null;  					tupleInfo.Local = local;  					tupleInfo.Name = name;    					tupleListRec.Names.Add(tupleInfo);  				}  				return tupleListRec;    			default:  				Debug.Fail("Unknown custom debug info kind: 0x" + ((int)recKind).ToString("X"));  				data = reader.ReadBytes((int)(recPosEnd - reader.Position));  				return new PdbUnknownCustomDebugInfo(recKind' data);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,GetNestedType,The following statement contains a magic number: foreach (var type in typeOpt.NestedTypes.GetSafeEnumerable()) {  				if (UTF8String.IsNullOrEmpty(type.Namespace)) {  					if (type.Name == name)  						return type;  					var typeName = type.Name.String;  					if (typeName.StartsWith(name) && typeName.Length >= name.Length + 2) {  						int i = name.Length;  						if (typeName[i] == '`') {  							Debug.Assert(i + 1 < typeName.Length);  							bool ok = true;  							i++;  							while (i < typeName.Length) {  								if (!char.IsDigit(typeName[i])) {  									ok = false;  									break;  								}  								i++;  							}  							if (ok)  								return type;  						}  					}  				}  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoReader,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoReader.cs,GetInstruction,The following statement contains a magic number: while (lo <= hi && hi != -1) {  				int i = (lo + hi) / 2;  				var instr = instructions[i];  				if (instr.Offset == offset)  					return instr;  				if (offset < instr.Offset)  					hi = i - 1;  				else  					lo = i + 1;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PdbCustomDebugInfoWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PdbCustomDebugInfoWriter.cs,Write,The following statement contains a magic number: for (int i = 0; i < customDebugInfos.Count; i++) {  				var info = customDebugInfos[i];  				if (info == null) {  					Error("Custom debug info is null");  					return null;  				}  				if ((uint)info.Kind > byte.MaxValue) {  					Error("Invalid custom debug info kind");  					return null;  				}    				var recordPos = writer.BaseStream.Position;  				writer.Write((byte)CustomDebugInfoConstants.RecordVersion);  				writer.Write((byte)info.Kind);  				writer.Write((ushort)0);  				writer.Write((uint)0);    				int count' j' k;  				uint token;  				switch (info.Kind) {  				case PdbCustomDebugInfoKind.UsingGroups:  					var usingRec = info as PdbUsingGroupsCustomDebugInfo;  					if (usingRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = usingRec.UsingCounts.Count;  					if (count > ushort.MaxValue) {  						Error("UsingCounts contains more than 0xFFFF elements");  						return null;  					}  					writer.Write((ushort)count);  					for (j = 0; j < count; j++)  						writer.Write(usingRec.UsingCounts[j]);  					break;    				case PdbCustomDebugInfoKind.ForwardMethodInfo:  					var fwdMethodRec = info as PdbForwardMethodInfoCustomDebugInfo;  					if (fwdMethodRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdMethodRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.ForwardModuleInfo:  					var fwdModRec = info as PdbForwardModuleInfoCustomDebugInfo;  					if (fwdModRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					token = GetMethodToken(fwdModRec.Method);  					if (token == 0)  						return null;  					writer.Write(token);  					break;    				case PdbCustomDebugInfoKind.StateMachineHoistedLocalScopes:  					var smLocalScopesRec = info as PdbStateMachineHoistedLocalScopesCustomDebugInfo;  					if (smLocalScopesRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = smLocalScopesRec.Scopes.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var scope = smLocalScopesRec.Scopes[j];  						if (scope.IsSynthesizedLocal) {  							writer.Write(0);  							writer.Write(0);  						}  						else {  							writer.Write(GetInstructionOffset(scope.Start' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(scope.End' nullIsEndOfMethod: true) - 1);  						}  					}  					break;    				case PdbCustomDebugInfoKind.StateMachineTypeName:  					var smTypeRec = info as PdbStateMachineTypeNameCustomDebugInfo;  					if (smTypeRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					var type = smTypeRec.Type;  					if (type == null) {  						Error("State machine type is null");  						return null;  					}  					WriteUnicodeZ(MetadataNameToRoslynName(type.Name));  					break;    				case PdbCustomDebugInfoKind.DynamicLocals:  					var dynLocListRec = info as PdbDynamicLocalsCustomDebugInfo;  					if (dynLocListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = dynLocListRec.Locals.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var dynLoc = dynLocListRec.Locals[j];  						if (dynLoc == null) {  							Error("Dynamic local is null");  							return null;  						}  						if (dynLoc.Flags.Count > 64) {  							Error("Dynamic local flags is longer than 64 bytes");  							return null;  						}  						var name = dynLoc.Name;  						if (name == null)  							name = string.Empty;  						if (name.Length > 64) {  							Error("Dynamic local name is longer than 64 chars");  							return null;  						}  						if (name.IndexOf('\0') >= 0) {  							Error("Dynamic local name contains a NUL char");  							return null;  						}    						for (k = 0; k < dynLoc.Flags.Count; k++)  							writer.Write(dynLoc.Flags[k]);  						while (k++ < 64)  							writer.Write((byte)0);  						writer.Write(dynLoc.Flags.Count);    						if (dynLoc.Local == null)  							writer.Write(0);  						else  							writer.Write(dynLoc.Local.Index);    						for (k = 0; k < name.Length; k++)  							writer.Write((ushort)name[k]);  						while (k++ < 64)  							writer.Write((ushort)0);  					}  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLocalSlotMap:  					var encLocalMapRec = info as PdbEditAndContinueLocalSlotMapCustomDebugInfo;  					if (encLocalMapRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLocalMapRec.Data);  					break;    				case PdbCustomDebugInfoKind.EditAndContinueLambdaMap:  					var encLambdaRec = info as PdbEditAndContinueLambdaMapCustomDebugInfo;  					if (encLambdaRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					writer.Write(encLambdaRec.Data);  					break;    				case PdbCustomDebugInfoKind.TupleElementNames:  					var tupleListRec = info as PdbTupleElementNamesCustomDebugInfo;  					if (tupleListRec == null) {  						Error("Unsupported custom debug info type {0}"' info.GetType());  						return null;  					}  					count = tupleListRec.Names.Count;  					writer.Write(count);  					for (j = 0; j < count; j++) {  						var tupleInfo = tupleListRec.Names[j];  						if (tupleInfo == null) {  							Error("Tuple name info is null");  							return null;  						}  						writer.Write(tupleInfo.TupleElementNames.Count);  						for (k = 0; k < tupleInfo.TupleElementNames.Count; k++)  							WriteUTF8Z(tupleInfo.TupleElementNames[k]);    						if (tupleInfo.Local == null) {  							writer.Write(-1);  							writer.Write(GetInstructionOffset(tupleInfo.ScopeStart' nullIsEndOfMethod: false));  							writer.Write(GetInstructionOffset(tupleInfo.ScopeEnd' nullIsEndOfMethod: true));  						}  						else {  							writer.Write(tupleInfo.Local.Index);  							writer.Write(0L);  						}  						WriteUTF8Z(tupleInfo.Name);  					}  					break;    				default:  					var unkRec = info as PdbUnknownCustomDebugInfo;  					if (unkRec == null) {  						Error("Unsupported custom debug info class {0}"' info.GetType());  						return null;  					}  					writer.Write(unkRec.Data);  					break;  				}    				var pos = writer.BaseStream.Position;  				var recLen = (pos - recordPos);  				var alignedLen = (recLen + 3) & ~3;  				if (alignedLen > uint.MaxValue) {  					Error("Custom debug info record is too big");  					return null;  				}  				writer.BaseStream.Position = recordPos + 3;  				if (info.Kind <= PdbCustomDebugInfoKind.DynamicLocals)  					writer.Write((byte)0);  				else  					writer.Write((byte)(alignedLen - recLen));  				writer.Write((uint)alignedLen);    				writer.BaseStream.Position = pos;  				while (writer.BaseStream.Position < recordPos + alignedLen)  					writer.Write((byte)0);  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,PseudoCustomDebugInfoFactory,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\PseudoCustomDebugInfoFactory.cs,GetInstruction,The following statement contains a magic number: while (lo <= hi && hi != -1) {  				int i = (lo + hi) / 2;  				var instr = instructions[i];  				if (instr.Offset == offset)  					return instr;  				if (offset < instr.Offset)  					hi = i - 1;  				else  					lo = i + 1;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,WindowsPdbWriter,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,WriteScope,The following statement contains a magic number: if (recursionCounter >= 1000) {  				Error("Too many PdbScopes");  				return;  			}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,SequencePointHelper,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,The following statement contains a magic number: while (true) {  					PdbDocument currPdbDoc = null;  					bool otherDocsAvailable = false;  					int index = 0' instrOffset = 0;  					Instruction instr = null;  					for (int i = 0; i < instrs.Count; i++' instrOffset += instr.GetSize()) {  						instr = instrs[i];  						var seqp = instr.SequencePoint;  						if (seqp == null || seqp.Document == null)  							continue;  						if (checkedPdbDocs.ContainsKey(seqp.Document))  							continue;  						if (currPdbDoc == null)  							currPdbDoc = seqp.Document;  						else if (currPdbDoc != seqp.Document) {  							otherDocsAvailable = true;  							continue;  						}    						if (index >= instrOffsets.Length) {  							int newSize = index * 2;  							if (newSize < 64)  								newSize = 64;  							Array.Resize(ref instrOffsets' newSize);  							Array.Resize(ref startLines' newSize);  							Array.Resize(ref startColumns' newSize);  							Array.Resize(ref endLines' newSize);  							Array.Resize(ref endColumns' newSize);  						}    						instrOffsets[index]	= instrOffset;  						startLines[index]	= seqp.StartLine;  						startColumns[index]	= seqp.StartColumn;  						endLines[index]		= seqp.EndLine;  						endColumns[index]	= seqp.EndColumn;  						index++;  					}  					if (index != 0)  						pdbWriter.writer.DefineSequencePoints(pdbWriter.Add(currPdbDoc)' (uint)index' instrOffsets' startLines' startColumns' endLines' endColumns);    					if (!otherDocsAvailable)  						break;  					if (currPdbDoc != null)  						checkedPdbDocs.Add(currPdbDoc' true);  				}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,SequencePointHelper,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,The following statement contains a magic number: while (true) {  					PdbDocument currPdbDoc = null;  					bool otherDocsAvailable = false;  					int index = 0' instrOffset = 0;  					Instruction instr = null;  					for (int i = 0; i < instrs.Count; i++' instrOffset += instr.GetSize()) {  						instr = instrs[i];  						var seqp = instr.SequencePoint;  						if (seqp == null || seqp.Document == null)  							continue;  						if (checkedPdbDocs.ContainsKey(seqp.Document))  							continue;  						if (currPdbDoc == null)  							currPdbDoc = seqp.Document;  						else if (currPdbDoc != seqp.Document) {  							otherDocsAvailable = true;  							continue;  						}    						if (index >= instrOffsets.Length) {  							int newSize = index * 2;  							if (newSize < 64)  								newSize = 64;  							Array.Resize(ref instrOffsets' newSize);  							Array.Resize(ref startLines' newSize);  							Array.Resize(ref startColumns' newSize);  							Array.Resize(ref endLines' newSize);  							Array.Resize(ref endColumns' newSize);  						}    						instrOffsets[index]	= instrOffset;  						startLines[index]	= seqp.StartLine;  						startColumns[index]	= seqp.StartColumn;  						endLines[index]		= seqp.EndLine;  						endColumns[index]	= seqp.EndColumn;  						index++;  					}  					if (index != 0)  						pdbWriter.writer.DefineSequencePoints(pdbWriter.Add(currPdbDoc)' (uint)index' instrOffsets' startLines' startColumns' endLines' endColumns);    					if (!otherDocsAvailable)  						break;  					if (currPdbDoc != null)  						checkedPdbDocs.Add(currPdbDoc' true);  				}
Magic Number,dnlib.DotNet.Pdb.WindowsPdb,SequencePointHelper,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\WindowsPdb\WindowsPdbWriter.cs,Write,The following statement contains a magic number: while (true) {  					PdbDocument currPdbDoc = null;  					bool otherDocsAvailable = false;  					int index = 0' instrOffset = 0;  					Instruction instr = null;  					for (int i = 0; i < instrs.Count; i++' instrOffset += instr.GetSize()) {  						instr = instrs[i];  						var seqp = instr.SequencePoint;  						if (seqp == null || seqp.Document == null)  							continue;  						if (checkedPdbDocs.ContainsKey(seqp.Document))  							continue;  						if (currPdbDoc == null)  							currPdbDoc = seqp.Document;  						else if (currPdbDoc != seqp.Document) {  							otherDocsAvailable = true;  							continue;  						}    						if (index >= instrOffsets.Length) {  							int newSize = index * 2;  							if (newSize < 64)  								newSize = 64;  							Array.Resize(ref instrOffsets' newSize);  							Array.Resize(ref startLines' newSize);  							Array.Resize(ref startColumns' newSize);  							Array.Resize(ref endLines' newSize);  							Array.Resize(ref endColumns' newSize);  						}    						instrOffsets[index]	= instrOffset;  						startLines[index]	= seqp.StartLine;  						startColumns[index]	= seqp.StartColumn;  						endLines[index]		= seqp.EndLine;  						endColumns[index]	= seqp.EndColumn;  						index++;  					}  					if (index != 0)  						pdbWriter.writer.DefineSequencePoints(pdbWriter.Add(currPdbDoc)' (uint)index' instrOffsets' startLines' startColumns' endLines' endColumns);    					if (!otherDocsAvailable)  						break;  					if (currPdbDoc != null)  						checkedPdbDocs.Add(currPdbDoc' true);  				}
Magic Number,dnlib.DotNet.Resources,ResourceReader,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceReader.cs,CouldBeResourcesFile,The following statement contains a magic number: return reader.CanRead(4) && reader.ReadUInt32() == 0xBEEFCACE;
Magic Number,dnlib.DotNet.Resources,ResourceReader,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceReader.cs,Read,The following statement contains a magic number: if (version != 2)//TODO: Support version 1  				throw new ResourceReaderException(string.Format("Invalid resource version: {0}"' version));
Magic Number,dnlib.DotNet.Resources,ResourceReader,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceReader.cs,Read,The following statement contains a magic number: reader.Position = (reader.Position + 7) & ~7;
Magic Number,dnlib.DotNet.Resources,ResourceReader,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceReader.cs,Read,The following statement contains a magic number: reader.Position = (reader.Position + 7) & ~7;
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The following statement contains a magic number: writer.Write(2);
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The following statement contains a magic number: int extraBytes = 8 - ((int)writer.BaseStream.Position & 7);
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The following statement contains a magic number: int extraBytes = 8 - ((int)writer.BaseStream.Position & 7);
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The following statement contains a magic number: if (extraBytes != 8) {  				for (int i = 0; i < extraBytes; i++)  					writer.Write((byte)'X');  			}
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Write,The following statement contains a magic number: writer.Write((int)writer.BaseStream.Position + (int)nameOffsetStream.Length + 4);
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,WriteUInt32,The following statement contains a magic number: while (value >= 0x80) {  				writer.Write((byte)(value | 0x80));  				value >>= 7;  			}
Magic Number,dnlib.DotNet.Resources,ResourceWriter,C:\repos\0xd4d_dnlib\src\DotNet\Resources\ResourceWriter.cs,Hash,The following statement contains a magic number: foreach (var c in key)  				val = ((val << 5) + val) ^ (uint)c;
Magic Number,dnlib.DotNet.Writer,GuidHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\GuidHeap.cs,GetRawLength,The following statement contains a magic number: return (uint)guids.Count * 16;
Magic Number,dnlib.DotNet.Writer,GuidHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\GuidHeap.cs,WriteToImpl,The following statement contains a magic number: foreach (var kv in guids) {  				byte[] rawData;  				if (userRawData == null || !userRawData.TryGetValue(offset' out rawData))  					rawData = kv.Key.ToByteArray();  				writer.Write(rawData);  				offset += 16;  			}
Magic Number,dnlib.DotNet.Writer,GuidHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\GuidHeap.cs,GetRawDataSize,The following statement contains a magic number: return 16;
Magic Number,dnlib.DotNet.Writer,GuidHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\GuidHeap.cs,SetRawData,The following statement contains a magic number: if (rawData == null || rawData.Length != 16)  				throw new ArgumentException("Invalid size of GUID raw data");
Magic Number,dnlib.DotNet.Writer,GuidHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\GuidHeap.cs,GetAllRawData,The following statement contains a magic number: foreach (var kv in guids) {  				yield return new KeyValuePair<uint' byte[]>(offset' kv.Key.ToByteArray());  				offset += 16;  			}
Magic Number,dnlib.DotNet.Writer,HotHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotHeap.cs,SetOffset,The following statement contains a magic number: offset += hotPools.Count * 8;
Magic Number,dnlib.DotNet.Writer,HotHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotHeap.cs,SetOffset,The following statement contains a magic number: rva += (uint)hotPools.Count * 8;
Magic Number,dnlib.DotNet.Writer,HotHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotHeap.cs,SetOffset,The following statement contains a magic number: offset += 8;
Magic Number,dnlib.DotNet.Writer,HotHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotHeap.cs,SetOffset,The following statement contains a magic number: rva += 8;
Magic Number,dnlib.DotNet.Writer,HotHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotHeap.cs,WriteToImpl,The following statement contains a magic number: offs += (uint)hotPools.Count * 8;
Magic Number,dnlib.DotNet.Writer,HotPool20,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += ((uint)dataList.Length - 1) * 4;
Magic Number,dnlib.DotNet.Writer,HotPool20,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += (uint)dataList.Length * 4;
Magic Number,dnlib.DotNet.Writer,HotPool20,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += 3 * 4;
Magic Number,dnlib.DotNet.Writer,HotPool20,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += 3 * 4;
Magic Number,dnlib.DotNet.Writer,HotPool40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += (uint)dataList.Length * 4;
Magic Number,dnlib.DotNet.Writer,HotPool40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += (uint)dataList.Length * 4;
Magic Number,dnlib.DotNet.Writer,HotPool40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += 3 * 4;
Magic Number,dnlib.DotNet.Writer,HotPool40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotPool.cs,SetOffsetImpl,The following statement contains a magic number: offs += 3 * 4;
Magic Number,dnlib.DotNet.Writer,HotTable,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculateShift,The following statement contains a magic number: if (maxBits >= 16)  				return maxBits - 8;  			else  				return maxBits / 2;
Magic Number,dnlib.DotNet.Writer,HotTable,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculateShift,The following statement contains a magic number: if (maxBits >= 16)  				return maxBits - 8;  			else  				return maxBits / 2;
Magic Number,dnlib.DotNet.Writer,HotTable,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculateShift,The following statement contains a magic number: if (maxBits >= 16)  				return maxBits - 8;  			else  				return maxBits / 2;
Magic Number,dnlib.DotNet.Writer,HotTable20,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculatePartialTableLength,The following statement contains a magic number: len += (uint)(firstLevelTable.Length * 2);
Magic Number,dnlib.DotNet.Writer,HotTable40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculatePartialTableLength,The following statement contains a magic number: len += (uint)(firstLevelTable.Length * 2);
Magic Number,dnlib.DotNet.Writer,HotTable40,C:\repos\0xd4d_dnlib\src\DotNet\Writer\HotTable.cs,CalculatePartialTableLength,The following statement contains a magic number: len += (uint)(partialData.Count * 2);
Magic Number,dnlib.DotNet.Writer,ImportAddressTable,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ImportAddressTable.cs,GetFileLength,The following statement contains a magic number: return 8;
Magic Number,dnlib.DotNet.Writer,ImportDirectory,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ImportDirectory.cs,SetOffset,The following statement contains a magic number: length += 8;
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: if (table.Table == Table.Constant) {  				var cols = table.TableInfo.Columns;  				var row2 = (RawConstantRow)row;  				writer.Write(row2.Type);  				writer.Write(row2.Padding);  				cols[1].Write(writer' row2.Parent);  				cols[2].Write(writer' row2.Value);  			}  			else {  				var cols = table.TableInfo.Columns;  				foreach (var col in cols)  					col.Write(writer' row.Read(col.Index));  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Generation);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Mvid);  				cols[3].Write(writer' row.EncId);  				cols[4].Write(writer' row.EncBaseId);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Generation);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Mvid);  				cols[3].Write(writer' row.EncId);  				cols[4].Write(writer' row.EncBaseId);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Generation);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Mvid);  				cols[3].Write(writer' row.EncId);  				cols[4].Write(writer' row.EncBaseId);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				cols[0].Write(writer' row.ResolutionScope);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Namespace);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Namespace);  				cols[3].Write(writer' row.Extends);  				cols[4].Write(writer' row.FieldList);  				cols[5].Write(writer' row.MethodList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Namespace);  				cols[3].Write(writer' row.Extends);  				cols[4].Write(writer' row.FieldList);  				cols[5].Write(writer' row.MethodList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Namespace);  				cols[3].Write(writer' row.Extends);  				cols[4].Write(writer' row.FieldList);  				cols[5].Write(writer' row.MethodList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Namespace);  				cols[3].Write(writer' row.Extends);  				cols[4].Write(writer' row.FieldList);  				cols[5].Write(writer' row.MethodList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Signature);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.RVA);  				writer.Write(row.ImplFlags);  				writer.Write(row.Flags);  				cols[3].Write(writer' row.Name);  				cols[4].Write(writer' row.Signature);  				cols[5].Write(writer' row.ParamList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.RVA);  				writer.Write(row.ImplFlags);  				writer.Write(row.Flags);  				cols[3].Write(writer' row.Name);  				cols[4].Write(writer' row.Signature);  				cols[5].Write(writer' row.ParamList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.RVA);  				writer.Write(row.ImplFlags);  				writer.Write(row.Flags);  				cols[3].Write(writer' row.Name);  				cols[4].Write(writer' row.Signature);  				cols[5].Write(writer' row.ParamList);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				writer.Write(row.Sequence);  				cols[2].Write(writer' row.Name);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				cols[0].Write(writer' row.Class);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Signature);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Type);  				writer.Write(row.Padding);  				cols[1].Write(writer' row.Parent);  				cols[2].Write(writer' row.Value);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				cols[0].Write(writer' row.Parent);  				cols[1].Write(writer' row.Type);  				cols[2].Write(writer' row.Value);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Action);  				cols[1].Write(writer' row.Parent);  				cols[2].Write(writer' row.PermissionSet);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.PackingSize);  				writer.Write(row.ClassSize);  				cols[2].Write(writer' row.Parent);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.EventFlags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.EventType);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.PropFlags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.Type);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Semantic);  				cols[1].Write(writer' row.Method);  				cols[2].Write(writer' row.Association);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				cols[0].Write(writer' row.Class);  				cols[1].Write(writer' row.MethodBody);  				cols[2].Write(writer' row.MethodDeclaration);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MappingFlags);  				cols[1].Write(writer' row.MemberForwarded);  				cols[2].Write(writer' row.ImportName);  				cols[3].Write(writer' row.ImportScope);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MappingFlags);  				cols[1].Write(writer' row.MemberForwarded);  				cols[2].Write(writer' row.ImportName);  				cols[3].Write(writer' row.ImportScope);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.HashAlgId);  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[6].Write(writer' row.PublicKey);  				cols[7].Write(writer' row.Name);  				cols[8].Write(writer' row.Locale);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.HashAlgId);  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[6].Write(writer' row.PublicKey);  				cols[7].Write(writer' row.Name);  				cols[8].Write(writer' row.Locale);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.HashAlgId);  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[6].Write(writer' row.PublicKey);  				cols[7].Write(writer' row.Name);  				cols[8].Write(writer' row.Locale);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[5].Write(writer' row.PublicKeyOrToken);  				cols[6].Write(writer' row.Name);  				cols[7].Write(writer' row.Locale);  				cols[8].Write(writer' row.HashValue);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[5].Write(writer' row.PublicKeyOrToken);  				cols[6].Write(writer' row.Name);  				cols[7].Write(writer' row.Locale);  				cols[8].Write(writer' row.HashValue);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[5].Write(writer' row.PublicKeyOrToken);  				cols[6].Write(writer' row.Name);  				cols[7].Write(writer' row.Locale);  				cols[8].Write(writer' row.HashValue);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.MajorVersion);  				writer.Write(row.MinorVersion);  				writer.Write(row.BuildNumber);  				writer.Write(row.RevisionNumber);  				writer.Write(row.Flags);  				cols[5].Write(writer' row.PublicKeyOrToken);  				cols[6].Write(writer' row.Name);  				cols[7].Write(writer' row.Locale);  				cols[8].Write(writer' row.HashValue);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.OSPlatformId);  				writer.Write(row.OSMajorVersion);  				writer.Write(row.OSMinorVersion);  				cols[3].Write(writer' row.AssemblyRef);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				cols[1].Write(writer' row.Name);  				cols[2].Write(writer' row.HashValue);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				writer.Write(row.TypeDefId);  				cols[2].Write(writer' row.TypeName);  				cols[3].Write(writer' row.TypeNamespace);  				cols[4].Write(writer' row.Implementation);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				writer.Write(row.TypeDefId);  				cols[2].Write(writer' row.TypeName);  				cols[3].Write(writer' row.TypeNamespace);  				cols[4].Write(writer' row.Implementation);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Flags);  				writer.Write(row.TypeDefId);  				cols[2].Write(writer' row.TypeName);  				cols[3].Write(writer' row.TypeNamespace);  				cols[4].Write(writer' row.Implementation);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Offset);  				writer.Write(row.Flags);  				cols[2].Write(writer' row.Name);  				cols[3].Write(writer' row.Implementation);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Offset);  				writer.Write(row.Flags);  				cols[2].Write(writer' row.Name);  				cols[3].Write(writer' row.Implementation);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: bool useKindColumn = cols.Count >= 5;
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Number);  				writer.Write(row.Flags);  				cols[2].Write(writer' row.Owner);  				cols[3].Write(writer' row.Name);  				if (useKindColumn)  					cols[4].Write(writer' row.Kind);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Number);  				writer.Write(row.Flags);  				cols[2].Write(writer' row.Owner);  				cols[3].Write(writer' row.Name);  				if (useKindColumn)  					cols[4].Write(writer' row.Kind);  			}
Magic Number,dnlib.DotNet.Writer,MDTableWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MDTableWriter.cs,Write,The following statement contains a magic number: foreach (var row in table) {  				writer.Write(row.Number);  				writer.Write(row.Flags);  				cols[2].Write(writer' row.Owner);  				cols[3].Write(writer' row.Name);  				if (useKindColumn)  					cols[4].Write(writer' row.Kind);  			}
Magic Number,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,InitializeTypeDefsAndMemberDefs,The following statement contains a magic number: const int numNotifyEvents = 5;
Magic Number,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WriteTypeDefAndMemberDefCustomAttributesAndCustomDebugInfos,The following statement contains a magic number: const int numNotifyEvents = 5;
Magic Number,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WriteMethodBodies,The following statement contains a magic number: const int numNotifyEvents = 10;
Magic Number,dnlib.DotNet.Writer,MetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaData.cs,WritePortablePdb,The following statement contains a magic number: if (pdbId.Length != 20)  				throw new InvalidOperationException();
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,SetOffset,The following statement contains a magic number: length = 16;
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,SetOffset,The following statement contains a magic number: length = Utils.AlignUp(length' 4);
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,SetOffset,The following statement contains a magic number: length += 4;
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,SetOffset,The following statement contains a magic number: foreach (var heap in heaps) {  				length += 8;  				length += (uint)GetAsciizName(heap.Name).Length;  				length = Utils.AlignUp(length' 4);  			}
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,SetOffset,The following statement contains a magic number: foreach (var heap in heaps) {  				length += 8;  				length += (uint)GetAsciizName(heap.Name).Length;  				length = Utils.AlignUp(length' 4);  			}
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,WriteTo,The following statement contains a magic number: writer.Write(Utils.AlignUp(s.Length' 4));
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,WriteTo,The following statement contains a magic number: writer.WriteZeros(Utils.AlignUp(s.Length' 4) - s.Length);
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,WriteTo,The following statement contains a magic number: foreach (var heap in heaps) {  				writer.Write((uint)(heap.FileOffset - offset));  				writer.Write(heap.GetFileLength());  				writer.Write(s = GetAsciizName(heap.Name));  				if (s.Length > 32)  					throw new ModuleWriterException(string.Format("Heap name '{0}' is > 32 bytes"' heap.Name));  				writer.WriteZeros(Utils.AlignUp(s.Length' 4) - s.Length);  			}
Magic Number,dnlib.DotNet.Writer,MetaDataHeader,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MetaDataHeader.cs,WriteTo,The following statement contains a magic number: foreach (var heap in heaps) {  				writer.Write((uint)(heap.FileOffset - offset));  				writer.Write(heap.GetFileLength());  				writer.Write(s = GetAsciizName(heap.Name));  				if (s.Length > 32)  					throw new ModuleWriterException(string.Format("Heap name '{0}' is > 32 bytes"' heap.Name));  				writer.WriteZeros(Utils.AlignUp(s.Length' 4) - s.Length);  			}
Magic Number,dnlib.DotNet.Writer,MethodBody,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBody.cs,MethodBody,The following statement contains a magic number: this.isTiny = (code[0] & 3) == 2;
Magic Number,dnlib.DotNet.Writer,MethodBody,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBody.cs,MethodBody,The following statement contains a magic number: this.isTiny = (code[0] & 3) == 2;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,GetFullMethodBody,The following statement contains a magic number: int padding = Utils.AlignUp(code.Length' 4) - code.Length;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,NeedFatHeader,The following statement contains a magic number: return codeSize > 0x3F ||  					exceptionHandlers.Count > 0 ||  					cilBody.HasVariables ||  					maxStack > 8;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatHeader,The following statement contains a magic number: if (exceptionHandlers.Count > 0)  				flags |= 8;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatHeader,The following statement contains a magic number: code = new byte[12 + codeSize];
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteTinyHeader,The following statement contains a magic number: writer.Write((byte)((codeSize << 2) | 2));
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteTinyHeader,The following statement contains a magic number: writer.Write((byte)((codeSize << 2) | 2));
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,NeedFatExceptionClauses,The following statement contains a magic number: if (exceptionHandlers.Count > 20)  				return true;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatExceptionClauses,The following statement contains a magic number: const int maxExceptionHandlers = (0x00FFFFFF - 4) / 24;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatExceptionClauses,The following statement contains a magic number: const int maxExceptionHandlers = (0x00FFFFFF - 4) / 24;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 24 + 4) << 8) | 0x41);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 24 + 4) << 8) | 0x41);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteFatExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 24 + 4) << 8) | 0x41);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteSmallExceptionClauses,The following statement contains a magic number: const int maxExceptionHandlers = (0xFF - 4) / 12;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteSmallExceptionClauses,The following statement contains a magic number: const int maxExceptionHandlers = (0xFF - 4) / 12;
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteSmallExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 12 + 4) << 8) | 1);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteSmallExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 12 + 4) << 8) | 1);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriter.cs,WriteSmallExceptionClauses,The following statement contains a magic number: writer.Write((((uint)numExceptionHandlers * 12 + 4) << 8) | 1);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,GetMaxStack,The following statement contains a magic number: if (!maxStackCalculator.Calculate(out maxStack)) {  				Error("Error calculating max stack value. If the method's obfuscated' set CilBody.KeepOldMaxStack or MetaDataOptions.Flags (KeepOldMaxStack' global option) to ignore this error. Otherwise fix your generated CIL code so it conforms to the ECMA standard.");  				maxStack += 8;  			}
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteOpCode,The following statement contains a magic number: if ((ushort)code <= 0xFF)  				writer.Write((byte)code);  			else if (((ushort)code >> 8) == 0xFE) {  				writer.Write((byte)((ushort)code >> 8));  				writer.Write((byte)code);  			}  			else if (code == Code.UNKNOWN1)  				writer.Write((byte)Code.Nop);  			else if (code == Code.UNKNOWN2)  				writer.Write((ushort)(((ushort)Code.Nop << 8) | Code.Nop));  			else {  				Error("Unknown instruction");  				writer.Write((byte)Code.Nop);  			}
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteOpCode,The following statement contains a magic number: if ((ushort)code <= 0xFF)  				writer.Write((byte)code);  			else if (((ushort)code >> 8) == 0xFE) {  				writer.Write((byte)((ushort)code >> 8));  				writer.Write((byte)code);  			}  			else if (code == Code.UNKNOWN1)  				writer.Write((byte)Code.Nop);  			else if (code == Code.UNKNOWN2)  				writer.Write((ushort)(((ushort)Code.Nop << 8) | Code.Nop));  			else {  				Error("Unknown instruction");  				writer.Write((byte)Code.Nop);  			}
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteOpCode,The following statement contains a magic number: if ((ushort)code <= 0xFF)  				writer.Write((byte)code);  			else if (((ushort)code >> 8) == 0xFE) {  				writer.Write((byte)((ushort)code >> 8));  				writer.Write((byte)code);  			}  			else if (code == Code.UNKNOWN1)  				writer.Write((byte)Code.Nop);  			else if (code == Code.UNKNOWN2)  				writer.Write((ushort)(((ushort)Code.Nop << 8) | Code.Nop));  			else {  				Error("Unknown instruction");  				writer.Write((byte)Code.Nop);  			}
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteInlineBrTarget,The following statement contains a magic number: uint displ = GetOffset(instr.Operand as Instruction) - (ToInstructionOffset(writer) + 4);
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteInlineSwitch,The following statement contains a magic number: if (targets == null) {  				Error("switch operand is not a list of instructions");  				writer.Write(0);  			}  			else {  				uint offsetAfter = (uint)(ToInstructionOffset(writer) + 4 + targets.Count * 4);  				writer.Write(targets.Count);  				foreach (var target in targets)  					writer.Write(GetOffset(target) - offsetAfter);  			}
Magic Number,dnlib.DotNet.Writer,MethodBodyWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MethodBodyWriterBase.cs,WriteInlineSwitch,The following statement contains a magic number: if (targets == null) {  				Error("switch operand is not a list of instructions");  				writer.Write(0);  			}  			else {  				uint offsetAfter = (uint)(ToInstructionOffset(writer) + 4 + targets.Count * 4);  				writer.Write(targets.Count);  				foreach (var target in targets)  					writer.Write(GetOffset(target) - offsetAfter);  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.Cor20HeaderRuntimeVersion != null) {  				Cor20HeaderOptions.MajorRuntimeVersion = (ushort)(module.Cor20HeaderRuntimeVersion.Value >> 16);  				Cor20HeaderOptions.MinorRuntimeVersion = (ushort)module.Cor20HeaderRuntimeVersion.Value;  			}  			else if (module.IsClr1x) {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 0;  			}  			else {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 5;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.Cor20HeaderRuntimeVersion != null) {  				Cor20HeaderOptions.MajorRuntimeVersion = (ushort)(module.Cor20HeaderRuntimeVersion.Value >> 16);  				Cor20HeaderOptions.MinorRuntimeVersion = (ushort)module.Cor20HeaderRuntimeVersion.Value;  			}  			else if (module.IsClr1x) {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 0;  			}  			else {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 5;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.Cor20HeaderRuntimeVersion != null) {  				Cor20HeaderOptions.MajorRuntimeVersion = (ushort)(module.Cor20HeaderRuntimeVersion.Value >> 16);  				Cor20HeaderOptions.MinorRuntimeVersion = (ushort)module.Cor20HeaderRuntimeVersion.Value;  			}  			else if (module.IsClr1x) {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 0;  			}  			else {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 5;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.Cor20HeaderRuntimeVersion != null) {  				Cor20HeaderOptions.MajorRuntimeVersion = (ushort)(module.Cor20HeaderRuntimeVersion.Value >> 16);  				Cor20HeaderOptions.MinorRuntimeVersion = (ushort)module.Cor20HeaderRuntimeVersion.Value;  			}  			else if (module.IsClr1x) {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 0;  			}  			else {  				Cor20HeaderOptions.MajorRuntimeVersion = 2;  				Cor20HeaderOptions.MinorRuntimeVersion = 5;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.TablesHeaderVersion != null) {  				MetaDataOptions.TablesHeapOptions.MajorVersion = (byte)(module.TablesHeaderVersion.Value >> 8);  				MetaDataOptions.TablesHeapOptions.MinorVersion = (byte)module.TablesHeaderVersion.Value;  			}  			else if (module.IsClr1x) {  				// Generics aren't supported  				MetaDataOptions.TablesHeapOptions.MajorVersion = 1;  				MetaDataOptions.TablesHeapOptions.MinorVersion = 0;  			}  			else {  				// Generics are supported  				MetaDataOptions.TablesHeapOptions.MajorVersion = 2;  				MetaDataOptions.TablesHeapOptions.MinorVersion = 0;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterOptionsBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,ModuleWriterOptionsBase,The following statement contains a magic number: if (module.TablesHeaderVersion != null) {  				MetaDataOptions.TablesHeapOptions.MajorVersion = (byte)(module.TablesHeaderVersion.Value >> 8);  				MetaDataOptions.TablesHeapOptions.MinorVersion = (byte)module.TablesHeaderVersion.Value;  			}  			else if (module.IsClr1x) {  				// Generics aren't supported  				MetaDataOptions.TablesHeapOptions.MajorVersion = 1;  				MetaDataOptions.TablesHeapOptions.MinorVersion = 0;  			}  			else {  				// Generics are supported  				MetaDataOptions.TablesHeapOptions.MajorVersion = 2;  				MetaDataOptions.TablesHeapOptions.MinorVersion = 0;  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,WritePortablePdb,The following statement contains a magic number: try {  				MemoryStream embeddedMemoryStream = null;  				if (isEmbeddedPortablePdb) {  					pdbStream = embeddedMemoryStream = new MemoryStream();  					ownsStream = true;  				}  				else  					pdbStream = GetStandalonePortablePdbStream(out ownsStream);    				var pdbFilename = TheOptions.PdbFileName ?? GetStreamName(pdbStream) ?? GetDefaultPdbFileName();  				if (isEmbeddedPortablePdb)  					pdbFilename = Path.GetFileName(pdbFilename);    				uint entryPointToken;  				if (pdbState.UserEntryPoint == null)  					entryPointToken = 0;  				else  					entryPointToken = new MDToken(Table.Method' metaData.GetRid(pdbState.UserEntryPoint)).Raw;    				var pdbId = new byte[20];  				var pdbIdWriter = new BinaryWriter(new MemoryStream(pdbId));  				var pdbGuid = TheOptions.PdbGuid;  				pdbIdWriter.Write(pdbGuid.ToByteArray());  				pdbIdWriter.Write(GetTimeDateStamp());  				Debug.Assert(pdbIdWriter.BaseStream.Position == pdbId.Length);    				metaData.WritePortablePdb(pdbStream' entryPointToken' pdbId);    				const uint age = 1;  				var cvEntry = debugDirectory.Add(GetCodeViewData(pdbGuid' age' pdbFilename));  				cvEntry.DebugDirectory.TimeDateStamp = GetTimeDateStamp();  				cvEntry.DebugDirectory.MajorVersion = PortablePdbConstants.FormatVersion;  				cvEntry.DebugDirectory.MinorVersion = PortablePdbConstants.PortableCodeViewVersionMagic;  				cvEntry.DebugDirectory.Type = ImageDebugType.CodeView;    				if (isEmbeddedPortablePdb) {  					Debug.Assert(embeddedMemoryStream != null);  					var embedEntry = debugDirectory.Add(CreateEmbeddedPortablePdbBlob(embeddedMemoryStream));  					embedEntry.DebugDirectory.TimeDateStamp = 0;  					embedEntry.DebugDirectory.MajorVersion = PortablePdbConstants.FormatVersion;  					embedEntry.DebugDirectory.MinorVersion = PortablePdbConstants.EmbeddedVersion;  					embedEntry.DebugDirectory.Type = ImageDebugType.EmbeddedPortablePdb;  				}  			}  			finally {  				if (ownsStream && pdbStream != null)  					pdbStream.Dispose();  			}
Magic Number,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,CreateEmbeddedPortablePdbBlob,The following statement contains a magic number: var data = new byte[4 + 4 + compressedData.Length];
Magic Number,dnlib.DotNet.Writer,ModuleWriterBase,C:\repos\0xd4d_dnlib\src\DotNet\Writer\ModuleWriterBase.cs,CreateEmbeddedPortablePdbBlob,The following statement contains a magic number: var data = new byte[4 + 4 + compressedData.Length];
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: long dataDirOffset = destStreamBaseOffset + (long)peImage.ImageNTHeaders.OptionalHeader.EndOffset - 16 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: long dataDirOffset = destStreamBaseOffset + (long)peImage.ImageNTHeaders.OptionalHeader.EndOffset - 16 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position += 2;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (is32BitOptionalHeader) {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				WriteUInt32(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem);  				WriteUInt16(writer' peOptions.DllCharacteristics);  				WriteUInt32(writer' peOptions.SizeOfStackReserve);  				WriteUInt32(writer' peOptions.SizeOfStackCommit);  				WriteUInt32(writer' peOptions.SizeOfHeapReserve);  				WriteUInt32(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}  			else {  				writer.BaseStream.Position += 2;  				WriteByte(writer' peOptions.MajorLinkerVersion);  				WriteByte(writer' peOptions.MinorLinkerVersion);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.BaseStream.Position += 4;	// EntryPoint  				writer.Write(sectionSizes.BaseOfCode);  				WriteUInt64(writer' peOptions.ImageBase);  				writer.BaseStream.Position += 8;	// SectionAlignment' FileAlignment  				WriteUInt16(writer' peOptions.MajorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MinorOperatingSystemVersion);  				WriteUInt16(writer' peOptions.MajorImageVersion);  				WriteUInt16(writer' peOptions.MinorImageVersion);  				WriteUInt16(writer' peOptions.MajorSubsystemVersion);  				WriteUInt16(writer' peOptions.MinorSubsystemVersion);  				WriteUInt32(writer' peOptions.Win32VersionValue);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				WriteUInt16(writer' peOptions.Subsystem ?? GetSubsystem());  				WriteUInt16(writer' peOptions.DllCharacteristics ?? module.DllCharacteristics);  				WriteUInt64(writer' peOptions.SizeOfStackReserve);  				WriteUInt64(writer' peOptions.SizeOfStackCommit);  				WriteUInt64(writer' peOptions.SizeOfHeapReserve);  				WriteUInt64(writer' peOptions.SizeOfHeapCommit);  				WriteUInt32(writer' peOptions.LoaderFlags);  				WriteUInt32(writer' peOptions.NumberOfRvaAndSizes);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (win32Resources != null) {  				writer.BaseStream.Position = dataDirOffset + 2 * 8;  				writer.WriteDataDirectory(win32Resources);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: if (win32Resources != null) {  				writer.BaseStream.Position = dataDirOffset + 2 * 8;  				writer.WriteDataDirectory(win32Resources);  			}
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 4 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 4 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 6 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 6 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 14 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,UpdateHeaderFields,The following statement contains a magic number: writer.BaseStream.Position = dataDirOffset + 14 * 8;
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt16,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 2;  			else  				writer.Write(value.Value);
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt16,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 2;  			else  				writer.Write((ushort)value.Value);
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt16,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 2;  			else  				writer.Write((ushort)value.Value);
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt32,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 4;  			else  				writer.Write(value.Value);
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt32,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 4;  			else  				writer.Write((uint)value.Value);
Magic Number,dnlib.DotNet.Writer,NativeModuleWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NativeModuleWriter.cs,WriteUInt64,The following statement contains a magic number: if (value == null)  				writer.BaseStream.Position += 8;  			else  				writer.Write(value.Value);
Magic Number,dnlib.DotNet.Writer,NetResources,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NetResources.cs,Add,The following statement contains a magic number: length = Utils.AlignUp(length + 4 + (uint)rawData.Length' alignment);
Magic Number,dnlib.DotNet.Writer,NetResources,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NetResources.cs,SetOffset,The following statement contains a magic number: foreach (var resource in resources) {  				resource.SetOffset(offset + 4' rva + 4);  				uint len = 4 + resource.GetFileLength();  				offset = (offset + len).AlignUp(alignment);  				rva = (rva + len).AlignUp(alignment);  			}
Magic Number,dnlib.DotNet.Writer,NetResources,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NetResources.cs,SetOffset,The following statement contains a magic number: foreach (var resource in resources) {  				resource.SetOffset(offset + 4' rva + 4);  				uint len = 4 + resource.GetFileLength();  				offset = (offset + len).AlignUp(alignment);  				rva = (rva + len).AlignUp(alignment);  			}
Magic Number,dnlib.DotNet.Writer,NetResources,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NetResources.cs,SetOffset,The following statement contains a magic number: foreach (var resource in resources) {  				resource.SetOffset(offset + 4' rva + 4);  				uint len = 4 + resource.GetFileLength();  				offset = (offset + len).AlignUp(alignment);  				rva = (rva + len).AlignUp(alignment);  			}
Magic Number,dnlib.DotNet.Writer,NetResources,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NetResources.cs,WriteTo,The following statement contains a magic number: foreach (var resourceData in resources) {  				writer.Write(resourceData.GetFileLength());  				resourceData.VerifyWriteTo(writer);  				rva2 += 4 + resourceData.GetFileLength();  				int padding = (int)rva2.AlignUp(alignment) - (int)rva2;  				writer.WriteZeros(padding);  				rva2 += (uint)padding;  			}
Magic Number,dnlib.DotNet.Writer,NormalMetaData,C:\repos\0xd4d_dnlib\src\DotNet\Writer\NormalMetaData.cs,AllocateMemberDefRids,The following statement contains a magic number: const int numNotifyEvents = 5;
Magic Number,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,PdbHeap,The following statement contains a magic number: pdbId = new byte[20];
Magic Number,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,PdbHeap,The following statement contains a magic number: typeSystemTableRows = new uint[64];
Magic Number,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,GetRawLength,The following statement contains a magic number: return (uint)(pdbId.Length + 4 + 8 + 4 * typeSystemTablesCount);
Magic Number,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,GetRawLength,The following statement contains a magic number: return (uint)(pdbId.Length + 4 + 8 + 4 * typeSystemTablesCount);
Magic Number,dnlib.DotNet.Writer,PdbHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PdbHeap.cs,GetRawLength,The following statement contains a magic number: return (uint)(pdbId.Length + 4 + 8 + 4 * typeSystemTablesCount);
Magic Number,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,SetOffset,The following statement contains a magic number: length += 4 + 0x14;
Magic Number,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,WriteTo,The following statement contains a magic number: if (Use32BitOptionalHeader()) {  				writer.Write((ushort)0x010B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				writer.Write((uint)imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write((uint)(options.SizeOfStackReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfStackCommit ?? 0x00001000));  				writer.Write((uint)(options.SizeOfHeapReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfHeapCommit ?? 0x00001000));  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}  			else {  				writer.Write((ushort)0x020B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write(options.SizeOfStackReserve ?? 0x0000000000400000);  				writer.Write(options.SizeOfStackCommit ?? 0x0000000000004000);  				writer.Write(options.SizeOfHeapReserve ?? 0x0000000000100000);  				writer.Write(options.SizeOfHeapCommit ?? 0x0000000000002000);  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}
Magic Number,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,WriteTo,The following statement contains a magic number: if (Use32BitOptionalHeader()) {  				writer.Write((ushort)0x010B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				writer.Write((uint)imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write((uint)(options.SizeOfStackReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfStackCommit ?? 0x00001000));  				writer.Write((uint)(options.SizeOfHeapReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfHeapCommit ?? 0x00001000));  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}  			else {  				writer.Write((ushort)0x020B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write(options.SizeOfStackReserve ?? 0x0000000000400000);  				writer.Write(options.SizeOfStackCommit ?? 0x0000000000004000);  				writer.Write(options.SizeOfHeapReserve ?? 0x0000000000100000);  				writer.Write(options.SizeOfHeapCommit ?? 0x0000000000002000);  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}
Magic Number,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,WriteTo,The following statement contains a magic number: if (Use32BitOptionalHeader()) {  				writer.Write((ushort)0x010B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				writer.Write((uint)imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write((uint)(options.SizeOfStackReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfStackCommit ?? 0x00001000));  				writer.Write((uint)(options.SizeOfHeapReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfHeapCommit ?? 0x00001000));  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}  			else {  				writer.Write((ushort)0x020B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write(options.SizeOfStackReserve ?? 0x0000000000400000);  				writer.Write(options.SizeOfStackCommit ?? 0x0000000000004000);  				writer.Write(options.SizeOfHeapReserve ?? 0x0000000000100000);  				writer.Write(options.SizeOfHeapCommit ?? 0x0000000000002000);  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}
Magic Number,dnlib.DotNet.Writer,PEHeaders,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PEHeaders.cs,WriteTo,The following statement contains a magic number: if (Use32BitOptionalHeader()) {  				writer.Write((ushort)0x010B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(sectionSizes.BaseOfData);  				writer.Write((uint)imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write((uint)(options.SizeOfStackReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfStackCommit ?? 0x00001000));  				writer.Write((uint)(options.SizeOfHeapReserve ?? 0x00100000));  				writer.Write((uint)(options.SizeOfHeapCommit ?? 0x00001000));  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}  			else {  				writer.Write((ushort)0x020B);  				writer.Write(options.MajorLinkerVersion ?? PEHeadersOptions.DEFAULT_MAJOR_LINKER_VERSION);  				writer.Write(options.MinorLinkerVersion ?? PEHeadersOptions.DEFAULT_MINOR_LINKER_VERSION);  				writer.Write(sectionSizes.SizeOfCode);  				writer.Write(sectionSizes.SizeOfInitdData);  				writer.Write(sectionSizes.SizeOfUninitdData);  				writer.Write(ep);  				writer.Write(sectionSizes.BaseOfCode);  				writer.Write(imageBase);  				writer.Write(sectionAlignment);  				writer.Write(fileAlignment);  				writer.Write(options.MajorOperatingSystemVersion ?? 4);  				writer.Write(options.MinorOperatingSystemVersion ?? 0);  				writer.Write(options.MajorImageVersion ?? 0);  				writer.Write(options.MinorImageVersion ?? 0);  				writer.Write(options.MajorSubsystemVersion ?? 4);  				writer.Write(options.MinorSubsystemVersion ?? 0);  				writer.Write(options.Win32VersionValue ?? 0);  				writer.Write(sectionSizes.SizeOfImage);  				writer.Write(sectionSizes.SizeOfHeaders);  				checkSumOffset = writer.BaseStream.Position;  				writer.Write(0);	// CheckSum  				writer.Write((ushort)(options.Subsystem ?? PEHeadersOptions.DEFAULT_SUBSYSTEM));  				writer.Write((ushort)(options.DllCharacteristics ?? PEHeadersOptions.DefaultDllCharacteristics));  				writer.Write(options.SizeOfStackReserve ?? 0x0000000000400000);  				writer.Write(options.SizeOfStackCommit ?? 0x0000000000004000);  				writer.Write(options.SizeOfHeapReserve ?? 0x0000000000100000);  				writer.Write(options.SizeOfHeapCommit ?? 0x0000000000002000);  				writer.Write(options.LoaderFlags ?? 0x00000000);  				writer.Write(options.NumberOfRvaAndSizes ?? 0x00000010);  			}
Magic Number,dnlib.DotNet.Writer,PESection,C:\repos\0xd4d_dnlib\src\DotNet\Writer\PESection.cs,WriteHeaderTo,The following statement contains a magic number: writer.Write(Encoding.UTF8.GetBytes(Name + "\0\0\0\0\0\0\0\0")' 0' 8);
Magic Number,dnlib.DotNet.Writer,RelocDirectory,C:\repos\0xd4d_dnlib\src\DotNet\Writer\RelocDirectory.cs,GetFileLength,The following statement contains a magic number: return 12;
Magic Number,dnlib.DotNet.Writer,RelocDirectory,C:\repos\0xd4d_dnlib\src\DotNet\Writer\RelocDirectory.cs,WriteTo,The following statement contains a magic number: writer.Write(12);
Magic Number,dnlib.DotNet.Writer,StartupStub,C:\repos\0xd4d_dnlib\src\DotNet\Writer\StartupStub.cs,SetOffset,The following statement contains a magic number: padding = rva.AlignUp(4) - rva + 2;
Magic Number,dnlib.DotNet.Writer,StartupStub,C:\repos\0xd4d_dnlib\src\DotNet\Writer\StartupStub.cs,SetOffset,The following statement contains a magic number: padding = rva.AlignUp(4) - rva + 2;
Magic Number,dnlib.DotNet.Writer,StartupStub,C:\repos\0xd4d_dnlib\src\DotNet\Writer\StartupStub.cs,SetOffset,The following statement contains a magic number: length = padding + 6;
Magic Number,dnlib.DotNet.Writer,TablesHeapOptions,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CreatePortablePdbV1_0,The following statement contains a magic number: return new TablesHeapOptions {  				Reserved1 = 0'  				MajorVersion = 2'  				MinorVersion = 0'  				UseENC = null'  				ExtraData = null'  				HasDeletedRows = null'  			};
Magic Number,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,The following statement contains a magic number: majorVersion = options.MajorVersion ?? 2;
Magic Number,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,The following statement contains a magic number: if (((majorVersion << 8) | minorVersion) <= 0x100) {  				if (!GenericParamTable.IsEmpty || !MethodSpecTable.IsEmpty || !GenericParamConstraintTable.IsEmpty)  					throw new ModuleWriterException("Tables heap version <= v1.0 but generic tables are not empty");  			}
Magic Number,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,The following statement contains a magic number: length = 24;
Magic Number,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,The following statement contains a magic number: foreach (var mdt in Tables) {  				if (mdt.IsEmpty)  					continue;  				length += (uint)(4 + mdt.TableInfo.RowSize * mdt.Rows);  			}
Magic Number,dnlib.DotNet.Writer,TablesHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\TablesHeap.cs,CalculateLength,The following statement contains a magic number: if (options.ExtraData.HasValue)  				length += 4;
Magic Number,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,Populate,The following statement contains a magic number: while (reader.Position < reader.Length) {  				uint offset = (uint)reader.Position;  				uint len;  				if (!reader.ReadCompressedUInt32(out len)) {  					if (offset == reader.Position)  						reader.Position++;  					continue;  				}  				if (len == 0 || reader.Position + len > reader.Length)  					continue;    				int stringLen = (int)len / 2;  				if (stringLen > chars.Length)  					Array.Resize(ref chars' stringLen);  				for (int i = 0; i < stringLen; i++)  					chars[i] = (char)reader.ReadUInt16();  				if ((len & 1) != 0)  					reader.ReadByte();  				var s = new string(chars' 0' stringLen);    				if (!cachedDict.ContainsKey(s))  					cachedDict[s] = offset;  			}
Magic Number,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,WriteString,The following statement contains a magic number: writer.WriteCompressedUInt32((uint)s.Length * 2 + 1);
Magic Number,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,WriteString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  				ushort c = (ushort)s[i];  				writer.Write(c);  				if (c > 0xFF || (1 <= c && c <= 8) || (0x0E <= c && c <= 0x1F) || c == 0x27 || c == 0x2D || c == 0x7F)  					last = 1;  			}
Magic Number,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,GetRawDataSize,The following statement contains a magic number: return Utils.GetCompressedUInt32Length((uint)data.Length * 2 + 1) + data.Length * 2 + 1;
Magic Number,dnlib.DotNet.Writer,USHeap,C:\repos\0xd4d_dnlib\src\DotNet\Writer\USHeap.cs,GetRawDataSize,The following statement contains a magic number: return Utils.GetCompressedUInt32Length((uint)data.Length * 2 + 1) + data.Length * 2 + 1;
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,The following statement contains a magic number: foreach (var dir in dirList) {  				rsrcOffset = Utils.AlignUp(rsrcOffset' RESOURCE_DIR_ALIGNMENT);  				dirDict[dir] = rsrcOffset;  				if (dir != dirList[0])  					AddString(dir.Name);  				rsrcOffset += 16 + (uint)(dir.Directories.Count + dir.Data.Count) * 8;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,The following statement contains a magic number: foreach (var dir in dirList) {  				rsrcOffset = Utils.AlignUp(rsrcOffset' RESOURCE_DIR_ALIGNMENT);  				dirDict[dir] = rsrcOffset;  				if (dir != dirList[0])  					AddString(dir.Name);  				rsrcOffset += 16 + (uint)(dir.Directories.Count + dir.Data.Count) * 8;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,The following statement contains a magic number: foreach (var data in dataHeaderList) {  				rsrcOffset = Utils.AlignUp(rsrcOffset' RESOURCE_DATA_HEADER_ALIGNMENT);  				dataHeaderDict[data] = rsrcOffset;  				AddString(data.Name);  				AddData(data.Data);  				rsrcOffset += 16;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,The following statement contains a magic number: foreach (var s in stringsList) {  				rsrcOffset = Utils.AlignUp(rsrcOffset' RESOURCE_STRING_ALIGNMENT);  				stringsDict[s] = rsrcOffset;  				rsrcOffset += 2 + (uint)(s.Length * 2);  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,SetOffset,The following statement contains a magic number: foreach (var s in stringsList) {  				rsrcOffset = Utils.AlignUp(rsrcOffset' RESOURCE_STRING_ALIGNMENT);  				stringsDict[s] = rsrcOffset;  				rsrcOffset += 2 + (uint)(s.Length * 2);  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: foreach (var s in stringsList) {  				uint padding = Utils.AlignUp(offset' RESOURCE_STRING_ALIGNMENT) - offset;  				writer.WriteZeros((int)padding);  				offset += padding;  				if (stringsDict[s] != offset)  					throw new ModuleWriterException("Invalid Win32 resource string offset");    				var bytes = Encoding.Unicode.GetBytes(s);  				if (bytes.Length / 2 > ushort.MaxValue)  					throw new ModuleWriterException("Win32 resource entry name is too long");  				writer.Write((ushort)(bytes.Length / 2));  				writer.Write(bytes);  				offset += 2 + (uint)bytes.Length;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: foreach (var s in stringsList) {  				uint padding = Utils.AlignUp(offset' RESOURCE_STRING_ALIGNMENT) - offset;  				writer.WriteZeros((int)padding);  				offset += padding;  				if (stringsDict[s] != offset)  					throw new ModuleWriterException("Invalid Win32 resource string offset");    				var bytes = Encoding.Unicode.GetBytes(s);  				if (bytes.Length / 2 > ushort.MaxValue)  					throw new ModuleWriterException("Win32 resource entry name is too long");  				writer.Write((ushort)(bytes.Length / 2));  				writer.Write(bytes);  				offset += 2 + (uint)bytes.Length;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: foreach (var s in stringsList) {  				uint padding = Utils.AlignUp(offset' RESOURCE_STRING_ALIGNMENT) - offset;  				writer.WriteZeros((int)padding);  				offset += padding;  				if (stringsDict[s] != offset)  					throw new ModuleWriterException("Invalid Win32 resource string offset");    				var bytes = Encoding.Unicode.GetBytes(s);  				if (bytes.Length / 2 > ushort.MaxValue)  					throw new ModuleWriterException("Win32 resource entry name is too long");  				writer.Write((ushort)(bytes.Length / 2));  				writer.Write(bytes);  				offset += 2 + (uint)bytes.Length;  			}
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: return 16 + (uint)(named.Count + ids.Count) * 8;
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: return 16 + (uint)(named.Count + ids.Count) * 8;
Magic Number,dnlib.DotNet.Writer,Win32ResourcesChunk,C:\repos\0xd4d_dnlib\src\DotNet\Writer\Win32ResourcesChunk.cs,WriteTo,The following statement contains a magic number: return 16;
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadChar,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadChar,The following statement contains a magic number: while (true) {  				bytes[0] = self.ReadByte();  				if (twoBytes)  					bytes[1] = self.ReadByte();  				int x = decoder.GetChars(bytes' 0' twoBytes ? 2 : 1' chars' 0);  				if (x != 0)  					break;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadDecimal,The following statement contains a magic number: var bits = new int[4] {  				reader.ReadInt32()'	// lo  				reader.ReadInt32()'	// mid  				reader.ReadInt32()'	// hi  				reader.ReadInt32()'	// flags  			};
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  				if (pos + 1 < pos || pos + 1 >= len) {  					val = 0;  					return false;  				}  				val = (uint)(((b & 0x3F) << 8) | reader.ReadByte());  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: if (pos + 3 < pos || pos + 3 >= len) {  				val = 0;  				return false;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: if (pos + 3 < pos || pos + 3 >= len) {  				val = 0;  				return false;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: val = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  					(reader.ReadByte() << 8) | reader.ReadByte());
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: val = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  					(reader.ReadByte() << 8) | reader.ReadByte());
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedUInt32,The following statement contains a magic number: val = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  					(reader.ReadByte() << 8) | reader.ReadByte());
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xC0) == 0x80) {  				if (pos + 1 < pos || pos + 1 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x3F) << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x2000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  				if (pos + 3 < pos || pos + 3 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  						(reader.ReadByte() << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x10000000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  				if (pos + 3 < pos || pos + 3 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  						(reader.ReadByte() << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x10000000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  				if (pos + 3 < pos || pos + 3 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  						(reader.ReadByte() << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x10000000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  				if (pos + 3 < pos || pos + 3 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  						(reader.ReadByte() << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x10000000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,ReadCompressedInt32,The following statement contains a magic number: if ((b & 0xE0) == 0xC0) {  				if (pos + 3 < pos || pos + 3 >= len) {  					val = 0;  					return false;  				}  				uint tmp = (uint)(((b & 0x1F) << 24) | (reader.ReadByte() << 16) |  						(reader.ReadByte() << 8) | reader.ReadByte());  				if ((tmp & 1) != 0)  					val = -0x10000000 | (int)(tmp >> 1);  				else  					val = (int)(tmp >> 1);  				return true;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,Read7BitEncodedUInt32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  				byte b = reader.ReadByte();  				val |= (uint)(b & 0x7F) << bits;  				if ((b & 0x80) == 0)  					return val;  				bits += 7;  			}
Magic Number,dnlib.IO,IOExtensions,C:\repos\0xd4d_dnlib\src\IO\FileOffset.cs,Read7BitEncodedUInt32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  				byte b = reader.ReadByte();  				val |= (uint)(b & 0x7F) << bits;  				if ((b & 0x80) == 0)  					return val;  				bits += 7;  			}
Magic Number,dnlib.IO,ImageStreamCreator,C:\repos\0xd4d_dnlib\src\IO\ImageStreamCreator.cs,ImageStreamCreator,The following statement contains a magic number: if (p == 4 || p == 6 || p == 128)  				isUnix = true;
Magic Number,dnlib.IO,ImageStreamCreator,C:\repos\0xd4d_dnlib\src\IO\ImageStreamCreator.cs,ImageStreamCreator,The following statement contains a magic number: if (p == 4 || p == 6 || p == 128)  				isUnix = true;
Magic Number,dnlib.IO,ImageStreamCreator,C:\repos\0xd4d_dnlib\src\IO\ImageStreamCreator.cs,ImageStreamCreator,The following statement contains a magic number: if (p == 4 || p == 6 || p == 128)  				isUnix = true;
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt16,The following statement contains a magic number: return (short)(data[position++] | (data[position++] << 8));
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(data[position++] | (data[position++] << 8));
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt32,The following statement contains a magic number: if (position + 3 >= dataEnd)  				throw new IOException("Can't read one Int32");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt32,The following statement contains a magic number: return data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt32,The following statement contains a magic number: return data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt32,The following statement contains a magic number: return data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: if (position + 3 >= dataEnd)  				throw new IOException("Can't read one UInt32");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24));
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24));
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(data[position++] |  					(data[position++] << 8) |  					(data[position++] << 16) |  					(data[position++] << 24));
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: if (position + 7 >= dataEnd)  				throw new IOException("Can't read one Int64");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadInt64,The following statement contains a magic number: return (long)data[position++] |  					((long)data[position++] << 8) |  					((long)data[position++] << 16) |  					((long)data[position++] << 24) |  					((long)data[position++] << 32) |  					((long)data[position++] << 40) |  					((long)data[position++] << 48) |  					((long)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: if (position + 7 >= dataEnd)  				throw new IOException("Can't read one UInt64");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: return (ulong)data[position++] |  					((ulong)data[position++] << 8) |  					((ulong)data[position++] << 16) |  					((ulong)data[position++] << 24) |  					((ulong)data[position++] << 32) |  					((ulong)data[position++] << 40) |  					((ulong)data[position++] << 48) |  					((ulong)data[position++] << 56);
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadSingle,The following statement contains a magic number: if (position + 3 >= dataEnd)  				throw new IOException("Can't read one Single");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadSingle,The following statement contains a magic number: position += 4;
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadDouble,The following statement contains a magic number: if (position + 7 >= dataEnd)  				throw new IOException("Can't read one Double");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadDouble,The following statement contains a magic number: position += 8;
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadString,The following statement contains a magic number: if (position + chars * 2 < position || (chars != 0 && position + chars * 2 - 1 >= dataEnd))  				throw new IOException("Not enough space to read the string");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadString,The following statement contains a magic number: if (position + chars * 2 < position || (chars != 0 && position + chars * 2 - 1 >= dataEnd))  				throw new IOException("Not enough space to read the string");
Magic Number,dnlib.IO,MemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\MemoryImageStream.cs,ReadString,The following statement contains a magic number: position += chars * 2;
Magic Number,dnlib.IO,Windows,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The following statement contains a magic number: using (var fileHandle = CreateFile(creator.theFileName' GENERIC_READ' FILE_SHARE_READ' IntPtr.Zero' OPEN_EXISTING' FILE_ATTRIBUTE_NORMAL' IntPtr.Zero)) {  					if (fileHandle.IsInvalid)  						throw new IOException(string.Format("Could not open file {0} for reading. Error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error()));    					uint sizeHi;  					uint sizeLo = GetFileSize(fileHandle' out sizeHi);  					int hr;  					if (sizeLo == INVALID_FILE_SIZE && (hr = Marshal.GetLastWin32Error()) != NO_ERROR)  						throw new IOException(string.Format("Could not get file size. File: {0}' error: {1:X8}"' creator.theFileName' hr));  					var fileSize = ((long)sizeHi << 32) | sizeLo;    					using (var fileMapping = CreateFileMapping(fileHandle' IntPtr.Zero' PAGE_READONLY | (mapAsImage ? SEC_IMAGE : 0)' 0' 0' null)) {  						if (fileMapping.IsInvalid)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not create a file mapping object. File: {0}' error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error()));  						creator.data = MapViewOfFile(fileMapping' FILE_MAP_READ' 0' 0' UIntPtr.Zero);  						if (creator.data == IntPtr.Zero)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1:X8}"' creator.theFileName' Marshal.GetLastWin32Error()));  						creator.dataLength = fileSize;  						creator.osType = OSType.Windows;  					}  				}
Magic Number,dnlib.IO,Unix,C:\repos\0xd4d_dnlib\src\IO\MemoryMappedFileStreamCreator.cs,Mmap,The following statement contains a magic number: try {  					if (fd < 0)  						throw new IOException(string.Format("Could not open file {0} for reading. Error: {1}"' creator.theFileName' fd));    					long size;  					IntPtr data;    					if (IntPtr.Size == 4) {  						size = lseek32(fd' 0' SEEK_END);  						if (size == -1)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not get length of {0} (lseek failed): {1}"' creator.theFileName' Marshal.GetLastWin32Error()));    						data = mmap32(IntPtr.Zero' (IntPtr)size' PROT_READ' MAP_PRIVATE' fd' 0);  						if (data == new IntPtr(-1) || data == IntPtr.Zero)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1}"' creator.theFileName' Marshal.GetLastWin32Error()));  					}  					else {  						size = lseek64(fd' 0' SEEK_END);  						if (size == -1)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not get length of {0} (lseek failed): {1}"' creator.theFileName' Marshal.GetLastWin32Error()));    						data = mmap64(IntPtr.Zero' (IntPtr)size' PROT_READ' MAP_PRIVATE' fd' 0);  						if (data == new IntPtr(-1) || data == IntPtr.Zero)  							throw new MemoryMappedIONotSupportedException(string.Format("Could not map file {0}. Error: {1}"' creator.theFileName' Marshal.GetLastWin32Error()));  					}    					creator.data = data;  					creator.dataLength = size;  					creator.origDataLength = creator.dataLength;  					creator.osType = OSType.Unix;  				}  				finally {  					if (fd >= 0)  						close(fd);  				}
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadInt16,The following statement contains a magic number: currentAddr += 2;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadUInt16,The following statement contains a magic number: currentAddr += 2;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadInt32,The following statement contains a magic number: if (currentAddr + 3 >= endAddr)  				throw new IOException("Can't read one Int32");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadInt32,The following statement contains a magic number: currentAddr += 4;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: if (currentAddr + 3 >= endAddr)  				throw new IOException("Can't read one UInt32");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadUInt32,The following statement contains a magic number: currentAddr += 4;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadInt64,The following statement contains a magic number: if (currentAddr + 7 >= endAddr)  				throw new IOException("Can't read one Int64");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadInt64,The following statement contains a magic number: currentAddr += 8;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: if (currentAddr + 7 >= endAddr)  				throw new IOException("Can't read one UInt64");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadUInt64,The following statement contains a magic number: currentAddr += 8;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadSingle,The following statement contains a magic number: if (currentAddr + 3 >= endAddr)  				throw new IOException("Can't read one Single");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadSingle,The following statement contains a magic number: currentAddr += 4;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadDouble,The following statement contains a magic number: if (currentAddr + 7 >= endAddr)  				throw new IOException("Can't read one Double");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadDouble,The following statement contains a magic number: currentAddr += 8;
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadString,The following statement contains a magic number: if (IntPtr.Size == 4 && (uint)chars > (uint)int.MaxValue)  				throw new IOException("Not enough space to read the string");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadString,The following statement contains a magic number: if (currentAddr + chars * 2 < currentAddr || (chars != 0 && currentAddr + chars * 2 - 1 >= endAddr))  				throw new IOException("Not enough space to read the string");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadString,The following statement contains a magic number: if (currentAddr + chars * 2 < currentAddr || (chars != 0 && currentAddr + chars * 2 - 1 >= endAddr))  				throw new IOException("Not enough space to read the string");
Magic Number,dnlib.IO,UnmanagedMemoryImageStream,C:\repos\0xd4d_dnlib\src\IO\UnmanagedMemoryImageStream.cs,ReadString,The following statement contains a magic number: currentAddr += chars * 2;
Magic Number,dnlib.PE,PEExtensions,C:\repos\0xd4d_dnlib\src\PE\IPEImage.cs,CalculatePECheckSum,The following statement contains a magic number: for (long i = 0; i < length; i += 2) {  				if (i == checkSumOffset) {  					reader.ReadUInt32();  					i += 2;  					continue;  				}  				checkSum += reader.ReadUInt16();  				checkSum = (ushort)(checkSum + (checkSum >> 16));  			}
Magic Number,dnlib.PE,PEExtensions,C:\repos\0xd4d_dnlib\src\PE\IPEImage.cs,CalculatePECheckSum,The following statement contains a magic number: for (long i = 0; i < length; i += 2) {  				if (i == checkSumOffset) {  					reader.ReadUInt32();  					i += 2;  					continue;  				}  				checkSum += reader.ReadUInt16();  				checkSum = (ushort)(checkSum + (checkSum >> 16));  			}
Magic Number,dnlib.PE,PEExtensions,C:\repos\0xd4d_dnlib\src\PE\IPEImage.cs,CalculatePECheckSum,The following statement contains a magic number: for (long i = 0; i < length; i += 2) {  				if (i == checkSumOffset) {  					reader.ReadUInt32();  					i += 2;  					continue;  				}  				checkSum += reader.ReadUInt16();  				checkSum = (ushort)(checkSum + (checkSum >> 16));  			}
Magic Number,dnlib.PE,PEExtensions,C:\repos\0xd4d_dnlib\src\PE\IPEImage.cs,CalculatePECheckSum,The following statement contains a magic number: return (uint)cks + (uint)(cks >> 32);
Magic Number,dnlib.PE,ImageNTHeaders,C:\repos\0xd4d_dnlib\src\PE\ImageNTHeaders.cs,CreateImageOptionalHeader,The following statement contains a magic number: reader.Position -= 2;
Magic Number,dnlib.PE,ImageOptionalHeader32,C:\repos\0xd4d_dnlib\src\PE\ImageOptionalHeader32.cs,ImageOptionalHeader32,The following statement contains a magic number: for (int i = 0; i < dataDirectories.Length; i++) {  				uint len = (uint)(reader.Position - startOffset);  				if (len + 8 <= totalSize)  					dataDirectories[i] = new ImageDataDirectory(reader' verify);  				else  					dataDirectories[i] = new ImageDataDirectory();  			}
Magic Number,dnlib.PE,ImageOptionalHeader64,C:\repos\0xd4d_dnlib\src\PE\ImageOptionalHeader64.cs,ImageOptionalHeader64,The following statement contains a magic number: for (int i = 0; i < dataDirectories.Length; i++) {  				uint len = (uint)(reader.Position - startOffset);  				if (len + 8 <= totalSize)  					dataDirectories[i] = new ImageDataDirectory(reader' verify);  				else  					dataDirectories[i] = new ImageDataDirectory();  			}
Magic Number,dnlib.PE,ImageSectionHeader,C:\repos\0xd4d_dnlib\src\PE\ImageSectionHeader.cs,ImageSectionHeader,The following statement contains a magic number: this.name = reader.ReadBytes(8);
Magic Number,dnlib.PE,PEImage,C:\repos\0xd4d_dnlib\src\PE\PEImage.cs,Initialize,The following statement contains a magic number: win32Resources.ReadOriginalValue = () => {  				var dataDir = peInfo.ImageNTHeaders.OptionalHeader.DataDirectories[2];  				if (dataDir.VirtualAddress == 0 || dataDir.Size == 0)  					return null;  				return new Win32ResourcesPE(this);  			};
Magic Number,dnlib.PE,PEImage,C:\repos\0xd4d_dnlib\src\PE\PEImage.cs,ReadImageDebugDirectories,The following statement contains a magic number: try {  				if (6 >= ImageNTHeaders.OptionalHeader.DataDirectories.Length)  					return emptyImageDebugDirectories;  				var dataDir = ImageNTHeaders.OptionalHeader.DataDirectories[6];  				if (dataDir.VirtualAddress == 0)  					return emptyImageDebugDirectories;  				using (var reader = imageStream.Clone()) {  					if (dataDir.Size > reader.Length)  						return emptyImageDebugDirectories;  					int count = (int)(dataDir.Size / 0x1C);  					if (count == 0)  						return emptyImageDebugDirectories;  					reader.Position = (long)ToFileOffset(dataDir.VirtualAddress);  					if (reader.Position + dataDir.Size > reader.Length)  						return emptyImageDebugDirectories;  					var res = new ImageDebugDirectory[count];  					for (int i = 0; i < res.Length; i++)  						res[i] = new ImageDebugDirectory(reader' true);  					return res;  				}  			}  			catch (IOException) {  			}
Magic Number,dnlib.PE,PEImage,C:\repos\0xd4d_dnlib\src\PE\PEImage.cs,ReadImageDebugDirectories,The following statement contains a magic number: try {  				if (6 >= ImageNTHeaders.OptionalHeader.DataDirectories.Length)  					return emptyImageDebugDirectories;  				var dataDir = ImageNTHeaders.OptionalHeader.DataDirectories[6];  				if (dataDir.VirtualAddress == 0)  					return emptyImageDebugDirectories;  				using (var reader = imageStream.Clone()) {  					if (dataDir.Size > reader.Length)  						return emptyImageDebugDirectories;  					int count = (int)(dataDir.Size / 0x1C);  					if (count == 0)  						return emptyImageDebugDirectories;  					reader.Position = (long)ToFileOffset(dataDir.VirtualAddress);  					if (reader.Position + dataDir.Size > reader.Length)  						return emptyImageDebugDirectories;  					var res = new ImageDebugDirectory[count];  					for (int i = 0; i < res.Length; i++)  						res[i] = new ImageDebugDirectory(reader' true);  					return res;  				}  			}  			catch (IOException) {  			}
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,Initialize,The following statement contains a magic number: if (depth > MAX_DIR_DEPTH || !reader.CanRead(16)) {  				InitializeDefault();  				return;  			}
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,Initialize,The following statement contains a magic number: if (!reader.CanRead(total * 8)) {  				InitializeDefault();  				return;  			}
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < total; i++' offset += 8) {  				reader.Position = offset;  				uint nameOrId = reader.ReadUInt32();  				uint dataOrDirectory = reader.ReadUInt32();  				ResourceName name;  				if ((nameOrId & 0x80000000) != 0)  					name = new ResourceName(ReadString(reader' nameOrId & 0x7FFFFFFF) ?? string.Empty);  				else  					name = new ResourceName((int)nameOrId);    				if ((dataOrDirectory & 0x80000000) == 0)  					dataInfos.Add(new EntryInfo(name' dataOrDirectory));  				else  					dirInfos.Add(new EntryInfo(name' dataOrDirectory & 0x7FFFFFFF));  			}
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,ReadString,The following statement contains a magic number: if (!reader.CanRead(2))  				return null;
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,ReadString,The following statement contains a magic number: int sizeInBytes = size * 2;
Magic Number,dnlib.W32Resources,ResourceDirectoryPE,C:\repos\0xd4d_dnlib\src\W32Resources\ResourceDirectory.cs,ReadResourceData,The following statement contains a magic number: if (reader.CanRead(16)) {  				RVA rva = (RVA)reader.ReadUInt32();  				uint size = reader.ReadUInt32();  				uint codePage = reader.ReadUInt32();  				uint reserved = reader.ReadUInt32();  				var dataReader = resources.CreateDataReader_NoLock(rva' size);  				data = new ResourceData(info.name' dataReader' codePage' reserved);  			}  			else  				data = new ResourceData(info.name' MemoryImageStream.CreateEmpty());
Magic Number,dnlib.W32Resources,Win32ResourcesPE,C:\repos\0xd4d_dnlib\src\W32Resources\Win32Resources.cs,Win32ResourcesPE,The following statement contains a magic number: if (rsrcReader != null)  				this.rsrcReader = rsrcReader;  			else {  				var dataDir = peImage.ImageNTHeaders.OptionalHeader.DataDirectories[2];  				if (dataDir.VirtualAddress != 0 && dataDir.Size != 0)  					this.rsrcReader = peImage.CreateStream(dataDir.VirtualAddress' dataDir.Size);  				else  					this.rsrcReader = MemoryImageStream.CreateEmpty();  			}
Missing Default,dnlib.DotNet,Extensions,C:\repos\0xd4d_dnlib\src\DotNet\AssemblyHashAlgorithm.cs,GetCorLibTypeSig,The following switch statement is missing a default case: switch (name) {  			case "Void":	return self.Void;  			case "Boolean":	return self.Boolean;  			case "Char":	return self.Char;  			case "SByte":	return self.SByte;  			case "Byte":	return self.Byte;  			case "Int16":	return self.Int16;  			case "UInt16":	return self.UInt16;  			case "Int32":	return self.Int32;  			case "UInt32":	return self.UInt32;  			case "Int64":	return self.Int64;  			case "UInt64":	return self.UInt64;  			case "Single":	return self.Single;  			case "Double":	return self.Double;  			case "String":	return self.String;  			case "TypedReference": return self.TypedReference;  			case "IntPtr":	return self.IntPtr;  			case "UIntPtr":	return self.UIntPtr;  			case "Object":	return self.Object;  			}
Missing Default,dnlib.DotNet,FullNameCreator,C:\repos\0xd4d_dnlib\src\DotNet\FullNameCreator.cs,AddIdentifier,The following switch statement is missing a default case: switch (c) {  					case ''':  					case '+':  					case '&':  					case '*':  					case '[':  					case ']':  					case '\\':  						sb.Append('\\');  						break;  					}
Missing Default,dnlib.DotNet,MemberFinder,C:\repos\0xd4d_dnlib\src\DotNet\MemberFinder.cs,Add,The following switch statement is missing a default case: switch (instr.OpCode.OperandType) {  				case OperandType.InlineTok:  				case OperandType.InlineType:  				case OperandType.InlineMethod:  				case OperandType.InlineField:  					Push(instr.Operand);  					break;    				case OperandType.InlineSig:  					Add(instr.Operand as CallingConventionSig);  					break;    				case OperandType.InlineVar:  				case OperandType.ShortInlineVar:  					var local = instr.Operand as Local;  					if (local != null) {  						Add(local);  						break;  					}  					var arg = instr.Operand as Parameter;  					if (arg != null) {  						Add(arg);  						break;  					}  					break;  				}
Missing Default,dnlib.DotNet,MemberFinder,C:\repos\0xd4d_dnlib\src\DotNet\MemberFinder.cs,Add,The following switch statement is missing a default case: switch (mt.NativeType) {  			case NativeType.SafeArray:  				Add(((SafeArrayMarshalType)mt).UserDefinedSubType);  				break;    			case NativeType.CustomMarshaler:  				Add(((CustomMarshalType)mt).CustomMarshaler);  				break;  			}
Missing Default,dnlib.DotNet,ModuleDef,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDef.cs,GetPointerSize,The following switch statement is missing a default case: switch (flags & (ComImageFlags._32BitRequired | ComImageFlags._32BitPreferred)) {  			case 0:  				// Machine and ILOnly flag should be checked  				break;    			case ComImageFlags._32BitPreferred:  				// Illegal  				break;    			case ComImageFlags._32BitRequired:  				// x86 image (32-bit process)  				return 4;    			case ComImageFlags._32BitRequired | ComImageFlags._32BitPreferred:  				// Platform neutral but prefers to be 32-bit  				return prefer32bitPointerSize;  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveToken,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Module:			return ResolveModule(rid);  			case Table.TypeRef:			return ResolveTypeRef(rid);  			case Table.TypeDef:			return ResolveTypeDef(rid);  			case Table.Field:			return ResolveField(rid);  			case Table.Method:			return ResolveMethod(rid);  			case Table.Param:			return ResolveParam(rid);  			case Table.InterfaceImpl:	return ResolveInterfaceImpl(rid' gpContext);  			case Table.MemberRef:		return ResolveMemberRef(rid' gpContext);  			case Table.Constant:		return ResolveConstant(rid);  			case Table.DeclSecurity:	return ResolveDeclSecurity(rid);  			case Table.ClassLayout:		return ResolveClassLayout(rid);  			case Table.StandAloneSig:	return ResolveStandAloneSig(rid' gpContext);  			case Table.Event:			return ResolveEvent(rid);  			case Table.Property:		return ResolveProperty(rid);  			case Table.ModuleRef:		return ResolveModuleRef(rid);  			case Table.TypeSpec:		return ResolveTypeSpec(rid' gpContext);  			case Table.ImplMap:			return ResolveImplMap(rid);  			case Table.Assembly:		return ResolveAssembly(rid);  			case Table.AssemblyRef:		return ResolveAssemblyRef(rid);  			case Table.File:			return ResolveFile(rid);  			case Table.ExportedType:	return ResolveExportedType(rid);  			case Table.ManifestResource:return ResolveManifestResource(rid);  			case Table.GenericParam:	return ResolveGenericParam(rid);  			case Table.MethodSpec:		return ResolveMethodSpec(rid' gpContext);  			case Table.GenericParamConstraint: return ResolveGenericParamConstraint(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveTypeDefOrRef,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.TypeDef:		return ResolveTypeDef(rid);  			case Table.TypeRef:		return ResolveTypeRef(rid);  			case Table.TypeSpec:	return ResolveTypeSpec(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveHasConstant,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Field:	return ResolveField(rid);  			case Table.Param:	return ResolveParam(rid);  			case Table.Property:return ResolveProperty(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveHasCustomAttribute,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Method:		return ResolveMethod(rid);  			case Table.Field:		return ResolveField(rid);  			case Table.TypeRef:		return ResolveTypeRef(rid);  			case Table.TypeDef:		return ResolveTypeDef(rid);  			case Table.Param:		return ResolveParam(rid);  			case Table.InterfaceImpl: return ResolveInterfaceImpl(rid' gpContext);  			case Table.MemberRef:	return ResolveMemberRef(rid' gpContext);  			case Table.Module:		return ResolveModule(rid);  			case Table.DeclSecurity:return ResolveDeclSecurity(rid);  			case Table.Property:	return ResolveProperty(rid);  			case Table.Event:		return ResolveEvent(rid);  			case Table.StandAloneSig: return ResolveStandAloneSig(rid' gpContext);  			case Table.ModuleRef:	return ResolveModuleRef(rid);  			case Table.TypeSpec:	return ResolveTypeSpec(rid' gpContext);  			case Table.Assembly:	return ResolveAssembly(rid);  			case Table.AssemblyRef:	return ResolveAssemblyRef(rid);  			case Table.File:		return ResolveFile(rid);  			case Table.ExportedType:return ResolveExportedType(rid);  			case Table.ManifestResource: return ResolveManifestResource(rid);  			case Table.GenericParam:return ResolveGenericParam(rid);  			case Table.MethodSpec:	return ResolveMethodSpec(rid' gpContext);  			case Table.GenericParamConstraint: return ResolveGenericParamConstraint(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveHasFieldMarshal,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Field:	return ResolveField(rid);  			case Table.Param:	return ResolveParam(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveHasDeclSecurity,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.TypeDef:		return ResolveTypeDef(rid);  			case Table.Method:		return ResolveMethod(rid);  			case Table.Assembly:	return ResolveAssembly(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveMemberRefParent,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.TypeDef:		return ResolveTypeDef(rid);  			case Table.TypeRef:		return ResolveTypeRef(rid);  			case Table.ModuleRef:	return ResolveModuleRef(rid);  			case Table.Method:		return ResolveMethod(rid);  			case Table.TypeSpec:	return ResolveTypeSpec(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveHasSemantic,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Event:		return ResolveEvent(rid);  			case Table.Property:	return ResolveProperty(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveMethodDefOrRef,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Method:		return ResolveMethod(rid);  			case Table.MemberRef:	return ResolveMemberRef(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveMemberForwarded,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Field:	return ResolveField(rid);  			case Table.Method:	return ResolveMethod(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveImplementation,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.File:			return ResolveFile(rid);  			case Table.AssemblyRef:		return ResolveAssemblyRef(rid);  			case Table.ExportedType:	return ResolveExportedType(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveCustomAttributeType,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Method:		return ResolveMethod(rid);  			case Table.MemberRef:	return ResolveMemberRef(rid' gpContext);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveResolutionScope,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Module:		return ResolveModule(rid);  			case Table.ModuleRef:	return ResolveModuleRef(rid);  			case Table.AssemblyRef:	return ResolveAssemblyRef(rid);  			case Table.TypeRef:		return ResolveTypeRef(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ResolveTypeOrMethodDef,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.TypeDef:	return ResolveTypeDef(rid);  			case Table.Method:	return ResolveMethod(rid);  			}
Missing Default,dnlib.DotNet,ModuleDefMD,C:\repos\0xd4d_dnlib\src\DotNet\ModuleDefMD.cs,ReadBlob,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.Field:  				var fieldRow = TablesStream.ReadFieldRow(rid);  				if (fieldRow == null)  					break;  				return BlobStream.Read(fieldRow.Signature);    			case Table.Method:  				var methodRow = TablesStream.ReadMethodRow(rid);  				if (methodRow == null)  					break;  				return BlobStream.Read(methodRow.Signature);    			case Table.MemberRef:  				var mrRow = TablesStream.ReadMemberRefRow(rid);  				if (mrRow == null)  					break;  				return BlobStream.Read(mrRow.Signature);    			case Table.Constant:  				var constRow = TablesStream.ReadConstantRow(rid);  				if (constRow == null)  					break;  				return BlobStream.Read(constRow.Value);    			case Table.CustomAttribute:  				var caRow = TablesStream.ReadCustomAttributeRow(rid);  				if (caRow == null)  					break;  				return BlobStream.Read(caRow.Value);    			case Table.FieldMarshal:  				var fmRow = TablesStream.ReadFieldMarshalRow(rid);  				if (fmRow == null)  					break;  				return BlobStream.Read(fmRow.NativeType);    			case Table.DeclSecurity:  				var dsRow = TablesStream.ReadDeclSecurityRow(rid);  				if (dsRow == null)  					break;  				return BlobStream.Read(dsRow.PermissionSet);    			case Table.StandAloneSig:  				var sasRow = TablesStream.ReadStandAloneSigRow(rid);  				if (sasRow == null)  					break;  				return BlobStream.Read(sasRow.Signature);    			case Table.Property:  				var propRow = TablesStream.ReadPropertyRow(rid);  				if (propRow == null)  					break;  				return BlobStream.Read(propRow.Type);    			case Table.TypeSpec:  				var tsRow = TablesStream.ReadTypeSpecRow(rid);  				if (tsRow == null)  					break;  				return BlobStream.Read(tsRow.Signature);    			case Table.Assembly:  				var asmRow = TablesStream.ReadAssemblyRow(rid);  				if (asmRow == null)  					break;  				return BlobStream.Read(asmRow.PublicKey);    			case Table.AssemblyRef:  				// HashValue is also in the #Blob but the user has to read it some other way  				var asmRefRow = TablesStream.ReadAssemblyRefRow(rid);  				if (asmRefRow == null)  					break;  				return BlobStream.Read(asmRefRow.PublicKeyOrToken);    			case Table.File:  				var fileRow = TablesStream.ReadFileRow(rid);  				if (fileRow == null)  					break;  				return BlobStream.Read(fileRow.HashValue);    			case Table.MethodSpec:  				var msRow = TablesStream.ReadMethodSpecRow(rid);  				if (msRow == null)  					break;  				return BlobStream.Read(msRow.Instantiation);  			}
Missing Default,dnlib.DotNet,ReflectionTypeNameParser,C:\repos\0xd4d_dnlib\src\DotNet\TypeNameParser.cs,ReadAssemblyRef,The following switch statement is missing a default case: switch (key.ToUpperInvariant()) {  				case "VERSION":  					asmRef.Version = Utils.ParseVersion(value);  					break;    				case "CONTENTTYPE":  					if (value.Equals("WindowsRuntime"' StringComparison.OrdinalIgnoreCase))  						asmRef.ContentType = AssemblyAttributes.ContentType_WindowsRuntime;  					else  						asmRef.ContentType = AssemblyAttributes.ContentType_Default;  					break;    				case "RETARGETABLE":  					if (value.Equals("Yes"' StringComparison.OrdinalIgnoreCase))  						asmRef.IsRetargetable = true;  					else  						asmRef.IsRetargetable = false;  					break;    				case "PUBLICKEY":  					if (value.Equals("null"' StringComparison.OrdinalIgnoreCase) ||  						value.Equals("neutral"' StringComparison.OrdinalIgnoreCase))  						asmRef.PublicKeyOrToken = new PublicKey();  					else  						asmRef.PublicKeyOrToken = PublicKeyBase.CreatePublicKey(Utils.ParseBytes(value));  					break;    				case "PUBLICKEYTOKEN":  					if (value.Equals("null"' StringComparison.OrdinalIgnoreCase) ||  						value.Equals("neutral"' StringComparison.OrdinalIgnoreCase))  						asmRef.PublicKeyOrToken = new PublicKeyToken();  					else  						asmRef.PublicKeyOrToken = PublicKeyBase.CreatePublicKeyToken(Utils.ParseBytes(value));  					break;    				case "CULTURE":  				case "LANGUAGE":  					if (value.Equals("neutral"' StringComparison.OrdinalIgnoreCase))  						asmRef.Culture = UTF8String.Empty;  					else  						asmRef.Culture = value;  					break;  				}
Missing Default,dnlib.DotNet.Emit,DynamicMethodBodyReader,C:\repos\0xd4d_dnlib\src\DotNet\Emit\DynamicMethodBodyReader.cs,ResolveTypeDefOrRef,The following switch statement is missing a default case: switch (MDToken.ToTable(token)) {  			case Table.TypeDef:  			case Table.TypeRef:  			case Table.TypeSpec:  				return ImportType(rid);  			}
Missing Default,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,CreateLdcI4,The following switch statement is missing a default case: switch (value) {  			case -1:return OpCodes.Ldc_I4_M1.ToInstruction();  			case 0: return OpCodes.Ldc_I4_0.ToInstruction();  			case 1: return OpCodes.Ldc_I4_1.ToInstruction();  			case 2: return OpCodes.Ldc_I4_2.ToInstruction();  			case 3: return OpCodes.Ldc_I4_3.ToInstruction();  			case 4: return OpCodes.Ldc_I4_4.ToInstruction();  			case 5: return OpCodes.Ldc_I4_5.ToInstruction();  			case 6: return OpCodes.Ldc_I4_6.ToInstruction();  			case 7: return OpCodes.Ldc_I4_7.ToInstruction();  			case 8: return OpCodes.Ldc_I4_8.ToInstruction();  			}
Missing Default,dnlib.DotNet.Emit,Instruction,C:\repos\0xd4d_dnlib\src\DotNet\Emit\Instruction.cs,GetParameterIndex,The following switch statement is missing a default case: switch (OpCode.Code) {  			case Code.Ldarg_0: return 0;  			case Code.Ldarg_1: return 1;  			case Code.Ldarg_2: return 2;  			case Code.Ldarg_3: return 3;    			case Code.Starg:  			case Code.Starg_S:  			case Code.Ldarga:  			case Code.Ldarga_S:  			case Code.Ldarg:  			case Code.Ldarg_S:  				var parameter = Operand as Parameter;  				if (parameter != null)  					return parameter.Index;  				break;  			}
Missing Default,dnlib.DotNet.Emit,MethodBodyReaderBase,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodBodyReaderBase.cs,FixBranches,The following switch statement is missing a default case: switch (instr.OpCode.OperandType) {  				case OperandType.InlineBrTarget:  				case OperandType.ShortInlineBrTarget:  					instr.Operand = GetInstruction((uint)instr.Operand);  					break;    				case OperandType.InlineSwitch:  					var uintTargets = (IList<uint>)instr.Operand;  					var targets = new Instruction[uintTargets.Count];  					for (int i = 0; i < uintTargets.Count; i++)  						targets[i] = GetInstruction(uintTargets[i]);  					instr.Operand = targets;  					break;  				}
Missing Default,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyMacros,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Beq_S:  					instr.OpCode = OpCodes.Beq;  					break;    				case Code.Bge_S:  					instr.OpCode = OpCodes.Bge;  					break;    				case Code.Bge_Un_S:  					instr.OpCode = OpCodes.Bge_Un;  					break;    				case Code.Bgt_S:  					instr.OpCode = OpCodes.Bgt;  					break;    				case Code.Bgt_Un_S:  					instr.OpCode = OpCodes.Bgt_Un;  					break;    				case Code.Ble_S:  					instr.OpCode = OpCodes.Ble;  					break;    				case Code.Ble_Un_S:  					instr.OpCode = OpCodes.Ble_Un;  					break;    				case Code.Blt_S:  					instr.OpCode = OpCodes.Blt;  					break;    				case Code.Blt_Un_S:  					instr.OpCode = OpCodes.Blt_Un;  					break;    				case Code.Bne_Un_S:  					instr.OpCode = OpCodes.Bne_Un;  					break;    				case Code.Br_S:  					instr.OpCode = OpCodes.Br;  					break;    				case Code.Brfalse_S:  					instr.OpCode = OpCodes.Brfalse;  					break;    				case Code.Brtrue_S:  					instr.OpCode = OpCodes.Brtrue;  					break;    				case Code.Ldarg_0:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 0);  					break;    				case Code.Ldarg_1:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 1);  					break;    				case Code.Ldarg_2:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 2);  					break;    				case Code.Ldarg_3:  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = ReadList(parameters' 3);  					break;    				case Code.Ldarg_S:  					instr.OpCode = OpCodes.Ldarg;  					break;    				case Code.Ldarga_S:  					instr.OpCode = OpCodes.Ldarga;  					break;    				case Code.Ldc_I4_0:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 0;  					break;    				case Code.Ldc_I4_1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 1;  					break;    				case Code.Ldc_I4_2:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 2;  					break;    				case Code.Ldc_I4_3:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 3;  					break;    				case Code.Ldc_I4_4:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 4;  					break;    				case Code.Ldc_I4_5:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 5;  					break;    				case Code.Ldc_I4_6:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 6;  					break;    				case Code.Ldc_I4_7:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 7;  					break;    				case Code.Ldc_I4_8:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = 8;  					break;    				case Code.Ldc_I4_M1:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = -1;  					break;    				case Code.Ldc_I4_S:  					instr.OpCode = OpCodes.Ldc_I4;  					instr.Operand = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldloc_0:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Ldloc_1:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Ldloc_2:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Ldloc_3:  					instr.OpCode = OpCodes.Ldloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Ldloc_S:  					instr.OpCode = OpCodes.Ldloc;  					break;    				case Code.Ldloca_S:  					instr.OpCode = OpCodes.Ldloca;  					break;    				case Code.Leave_S:  					instr.OpCode = OpCodes.Leave;  					break;    				case Code.Starg_S:  					instr.OpCode = OpCodes.Starg;  					break;    				case Code.Stloc_0:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 0);  					break;    				case Code.Stloc_1:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 1);  					break;    				case Code.Stloc_2:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 2);  					break;    				case Code.Stloc_3:  					instr.OpCode = OpCodes.Stloc;  					instr.Operand = ReadList(locals' 3);  					break;    				case Code.Stloc_S:  					instr.OpCode = OpCodes.Stloc;  					break;  				}
Missing Default,dnlib.DotNet.Emit,MethodUtils,C:\repos\0xd4d_dnlib\src\DotNet\Emit\MethodUtils.cs,SimplifyBranches,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Beq_S:	instr.OpCode = OpCodes.Beq; break;  				case Code.Bge_S:	instr.OpCode = OpCodes.Bge; break;  				case Code.Bgt_S:	instr.OpCode = OpCodes.Bgt; break;  				case Code.Ble_S:	instr.OpCode = OpCodes.Ble; break;  				case Code.Blt_S:	instr.OpCode = OpCodes.Blt; break;  				case Code.Bne_Un_S:	instr.OpCode = OpCodes.Bne_Un; break;  				case Code.Bge_Un_S:	instr.OpCode = OpCodes.Bge_Un; break;  				case Code.Bgt_Un_S:	instr.OpCode = OpCodes.Bgt_Un; break;  				case Code.Ble_Un_S:	instr.OpCode = OpCodes.Ble_Un; break;  				case Code.Blt_Un_S:	instr.OpCode = OpCodes.Blt_Un; break;  				case Code.Br_S:		instr.OpCode = OpCodes.Br; break;  				case Code.Brfalse_S:instr.OpCode = OpCodes.Brfalse; break;  				case Code.Brtrue_S:	instr.OpCode = OpCodes.Brtrue; break;  				case Code.Leave_S:	instr.OpCode = OpCodes.Leave; break;  				}
Missing Default,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,InitializeInternal,The following switch statement is missing a default case: switch (sh.Name) {  					case "#Strings":  						if (stringsStream == null) {  							stringsStream = new StringsStream(imageStream' sh);  							imageStream = null;  							newAllStreams.Add(stringsStream);  							continue;  						}  						break;    					case "#US":  						if (usStream == null) {  							usStream = new USStream(imageStream' sh);  							imageStream = null;  							newAllStreams.Add(usStream);  							continue;  						}  						break;    					case "#Blob":  						if (blobStream == null) {  							blobStream = new BlobStream(imageStream' sh);  							imageStream = null;  							newAllStreams.Add(blobStream);  							continue;  						}  						break;    					case "#GUID":  						if (guidStream == null) {  							guidStream = new GuidStream(imageStream' sh);  							imageStream = null;  							newAllStreams.Add(guidStream);  							continue;  						}  						break;    					case "#~":  						if (tablesStream == null) {  							tablesStream = new TablesStream(imageStream' sh);  							imageStream = null;  							newAllStreams.Add(tablesStream);  							continue;  						}  						break;    					case "#!":  						if (peImage == null)  							break;  						if (hotStreams == null)  							hotStreams = new List<HotStream>();  						fullStream = peImage.CreateFullStream();  						hotStream = HotStream.Create(hotHeapVersion' imageStream' sh' fullStream' mdStream.FileOffset + sh.Offset);  						fullStream = null;  						hotStreams.Add(hotStream);  						newAllStreams.Add(hotStream);  						hotStream = null;  						imageStream = null;  						continue;    					case "#Pdb":  						if (isStandalonePortablePdb && pdbStream == null) {  							pdbStream = new PdbStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(pdbStream);  							continue;  						}  						break;  					}
Missing Default,dnlib.DotNet.MD,CompressedMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\CompressedMetaData.cs,InitializeHotStreams,The following switch statement is missing a default case: switch (hotHeap.HeapType) {  					case HeapType.Strings:  						if (hotStrings == null) {  							hotHeap.Initialize(offsetMask);  							hotStrings = hotHeap;  						}  						break;    					case HeapType.Guid:  						if (hotGuid == null) {  							hotHeap.Initialize(offsetMask);  							hotGuid = hotHeap;  						}  						break;    					case HeapType.Blob:  						if (hotBlob == null) {  							hotHeap.Initialize(offsetMask);  							hotBlob = hotHeap;  						}  						break;    					case HeapType.US:  						if (hotUs == null) {  							hotHeap.Initialize(offsetMask);  							hotUs = hotHeap;  						}  						break;  					}
Missing Default,dnlib.DotNet.MD,DotNetTableSizes,C:\repos\0xd4d_dnlib\src\DotNet\MD\DotNetTableSizes.cs,GetSize,The following switch statement is missing a default case: switch (columnSize) {  				case ColumnSize.Byte:	return 1;  				case ColumnSize.Int16:	return 2;  				case ColumnSize.UInt16:	return 2;  				case ColumnSize.Int32:	return 4;  				case ColumnSize.UInt32:	return 4;  				case ColumnSize.Strings:return bigStrings ? 4 : 2;  				case ColumnSize.GUID:	return bigGuid ? 4 : 2;  				case ColumnSize.Blob:	return bigBlob ? 4 : 2;  				}
Missing Default,dnlib.DotNet.MD,ENCMetaData,C:\repos\0xd4d_dnlib\src\DotNet\MD\ENCMetaData.cs,InitializeInternal,The following switch statement is missing a default case: switch (sh.Name.ToUpperInvariant()) {  					case "#STRINGS":  						if (stringsStream == null) {  							stringsStream = new StringsStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(stringsStream);  							continue;  						}  						break;    					case "#US":  						if (usStream == null) {  							usStream = new USStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(usStream);  							continue;  						}  						break;    					case "#BLOB":  						if (blobStream == null) {  							blobStream = new BlobStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(blobStream);  							continue;  						}  						break;    					case "#GUID":  						if (guidStream == null) {  							guidStream = new GuidStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(guidStream);  							continue;  						}  						break;    					case "#~":	// Only if #Schema is used  					case "#-":  						if (tablesStream == null) {  							tablesStream = new TablesStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(tablesStream);  							continue;  						}  						break;    					case "#PDB":  						// Case sensitive comparison since it's a stream that's not read by the CLR'  						// only by other libraries eg. System.Reflection.Metadata.  						if (isStandalonePortablePdb && pdbStream == null && sh.Name == "#Pdb") {  							pdbStream = new PdbStream(imageStream' sh);  							imageStream = null;  							allStreams.Add(pdbStream);  							continue;  						}  						break;  					}
Missing Default,dnlib.DotNet.Pdb.Dss,ImageStreamIStream,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\ImageStreamIStream.cs,Seek,The following switch statement is missing a default case: switch ((STREAM_SEEK)dwOrigin) {  			case STREAM_SEEK.SET:  				stream.Position = dlibMove;  				break;    			case STREAM_SEEK.CUR:  				stream.Position += dlibMove;  				break;    			case STREAM_SEEK.END:  				stream.Position = stream.Length + dlibMove;  				break;  			}
Missing Default,dnlib.DotNet.Pdb.Dss,StreamIStream,C:\repos\0xd4d_dnlib\src\DotNet\Pdb\Dss\StreamIStream.cs,Seek,The following switch statement is missing a default case: switch ((STREAM_SEEK)dwOrigin) {  			case STREAM_SEEK.SET:  				stream.Position = dlibMove;  				break;    			case STREAM_SEEK.CUR:  				stream.Position += dlibMove;  				break;    			case STREAM_SEEK.END:  				stream.Position = stream.Length + dlibMove;  				break;  			}
Missing Default,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,ToUInt64,The following switch statement is missing a default case: switch (Type.GetTypeCode(o.GetType())) {  			case TypeCode.Boolean:  				result = (bool)o ? 1UL : 0UL;  				return true;    			case TypeCode.Char:  				result = (ushort)(char)o;  				return true;    			case TypeCode.SByte:  				result = (ulong)(sbyte)o;  				return true;    			case TypeCode.Byte:  				result = (byte)o;  				return true;    			case TypeCode.Int16:  				result = (ulong)(short)o;  				return true;    			case TypeCode.UInt16:  				result = (ushort)o;  				return true;    			case TypeCode.Int32:  				result = (ulong)(int)o;  				return true;    			case TypeCode.UInt32:  				result = (uint)o;  				return true;    			case TypeCode.Int64:  				result = (ulong)(long)o;  				return true;    			case TypeCode.UInt64:  				result = (ulong)o;  				return true;    			case TypeCode.Single:  				result = (ulong)(float)o;  				return true;    			case TypeCode.Double:  				result = (ulong)(double)o;  				return true;  			}
Missing Default,dnlib.DotNet.Writer,CustomAttributeWriter,C:\repos\0xd4d_dnlib\src\DotNet\Writer\CustomAttributeWriter.cs,ToDouble,The following switch statement is missing a default case: switch (Type.GetTypeCode(o.GetType())) {  			case TypeCode.Boolean:  				result = (bool)o ? 1 : 0;  				return true;    			case TypeCode.Char:  				result = (ushort)(char)o;  				return true;    			case TypeCode.SByte:  				result = (sbyte)o;  				return true;    			case TypeCode.Byte:  				result = (byte)o;  				return true;    			case TypeCode.Int16:  				result = (short)o;  				return true;    			case TypeCode.UInt16:  				result = (ushort)o;  				return true;    			case TypeCode.Int32:  				result = (int)o;  				return true;    			case TypeCode.UInt32:  				result = (uint)o;  				return true;    			case TypeCode.Int64:  				result = (long)o;  				return true;    			case TypeCode.UInt64:  				result = (ulong)o;  				return true;    			case TypeCode.Single:  				result = (float)o;  				return true;    			case TypeCode.Double:  				result = (double)o;  				return true;  			}
Missing Default,dnlib.DotNet.Writer,MaxStackCalculator,C:\repos\0xd4d_dnlib\src\DotNet\Writer\MaxStackCalculator.cs,Calculate,The following switch statement is missing a default case: switch (instr.OpCode.FlowControl) {  				case FlowControl.Branch:  					WriteStack(instr.Operand as Instruction' stack);  					resetStack = true;  					break;    				case FlowControl.Call:  					if (instr.OpCode.Code == Code.Jmp)  						resetStack = true;  					break;    				case FlowControl.Cond_Branch:  					if (instr.OpCode.Code == Code.Switch) {  						var targets = instr.Operand as IList<Instruction>;  						if (targets != null) {  							foreach (var target in targets)  								WriteStack(target' stack);  						}  					}  					else  						WriteStack(instr.Operand as Instruction' stack);  					break;    				case FlowControl.Return:  				case FlowControl.Throw:  					resetStack = true;  					break;  				}
Missing Default,dnlib.IO,BinaryReaderStream,C:\repos\0xd4d_dnlib\src\IO\BinaryReaderStream.cs,Seek,The following switch statement is missing a default case: switch (origin) {  			case SeekOrigin.Begin:	Position = offset; break;  			case SeekOrigin.Current:Position += offset; break;  			case SeekOrigin.End:	Position = Length + offset; break;  			}
