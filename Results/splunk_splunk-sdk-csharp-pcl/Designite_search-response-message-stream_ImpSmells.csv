Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,Splunk.Examples.Authenticate,Program,C:\repos\splunk_splunk-sdk-csharp-pcl\examples\search-response-message-stream\Program.cs,Run,The method has an empty catch block.
Magic Number,Splunk.Examples.Authenticate,Program,C:\repos\splunk_splunk-sdk-csharp-pcl\examples\search-response-message-stream\Program.cs,Run,The following statement contains a magic number: try {                  //// This code shows how to execute a long-running search job.                  //// We query for the first 100'000 records from Splunk's _internal index and choose a 3 second                  //// delay to improve the chances our retry loop runs more than once.                    int delay = 3000;                  var job = await service.Jobs.CreateAsync("search index=_internal | head 100000"' mode: ExecutionMode.Normal);                    for (int count = 1; ; ++count)                  {                      try                      {                          await job.TransitionAsync(DispatchState.Done' delay);                          break;                      }                      catch (TaskCanceledException)                      {                          // Consider logging the fact that the operation is taking a long time' around count * (delay / 1000) seconds so far                          // Also consider stopping the query' if it runs too long                      }                      // Consider increasing the delay on each iteration                  }                    //// Now that the search job is done we can print the results.                  //// This example shows how to fetch raw search results in a specific format: JSON. Select an alternative format by                  //// by selecting the OutputMode you like.                    using (var message = await job.GetSearchResponseMessageAsync(outputMode: OutputMode.Json))                  {                      Console.Error.WriteLine("Search results (Press Control-C to cancel:");                      var content = await message.Content.ReadAsStringAsync();                      Console.WriteLine(content);                  }              }              finally              {                  service.LogOffAsync().Wait();              }
