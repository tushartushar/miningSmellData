Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 15
Complex Method,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,Cyclomatic complexity of the method is 24
Complex Method,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,ToString,Cyclomatic complexity of the method is 8
Long Statement,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,Window_Closing,The length of the statement  "			if (Settings.Default.RememberTimerOnClose && start != DateTime.MinValue && end != DateTime.MinValue && DateTime.Now < end) { " is 124.
Complex Conditional,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressState,The conditional expression  "os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1))"  is complex.
Complex Conditional,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressValue,The conditional expression  "os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1))"  is complex.
Complex Conditional,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The conditional expression  "Settings.Default.RememberTimerOnClose && Settings.Default.TimerRunning && Settings.Default.CurrentStart != DateTime.MinValue && Settings.Default.CurrentEnd != DateTime.MinValue && DateTime.Now > Settings.Default.CurrentStart && DateTime.Now < Settings.Default.CurrentEnd"  is complex.
Complex Conditional,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,Window_Closing,The conditional expression  "Settings.Default.RememberTimerOnClose && start != DateTime.MinValue && end != DateTime.MinValue && DateTime.Now < end"  is complex.
Empty Catch Block,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressState,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressValue,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,Window_Closing,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The method has an empty catch block.
Empty Catch Block,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The method has an empty catch block.
Magic Number,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressState,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1)))  	try {  		TaskbarList.SetProgressState (hwnd' (TBPFLAG)state);  	}  	catch (Exception) {  	}  
Magic Number,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressState,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1)))  	try {  		TaskbarList.SetProgressState (hwnd' (TBPFLAG)state);  	}  	catch (Exception) {  	}  
Magic Number,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressValue,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1)))  	try {  		TaskbarList.SetProgressValue (hwnd' current' maximum);  	}  	catch (Exception) {  	}  
Magic Number,OrzeszekTimer,TaskbarUtility,C:\repos\tqheel_teqtimer\Orzeszek Timer\TaskbarUtility.cs,SetProgressValue,The following statement contains a magic number: if (os.Platform == PlatformID.Win32NT && (os.Version.Major > 6 || (os.Version.Major == 6 && os.Version.Minor >= 1)))  	try {  		TaskbarList.SetProgressValue (hwnd' current' maximum);  	}  	catch (Exception) {  	}  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: try {  	string exePath = Assembly.GetExecutingAssembly ().Location;  	string exeDir = new FileInfo (exePath).DirectoryName;  	string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  	foreach (string soundFilePath in Directory.GetFiles (soundsDir' "*.wav")) {  		MenuItem soundMenuItem = new MenuItem ();  		soundMenuItem.Header = System.IO.Path.GetFileNameWithoutExtension (soundFilePath);  		soundMenuItem.Tag = System.IO.Path.GetFileName (soundFilePath);  		soundMenuItem.IsCheckable = true;  		soundMenuItem.Click += new RoutedEventHandler (SoundMenuItem_Click);  		MainContextMenu.Items.Insert (MainContextMenu.Items.Count - 2' soundMenuItem);  	}  }  catch (Exception) {  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: foreach (string soundFilePath in Directory.GetFiles (soundsDir' "*.wav")) {  	MenuItem soundMenuItem = new MenuItem ();  	soundMenuItem.Header = System.IO.Path.GetFileNameWithoutExtension (soundFilePath);  	soundMenuItem.Tag = System.IO.Path.GetFileName (soundFilePath);  	soundMenuItem.IsCheckable = true;  	soundMenuItem.Click += new RoutedEventHandler (SoundMenuItem_Click);  	MainContextMenu.Items.Insert (MainContextMenu.Items.Count - 2' soundMenuItem);  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: MainContextMenu.Items.Insert (MainContextMenu.Items.Count - 2' soundMenuItem);  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: while (true) {  	DispatcherOperation op = Dispatcher.BeginInvoke (new Action (delegate () {  		DateTime now = DateTime.Now;  		TimeSpan elapsed = now - start;  		TimeSpan remaining = end - now;  		TimeSpan total = end - start;  		if (remaining.Ticks <= 0) {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = "Timer expired";  			if (notifyIcon != null)  				notifyIcon.Text = "Timer expired";  			Title = "Orzeszek Timer";  			MainProgressBar.Value = 100;  			TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  			if (!notified)  				try {  					notified = true;  					string exePath = Assembly.GetExecutingAssembly ().Location;  					string exeDir = new FileInfo (exePath).DirectoryName;  					string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  					SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  					if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  						sp.PlaySync ();  					else if (Settings.Default.LoopNotification) {  						if (notification != null)  							notification.Stop ();  						notification = sp;  						notification.PlayLooping ();  						StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  					}  					else  						sp.Play ();  					if (Settings.Default.PopupOnFinish) {  						Show ();  						WindowState = restorableWindowState;  						Activate ();  						Topmost = true;  						Topmost = false;  					}  					if (Settings.Default.FlashOnFinish)  						TaskbarUtility.StartFlash (interopHelper.Handle);  				}  				catch (Exception) {  				}  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  				closeFromTray = true;  				Close ();  			}  			else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  				start = DateTime.Now;  				end = start.Add (Settings.Default.LastTimeSpan);  				notified = false;  			}  			else {  				updaterThread.Abort ();  				updaterThread = null;  			}  		}  		else {  			if (!MainTextBox.IsFocused)  				MainTextBox.Text = ToString (remaining);  			if (notifyIcon != null)  				notifyIcon.Text = ToString (remaining);  			Title = MainTextBox.Text;  			MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  			TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  		}  	}));  	op.Wait ();  	Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: if (remaining.Ticks <= 0) {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = "Timer expired";  	if (notifyIcon != null)  		notifyIcon.Text = "Timer expired";  	Title = "Orzeszek Timer";  	MainProgressBar.Value = 100;  	TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  	if (!notified)  		try {  			notified = true;  			string exePath = Assembly.GetExecutingAssembly ().Location;  			string exeDir = new FileInfo (exePath).DirectoryName;  			string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  			SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  				sp.PlaySync ();  			else if (Settings.Default.LoopNotification) {  				if (notification != null)  					notification.Stop ();  				notification = sp;  				notification.PlayLooping ();  				StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  			}  			else  				sp.Play ();  			if (Settings.Default.PopupOnFinish) {  				Show ();  				WindowState = restorableWindowState;  				Activate ();  				Topmost = true;  				Topmost = false;  			}  			if (Settings.Default.FlashOnFinish)  				TaskbarUtility.StartFlash (interopHelper.Handle);  		}  		catch (Exception) {  		}  	if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  		closeFromTray = true;  		Close ();  	}  	else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  		start = DateTime.Now;  		end = start.Add (Settings.Default.LastTimeSpan);  		notified = false;  	}  	else {  		updaterThread.Abort ();  		updaterThread = null;  	}  }  else {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = ToString (remaining);  	if (notifyIcon != null)  		notifyIcon.Text = ToString (remaining);  	Title = MainTextBox.Text;  	MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  	TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: if (remaining.Ticks <= 0) {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = "Timer expired";  	if (notifyIcon != null)  		notifyIcon.Text = "Timer expired";  	Title = "Orzeszek Timer";  	MainProgressBar.Value = 100;  	TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  	if (!notified)  		try {  			notified = true;  			string exePath = Assembly.GetExecutingAssembly ().Location;  			string exeDir = new FileInfo (exePath).DirectoryName;  			string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  			SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  				sp.PlaySync ();  			else if (Settings.Default.LoopNotification) {  				if (notification != null)  					notification.Stop ();  				notification = sp;  				notification.PlayLooping ();  				StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  			}  			else  				sp.Play ();  			if (Settings.Default.PopupOnFinish) {  				Show ();  				WindowState = restorableWindowState;  				Activate ();  				Topmost = true;  				Topmost = false;  			}  			if (Settings.Default.FlashOnFinish)  				TaskbarUtility.StartFlash (interopHelper.Handle);  		}  		catch (Exception) {  		}  	if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  		closeFromTray = true;  		Close ();  	}  	else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  		start = DateTime.Now;  		end = start.Add (Settings.Default.LastTimeSpan);  		notified = false;  	}  	else {  		updaterThread.Abort ();  		updaterThread = null;  	}  }  else {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = ToString (remaining);  	if (notifyIcon != null)  		notifyIcon.Text = ToString (remaining);  	Title = MainTextBox.Text;  	MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  	TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: if (remaining.Ticks <= 0) {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = "Timer expired";  	if (notifyIcon != null)  		notifyIcon.Text = "Timer expired";  	Title = "Orzeszek Timer";  	MainProgressBar.Value = 100;  	TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  	if (!notified)  		try {  			notified = true;  			string exePath = Assembly.GetExecutingAssembly ().Location;  			string exeDir = new FileInfo (exePath).DirectoryName;  			string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  			SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  				sp.PlaySync ();  			else if (Settings.Default.LoopNotification) {  				if (notification != null)  					notification.Stop ();  				notification = sp;  				notification.PlayLooping ();  				StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  			}  			else  				sp.Play ();  			if (Settings.Default.PopupOnFinish) {  				Show ();  				WindowState = restorableWindowState;  				Activate ();  				Topmost = true;  				Topmost = false;  			}  			if (Settings.Default.FlashOnFinish)  				TaskbarUtility.StartFlash (interopHelper.Handle);  		}  		catch (Exception) {  		}  	if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  		closeFromTray = true;  		Close ();  	}  	else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  		start = DateTime.Now;  		end = start.Add (Settings.Default.LastTimeSpan);  		notified = false;  	}  	else {  		updaterThread.Abort ();  		updaterThread = null;  	}  }  else {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = ToString (remaining);  	if (notifyIcon != null)  		notifyIcon.Text = ToString (remaining);  	Title = MainTextBox.Text;  	MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  	TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: if (remaining.Ticks <= 0) {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = "Timer expired";  	if (notifyIcon != null)  		notifyIcon.Text = "Timer expired";  	Title = "Orzeszek Timer";  	MainProgressBar.Value = 100;  	TaskbarUtility.SetProgressState (interopHelper.Handle' TaskbarProgressState.NoProgress);  	if (!notified)  		try {  			notified = true;  			string exePath = Assembly.GetExecutingAssembly ().Location;  			string exeDir = new FileInfo (exePath).DirectoryName;  			string soundsDir = System.IO.Path.Combine (exeDir' "Sounds");  			SoundPlayer sp = new SoundPlayer (System.IO.Path.Combine (soundsDir' Settings.Default.AlarmSound));  			if (Settings.Default.CloseOnFinish || closeOnFinishThisTime)  				sp.PlaySync ();  			else if (Settings.Default.LoopNotification) {  				if (notification != null)  					notification.Stop ();  				notification = sp;  				notification.PlayLooping ();  				StopNotificationButton.Visibility = System.Windows.Visibility.Visible;  			}  			else  				sp.Play ();  			if (Settings.Default.PopupOnFinish) {  				Show ();  				WindowState = restorableWindowState;  				Activate ();  				Topmost = true;  				Topmost = false;  			}  			if (Settings.Default.FlashOnFinish)  				TaskbarUtility.StartFlash (interopHelper.Handle);  		}  		catch (Exception) {  		}  	if (Settings.Default.CloseOnFinish || closeOnFinishThisTime) {  		closeFromTray = true;  		Close ();  	}  	else if (Settings.Default.LoopTimer && Settings.Default.LastTimeSpan != TimeSpan.Zero) {  		start = DateTime.Now;  		end = start.Add (Settings.Default.LastTimeSpan);  		notified = false;  	}  	else {  		updaterThread.Abort ();  		updaterThread = null;  	}  }  else {  	if (!MainTextBox.IsFocused)  		MainTextBox.Text = ToString (remaining);  	if (notifyIcon != null)  		notifyIcon.Text = ToString (remaining);  	Title = MainTextBox.Text;  	MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  	TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: MainProgressBar.Value = 100;  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: MainProgressBar.Value = Math.Min (100.0' 100.0 * elapsed.Ticks / total.Ticks);  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: TaskbarUtility.SetProgressValue (interopHelper.Handle' (ulong)MainProgressBar.Value' 100);  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateInterface,The following statement contains a magic number: Thread.Sleep ((int)Math.Max (Math.Min ((end - start).TotalSeconds / MainProgressBar.ActualWidth' 1000)' 10));  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: try {  	TimeSpan ts = TimeSpan.Zero;  	string[] parts = Regex.Split (s' @"(?<=\d+\s*[a-zA-Z]+)\s*(?=\d+\s*[a-zA-Z]+)");  	foreach (string p in parts)  		if (!string.IsNullOrEmpty (p)) {  			string[] subparts = Regex.Split (p' @"(?<=\d+)\s*(?=[a-zA-Z]+)");  			if (subparts.Length == 2)  				switch (subparts [1].ToLower () [0]) {  				case 'd':  					ts = ts.Add (TimeSpan.FromDays (double.Parse (subparts [0])));  					break;  				case 'h':  					ts = ts.Add (TimeSpan.FromHours (double.Parse (subparts [0])));  					break;  				case 'm':  					ts = ts.Add (TimeSpan.FromMinutes (double.Parse (subparts [0])));  					break;  				case 's':  					ts = ts.Add (TimeSpan.FromSeconds (double.Parse (subparts [0])));  					break;  				default:  					throw new FormatException ();  				}  			else  				throw new FormatException ();  		}  	return ts;  }  catch (Exception) {  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: foreach (string p in parts)  	if (!string.IsNullOrEmpty (p)) {  		string[] subparts = Regex.Split (p' @"(?<=\d+)\s*(?=[a-zA-Z]+)");  		if (subparts.Length == 2)  			switch (subparts [1].ToLower () [0]) {  			case 'd':  				ts = ts.Add (TimeSpan.FromDays (double.Parse (subparts [0])));  				break;  			case 'h':  				ts = ts.Add (TimeSpan.FromHours (double.Parse (subparts [0])));  				break;  			case 'm':  				ts = ts.Add (TimeSpan.FromMinutes (double.Parse (subparts [0])));  				break;  			case 's':  				ts = ts.Add (TimeSpan.FromSeconds (double.Parse (subparts [0])));  				break;  			default:  				throw new FormatException ();  			}  		else  			throw new FormatException ();  	}  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: if (!string.IsNullOrEmpty (p)) {  	string[] subparts = Regex.Split (p' @"(?<=\d+)\s*(?=[a-zA-Z]+)");  	if (subparts.Length == 2)  		switch (subparts [1].ToLower () [0]) {  		case 'd':  			ts = ts.Add (TimeSpan.FromDays (double.Parse (subparts [0])));  			break;  		case 'h':  			ts = ts.Add (TimeSpan.FromHours (double.Parse (subparts [0])));  			break;  		case 'm':  			ts = ts.Add (TimeSpan.FromMinutes (double.Parse (subparts [0])));  			break;  		case 's':  			ts = ts.Add (TimeSpan.FromSeconds (double.Parse (subparts [0])));  			break;  		default:  			throw new FormatException ();  		}  	else  		throw new FormatException ();  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: if (subparts.Length == 2)  	switch (subparts [1].ToLower () [0]) {  	case 'd':  		ts = ts.Add (TimeSpan.FromDays (double.Parse (subparts [0])));  		break;  	case 'h':  		ts = ts.Add (TimeSpan.FromHours (double.Parse (subparts [0])));  		break;  	case 'm':  		ts = ts.Add (TimeSpan.FromMinutes (double.Parse (subparts [0])));  		break;  	case 's':  		ts = ts.Add (TimeSpan.FromSeconds (double.Parse (subparts [0])));  		break;  	default:  		throw new FormatException ();  	}  else  	throw new FormatException ();  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: try {  	TimeSpan ts = TimeSpan.Zero;  	string[] parts = s.Split (new char[] {  		'.''  		':''  		'-''  		' ''  		'/''  		'\\''  		'\f''  		'\n''  		'\r''  		'\t''  		'\v''  		'\x85'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < parts.Length; i++) {  		double d = double.Parse (parts [i]);  		switch (parts.Length - i) {  		case 1:  			ts = ts.Add (TimeSpan.FromSeconds (d));  			break;  		case 2:  			ts = ts.Add (TimeSpan.FromMinutes (d));  			break;  		case 3:  			ts = ts.Add (TimeSpan.FromHours (d));  			break;  		case 4:  			ts = ts.Add (TimeSpan.FromDays (d));  			break;  		default:  			throw new FormatException ();  		}  	}  	return ts;  }  catch (Exception) {  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: try {  	TimeSpan ts = TimeSpan.Zero;  	string[] parts = s.Split (new char[] {  		'.''  		':''  		'-''  		' ''  		'/''  		'\\''  		'\f''  		'\n''  		'\r''  		'\t''  		'\v''  		'\x85'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < parts.Length; i++) {  		double d = double.Parse (parts [i]);  		switch (parts.Length - i) {  		case 1:  			ts = ts.Add (TimeSpan.FromSeconds (d));  			break;  		case 2:  			ts = ts.Add (TimeSpan.FromMinutes (d));  			break;  		case 3:  			ts = ts.Add (TimeSpan.FromHours (d));  			break;  		case 4:  			ts = ts.Add (TimeSpan.FromDays (d));  			break;  		default:  			throw new FormatException ();  		}  	}  	return ts;  }  catch (Exception) {  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: try {  	TimeSpan ts = TimeSpan.Zero;  	string[] parts = s.Split (new char[] {  		'.''  		':''  		'-''  		' ''  		'/''  		'\\''  		'\f''  		'\n''  		'\r''  		'\t''  		'\v''  		'\x85'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < parts.Length; i++) {  		double d = double.Parse (parts [i]);  		switch (parts.Length - i) {  		case 1:  			ts = ts.Add (TimeSpan.FromSeconds (d));  			break;  		case 2:  			ts = ts.Add (TimeSpan.FromMinutes (d));  			break;  		case 3:  			ts = ts.Add (TimeSpan.FromHours (d));  			break;  		case 4:  			ts = ts.Add (TimeSpan.FromDays (d));  			break;  		default:  			throw new FormatException ();  		}  	}  	return ts;  }  catch (Exception) {  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: for (int i = 0; i < parts.Length; i++) {  	double d = double.Parse (parts [i]);  	switch (parts.Length - i) {  	case 1:  		ts = ts.Add (TimeSpan.FromSeconds (d));  		break;  	case 2:  		ts = ts.Add (TimeSpan.FromMinutes (d));  		break;  	case 3:  		ts = ts.Add (TimeSpan.FromHours (d));  		break;  	case 4:  		ts = ts.Add (TimeSpan.FromDays (d));  		break;  	default:  		throw new FormatException ();  	}  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: for (int i = 0; i < parts.Length; i++) {  	double d = double.Parse (parts [i]);  	switch (parts.Length - i) {  	case 1:  		ts = ts.Add (TimeSpan.FromSeconds (d));  		break;  	case 2:  		ts = ts.Add (TimeSpan.FromMinutes (d));  		break;  	case 3:  		ts = ts.Add (TimeSpan.FromHours (d));  		break;  	case 4:  		ts = ts.Add (TimeSpan.FromDays (d));  		break;  	default:  		throw new FormatException ();  	}  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: for (int i = 0; i < parts.Length; i++) {  	double d = double.Parse (parts [i]);  	switch (parts.Length - i) {  	case 1:  		ts = ts.Add (TimeSpan.FromSeconds (d));  		break;  	case 2:  		ts = ts.Add (TimeSpan.FromMinutes (d));  		break;  	case 3:  		ts = ts.Add (TimeSpan.FromHours (d));  		break;  	case 4:  		ts = ts.Add (TimeSpan.FromDays (d));  		break;  	default:  		throw new FormatException ();  	}  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: switch (parts.Length - i) {  case 1:  	ts = ts.Add (TimeSpan.FromSeconds (d));  	break;  case 2:  	ts = ts.Add (TimeSpan.FromMinutes (d));  	break;  case 3:  	ts = ts.Add (TimeSpan.FromHours (d));  	break;  case 4:  	ts = ts.Add (TimeSpan.FromDays (d));  	break;  default:  	throw new FormatException ();  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: switch (parts.Length - i) {  case 1:  	ts = ts.Add (TimeSpan.FromSeconds (d));  	break;  case 2:  	ts = ts.Add (TimeSpan.FromMinutes (d));  	break;  case 3:  	ts = ts.Add (TimeSpan.FromHours (d));  	break;  case 4:  	ts = ts.Add (TimeSpan.FromDays (d));  	break;  default:  	throw new FormatException ();  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,FromString,The following statement contains a magic number: switch (parts.Length - i) {  case 1:  	ts = ts.Add (TimeSpan.FromSeconds (d));  	break;  case 2:  	ts = ts.Add (TimeSpan.FromMinutes (d));  	break;  case 3:  	ts = ts.Add (TimeSpan.FromHours (d));  	break;  case 4:  	ts = ts.Add (TimeSpan.FromDays (d));  	break;  default:  	throw new FormatException ();  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: if (Settings.Default.ScaleInterface) {  	double sizeFactor = Math.Min (ActualHeight / 150' ActualWidth / 300);  	double progressBarThickness = Math.Max (1' sizeFactor * 10);  	double fontSize = Math.Max (1' sizeFactor * 16);  	MainTextBox.Margin = new Thickness (progressBarThickness);  	MainTextBox.FontSize = fontSize;  	StopNotificationButton.Margin = new Thickness (progressBarThickness);  	StopNotificationButton.FontSize = fontSize;  }  else {  	MainTextBox.Margin = new Thickness (10);  	MainTextBox.FontSize = 16;  }  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: MainTextBox.Margin = new Thickness (10);  
Magic Number,OrzeszekTimer,MainWindow,C:\repos\tqheel_teqtimer\Orzeszek Timer\MainWindow.xaml.cs,UpdateScaleInterface,The following statement contains a magic number: MainTextBox.FontSize = 16;  
