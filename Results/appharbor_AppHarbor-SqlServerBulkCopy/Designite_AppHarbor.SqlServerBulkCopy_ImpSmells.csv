Implementation smell,Namespace,Class,File,Method,Description
Long Method,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The method has 216 lines of code.
Complex Method,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,Cyclomatic complexity of the method is 15
Long Statement,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The length of the statement  "				{ "includesystemtables"' "include copying system tables (by default these are excluded). You should only use this in conjunction with 'onlytables' to opt in specific system tables"' x => includeSystemTables = x != null }' " is 221.
Long Statement,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The length of the statement  "				{ "cleardstdatabase"' "clears the destination database before copying the data"' x => clearDestinationDatabase = x != null }' " is 125.
Long Statement,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The length of the statement  "					throw new OptionException("you can either opt-in for tables (--onlytables) or opt-out (--ignoretables) but not both at once."' "onlytables"); " is 141.
Magic Number,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The following statement contains a magic number: const double batchDataSize = 100000;
Magic Number,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The following statement contains a magic number: foreach (var table in tables)  			{  				using (var connection = new SqlConnection(sourceConnectionString))  				{  					double rowBatchSize = 10000;  					double rows = 0;  					double dataSize;  					connection.Open();  					using (var command = connection.CreateCommand())  					{  						command.CommandText = string.Format("exec sp_spaceused '{0}'"' table.FullName);  						using (var reader = command.ExecuteReader())  						{  							reader.Read();  							var rowString = (string)reader["rows"];  							rows = double.Parse(rowString);  							var dataSizeString = (string)reader["data"];  							dataSize = double.Parse(dataSizeString.Split(' ').First()); //kB  							if (rows > 0 && dataSize > 0)  							{  								double rowSize = dataSize / rows;  								rowBatchSize = (int)(batchDataSize / rowSize);  							}  						}  					}    					if (rows > 0)  					{  						var columns = GetColumnNames(connection' table.Schema' table.Name);    						Console.Write("Copying {0} - {1} rows' {2:0.00} MB: "' table.FullName' rows' dataSize/1024);  						using (var command = connection.CreateCommand())  						{  							command.CommandText = string.Format("select * from {0}"' table.FullName);  							using (var reader = command.ExecuteReader())  							{  								using (var bulkCopy = new SqlBulkCopy(  									destinationConnectionString' SqlBulkCopyOptions.KeepIdentity | SqlBulkCopyOptions.TableLock))  								{  									bulkCopy.NotifyAfter = Math.Max((int)rows / 10' 1);  									bulkCopy.SqlRowsCopied += SqlRowsCopied;  									bulkCopy.DestinationTableName = table.FullName;  									bulkCopy.BatchSize = (int)rowBatchSize;  									bulkCopy.BulkCopyTimeout = int.MaxValue;  									foreach (var columnName in columns) {  										bulkCopy.ColumnMappings.Add(columnName' columnName);  									}    									bulkCopy.WriteToServer(reader);  								}  							}  						}  						Console.WriteLine();  					}  					else  					{  						Console.WriteLine("{0} had no rows"' table.FullName);  					}  				}  			}
Magic Number,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The following statement contains a magic number: foreach (var table in tables)  			{  				using (var connection = new SqlConnection(sourceConnectionString))  				{  					double rowBatchSize = 10000;  					double rows = 0;  					double dataSize;  					connection.Open();  					using (var command = connection.CreateCommand())  					{  						command.CommandText = string.Format("exec sp_spaceused '{0}'"' table.FullName);  						using (var reader = command.ExecuteReader())  						{  							reader.Read();  							var rowString = (string)reader["rows"];  							rows = double.Parse(rowString);  							var dataSizeString = (string)reader["data"];  							dataSize = double.Parse(dataSizeString.Split(' ').First()); //kB  							if (rows > 0 && dataSize > 0)  							{  								double rowSize = dataSize / rows;  								rowBatchSize = (int)(batchDataSize / rowSize);  							}  						}  					}    					if (rows > 0)  					{  						var columns = GetColumnNames(connection' table.Schema' table.Name);    						Console.Write("Copying {0} - {1} rows' {2:0.00} MB: "' table.FullName' rows' dataSize/1024);  						using (var command = connection.CreateCommand())  						{  							command.CommandText = string.Format("select * from {0}"' table.FullName);  							using (var reader = command.ExecuteReader())  							{  								using (var bulkCopy = new SqlBulkCopy(  									destinationConnectionString' SqlBulkCopyOptions.KeepIdentity | SqlBulkCopyOptions.TableLock))  								{  									bulkCopy.NotifyAfter = Math.Max((int)rows / 10' 1);  									bulkCopy.SqlRowsCopied += SqlRowsCopied;  									bulkCopy.DestinationTableName = table.FullName;  									bulkCopy.BatchSize = (int)rowBatchSize;  									bulkCopy.BulkCopyTimeout = int.MaxValue;  									foreach (var columnName in columns) {  										bulkCopy.ColumnMappings.Add(columnName' columnName);  									}    									bulkCopy.WriteToServer(reader);  								}  							}  						}  						Console.WriteLine();  					}  					else  					{  						Console.WriteLine("{0} had no rows"' table.FullName);  					}  				}  			}
Magic Number,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The following statement contains a magic number: foreach (var table in tables)  			{  				using (var connection = new SqlConnection(sourceConnectionString))  				{  					double rowBatchSize = 10000;  					double rows = 0;  					double dataSize;  					connection.Open();  					using (var command = connection.CreateCommand())  					{  						command.CommandText = string.Format("exec sp_spaceused '{0}'"' table.FullName);  						using (var reader = command.ExecuteReader())  						{  							reader.Read();  							var rowString = (string)reader["rows"];  							rows = double.Parse(rowString);  							var dataSizeString = (string)reader["data"];  							dataSize = double.Parse(dataSizeString.Split(' ').First()); //kB  							if (rows > 0 && dataSize > 0)  							{  								double rowSize = dataSize / rows;  								rowBatchSize = (int)(batchDataSize / rowSize);  							}  						}  					}    					if (rows > 0)  					{  						var columns = GetColumnNames(connection' table.Schema' table.Name);    						Console.Write("Copying {0} - {1} rows' {2:0.00} MB: "' table.FullName' rows' dataSize/1024);  						using (var command = connection.CreateCommand())  						{  							command.CommandText = string.Format("select * from {0}"' table.FullName);  							using (var reader = command.ExecuteReader())  							{  								using (var bulkCopy = new SqlBulkCopy(  									destinationConnectionString' SqlBulkCopyOptions.KeepIdentity | SqlBulkCopyOptions.TableLock))  								{  									bulkCopy.NotifyAfter = Math.Max((int)rows / 10' 1);  									bulkCopy.SqlRowsCopied += SqlRowsCopied;  									bulkCopy.DestinationTableName = table.FullName;  									bulkCopy.BatchSize = (int)rowBatchSize;  									bulkCopy.BulkCopyTimeout = int.MaxValue;  									foreach (var columnName in columns) {  										bulkCopy.ColumnMappings.Add(columnName' columnName);  									}    									bulkCopy.WriteToServer(reader);  								}  							}  						}  						Console.WriteLine();  					}  					else  					{  						Console.WriteLine("{0} had no rows"' table.FullName);  					}  				}  			}
Magic Number,AppHarbor.SqlServerBulkCopy,Program,C:\repos\appharbor_AppHarbor-SqlServerBulkCopy\src\AppHarbor.SqlServerBulkCopy\Program.cs,Main,The following statement contains a magic number: Console.WriteLine("Copy complete' total time {0} s"' watch.ElapsedMilliseconds/1000);
