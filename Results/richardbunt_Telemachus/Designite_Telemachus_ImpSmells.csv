Implementation smell,Namespace,Class,File,Method,Description
Long Method,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MechJebDataLinkHandler,The method has 143 lines of code.
Long Method,Telemachus,FlightDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlightDataLinkHandler,The method has 148 lines of code.
Long Method,Telemachus,TargetDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,TargetDataLinkHandler,The method has 128 lines of code.
Long Method,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The method has 129 lines of code.
Long Method,Telemachus,BodyDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,BodyDataLinkHandler,The method has 124 lines of code.
Long Method,Telemachus,OrbitDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,OrbitDataLinkHandler,The method has 100 lines of code.
Long Method,Telemachus,KSPWebSocketService,C:\repos\richardbunt_Telemachus\Telemachus\src\KSPWebSocketService.cs,SendDataUpdate,The method has 101 lines of code.
Long Method,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The method has 125 lines of code.
Long Method,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The method has 125 lines of code.
Long Method,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The method has 125 lines of code.
Complex Method,Telemachus,TelemachusBehaviour,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,LookForModsToInject,Cyclomatic complexity of the method is 14
Complex Method,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Complex Method,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,Cyclomatic complexity of the method is 16
Long Parameter List,Telemachus,APIEntry,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,APIEntry,The method has 6 parameters. Parameters: function' APIString' name' formatter' units' alwaysEvaluable
Long Parameter List,Telemachus,PlotableAPIEntry,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,PlotableAPIEntry,The method has 6 parameters. Parameters: function' APIString' name' formatter' units' alwaysEvaluable
Long Identifier,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,getStagingInfoType,The length of the parameter mechJebCoreGetComputerModuleMethodInfo is 38.
Long Identifier,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Identifier,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,surface,The length of the statement  "            Quaternion r = Quaternion.AngleAxis(float.Parse(dataSources.args[0])' Vector3.up) * Quaternion.AngleAxis(-float.Parse(dataSources.args[1])' Vector3.right); " is 155.
Long Statement,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,getStagingInfoType,The length of the statement  "                    MethodInfo mechJebCoreGetComputerModuleMethodInfo = mechJebCoreType.GetMethod("GetComputerModule"' new[] {typeof(string) } ); " is 125.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".html"] = new HTMLResponseContentType { contentType = HTMLContentType.TextContent' mimeType = "text/html" }; " is 122.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".css"] = new HTMLResponseContentType { contentType = HTMLContentType.TextContent' mimeType = "text/css" }; " is 120.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".js"] = new HTMLResponseContentType { contentType = HTMLContentType.TextContent' mimeType = "application/x-javascript" }; " is 135.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".jpg"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "image/jpeg" }; " is 124.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".jpeg"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "image/jpeg" }; " is 125.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".png"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "image/png" }; " is 123.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".gif"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "image/gif" }; " is 123.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".svg"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "image/svg+xml" }; " is 127.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".eot"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "application/vnd.ms-fontobject" }; " is 143.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".ttf"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "application/font-sfnt" }; " is 135.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".woff"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "application/font-woff" }; " is 136.
Long Statement,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,GetContentType,The length of the statement  "                contentTypes[".otf"] = new HTMLResponseContentType { contentType = HTMLContentType.BinaryContent' mimeType = "application/font-sfnt" }; " is 135.
Long Statement,Telemachus,PluginManager,C:\repos\richardbunt_Telemachus\Telemachus\src\PluginRegistration.cs,Register,The length of the statement  "            if (!typeof(IMinimalTelemachusPlugin).IsAssignableFrom(pluginType) && !pluginType.DoesMatchInterfaceOf(typeof(IMinimalTelemachusPlugin))) " is 137.
Long Statement,Telemachus,PluginManager,C:\repos\richardbunt_Telemachus\Telemachus\src\PluginRegistration.cs,Register,The length of the statement  "                throw new ArgumentException("Object " + toRegister.GetType().ToString() + " does not conform to the minimal interface"); " is 120.
Long Statement,Telemachus,PluginManager,C:\repos\richardbunt_Telemachus\Telemachus\src\PluginRegistration.cs,Register,The length of the statement  "            if (toRegister is IDeregisterableTelemachusPlugin || pluginType.DoesMatchInterfaceOf(typeof(IDeregisterableTelemachusPlugin))) " is 126.
Long Statement,Telemachus,PluginManager,C:\repos\richardbunt_Telemachus\Telemachus\src\PluginRegistration.cs,Register,The length of the statement  "            PluginLogger.print("Got plugin registration call for " + toRegister.GetType() + ".\n  Optional interfaces enabled: " + (optional_interfaces.Count == 0 ? "None" : string.Join("' "' optional_interfaces.ToArray()))); " is 213.
Long Statement,Telemachus,PluginManager,C:\repos\richardbunt_Telemachus\Telemachus\src\PluginRegistration.cs,ReadCommandList,The length of the statement  "            if (returnValue == null) throw new NullReferenceException("Telemachus could not read 'Commands' member from object " + pluginInstance.ToString()); " is 146.
Long Statement,Telemachus,TelemachusBehaviour,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,startDataLink,The length of the statement  "                        + string.Join("' "' serverConfig.ValidIpAddresses.Select(x => x.ToString() + ":" + serverConfig.port.ToString()).ToArray()) " is 123.
Long Statement,Telemachus,TelemachusBehaviour,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,readConfiguration,The length of the statement  "                PluginLogger.print("Port specified in configuration file '" + serverConfig.port + "' must be a value between 1 and 65535 inclusive"); " is 133.
Long Statement,Telemachus,TelemachusBehaviour,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,LookForModsToInject,The length of the statement  "            string foundMods = "Loading; Looking for compatible mods to inject registration....\nTelemachus compatible modules Found:\n"; " is 125.
Long Statement,Telemachus,KSPAPI,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,ProcessAPIString,The length of the statement  "                if (!cleanFlightMode) throw new VariableNotEvaluable(apistring' "Plugin variables not evaluable outside flight scene with vessel"); " is 131.
Long Statement,Telemachus,UpLinkDownLinkRate,C:\repos\richardbunt_Telemachus\Telemachus\src\UpLinkDownLinkRate.cs,average,The length of the statement  "                    DateTime newestTime = TIME_ARBITRARY' lastTime = TIME_ARBITRARY' thresholdTime = System.DateTime.Now.Subtract(TIME_SPAN_5_SECONDS); " is 131.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ToNullableType,The length of the statement  "                return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetGetMethodByExpression,The length of the statement  "                Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,Reflection,ReflectionUtils,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,GetSetMethodByExpression,The length of the statement  "                    Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Virtual Method Call from Constructor,Telemachus,DataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,DataLinkHandler,The constructor "DataLinkHandler" calls a virtual method "pausedHandler".
Empty Catch Block,Telemachus,IOPageResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\IOPageResponsibility.cs,process,The method has an empty catch block.
Empty Catch Block,Telemachus,KSPWebSocketService,C:\repos\richardbunt_Telemachus\Telemachus\src\KSPWebSocketService.cs,SendDataUpdate,The method has an empty catch block.
Magic Number,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MechJebDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      TelemachusBehaviour.instance.BroadcastMessage("queueDelayedAPI"' new DelayedAPIEntry(dataSources.Clone()'                          (x) =>                          {                              return reflectAttitudeTo(dataSources' double.Parse(dataSources.args[0])'                                  double.Parse(dataSources.args[1])' double.Parse(dataSources.args[2])                                  );                          })' UnityEngine.SendMessageOptions.DontRequireReceiver);                      return predictFailure(dataSources.vessel);                  }'                 "mj.surface2"' "Surface [double heading' double pitch' double roll]"' formatters.Default));
Magic Number,Telemachus,MechJebDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,predictFailure,The following statement contains a magic number: if (findMechJeb(vessel) == null)              {                  return 5;              }
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      pitch = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      yaw = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      roll = checkFlightStateParameters(float.Parse(dataSources.args[2]));                      x = checkFlightStateParameters(float.Parse(dataSources.args[3]));                      y = checkFlightStateParameters(float.Parse(dataSources.args[4]));                      z = checkFlightStateParameters(float.Parse(dataSources.args[5]));                        return 0;                  }'                  "v.setPitchYawRollXYZ"' "Set pitch' yaw' roll' X' Y and Z [float pitch' yaw' roll' x' y' z]"' formatters.Default));
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      pitch = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      yaw = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      roll = checkFlightStateParameters(float.Parse(dataSources.args[2]));                      x = checkFlightStateParameters(float.Parse(dataSources.args[3]));                      y = checkFlightStateParameters(float.Parse(dataSources.args[4]));                      z = checkFlightStateParameters(float.Parse(dataSources.args[5]));                        return 0;                  }'                  "v.setPitchYawRollXYZ"' "Set pitch' yaw' roll' X' Y and Z [float pitch' yaw' roll' x' y' z]"' formatters.Default));
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      pitch = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      yaw = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      roll = checkFlightStateParameters(float.Parse(dataSources.args[2]));                      x = checkFlightStateParameters(float.Parse(dataSources.args[3]));                      y = checkFlightStateParameters(float.Parse(dataSources.args[4]));                      z = checkFlightStateParameters(float.Parse(dataSources.args[5]));                        return 0;                  }'                  "v.setPitchYawRollXYZ"' "Set pitch' yaw' roll' X' Y and Z [float pitch' yaw' roll' x' y' z]"' formatters.Default));
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      pitch = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      yaw = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      roll = checkFlightStateParameters(float.Parse(dataSources.args[2]));                      x = checkFlightStateParameters(float.Parse(dataSources.args[3]));                      y = checkFlightStateParameters(float.Parse(dataSources.args[4]));                      z = checkFlightStateParameters(float.Parse(dataSources.args[5]));                        return 0;                  }'                  "v.setPitchYawRollXYZ"' "Set pitch' yaw' roll' X' Y and Z [float pitch' yaw' roll' x' y' z]"' formatters.Default));
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      pitch = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      yaw = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      roll = checkFlightStateParameters(float.Parse(dataSources.args[2]));                        return 0;                  }'                  "v.setAttitude"' "Set pitch' yaw' roll [float pitch' yaw' roll]"' formatters.Default));
Magic Number,Telemachus,FlyByWireDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,FlyByWireDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                         x = checkFlightStateParameters(float.Parse(dataSources.args[0]));                      y = checkFlightStateParameters(float.Parse(dataSources.args[1]));                      z = checkFlightStateParameters(float.Parse(dataSources.args[2]));                        return 0;                  }'                  "v.setTranslation"' "Set X' Y and Z [float x' y' z]"' formatters.Default));
Magic Number,Telemachus,TargetDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,TargetDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      if (FlightGlobals.fetch.VesselTarget == null) { return 0; }                      Orbit orbit = FlightGlobals.fetch.VesselTarget.GetOrbit();                      return orbit.getObtAtUT(0) / orbit.period * (2.0 * Math.PI);                  }'                 "tar.o.maae"' "Target Mean Anomaly at Epoch"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,TargetDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,TargetDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return FlightGlobals.fetch.VesselTarget != null ? FlightGlobals.fetch.VesselTarget.GetOrbit().TrueAnomalyAtUT(Planetarium.GetUniversalTime()) * (180.0 / Math.PI) : double.NaN; }'                  "tar.o.trueAnomaly"' "Target True Anomaly"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,DockingDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,update,The following statement contains a magic number: orientationDeviation.z = (orientationDeviation.z + 360) % 360;
Magic Number,Telemachus,DockingDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,update,The following statement contains a magic number: orientationDeviation.z = (orientationDeviation.z + 360) % 360;
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                        int index = int.Parse(dataSources.args[1]);                      float ut = float.Parse(dataSources.args[2]);                        Orbit orbitPatch = OrbitPatches.getOrbitPatch(node.nextPatch' index);                      if (orbitPatch == null) { return null; }                      return orbitPatch.TrueAnomalyAtUT(ut);                  }'                  "o.maneuverNodes.trueAnomalyAtUTForManeuverNodesOrbitPatch"' "For a maneuver node' The orbit patch's True Anomaly at Universal Time [int id' orbit patch index' universal time]"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                        int index = int.Parse(dataSources.args[1]);                      float trueAnomaly = float.Parse(dataSources.args[2]);                        Orbit orbitPatch = OrbitPatches.getOrbitPatch(node.nextPatch' index);                      if (orbitPatch == null) { return null; }                        double now = Planetarium.GetUniversalTime();                      return orbitPatch.GetUTforTrueAnomaly(trueAnomaly' now);                  }'                  "o.maneuverNodes.UTForTrueAnomalyForManeuverNodesOrbitPatch"' "For a maneuver node' The orbit patch's True Anomaly at Universal Time [int id' orbit patch index' universal time]"' formatters.Default' APIEntry.UnitType.DATE));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                        int index = int.Parse(dataSources.args[1]);                      float trueAnomaly = float.Parse(dataSources.args[2]);                        Orbit orbitPatch = OrbitPatches.getOrbitPatch(node.nextPatch' index);                      if (orbitPatch == null) { return null; }                      return orbitPatch.getRelativePositionFromTrueAnomaly(trueAnomaly);                  }'                  "o.maneuverNodes.relativePositionAtTrueAnomalyForManeuverNodesOrbitPatch"' "For a maneuver node' The orbit patch's predicted displacement from the center of the main body at the given true anomaly [int id' orbit patch index' true anomaly]"' formatters.Vector3d' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                        int index = int.Parse(dataSources.args[1]);                      double ut = double.Parse(dataSources.args[2]);                        Orbit orbitPatch = OrbitPatches.getOrbitPatch(node.nextPatch' index);                      if (orbitPatch == null) { return null; }                        return orbitPatch.getRelativePositionAtUT(ut);                  }'                  "o.maneuverNodes.relativePositionAtUTForManeuverNodesOrbitPatch"' "For a maneuver node' The orbit patch's predicted displacement from the center of the main body at the given universal time [int id' orbit patch index' universal time]"' formatters.Vector3d' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                        ut = float.Parse(dataSources.args[0]);                      ManeuverNode node = dataSources.vessel.patchedConicSolver.AddManeuverNode(ut);                        x = float.Parse(dataSources.args[1]);                      y = float.Parse(dataSources.args[2]);                      z = float.Parse(dataSources.args[3]);                        PluginLogger.debug("x: " + x + "y: " + y + "z: " + z);                        Vector3d deltaV = new Vector3d(x'y'z);                      node.OnGizmoUpdated(deltaV' ut);                        return node;                  }'                  "o.addManeuverNode"' "Add a manuever based on a UT and DeltaV X' Y and Z [float ut' float x' y' z]"' formatters.ManeuverNode));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                        ut = float.Parse(dataSources.args[0]);                      ManeuverNode node = dataSources.vessel.patchedConicSolver.AddManeuverNode(ut);                        x = float.Parse(dataSources.args[1]);                      y = float.Parse(dataSources.args[2]);                      z = float.Parse(dataSources.args[3]);                        PluginLogger.debug("x: " + x + "y: " + y + "z: " + z);                        Vector3d deltaV = new Vector3d(x'y'z);                      node.OnGizmoUpdated(deltaV' ut);                        return node;                  }'                  "o.addManeuverNode"' "Add a manuever based on a UT and DeltaV X' Y and Z [float ut' float x' y' z]"' formatters.ManeuverNode));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                                                      ut = float.Parse(dataSources.args[1]);                        x = float.Parse(dataSources.args[2]);                      y = float.Parse(dataSources.args[3]);                      z = float.Parse(dataSources.args[4]);                        Vector3d deltaV = new Vector3d(x' y' z);                      node.OnGizmoUpdated(deltaV' ut);                      return node;                                            }'                  "o.updateManeuverNode"' "Set a manuever node's UT and DeltaV X' Y and Z [int id' float ut' float x' y' z]"' formatters.ManeuverNode));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                                                      ut = float.Parse(dataSources.args[1]);                        x = float.Parse(dataSources.args[2]);                      y = float.Parse(dataSources.args[3]);                      z = float.Parse(dataSources.args[4]);                        Vector3d deltaV = new Vector3d(x' y' z);                      node.OnGizmoUpdated(deltaV' ut);                      return node;                                            }'                  "o.updateManeuverNode"' "Set a manuever node's UT and DeltaV X' Y and Z [int id' float ut' float x' y' z]"' formatters.ManeuverNode));
Magic Number,Telemachus,MapViewDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,MapViewDataLinkHandler,The following statement contains a magic number: registerAPI(new ActionAPIEntry(                  dataSources =>                  {                      ManeuverNode node = getManueverNode(dataSources' int.Parse(dataSources.args[0]));                      if (node == null) { return null; }                                                      ut = float.Parse(dataSources.args[1]);                        x = float.Parse(dataSources.args[2]);                      y = float.Parse(dataSources.args[3]);                      z = float.Parse(dataSources.args[4]);                        Vector3d deltaV = new Vector3d(x' y' z);                      node.OnGizmoUpdated(deltaV' ut);                      return node;                                            }'                  "o.updateManeuverNode"' "Set a manuever node's UT and DeltaV X' Y and Z [int id' float ut' float x' y' z]"' formatters.ManeuverNode));
Magic Number,Telemachus,BodyDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,BodyDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return FlightGlobals.Bodies[int.Parse(dataSources.args[0])].orbit.TrueAnomalyAtUT(Planetarium.GetUniversalTime()) * (180.0 / Math.PI); }'                  "b.o.trueAnomaly"' "True Anomaly [body id]"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,BodyDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,BodyDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      CelestialBody body = FlightGlobals.Bodies[int.Parse(dataSources.args[0])];                        // Find a common reference body between vessel and body                      List<CelestialBody> parentBodies = new List<CelestialBody>();                      CelestialBody parentBody = dataSources.vessel.mainBody;                      while (true)                      {                          if (parentBody == body)                          {                              return double.NaN;                          }                          parentBodies.Add(parentBody);                          if (parentBody == Planetarium.fetch.Sun)                          {                              break;                          }                          else                          {                              parentBody = parentBody.referenceBody;                          }                      }                        while (!parentBodies.Contains(body.referenceBody))                      {                          body = body.referenceBody;                      }                        Orbit orbit = dataSources.vessel.orbit;                      while (orbit.referenceBody != body.referenceBody)                      {                          orbit = orbit.referenceBody.orbit;                      }                        // Calculate the phase angle                      double ut = Planetarium.GetUniversalTime();                      Vector3d vesselPos = orbit.getRelativePositionAtUT(ut);                      Vector3d bodyPos = body.orbit.getRelativePositionAtUT(ut);                      double phaseAngle = (Math.Atan2(bodyPos.y' bodyPos.x) - Math.Atan2(vesselPos.y' vesselPos.x)) * (180.0 / Math.PI);                      return (phaseAngle < 0) ? phaseAngle + 360 : phaseAngle;                  }'                  "b.o.phaseAngle"' "Phase Angle [body id]"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,BodyDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,BodyDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      CelestialBody body = FlightGlobals.Bodies[int.Parse(dataSources.args[0])];                        // Find a common reference body between vessel and body                      List<CelestialBody> parentBodies = new List<CelestialBody>();                      CelestialBody parentBody = dataSources.vessel.mainBody;                      while (true)                      {                          if (parentBody == body)                          {                              return double.NaN;                          }                          parentBodies.Add(parentBody);                          if (parentBody == Planetarium.fetch.Sun)                          {                              break;                          }                          else                          {                              parentBody = parentBody.referenceBody;                          }                      }                        while (!parentBodies.Contains(body.referenceBody))                      {                          body = body.referenceBody;                      }                        Orbit orbit = dataSources.vessel.orbit;                      while (orbit.referenceBody != body.referenceBody)                      {                          orbit = orbit.referenceBody.orbit;                      }                        // Calculate the phase angle                      double ut = Planetarium.GetUniversalTime();                      Vector3d vesselPos = orbit.getRelativePositionAtUT(ut);                      Vector3d bodyPos = body.orbit.getRelativePositionAtUT(ut);                      double phaseAngle = (Math.Atan2(bodyPos.y' bodyPos.x) - Math.Atan2(vesselPos.y' vesselPos.x)) * (180.0 / Math.PI);                      return (phaseAngle < 0) ? phaseAngle + 360 : phaseAngle;                  }'                  "b.o.phaseAngle"' "Phase Angle [body id]"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.CoM);                     return (result.eulerAngles.x > 180) ? (360.0 - result.eulerAngles.x) : -result.eulerAngles.x;                 }'                 "n.pitch2"' "Pitch"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.CoM);                     return (result.eulerAngles.x > 180) ? (360.0 - result.eulerAngles.x) : -result.eulerAngles.x;                 }'                 "n.pitch2"' "Pitch"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.CoM);                     return (result.eulerAngles.z > 180) ?                         (result.eulerAngles.z - 360.0) : result.eulerAngles.z;                 }'                 "n.roll2"' "Roll"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.CoM);                     return (result.eulerAngles.z > 180) ?                         (result.eulerAngles.z - 360.0) : result.eulerAngles.z;                 }'                 "n.roll2"' "Roll"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.rootPart.transform.position);                     return (result.eulerAngles.x > 180) ? (360.0 - result.eulerAngles.x) : -result.eulerAngles.x;                 }'                 "n.pitch"' "Pitch calculated using the position of the vessels root part"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.rootPart.transform.position);                     return (result.eulerAngles.x > 180) ? (360.0 - result.eulerAngles.x) : -result.eulerAngles.x;                 }'                 "n.pitch"' "Pitch calculated using the position of the vessels root part"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.rootPart.transform.position);                     return (result.eulerAngles.z > 180) ?                         (result.eulerAngles.z - 360.0) : result.eulerAngles.z;                 }'                 "n.roll"' "Roll calculated using the position of the vessels root part"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,NavBallDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                 dataSources =>                 {                     Quaternion result = updateHeadingPitchRollField(dataSources.vessel' dataSources.vessel.rootPart.transform.position);                     return (result.eulerAngles.z > 180) ?                         (result.eulerAngles.z - 360.0) : result.eulerAngles.z;                 }'                 "n.roll"' "Roll calculated using the position of the vessels root part"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,NavBallDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,updateHeadingPitchRollField,The following statement contains a magic number: return Quaternion.Inverse(Quaternion.Euler(90' 0' 0) *                  Quaternion.Inverse(v.GetTransform().rotation) * rotationSurface);
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {                      double atmosphericPressure = FlightGlobals.getStaticPressure(dataSources.vessel.altitude' dataSources.vessel.mainBody);                      double temperature = FlightGlobals.getExternalTemperature(dataSources.vessel.altitude' dataSources.vessel.mainBody);                      double atmosphericDensityinKilograms = FlightGlobals.getAtmDensity(atmosphericPressure' temperature);                      return atmosphericDensityinKilograms * 1000;                      //return dataSources.vessel;                  }'                  "v.atmosphericDensity"' "Atmospheric Density"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return dataSources.vessel.longitude > 180 ? dataSources.vessel.longitude - 360.0 : dataSources.vessel.longitude; }'                  "v.long"' "Longitude"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return dataSources.vessel.longitude > 180 ? dataSources.vessel.longitude - 360.0 : dataSources.vessel.longitude; }'                  "v.long"' "Longitude"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {return (dataSources.vessel.atmDensity * 0.5) * Math.Pow(dataSources.vessel.srf_velocity.magnitude' 2); }'                  "v.dynamicPressure"' "Dynamic Pressure"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => {return (dataSources.vessel.atmDensity * 0.5) * Math.Pow(dataSources.vessel.srf_velocity.magnitude' 2); }'                  "v.dynamicPressure"' "Dynamic Pressure"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return FlightGlobals.getStaticPressure(dataSources.vessel.altitude' dataSources.vessel.mainBody) * 1000; }'                  "v.atmosphericPressurePa"' "Atmospheric Pressure (Pa)"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      if (dataSources.vessel.mainBody == Planetarium.fetch.Sun)                      {                          return double.NaN;                      }                      else                      {                          double ut = Planetarium.GetUniversalTime();                          CelestialBody body = dataSources.vessel.mainBody;                          Vector3d bodyPrograde = body.orbit.getOrbitalVelocityAtUT(ut);                          Vector3d bodyNormal = body.orbit.GetOrbitNormal();                          Vector3d vesselPos = dataSources.vessel.orbit.getRelativePositionAtUT(ut);                          Vector3d vesselPosInPlane = Vector3d.Exclude(bodyNormal' vesselPos); // Project the vessel position into the body's orbital plane                          double angle = Vector3d.Angle(vesselPosInPlane' bodyPrograde);                          if (Vector3d.Dot(Vector3d.Cross(vesselPosInPlane' bodyPrograde)' bodyNormal) < 0)                          { // Correct for angles > 180 degrees                              angle = 360 - angle;                          }                          if (dataSources.vessel.orbit.GetOrbitNormal().z < 0)                          { // Check for retrograde orbit                              angle = 360 - angle;                          }                          return angle;                      }                  }'                  "v.angleToPrograde"' "Angle to Prograde"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,VesselDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,VesselDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      if (dataSources.vessel.mainBody == Planetarium.fetch.Sun)                      {                          return double.NaN;                      }                      else                      {                          double ut = Planetarium.GetUniversalTime();                          CelestialBody body = dataSources.vessel.mainBody;                          Vector3d bodyPrograde = body.orbit.getOrbitalVelocityAtUT(ut);                          Vector3d bodyNormal = body.orbit.GetOrbitNormal();                          Vector3d vesselPos = dataSources.vessel.orbit.getRelativePositionAtUT(ut);                          Vector3d vesselPosInPlane = Vector3d.Exclude(bodyNormal' vesselPos); // Project the vessel position into the body's orbital plane                          double angle = Vector3d.Angle(vesselPosInPlane' bodyPrograde);                          if (Vector3d.Dot(Vector3d.Cross(vesselPosInPlane' bodyPrograde)' bodyNormal) < 0)                          { // Correct for angles > 180 degrees                              angle = 360 - angle;                          }                          if (dataSources.vessel.orbit.GetOrbitNormal().z < 0)                          { // Check for retrograde orbit                              angle = 360 - angle;                          }                          return angle;                      }                  }'                  "v.angleToPrograde"' "Angle to Prograde"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,OrbitDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,OrbitDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources =>                  {                      Orbit orbit = dataSources.vessel.orbit;                      return orbit.getObtAtUT(0) / orbit.period * (2.0 * Math.PI);                  }'                 "o.maae"' "Mean Anomaly at Epoch"' formatters.Default' APIEntry.UnitType.UNITLESS));
Magic Number,Telemachus,OrbitDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,OrbitDataLinkHandler,The following statement contains a magic number: registerAPI(new PlotableAPIEntry(                  dataSources => { return dataSources.vessel.orbit.TrueAnomalyAtUT(Planetarium.GetUniversalTime()) * (180.0 / Math.PI); }'                  "o.trueAnomaly"' "True Anomaly"' formatters.Default' APIEntry.UnitType.DEG));
Magic Number,Telemachus,PausedDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,partPaused,The following statement contains a magic number: if (result)              {                  // If we aren't even in the flight scene' say so                  if (!HighLogic.LoadedSceneIsFlight)                  {                      return 5;                  }                    if (FlightDriver.Pause)                  {                      return 1;                  }                    if (!TelemachusPowerDrain.isActive)                  {                      return 2;                  }                    if (!TelemachusPowerDrain.activeToggle)                  {                      return 3;                  }                    if (!VesselChangeDetector.hasTelemachusPart)                  {                      return 4;                  }              }              else              {                  return 0;              }
Magic Number,Telemachus,PausedDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,partPaused,The following statement contains a magic number: if (result)              {                  // If we aren't even in the flight scene' say so                  if (!HighLogic.LoadedSceneIsFlight)                  {                      return 5;                  }                    if (FlightDriver.Pause)                  {                      return 1;                  }                    if (!TelemachusPowerDrain.isActive)                  {                      return 2;                  }                    if (!TelemachusPowerDrain.activeToggle)                  {                      return 3;                  }                    if (!VesselChangeDetector.hasTelemachusPart)                  {                      return 4;                  }              }              else              {                  return 0;              }
Magic Number,Telemachus,PausedDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,partPaused,The following statement contains a magic number: if (result)              {                  // If we aren't even in the flight scene' say so                  if (!HighLogic.LoadedSceneIsFlight)                  {                      return 5;                  }                    if (FlightDriver.Pause)                  {                      return 1;                  }                    if (!TelemachusPowerDrain.isActive)                  {                      return 2;                  }                    if (!TelemachusPowerDrain.activeToggle)                  {                      return 3;                  }                    if (!VesselChangeDetector.hasTelemachusPart)                  {                      return 4;                  }              }              else              {                  return 0;              }
Magic Number,Telemachus,PausedDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,partPaused,The following statement contains a magic number: if (result)              {                  // If we aren't even in the flight scene' say so                  if (!HighLogic.LoadedSceneIsFlight)                  {                      return 5;                  }                    if (FlightDriver.Pause)                  {                      return 1;                  }                    if (!TelemachusPowerDrain.isActive)                  {                      return 2;                  }                    if (!TelemachusPowerDrain.activeToggle)                  {                      return 3;                  }                    if (!VesselChangeDetector.hasTelemachusPart)                  {                      return 4;                  }              }              else              {                  return 0;              }
Magic Number,Telemachus,PausedDataLinkHandler,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkHandlers.cs,partPaused,The following statement contains a magic number: return 5;
Magic Number,Telemachus,DataLinkResponsibility,C:\repos\richardbunt_Telemachus\Telemachus\src\DataLinkResponsibility.cs,splitArguments,The following statement contains a magic number: foreach (var part in argstring.Split('&'))              {                  var subParts = part.Split('=');                  if (subParts.Length != 2) continue;                  var keyName = UnityEngine.WWW.UnEscapeURL(subParts[0]);                  var apiName = UnityEngine.WWW.UnEscapeURL(subParts[1]);                  ret[keyName] = apiName;              }
Magic Number,Telemachus,ServerConfiguration,C:\repos\richardbunt_Telemachus\Telemachus\src\ServerConfiguration.cs,ServerConfiguration,The following statement contains a magic number: port = 8085;
Magic Number,Telemachus,ServerConfigExtensions,C:\repos\richardbunt_Telemachus\Telemachus\src\ServerConfiguration.cs,IsPortNumber,The following statement contains a magic number: return value > 0 && value < 65536;
Magic Number,Telemachus,TelemachusBehaviour,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusBehaviour.cs,writeDefaultConfig,The following statement contains a magic number: config.SetValue("PORT"' 8085);
Magic Number,Telemachus,TelemachusPowerDrain,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusPartModules.cs,formatBitRate,The following statement contains a magic number: while (bitRate > 1000)              {                  bitRate = bitRate / 1000;                  index++;                  powerConsumption += powerConsumptionIncrease;              }
Magic Number,Telemachus,TelemachusPowerDrain,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusPartModules.cs,formatBitRate,The following statement contains a magic number: while (bitRate > 1000)              {                  bitRate = bitRate / 1000;                  index++;                  powerConsumption += powerConsumptionIncrease;              }
Magic Number,Telemachus,TelemachusPowerDrain,C:\repos\richardbunt_Telemachus\Telemachus\src\TelemachusPartModules.cs,formatBitRate,The following statement contains a magic number: return Math.Round(bitRate' 2) + dataUnits[index];
Magic Number,Telemachus,UpLinkDownLinkRate,C:\repos\richardbunt_Telemachus\Telemachus\src\UpLinkDownLinkRate.cs,RecieveDataFromClient,The following statement contains a magic number: addGuardedPoint(DateTime.Now' bytes*8' upLinkRate);
Magic Number,Telemachus,UpLinkDownLinkRate,C:\repos\richardbunt_Telemachus\Telemachus\src\UpLinkDownLinkRate.cs,SendDataToClient,The following statement contains a magic number: addGuardedPoint(DateTime.Now' bytes*8' downLinkRate);
Magic Number,Telemachus.Plugins,RasterPropMonitorPlugin,C:\repos\richardbunt_Telemachus\Telemachus\src\Plugins\RasterPropMonitorPlugin.cs,GetAPIHandler,The following statement contains a magic number: return (vessel' args) => {                  var module = FindRPMModule(vessel);                  if (module != null) {                      module.Update();                      return module.ProcessVariable(API.Substring(4));                  }                  return null;              };
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,SimpleJson,The following statement contains a magic number: EscapeTable = new char[93];
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                      break;                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Missing Default,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Reflection,SimpleJson,C:\repos\richardbunt_Telemachus\Telemachus\src\SimpleJSON.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
