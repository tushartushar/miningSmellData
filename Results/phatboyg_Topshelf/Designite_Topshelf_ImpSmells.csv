Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Topshelf.HostConfigurators,HostConfiguratorImpl,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfigurators\HostConfiguratorImpl.cs,Validate,Cyclomatic complexity of the method is 10
Complex Method,Topshelf.ServiceConfigurators,DelegateServiceConfigurator<T>,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\ServiceConfigurators\DelegateServiceConfigurator.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,Topshelf.Logging,TypeNameFormatter,C:\repos\phatboyg_Topshelf\src\Topshelf\Logging\TypeNameFormatter.cs,FormatTypeName,Cyclomatic complexity of the method is 9
Complex Method,Topshelf.Runtime.Windows,WindowsServiceRecoveryController,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsServiceRecoveryController.cs,SetServiceRecoveryOptions,Cyclomatic complexity of the method is 11
Long Parameter List,Topshelf.Builders,DelegateServiceBuilder<T>,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\Builders\DelegateServiceBuilder.cs,DelegateServiceBuilder,The method has 9 parameters. Parameters: serviceFactory' start' stop' pause' continue' shutdown' sessionChanged' customCommand' serviceEvents
Long Parameter List,Topshelf.Builders,DelegateServiceHandle,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\Builders\DelegateServiceBuilder.cs,DelegateServiceHandle,The method has 9 parameters. Parameters: service' start' stop' pause' continue' shutdown' sessionChanged' customCommand' serviceEvents
Long Parameter List,Topshelf.Hosts,InstallHost,C:\repos\phatboyg_Topshelf\src\Topshelf\Hosts\InstallHost.cs,InstallHost,The method has 10 parameters. Parameters: environment' settings' startMode' dependencies' credentials' preActions' postActions' preRollbackActions' postRollbackActions' sudo
Long Parameter List,Topshelf.Hosts,UninstallHost,C:\repos\phatboyg_Topshelf\src\Topshelf\Hosts\UninstallHost.cs,UninstallHost,The method has 5 parameters. Parameters: environment' settings' preActions' postActions' sudo
Long Parameter List,Topshelf.Logging,TopshelfConsoleTraceListener,C:\repos\phatboyg_Topshelf\src\Topshelf\Logging\TopshelfConsoleTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,Topshelf.Logging,TopshelfConsoleTraceListener,C:\repos\phatboyg_Topshelf\src\Topshelf\Logging\TopshelfConsoleTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,Topshelf.Logging,TypeNameFormatter,C:\repos\phatboyg_Topshelf\src\Topshelf\Logging\TypeNameFormatter.cs,TypeNameFormatter,The method has 5 parameters. Parameters: genericArgumentSeparator' genericOpen' genericClose' namespaceSeparator' nestedTypeSeparator
Long Parameter List,Topshelf.Runtime,HostEnvironment,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\HostEnvironment.cs,InstallService,The method has 5 parameters. Parameters: settings' beforeInstall' afterInstall' beforeRollback' afterRollback
Long Parameter List,Topshelf.Runtime.Windows,NativeMethods,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\NativeMethods.cs,AdjustTokenPrivileges,The method has 6 parameters. Parameters: TokenHandle' DisableAllPrivileges' NewState' BufferLength' PreviousState' ReturnLength
Long Parameter List,Topshelf.Runtime.Windows,WindowsHostEnvironment,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostEnvironment.cs,InstallService,The method has 5 parameters. Parameters: settings' beforeInstall' afterInstall' beforeRollback' afterRollback
Long Identifier,Topshelf.HostConfigurators,HostConfiguratorImpl,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfigurators\HostConfiguratorImpl.cs,,The length of the parameter _commandLineOptionConfigurators is 31.
Long Identifier,Topshelf.ServiceConfigurators,DelegateServiceConfigurator<T>,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\ServiceConfigurators\DelegateServiceConfigurator.cs,,The length of the parameter _customCommandReceivedConfigured is 32.
Long Identifier,Topshelf.Runtime.Windows,NativeMethods,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\NativeMethods.cs,,The length of the parameter SERVICE_CONFIG_FAILURE_ACTIONS is 30.
Long Identifier,Topshelf.Runtime.Windows,NativeMethods,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\NativeMethods.cs,,The length of the parameter SERVICE_CONFIG_FAILURE_ACTIONS_FLAG is 35.
Long Identifier,Topshelf.Runtime.Windows,SERVICE_FAILURE_ACTIONS_FLAG,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\NativeMethods.cs,,The length of the parameter fFailureActionsOnNonCrashFailures is 33.
Long Statement,Topshelf.Builders,DelegateServiceBuilder<T>,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\Builders\DelegateServiceBuilder.cs,Build,The length of the statement  "                return new DelegateServiceHandle(service' _start' _stop' _pause' _continue' _shutdown' _sessionChanged' _customCommand' _serviceEvents); " is 136.
Long Statement,Topshelf,HostConfiguratorExtensions,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfiguratorExtensions.cs,UseAssemblyInfoForServiceInfo,The length of the statement  "            hostConfigurator.SetServiceName(assembly.GetAttribute<AssemblyTitleAttribute>().TryGetProperty(x => x.Title).ToServiceNameSafeString()); " is 136.
Long Statement,Topshelf,HostConfiguratorExtensions,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfiguratorExtensions.cs,UseAssemblyInfoForServiceInfo,The length of the statement  "            hostConfigurator.SetDescription(assembly.GetAttribute<AssemblyDescriptionAttribute>().TryGetProperty(x => x.Description)); " is 122.
Long Statement,HostConfigurators.AssemblyExtensions,HostConfiguratorExtensions,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfiguratorExtensions.cs,UseAssemblyInfoForServiceInfo,The length of the statement  "            hostConfigurator.SetServiceName(assembly.GetAttribute<AssemblyTitleAttribute>().TryGetProperty(x => x.Title).ToServiceNameSafeString()); " is 136.
Long Statement,HostConfigurators.AssemblyExtensions,HostConfiguratorExtensions,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfiguratorExtensions.cs,UseAssemblyInfoForServiceInfo,The length of the statement  "            hostConfigurator.SetDescription(assembly.GetAttribute<AssemblyDescriptionAttribute>().TryGetProperty(x => x.Description)); " is 122.
Long Statement,Topshelf.Hosts,InstallHost,C:\repos\phatboyg_Topshelf\src\Topshelf\Hosts\InstallHost.cs,Run,The length of the statement  "            _environment.InstallService(_installSettings' ExecutePreActions' ExecutePostActions' ExecutePreRollbackActions' ExecutePostRollbackActions); " is 140.
Long Statement,Topshelf.Runtime.Windows,HostServiceInstaller,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\HostServiceInstaller.cs,CreateInstaller,The length of the statement  "                    ConfigureServiceProcessInstaller(settings.Credentials.Account' settings.Credentials.Username' settings.Credentials.Password) " is 124.
Long Statement,Topshelf.Runtime.Windows,HostServiceInstaller,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\HostServiceInstaller.cs,CreateInstaller,The length of the statement  "            //MSDN: When the installation is performed' it automatically creates an EventLogInstaller to install the event log source associated with the ServiceBase derived class. The Log property for this source is set by the ServiceInstaller constructor to the computer's Application log. When you set the ServiceName of the ServiceInstaller (which should be identical to the ServiceBase..::.ServiceName of the service)' the Source is automatically set to the same value. In an installation failure' the source's installation is rolled-back along with previously installed services. " is 573.
Long Statement,Topshelf.Runtime.Windows,HostServiceInstaller,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\HostServiceInstaller.cs,CreateInstaller,The length of the statement  "            //MSDN: from EventLog.CreateEventSource Method (String' String) : an ArgumentException thrown when The first 8 characters of logName match the first 8 characters of an existing event log name. " is 192.
Long Statement,Topshelf.Runtime.Windows,WindowsHostEnvironment,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostEnvironment.cs,StartService,The length of the statement  "                    _log.WarnFormat("The {0} service can't be started now as it has the status {1}. Try again later..."' serviceName' sc.Status.ToString()); " is 136.
Long Statement,Topshelf.Runtime.Windows,WindowsHostEnvironment,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostEnvironment.cs,StopService,The length of the statement  "                    _log.WarnFormat("The {0} service can't be stopped now as it has the status {1}. Try again later..."' serviceName' sc.Status.ToString()); " is 136.
Long Statement,Topshelf.Runtime.Windows,WindowsServiceRecoveryController,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsServiceRecoveryController.cs,SetServiceRecoveryOptions,The length of the statement  "                    throw new TopshelfException(string.Format("Failed to change service recovery options. Windows Error: {0}"' new Win32Exception().Message)); " is 138.
Empty Catch Block,Topshelf.Runtime.Windows,WindowsServiceRecoveryController,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsServiceRecoveryController.cs,SetServiceRecoveryOptions,The method has an empty catch block.
Magic Number,Topshelf.CommandLineParser,DefinitionElement,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\CommandLineParser\DefinitionElement.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Key?.GetHashCode() ?? 0)*397) ^ (Value?.GetHashCode() ?? 0);              }
Magic Number,Topshelf.CommandLineParser,SwitchElement,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\CommandLineParser\SwitchElement.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((Key?.GetHashCode() ?? 0)*397) ^ Value.GetHashCode();              }
Magic Number,Topshelf.HostConfigurators,CommandConfigurator,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfigurators\CommandConfigurator.cs,Validate,The following statement contains a magic number: if (_command < 128 || _command > 256)                  yield return this.Failure("Command"' "must be between 128 and 256");
Magic Number,Topshelf.HostConfigurators,CommandConfigurator,C:\repos\phatboyg_Topshelf\src\Topshelf\Configuration\HostConfigurators\CommandConfigurator.cs,Validate,The following statement contains a magic number: if (_command < 128 || _command > 256)                  yield return this.Failure("Command"' "must be between 128 and 256");
Magic Number,Topshelf.Hosts,TestHost,C:\repos\phatboyg_Topshelf\src\Topshelf\Hosts\TestHost.cs,Run,The following statement contains a magic number: try              {                  exitCode = TopshelfExitCode.StartServiceFailed;                    _log.InfoFormat("The {0} service is being started."' _settings.ServiceName);                  _serviceHandle.Start(this);                  _log.InfoFormat("The {0} service was started."' _settings.ServiceName);                    Thread.Sleep(100);                    exitCode = TopshelfExitCode.StopServiceFailed;                    _log.InfoFormat("The {0} service is being stopped."' _settings.ServiceName);                  _serviceHandle.Stop(this);                  _log.InfoFormat("The {0} service was stopped."' _settings.ServiceName);                    exitCode = TopshelfExitCode.Ok;              }              catch (Exception ex)              {                  _log.Error("The service threw an exception during testing."' ex);              }              finally              {                  _serviceHandle.Dispose();              }
Magic Number,Topshelf.Runtime.Windows,WindowsHostEnvironment,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostEnvironment.cs,RunAsAdministrator,The following statement contains a magic number: if (Environment.OSVersion.Version.Major == 6)              {                  string commandLine = CommandLine.Replace("--sudo"' "");                    var startInfo = new ProcessStartInfo(Assembly.GetEntryAssembly().Location' commandLine)                      {                          Verb = "runas"'                          UseShellExecute = true'                          CreateNoWindow = true'                      };                    try                  {                      HostLogger.Shutdown();                        Process process = Process.Start(startInfo);                      process.WaitForExit();                        return true;                  }                  catch (Win32Exception ex)                  {                      _log.Debug("Process Start Exception"' ex);                  }              }
Magic Number,Topshelf.Runtime.Windows,WindowsHostSettings,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostSettings.cs,WindowsHostSettings,The following statement contains a magic number: StartTimeOut = TimeSpan.FromSeconds(10);
Magic Number,Topshelf.Runtime.Windows,WindowsHostSettings,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\WindowsHostSettings.cs,WindowsHostSettings,The following statement contains a magic number: StopTimeOut = TimeSpan.FromSeconds(10);
Missing Default,Topshelf.Runtime.Windows,HostServiceInstaller,C:\repos\phatboyg_Topshelf\src\Topshelf\Runtime\Windows\HostServiceInstaller.cs,SetStartMode,The following switch statement is missing a default case: switch (startMode)              {                  case HostStartMode.Automatic:                      installer.StartType = ServiceStartMode.Automatic;                      break;                    case HostStartMode.Manual:                      installer.StartType = ServiceStartMode.Manual;                      break;                    case HostStartMode.Disabled:                      installer.StartType = ServiceStartMode.Disabled;                      break;                    case HostStartMode.AutomaticDelayed:                      installer.StartType = ServiceStartMode.Automatic;  #if !NET35                      installer.DelayedAutoStart = true;  #endif                      break;              }
