Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EqBeats_WinRT.Common,RichTextColumns,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,EqBeats_WinRT.Controls,SearchResults,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Controls\SearchResults.xaml.cs,SearchTypeChanged,Cyclomatic complexity of the method is 10
Complex Method,EqBeats_WinRT.Pages,Player,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Pages\Player.xaml.cs,PlayerStateChanged,Cyclomatic complexity of the method is 12
Long Parameter List,EqBeats_WinRT,App,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\App.xaml.cs,OnWindowCreated,The method has 5 parameters.
Long Statement,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The length of the statement  "	if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) { " is 246.
Long Statement,EqBeats_WinRT.Common,SuspensionManager,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "		StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync (sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 141.
Long Statement,EqBeats_WinRT.Common,SuspensionManager,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "		throw new InvalidOperationException ("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 139.
Long Statement,EqBeats_WinRT.Common,TimespanToPercentage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,ConvertBack,The length of the statement  "	return !player.NaturalDuration.HasTimeSpan ? TimeSpan.FromSeconds (0) : TimeSpan.FromSeconds (player.NaturalDuration.TimeSpan.TotalSeconds * percent / 100); " is 156.
Long Statement,EqBeats_WinRT.Common,PercentToSongLength,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,Convert,The length of the statement  "	var span = !player.NaturalDuration.HasTimeSpan ? TimeSpan.FromSeconds (0) : TimeSpan.FromSeconds (player.NaturalDuration.TimeSpan.TotalSeconds * percent / 100); " is 160.
Complex Conditional,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	args.Handled = true;  	this.GoBack (this' new RoutedEventArgs ());  }  else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	args.Handled = true;  	this.GoBack (this' new RoutedEventArgs ());  }  else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,EqBeats_WinRT.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,EqBeats_WinRT.Common,TimespanToPercentage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,Convert,The following statement contains a magic number: return (time.TotalMilliseconds / player.NaturalDuration.TimeSpan.TotalMilliseconds) * 100;  
Magic Number,EqBeats_WinRT.Common,TimespanToPercentage,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,ConvertBack,The following statement contains a magic number: return !player.NaturalDuration.HasTimeSpan ? TimeSpan.FromSeconds (0) : TimeSpan.FromSeconds (player.NaturalDuration.TimeSpan.TotalSeconds * percent / 100);  
Magic Number,EqBeats_WinRT.Common,PercentToSongLength,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,Convert,The following statement contains a magic number: if (double.IsNaN (percent)) {  	percent = 100;  }  
Magic Number,EqBeats_WinRT.Common,PercentToSongLength,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Common\TimespanToPercentage.cs,Convert,The following statement contains a magic number: percent = 100;  
Magic Number,EqBeats_WinRT.Controls,SearchResults,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Controls\SearchResults.xaml.cs,UpdateResults,The following statement contains a magic number: results = results.Cast<object> ().Take (50).ToArray ();  
Missing Default,EqBeats_WinRT.Controls,SearchResults,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Controls\SearchResults.xaml.cs,QueryChanged,The following switch statement is missing a default case: switch (control.SearchType) {  case SearchMode.Track:  	await(control.SearchTracks (search));  	break;  case SearchMode.User:  	await(control.SearchUsers (search));  	break;  }  
Missing Default,EqBeats_WinRT.Controls,SearchResults,D:\SecondaryReposToAnalyze\Connorcpu_EqBeats-WinRT\EqBeats-WinRT\Controls\SearchResults.xaml.cs,SearchTypeChanged,The following switch statement is missing a default case: switch ((SearchMode)args.NewValue) {  case SearchMode.Track:  	control.ResultView.ItemsSource = new Track[0];  	control.ResultView.ItemTemplate = control.TrackTemplate;  	await control.SearchTracks (control.SearchQuery);  	break;  case SearchMode.User:  	control.ResultView.ItemsSource = new User[0];  	control.ResultView.ItemTemplate = control.UserTemplate;  	await control.SearchUsers (control.SearchQuery);  	break;  }  
