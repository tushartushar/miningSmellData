Implementation smell,Namespace,Class,File,Method,Description
Long Statement,LocalTunnel,Program,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Console\Program.cs,Main,The length of the statement  "                        Console.WriteLine(string.Format("LocalTunnel created' you can now access {0}:{1} through: http://{2}/"' tunnel.LocalHost' tunnel.LocalPort' tunnel.TunnelHost) ); " is 161.
Magic Number,LocalTunnel,Program,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Console\Program.cs,Main,The following statement contains a magic number: if (args.Length < 1)              {                  Console.WriteLine("Usage: ");                  Console.WriteLine("  localtunnel.exe [host:]port [/path/to/privatekey] - Will default to 127.0.0.1");                  Console.WriteLine("  localtunnel.exe host[:port] [/path/to/privatekey] - Will default to port 80");                    Console.WriteLine("");              }              else              {                  string[] connectTo = args[0].Split(':');                  string hostname = connectTo[0];                  string port = connectTo.Length > 1 ? connectTo[1] : string.Empty;                  int localPort = 0;                                        // Try to guess if the first parameter is a host or a port                  if (string.IsNullOrEmpty(port))                  {                      int.TryParse(hostname' out localPort);                      if (localPort == 0)                      {                          // Was a host' otherwise we would have gotten a number                          localPort = 80;                      }                      else                      {                          hostname = "127.0.0.1";                      }                  }                  else                  {                      int.TryParse(port' out localPort);                  }                    // TODO check correctness of hostname syntax.                    if (localPort == 0)                  {                      Console.WriteLine("Introduce a valid port");                      Console.WriteLine("");                  }                  else                  {                      try                      {                          // Let the fun start!                          Tunnel tunnel;                          if (args.Length == 1)                          {                              tunnel = new Tunnel(localPort);                          }                          else                           {                              string sshkeypath = args[1];                              if (!File.Exists(sshkeypath))                              {                                  Console.WriteLine("Private key file not found!");                                  Environment.Exit(1);                              }                              tunnel = new Tunnel(localPort' sshkeypath);                          }                            tunnel.OnSocketException = new Tunnel.EventSocketException((tun' msg) => {                              tun.ReOpenTunnel();                          });                            tunnel.Execute();                          Console.WriteLine(string.Format("LocalTunnel created' you can now access {0}:{1} through: http://{2}/"' tunnel.LocalHost' tunnel.LocalPort' tunnel.TunnelHost) );                          Console.WriteLine("[Press any key to terminate tunnel]");                          Console.ReadKey();                      }                      catch                       {                          Console.WriteLine("Oops! there was an error while connecting. \nPlease check your port' and key files and try again.");                      }                  }              }
