Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The method has 175 lines of code.
Long Method,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,InternalReadCallback,The method has 103 lines of code.
Complex Method,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,Native,Cyclomatic complexity of the method is 9
Complex Method,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,Cyclomatic complexity of the method is 33
Complex Method,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginRead,Cyclomatic complexity of the method is 8
Complex Method,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,InternalReadCallback,Cyclomatic complexity of the method is 11
Complex Method,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginWrite,Cyclomatic complexity of the method is 8
Complex Method,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,GetCipherString,Cyclomatic complexity of the method is 9
Complex Method,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,InitializeServerContext,Cyclomatic complexity of the method is 9
Long Parameter List,OpenSSL.Core,MemoryTracker,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\MemoryTracker.cs,OnMemoryLeak,The method has 5 parameters. Parameters: order' file' line' num_bytes' addr
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,CRYPTO_add_lock,The method has 5 parameters. Parameters: ptr' amount' type' file' line
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,CRYPTO_dbg_malloc,The method has 5 parameters. Parameters: addr' num' file' line' before_p
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,CRYPTO_dbg_realloc,The method has 6 parameters. Parameters: addr1' addr2' num' file' line' before_p
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,CRYPTO_set_mem_debug_functions,The method has 5 parameters. Parameters: m' r' f' so' go
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,X509_add1_ext_i2d,The method has 5 parameters. Parameters: x' nid' value' crit' flags
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,X509_NAME_add_entry_by_NID,The method has 7 parameters. Parameters: name' nid' type' bytes' len' loc' set
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,X509_NAME_add_entry_by_txt,The method has 7 parameters. Parameters: name' field' type' bytes' len' loc' set
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,DSA_generate_parameters_ex,The method has 7 parameters. Parameters: dsa' bits' seed' seed_len' counter_ret' h_ret' callback
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,DSA_sign,The method has 6 parameters. Parameters: type' dgst' dlen' sig' siglen' dsa
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,DSA_verify,The method has 6 parameters. Parameters: type' dgst' dgst_len' sigbuf' siglen' dsa
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_public_encrypt,The method has 5 parameters. Parameters: flen' from' to' rsa' padding
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_private_encrypt,The method has 5 parameters. Parameters: flen' from' to' rsa' padding
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_public_decrypt,The method has 5 parameters. Parameters: flen' from' to' rsa' padding
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_private_decrypt,The method has 5 parameters. Parameters: flen' from' to' rsa' padding
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_sign,The method has 6 parameters. Parameters: type' m' m_length' sigret' siglen' rsa
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,RSA_verify,The method has 6 parameters. Parameters: type' m' m_length' sigbuf' siglen' rsa
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,BN_div,The method has 5 parameters. Parameters: dv' rem' m' d' ctx
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PKCS12_create,The method has 10 parameters. Parameters: pass' name' pkey' cert' ca' nid_key' nid_cert' iter' mac_iter' keytype
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PKCS12_parse,The method has 5 parameters. Parameters: p12' pass' pkey' cert' ca
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_PKCS8PrivateKey,The method has 7 parameters. Parameters: bp' evp_pkey' evp_cipher' kstr' klen' cb' user_data
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PEM_X509_INFO_write_bio,The method has 7 parameters. Parameters: bp' xi' enc' kstr' klen' cd' u
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_DSAPrivateKey,The method has 7 parameters. Parameters: bp' x' enc' kstr' klen' cb' u
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_RSAPrivateKey,The method has 7 parameters. Parameters: bp' x' enc' kstr' klen' cb' u
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_PrivateKey,The method has 7 parameters. Parameters: bp' x' enc' kstr' klen' cb' u
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,HMAC_Init_ex,The method has 5 parameters. Parameters: ctx' key' len' md' engine_impl
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,HMAC,The method has 7 parameters. Parameters: evp_md' key' key_len' d' n' md' md_len
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_CipherInit_ex,The method has 6 parameters. Parameters: ctx' type' impl' key' iv' enc
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_CipherUpdate,The method has 5 parameters. Parameters: ctx' outb' outl' inb' inl
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_OpenInit,The method has 6 parameters. Parameters: ctx' type' ek' ekl' iv' priv
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_SealInit,The method has 7 parameters. Parameters: ctx' type' ek' ekl' iv' pubk' npubk
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_DecryptUpdate,The method has 5 parameters. Parameters: ctx' output' outl' input' inl
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_EncryptUpdate,The method has 5 parameters. Parameters: ctx' output' outl' input' inl
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_BytesToKey,The method has 8 parameters. Parameters: type' md' salt' data' datal' count' key' iv
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,EVP_Digest,The method has 6 parameters. Parameters: data' count' md' size' type' impl
Long Parameter List,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,X509V3_set_ctx,The method has 6 parameters. Parameters: ctx' issuer' subject' req' crl' flags
Long Parameter List,OpenSSL.Crypto,CipherContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\Cipher.cs,Crypt,The method has 5 parameters. Parameters: input' key' iv' doEncrypt' padding
Long Parameter List,OpenSSL.Crypto,CipherContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\Cipher.cs,BytesToKey,The method has 5 parameters. Parameters: md' salt' data' count' iv
Long Parameter List,OpenSSL.Crypto,DSA,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\DSA.cs,DSA,The method has 5 parameters. Parameters: bits' seed' counter' callback' arg
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,AuthenticateAsClient,The method has 6 parameters. Parameters: targetHost' certificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsClient,The method has 8 parameters. Parameters: targetHost' clientCertificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' asyncCallback' asyncState
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,AuthenticateAsServer,The method has 6 parameters. Parameters: serverCertificate' clientCertificateRequired' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation
Long Parameter List,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsServer,The method has 8 parameters. Parameters: serverCertificate' clientCertificateRequired' caCerts' enabledSslProtocols' sslStrength' checkCertificateRevocation' asyncCallback' asyncState
Long Parameter List,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' asyncCallback' asyncState
Long Parameter List,OpenSSL,InternalAsyncResult,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,InternalAsyncResult,The method has 7 parameters. Parameters: userCallback' userState' buffer' offset' count' isWriteOperation' continueAfterHandshake
Long Parameter List,OpenSSL,SslStreamClient,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamClient.cs,SslStreamClient,The method has 10 parameters. Parameters: stream' ownStream' targetHost' clientCertificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' remoteCallback' localCallback
Long Parameter List,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,SslStreamServer,The method has 9 parameters. Parameters: stream' ownStream' serverCertificate' clientCertificateRequired' caCerts' enabledSslProtocols' sslStrength' checkCertificateRevocation' remote_callback
Long Parameter List,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,InitializeServerContext,The method has 6 parameters. Parameters: serverCertificate' clientCertificateRequired' caCerts' enabledSslProtocols' sslStrength' checkCertificateRevocation
Long Parameter List,OpenSSL.X509,PKCS12,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\PKCS12.cs,PKCS12,The method has 8 parameters. Parameters: password' name' key' cert' ca' keyPbe' certPbe' iterations
Long Parameter List,OpenSSL.X509,PKCS12,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\PKCS12.cs,Create,The method has 8 parameters. Parameters: password' name' key' cert' ca' keyType' certType' iterations
Long Parameter List,OpenSSL.X509,X509Certificate,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509Certificate.cs,X509Certificate,The method has 6 parameters. Parameters: serial' subject' issuer' pubkey' start' end
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 5 parameters. Parameters: cfg' seq' subject' start' validity
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 7 parameters. Parameters: cfg' seq' key' digest' subject' start' validity
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 7 parameters. Parameters: seq' key' digest' subject' start' validity' extensions
Long Parameter List,OpenSSL.X509,X509Extension,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509Extension.cs,X509Extension,The method has 5 parameters. Parameters: issuer' subject' name' critical' value
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter CRYPTO_locking_callback_delegate is 32.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG is 39.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG is 34.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER is 33.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_SSLEAY_080_CLIENT_DH_BUG is 31.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS is 34.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION is 45.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_CIPHER_SERVER_PREFERENCE is 31.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG is 38.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER is 35.
Long Identifier,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,,The length of the parameter SSL_VERIFY_FAIL_IF_NO_PEER_CERT is 31.
Long Identifier,OpenSSL,SSL_CTX,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslContext.cs,,The length of the parameter stats_sess_connect_renegotiate is 30.
Long Identifier,OpenSSL,SSL_CTX,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslContext.cs,,The length of the parameter default_passwd_callback_userdata is 32.
Long Identifier,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,,The length of the parameter remoteCertificateValidationCallback is 35.
Long Identifier,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,,The length of the parameter localCertificateSelectionCallback is 33.
Long Identifier,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,,The length of the parameter localCertificateSelectionCallback is 33.
Long Identifier,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,,The length of the parameter remoteCertificateSelectionCallback is 34.
Long Identifier,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,,The length of the parameter checkCertificateRevocationStatus is 32.
Long Identifier,OpenSSL,SslStreamClient,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamClient.cs,,The length of the parameter internalCertificateSelectionCallback is 36.
Long Statement,OpenSSL.Core,Asn1DateTime,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Asn1DateTime.cs,AsnTimeToDateTime,The length of the statement  "			return DateTime.ParseExact(str' fmts' new DateTimeFormatInfo()' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 131.
Long Statement,OpenSSL.Crypto,CryptoKey,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\CryptoKey.cs,WritePrivateKey,The length of the statement  "			Native.ExpectSuccess(Native.PEM_write_bio_PKCS8PrivateKey(bp.Handle' this.ptr' cipher.Handle' IntPtr.Zero' 0' thunk.Callback' IntPtr.Zero)); " is 140.
Long Statement,OpenSSL.Crypto,DSA,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\DSA.cs,FromPrivateKey,The length of the statement  "			return new DSA(Native.ExpectNonNull(Native.PEM_read_bio_DSAPrivateKey(bio.Handle' IntPtr.Zero' null' IntPtr.Zero))' true); " is 122.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,AuthenticateAsClient,The length of the statement  "			EndAuthenticateAsClient(BeginAuthenticateAsClient(targetHost' certificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' null' null)); " is 167.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsClient,The length of the statement  "			return BeginAuthenticateAsClient(targetHost' null' null' SslProtocols.Default' SslStrength.Medium' false' asyncCallback' asyncState); " is 133.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsClient,The length of the statement  "			SslStreamClient client_stream = new SslStreamClient(InnerStream' false' targetHost' clientCertificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' remoteCertificateValidationCallback' localCertificateSelectionCallback); " is 254.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,AuthenticateAsServer,The length of the statement  "			EndAuthenticateAsServer(BeginAuthenticateAsServer(serverCertificate' clientCertificateRequired' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' null' null)); " is 187.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsServer,The length of the statement  "			return BeginAuthenticateAsServer(serverCertificate' false' null' SslProtocols.Default' SslStrength.Medium' false' asyncCallback' asyncState); " is 141.
Long Statement,OpenSSL,SslStream,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStream.cs,BeginAuthenticateAsServer,The length of the statement  "			SslStreamServer server_stream = new SslStreamServer(InnerStream' false' serverCertificate' clientCertificateRequired' caCerts' enabledSslProtocols' sslStrength' checkCertificateRevocation' remoteCertificateValidationCallback); " is 226.
Long Statement,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginRead,The length of the statement  "			InternalAsyncResult internalAsyncResult = new InternalAsyncResult(asyncCallback' asyncState' buffer' offset' count' false' proceedAfterHandshake); " is 146.
Long Statement,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,InternalReadCallback,The length of the statement  "						innerStream.BeginRead(read_buffer' 0' read_buffer.Length' new AsyncCallback(InternalReadCallback)' internalAsyncResult); " is 120.
Long Statement,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,InternalReadCallback,The length of the statement  "						bytesReadIntoUserBuffer = decrypted_data_stream.Read(internalAsyncResult.Buffer' internalAsyncResult.Offset' internalAsyncResult.Count); " is 136.
Long Statement,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginWrite,The length of the statement  "			InternalAsyncResult asyncResult = new InternalAsyncResult(asyncCallback' asyncState' buffer' offset' count' true' proceedAfterHandshake); " is 137.
Long Statement,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,BeginHandshake,The length of the statement  "			InternalAsyncResult handshakeAsyncResult = new InternalAsyncResult(new AsyncCallback(AsyncHandshakeComplete)' readwriteAsyncResult' null' 0' 0' readwriteAsyncResult.IsWriteOperation' readwriteAsyncResult.ContinueAfterHandshake); " is 228.
Long Statement,OpenSSL,SslStreamClient,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamClient.cs,InitializeClientContext,The length of the statement  "				sslContext.SetVerify(VerifyMode.SSL_VERIFY_PEER | VerifyMode.SSL_VERIFY_FAIL_IF_NO_PEER_CERT' remoteCertificateSelectionCallback); " is 130.
Long Statement,OpenSSL,SslStreamClient,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamClient.cs,InternalClientCertificateSelectionCallback,The length of the statement  "				X509Certificate cert = localCertificateSelectionCallback(this' targetHost' clientCertificates' ssl.GetPeerCertificate()' strIssuers); " is 133.
Long Statement,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,ProcessHandshake,The length of the statement  "            if (lastError == SslError.SSL_ERROR_WANT_READ || lastError == SslError.SSL_ERROR_WANT_WRITE || lastError == SslError.SSL_ERROR_NONE) " is 132.
Long Statement,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,InitializeServerContext,The length of the statement  "                sslContext.SetVerify(VerifyMode.SSL_VERIFY_PEER | VerifyMode.SSL_VERIFY_FAIL_IF_NO_PEER_CERT' remoteCertificateSelectionCallback); " is 130.
Virtual Method Call from Constructor,OpenSSL.Core,Base,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Base.cs,Base,The constructor "Base" calls a virtual method "OnNewHandle".
Empty Catch Block,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,Native,The method has an empty catch block.
Magic Number,OpenSSL.Core,Asn1DateTime,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Asn1DateTime.cs,DateTimeToTimeT,The following statement contains a magic number: DateTime dt1970 = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,OpenSSL.Core,Asn1DateTime,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Asn1DateTime.cs,DateTimeToTimeT,The following statement contains a magic number: long ticks = (value.Ticks - dt1970.Ticks) / 10000000L;
Magic Number,OpenSSL.Core,GeneratorThunk,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\BigNum.cs,GeneratorThunk,The following statement contains a magic number: this.gencb.ver = 2;
Magic Number,OpenSSL.Core,BIO,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\BIO.cs,ReadString,The following statement contains a magic number: const int BLOCK_SIZE = 64;
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,Native,The following statement contains a magic number: const int sz = 4096;
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,Native,The following statement contains a magic number: byte[] seed = new byte[128];
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,BIO_get_md,The following statement contains a magic number: IntPtr ptr = Marshal.AllocHGlobal(4);
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,BIO_get_md_ctx,The following statement contains a magic number: IntPtr ptr = Marshal.AllocHGlobal(4);
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PtrToStringAnsi,The following statement contains a magic number: i < 1024
Magic Number,OpenSSL.Core,Native,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Native.cs,PtrToStringAnsi,The following statement contains a magic number: len == 1024
Magic Number,OpenSSL.Core,Random,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Core\Random.cs,GetFilename,The following statement contains a magic number: byte[] buf = new byte[1024];
Magic Number,OpenSSL.Crypto,DSA,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\DSA.cs,DSA,The following statement contains a magic number: Native.ExpectSuccess(Native.DSA_generate_parameters_ex(  				this.ptr'  				512'  				null' 0'  				out this.counter'  				out this.h'  				null)  			);
Magic Number,OpenSSL.Crypto,MessageDigestContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\MessageDigest.cs,Sign,The following statement contains a magic number: ArraySegment<byte> bytes = bmd.ReadBytes(1024 * 4);
Magic Number,OpenSSL.Crypto,MessageDigestContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\MessageDigest.cs,Sign,The following statement contains a magic number: ArraySegment<byte> bytes = bmd.ReadBytes(1024 * 4);
Magic Number,OpenSSL.Crypto,MessageDigestContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\MessageDigest.cs,Verify,The following statement contains a magic number: ArraySegment<byte> bytes = bmd.ReadBytes(1024 * 4);
Magic Number,OpenSSL.Crypto,MessageDigestContext,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\MessageDigest.cs,Verify,The following statement contains a magic number: ArraySegment<byte> bytes = bmd.ReadBytes(1024 * 4);
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,ExportPrivateKeyLength,The following statement contains a magic number: return 512;
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,ExportPrivateKeyLength,The following statement contains a magic number: return 1024;
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: return 5;
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Magic Number,OpenSSL,SslStreamBase,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamBase.cs,SslStreamBase,The following statement contains a magic number: read_buffer = new byte[16384];
Magic Number,OpenSSL,SslStreamServer,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslStreamServer.cs,InitializeServerContext,The following statement contains a magic number: sslContext.SetVerifyDepth(10);
Magic Number,OpenSSL.X509,Identity,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\Identity.cs,CreateRequest,The following statement contains a magic number: X509Request request = new X509Request(2' subject' this.key);
Magic Number,OpenSSL.X509,X509Certificate,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509Certificate.cs,X509Certificate,The following statement contains a magic number: this.Version = 2;
Magic Number,OpenSSL.X509,X509Name,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\X509\X509Name.cs,GetTextByNid,The following statement contains a magic number: byte[] buf = new byte[1024];
Missing Default,OpenSSL.Crypto,CryptoKey,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\Crypto\CryptoKey.cs,Print,The following switch statement is missing a default case: switch (this.Type)  			{  				case KeyType.RSA:  					GetRSA().Print(bio);  					break;  				case KeyType.DSA:  					GetDSA().Print(bio);  					break;  				case KeyType.EC:  					break;  				case KeyType.DH:  					GetDH().Print(bio);  					break;  			}
Missing Default,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_MKEY_MASK)  			{  				case SSL_kRSA:  					keyExchangeAlgorithm = ExchangeAlgorithmType.RsaKeyX;  					break;  				case SSL_kDHr:  				case SSL_kDHd:  				case SSL_kEDH:  					keyExchangeAlgorithm = ExchangeAlgorithmType.DiffieHellman;  					break;  				case SSL_kKRB5:         /* VRS */  				case SSL_KRB5:          /* VRS */  					keyExchangeAlgorithm = ExchangeAlgorithmType.Kerberos;  					break;  				case SSL_kFZA:  					keyExchangeAlgorithm = ExchangeAlgorithmType.Fortezza;  					break;  				case SSL_kECDH:  				case SSL_kECDHE:  					keyExchangeAlgorithm = ExchangeAlgorithmType.ECDiffieHellman;  					break;  			}
Missing Default,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_AUTH_MASK)  			{  				case SSL_aRSA:  					authMethod = AuthenticationMethod.Rsa;  					break;  				case SSL_aDSS:  					authMethod = AuthenticationMethod.Dss;  					break;  				case SSL_aDH:  					authMethod = AuthenticationMethod.DiffieHellman;  					break;  				case SSL_aKRB5:         /* VRS */  				case SSL_KRB5:          /* VRS */  					authMethod = AuthenticationMethod.Kerberos;  					break;  				case SSL_aFZA:  				case SSL_aNULL:  					authMethod = AuthenticationMethod.None;  					break;  				case SSL_aECDSA:  					authMethod = AuthenticationMethod.ECDsa;  					break;  			}
Missing Default,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_ENC_MASK)  			{  				case SSL_DES:  					cipherAlgorithm = CipherAlgorithmType.Des;  					if (isExport && keyLength == 5)  					{  						cipherStrength = 40;  					}  					else  					{  						cipherStrength = 56;  					}  					break;  				case SSL_3DES:  					cipherAlgorithm = CipherAlgorithmType.TripleDes;  					cipherStrength = 168;  					break;  				case SSL_RC4:  					cipherAlgorithm = CipherAlgorithmType.Rc4;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC)  						{  							cipherStrength = 64;  						}  						else  						{  							cipherStrength = 128;  						}  					}  					break;  				case SSL_RC2:  					cipherAlgorithm = CipherAlgorithmType.Rc2;  					if (isExport)  					{  						if (keyLength == 5)  						{  							cipherStrength = 40;  						}  						else  						{  							cipherStrength = 56;  						}  					}  					else  					{  						cipherStrength = 128;  					}  					break;  				case SSL_IDEA:  					cipherAlgorithm = CipherAlgorithmType.Idea;  					cipherStrength = 128;  					break;  				case SSL_eFZA:  					cipherAlgorithm = CipherAlgorithmType.Fortezza;  					break;  				case SSL_eNULL:  					cipherAlgorithm = CipherAlgorithmType.None;  					break;  				case SSL_AES:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}  					break;  				case SSL_CAMELLIA:  					switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}  					break;  				case SSL_SEED:  					cipherAlgorithm = CipherAlgorithmType.Seed;  					cipherStrength = 128;  					break;  			}
Missing Default,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Aes128; break;  						case 192: cipherAlgorithm = CipherAlgorithmType.Aes192; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Aes256; break;  					}
Missing Default,OpenSSL,SslCipher,D:\research\architectureSmells\repos\danielrmz_localtunnel-net-client\packages\OpenSSL\ManagedOpenSsl\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.strength_bits)  					{  						case 128: cipherAlgorithm = CipherAlgorithmType.Camellia128; break;  						case 256: cipherAlgorithm = CipherAlgorithmType.Camellia256; break;  					}
