Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery<T>,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,CompileExpr,The method has 118 lines of code.
Long Parameter List,SQLite,SQLite3,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLite,SQLite3,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLite,SQLite3,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Statement,LocalTunnel.Library.Models,Port,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Models\Port.cs,AddUsage,The length of the statement  "                found = listUsed.Where(port => port.Number == portNumber && port.Host == localHost && port.ServiceHost.ToLower().Trim().Equals(serviceHost.ToLower().Trim())).FirstOrDefault(); " is 175.
Long Statement,LocalTunnel.Library.Models,Port,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Models\Port.cs,GetConnection,The length of the statement  "            string dirName = string.Format("{0}\\App_Data"' new FileInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).DirectoryName); " is 136.
Long Statement,SQLite,SQLiteConnection,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,RunInTransaction,The length of the statement  "				throw new InvalidOperationException ("The connection must not already be in a transaction when RunInTransaction is called"); " is 124.
Long Statement,SQLite,Orm,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,TableQuery<T>,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,GenerateCommand,The length of the statement  "				var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,StartTunnel,The length of the statement  "                _client = new SshClient(_config.host' _config.user' new PrivateKeyFile(new MemoryStream(Encoding.Default.GetBytes(PrivateKey)))); " is 129.
Long Statement,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,StartTunnel,The length of the statement  "                _connectionPort = _client.AddForwardedPort<ForwardedPortRemote>((uint)_config.through_port'  connectHost' (uint)LocalPort); " is 123.
Complex Conditional,SQLite,Orm,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Empty Catch Block,SQLite,SQLiteConnection,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,CreateTable,The method has an empty catch block.
Magic Number,SQLite,SQLiteConnection,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);
Magic Number,SQLite,SQLiteConnection,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  				_sw.Stop ();  				_elapsedMilliseconds += _sw.ElapsedMilliseconds;  				Console.WriteLine ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0);  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				} else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					//  					return new CompileResult { CommandText = "\"" + mem.Member.Name + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  					if (mem.Member.MemberType == MemberTypes.Property) {  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);						  					} else if (mem.Member.MemberType == MemberTypes.Field) {  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);						  					} else {  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,SQLite,TableQuery<T>,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\App_Data\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  				throw new NotSupportedException ("Expression is NULL");  			} else if (expr is BinaryExpression) {  				var bin = (BinaryExpression)expr;  				  				var leftr = CompileExpr (bin.Left' queryArgs);  				var rightr = CompileExpr (bin.Right' queryArgs);    				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  				string text;  				if (leftr.CommandText == "?" && leftr.Value == null)  					text = CompileNullBinaryExpression(bin' rightr);  				else if (rightr.CommandText == "?" && rightr.Value == null)  					text = CompileNullBinaryExpression(bin' leftr);  				else  					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")";  				return new CompileResult { CommandText = text };  			} else if (expr.NodeType == ExpressionType.Call) {  				  				var call = (MethodCallExpression)expr;  				var args = new CompileResult[call.Arguments.Count];  				  				for (var i = 0; i < args.Length; i++) {  					args [i] = CompileExpr (call.Arguments [i]' queryArgs);  				}  				  				var sqlCall = "";  				  				if (call.Method.Name == "Like" && args.Length == 2) {  					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  				} else if (call.Method.Name == "Contains" && args.Length == 2) {  					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  				} else {  					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  				}  				return new CompileResult { CommandText = sqlCall };  				  			} else if (expr.NodeType == ExpressionType.Constant) {  				var c = (ConstantExpression)expr;  				queryArgs.Add (c.Value);  				return new CompileResult {  					CommandText = "?"'  					Value = c.Value  				};  			} else if (expr.NodeType == ExpressionType.Convert) {  				var u = (UnaryExpression)expr;  				var ty = u.Type;  				var valr = CompileExpr (u.Operand' queryArgs);  				return new CompileResult {  					CommandText = valr.CommandText'  					Value = valr.Value != null ? Convert.ChangeType (valr.Value' ty) : null  				};  			} else if (expr.NodeType == ExpressionType.MemberAccess) {  				var mem = (MemberExpression)expr;  				  				if (mem.Expression.NodeType == ExpressionType.Parameter) {  					//  					// This is a column of our table' output just the column name  					//  					return new CompileResult { CommandText = "\"" + mem.Member.Name + "\"" };  				} else {  					object obj = null;  					if (mem.Expression != null) {  						var r = CompileExpr (mem.Expression' queryArgs);  						if (r.Value == null) {  							throw new NotSupportedException ("Member access failed to compile expression");  						}  						if (r.CommandText == "?") {  							queryArgs.RemoveAt (queryArgs.Count - 1);  						}  						obj = r.Value;  					}  					  					//  					// Get the member value  					//  					object val = null;  					  					if (mem.Member.MemberType == MemberTypes.Property) {  						var m = (PropertyInfo)mem.Member;  						val = m.GetValue (obj' null);						  					} else if (mem.Member.MemberType == MemberTypes.Field) {  						var m = (FieldInfo)mem.Member;  						val = m.GetValue (obj);						  					} else {  						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType.ToString ());  					}  					  					//  					// Work special magic for enumerables  					//  					if (val != null && val is System.Collections.IEnumerable && !(val is string)) {  						var sb = new System.Text.StringBuilder();  						sb.Append("(");  						var head = "";  						foreach (var a in (System.Collections.IEnumerable)val) {  							queryArgs.Add(a);  							sb.Append(head);  							sb.Append("?");  							head = "'";  						}  						sb.Append(")");  						return new CompileResult {  							CommandText = sb.ToString()'  							Value = val  						};  					}  					else {  						queryArgs.Add (val);  						return new CompileResult {  							CommandText = "?"'  							Value = val  						};  					}  				}  			}
Magic Number,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,Tunnel,The following statement contains a magic number: string comment = string.Format("localtunnel-{0}"' (int)((DateTime.Now - new DateTime(1970' 1' 1).ToLocalTime()).TotalSeconds));
Magic Number,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,Tunnel,The following statement contains a magic number: Dex.Utilities.Cyrpto.RsaKeyPair key = Dex.Utilities.Cyrpto.GenerateRsaKeyPair(2048' comment);
Magic Number,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,Tunnel,The following statement contains a magic number: string comment = string.Format("localtunnel-{0}"' (int)((DateTime.Now - new DateTime(1970' 1' 1).ToLocalTime()).TotalSeconds));
Magic Number,LocalTunnel.Library,Tunnel,C:\repos\danielrmz_localtunnel-net-client\LocalTunnel.Library\Tunnel.cs,StartTunnel,The following statement contains a magic number: try              {                  _client = new SshClient(_config.host' _config.user' new PrivateKeyFile(new MemoryStream(Encoding.Default.GetBytes(PrivateKey))));                  _client.Connect();                  _client.KeepAliveInterval = new TimeSpan(0' 0' 5);                                    if (!_client.IsConnected)                  {                      throw new ServiceException("Can't start tunnel' try again.");                  }                    string connectHost = string.IsNullOrEmpty(this.LocalHost) ? "127.0.0.1" : this.LocalHost;                    _connectionPort = _client.AddForwardedPort<ForwardedPortRemote>((uint)_config.through_port'  connectHost' (uint)LocalPort);                  _connectionPort.Exception += new EventHandler<ExceptionEventArgs>(fw_Exception);                  _connectionPort.RequestReceived += new EventHandler<PortForwardEventArgs>(port_RequestReceived);                  _connectionPort.Start();              }              catch (Exception e)              {                  throw new ServiceException(e.Message);              }
