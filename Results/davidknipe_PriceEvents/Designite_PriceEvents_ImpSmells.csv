Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PriceEvents.Events,PriceEventsHandler,C:\repos\davidknipe_PriceEvents\PriceEvents\Events\PriceEventsHandler.cs,RaisePriceChanged,The length of the statement  "	EventHandler<PriceEventArgs> handler = this.Events [this.GetEventKey (PriceEventResources.PRICE_CHANGED_EVENT)] as EventHandler<PriceEventArgs>; " is 144.
Long Statement,PriceEvents.Events,PriceEventsHandler,C:\repos\davidknipe_PriceEvents\PriceEvents\Events\PriceEventsHandler.cs,RaisePriceDeleting,The length of the statement  "	EventHandler<PriceDeletingEventArgs> handler = this.Events [this.GetEventKey (PriceEventResources.PRICE_DELETING_EVENT)] as EventHandler<PriceDeletingEventArgs>; " is 161.
Long Statement,PriceEvents.Helpers,PriceEventHelpers,C:\repos\davidknipe_PriceEvents\PriceEvents\Helpers\PriceEventHelpers.cs,GetCurrentUsername,The length of the statement  "	return PrincipalInfo.CurrentPrincipal != null ? PrincipalInfo.CurrentPrincipal.Identity.Name : PriceEventResources.UNKNOWN; " is 123.
Long Statement,PriceEvents.Init,PriceEventsInit,C:\repos\davidknipe_PriceEvents\PriceEvents\Init\PriceEventsInit.cs,ConfigureContainer,The length of the statement  "	context.Container.Configure (c => c.For<IPriceService> ().Use<PriceServiceDatabase> ().EnrichWith (EnrichmentOf<PriceServiceInterceptor>.ForInterface<IPriceService>)); " is 167.
Long Statement,PriceEvents.Init,PriceEventsInit,C:\repos\davidknipe_PriceEvents\PriceEvents\Init\PriceEventsInit.cs,ConfigureContainer,The length of the statement  "	context.Container.Configure (c => c.For<IPriceDetailService> ().Use<PriceDetailDatabase> ().EnrichWith (EnrichmentOf<PriceDetailServiceInterceptor>.ForInterface<IPriceDetailService>)); " is 184.
Magic Number,PriceEvents.Interceptors,PriceServiceInterceptor,C:\repos\davidknipe_PriceEvents\PriceEvents\Interceptors\PriceServiceInterceptor.cs,broadcastEvent,The following statement contains a magic number: if (methodArguments != null && methodArguments.Length == 2 && methodArguments [1] != null) {  	var priceValues = methodArguments [1] as IEnumerable<IPriceDetailValue>;  	if (priceValues != null) {  		var prices = priceValues.ToList ().ConvertAll<IPriceValue> (x => x as IPriceValue);  		PriceEventsHandler.Instance.RaisePriceChanged (this' PriceEventHelpers.GetCurrentUsername ()' priceValues);  	}  }  
