Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessRequest,Cyclomatic complexity of the method is 9
Complex Method,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessResult,Cyclomatic complexity of the method is 18
Long Statement,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessRequest,The length of the statement  "		_keepAlive = (_httpVer == "1.0" && _context.Request.Headers.ValueIs (HttpHeaderKeys.Connection' "Keep-Alive"' false)) || !_context.Request.Headers.ValueIs (HttpHeaderKeys.Connection' "Close"' false); " is 199.
Magic Number,Simple.Owin.Servers.Tcp,TcpServer,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpServer.cs,TcpServer,The following statement contains a magic number: _listenPort = port ?? 80;  
Magic Number,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessRequest,The following statement contains a magic number: try {  	//build out request environment  	var requestEnvironment = OwinFactory.CreateScopedEnvironment (_sessionEnvironment);  	_context = OwinContext.Get (requestEnvironment);  	Trace ("Session - Process Request");  	//todo: configure OnSendingHeaders aggregator  	// parse request line  	HttpRequestLine requestLine = HttpRequestLine.Parse (_networkStream.ReadLine ());  	if (!requestLine.IsValid) {  		ProcessError (Status.Is.BadRequest);  		return _sessionCompleted.Task;  	}  	if (!ValidVerbs.Contains (requestLine.Method)) {  		ProcessError (Status.Is.NotImplemented);  		return _sessionCompleted.Task;  	}  	_context.Request.PathBase = string.Empty;  	_context.Request.Method = requestLine.Method;  	if (requestLine.Uri.StartsWith ("http"' StringComparison.OrdinalIgnoreCase)) {  		Uri requestUri;  		if (!Uri.TryCreate (requestLine.Uri' UriKind.Absolute' out requestUri)) {  			ProcessError (Status.Is.BadRequest);  			return _sessionCompleted.Task;  		}  		_context.Request.FullUri = requestUri;  	} else {  		_context.Request.Scheme = "http";  		var splitUri = requestLine.Uri.Split ('?');  		_context.Request.Path = splitUri [0];  		_context.Request.QueryString = splitUri.Length == 2 ? splitUri [1] : string.Empty;  	}  	_context.Request.Protocol = requestLine.HttpVersion;  	_httpVer = requestLine.HttpVersion.Substring (requestLine.HttpVersion.IndexOf ('/') + 1);  	// parse http headers  	var headers = new List<string> ();  	while (true) {  		string headerLine = _networkStream.ReadLine ();  		if (headerLine == string.Empty) {  			break;  		}  		headers.Add (headerLine);  	}  	_context.Request.Headers.AddRaw (headers);  	_keepAlive = (_httpVer == "1.0" && _context.Request.Headers.ValueIs (HttpHeaderKeys.Connection' "Keep-Alive"' false)) || !_context.Request.Headers.ValueIs (HttpHeaderKeys.Connection' "Close"' false);  	_context.Request.Body = _networkStream;  	_context.Response.Body = _output;  	// handle 100-continue  	_context.Request.Headers.GetValue (HttpHeaderKeys.Expect);  	if (_context.Request.Headers.ValueIs (HttpHeaderKeys.Expect' "100-Continue"' false)) {  		_networkStream.WriteAsync ("HTTP/1.1 100 Continue\r\n"' Encoding.UTF8).ContinueWith (task => {  			if (task.IsFaulted) {  				SessionFaulted (task.Exception);  				return;  			}  			_appFunc (_context.Environment).ContinueWith (ProcessResult);  		});  	} else {  		_appFunc (_context.Environment).ContinueWith (ProcessResult);  	}  } catch (Exception exception) {  	SessionFaulted (exception);  }  
Magic Number,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessRequest,The following statement contains a magic number: if (requestLine.Uri.StartsWith ("http"' StringComparison.OrdinalIgnoreCase)) {  	Uri requestUri;  	if (!Uri.TryCreate (requestLine.Uri' UriKind.Absolute' out requestUri)) {  		ProcessError (Status.Is.BadRequest);  		return _sessionCompleted.Task;  	}  	_context.Request.FullUri = requestUri;  } else {  	_context.Request.Scheme = "http";  	var splitUri = requestLine.Uri.Split ('?');  	_context.Request.Path = splitUri [0];  	_context.Request.QueryString = splitUri.Length == 2 ? splitUri [1] : string.Empty;  }  
Magic Number,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessRequest,The following statement contains a magic number: _context.Request.QueryString = splitUri.Length == 2 ? splitUri [1] : string.Empty;  
Magic Number,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessKeepAlive,The following statement contains a magic number: _autoCloseSession = new Timer (_ => {  	_sessionCompleted.SetResult (0);  	Dispose ();  }' null' 2000' 2000);  
Magic Number,Simple.Owin.Servers.Tcp,TcpSession,F:\newReposMay17\EddieGarmon_Simple.Owin\Source\Servers\Simple.Owin.Servers.TcpServer\TcpSession.cs,ProcessKeepAlive,The following statement contains a magic number: _autoCloseSession = new Timer (_ => {  	_sessionCompleted.SetResult (0);  	Dispose ();  }' null' 2000' 2000);  
