Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipart,Cyclomatic complexity of the method is 11
Complex Method,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,Cyclomatic complexity of the method is 14
Complex Method,Simple.Owin.Helpers,StreamExtensions,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Helpers\StreamExtensions.cs,ReadLine,Cyclomatic complexity of the method is 8
Complex Method,Simple.Owin.Helpers,StreamExtensions,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Helpers\StreamExtensions.cs,ReadTo,Cyclomatic complexity of the method is 14
Long Parameter List,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartFile,The method has 5 parameters. Parameters: stream' form' fieldName' fileName' boundaryBytes
Long Parameter List,Simple.Owin.Helpers,AsyncCopyExecutor,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Helpers\StreamExtensions.cs,AsyncCopyExecutor,The method has 5 parameters. Parameters: source' destination' bufferSize' lengthToCopy' cancellationToken
Long Identifier,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,,The length of the parameter ContentDispositionFormDataRegex is 31.
Long Statement,Simple.Owin.SendFiles,ContextExtensions,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.SendFiles\ContextExtensions.cs,SendFile,The length of the statement  "            SendFileFunc send = context.Environment.GetValueOrCreate(OwinKeys.SendFile.Async' () => SendFileNaive.GetSender(context)); " is 122.
Long Statement,Simple.Owin.Helpers,ReflectionExtensions,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Helpers\ReflectionExtensions.cs,GetDelegate,The length of the statement  "            return (T)(object)Delegate.CreateDelegate(delegateType' onInstance' instanceMethodName' ignoreCase' throwOnBindFailure); " is 120.
Long Statement,Simple.Owin,OwinResponse,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\OwinResponse.cs,OnSendingHeaders,The length of the statement  "            var serverOnSendingHeaders = _environment.GetValueOrDefault<Action<Action<object>' object>>(OwinKeys.Server.OnSendingHeaders); " is 126.
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipart,The following statement contains a magic number: while (true) {                  currentLine = stream.ReadLine(Encoding.UTF8);                  // parse ContentDisposition line                  var match = ContentDispositionFormDataRegex.Match(currentLine);                  if (!match.Success) {                      form.IsValid = false;                      return TaskHelper.Completed(form);                  }                  string fieldName = match.Groups[1].Value;                  string fileName = match.Groups[2].Success ? match.Groups[3].Value : null;                    if (fileName != null) {                      if (!ParseMultipartFile(stream' form' fieldName' fileName' boundaryBytes)) {                          form.IsValid = false;                          return TaskHelper.Completed(form);                      }                  }                  else {                      if (!ParseMultipartField(stream' form' fieldName' boundaryBytes)) {                          form.IsValid = false;                          return TaskHelper.Completed(form);                      }                  }                    // check end or next                  currentLine = stream.ReadLine(Encoding.UTF8);                  // --boundary-- end                  if (currentLine == "--") {                      break;                  }                  // --boundary between                  if (currentLine != string.Empty) {                      form.IsValid = false;                      return TaskHelper.Completed(form);                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipart,The following statement contains a magic number: while (true) {                  currentLine = stream.ReadLine(Encoding.UTF8);                  // parse ContentDisposition line                  var match = ContentDispositionFormDataRegex.Match(currentLine);                  if (!match.Success) {                      form.IsValid = false;                      return TaskHelper.Completed(form);                  }                  string fieldName = match.Groups[1].Value;                  string fileName = match.Groups[2].Success ? match.Groups[3].Value : null;                    if (fileName != null) {                      if (!ParseMultipartFile(stream' form' fieldName' fileName' boundaryBytes)) {                          form.IsValid = false;                          return TaskHelper.Completed(form);                      }                  }                  else {                      if (!ParseMultipartField(stream' form' fieldName' boundaryBytes)) {                          form.IsValid = false;                          return TaskHelper.Completed(form);                      }                  }                    // check end or next                  currentLine = stream.ReadLine(Encoding.UTF8);                  // --boundary-- end                  if (currentLine == "--") {                      break;                  }                  // --boundary between                  if (currentLine != string.Empty) {                      form.IsValid = false;                      return TaskHelper.Completed(form);                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: while ((headerLine = stream.ReadLine(Encoding.UTF8)) != string.Empty) {                  // parse 'Content-" headers                  match = ContentTypeFormDataRegex.Match(headerLine);                  if (match.Success) {                      // nested: Content-Type: multipart/mixed; boundary=BbC04y                      contentType = match.Groups[1].Value.Trim();                      if (match.Groups[2].Success) {                          string fileBoundary = match.Groups[4].Value;                          byte[] fileBoundaryBytes = Encoding.UTF8.GetBytes("\r\n--" + fileBoundary);                          byte[] temp;                          if (!stream.ReadTo(fileBoundaryBytes' out temp)) {                              return false;                          }                          if (stream.ReadLine(Encoding.UTF8) != string.Empty) {                              return false;                          }                          bool moreFiles = true;                          while (moreFiles) {                              string line = stream.ReadLine(Encoding.UTF8);                              match = ContentDispositionFileRegex.Match(line);                              if (!match.Success) {                                  return false;                              }                              string filename = match.Groups[1].Value;                              if (!ParseMultipartFile(stream' form' fieldName' filename' fileBoundaryBytes)) {                                  return false;                              }                              line = stream.ReadLine(Encoding.UTF8);                              if (line == "--") {                                  moreFiles = false;                              }                              else if (line != string.Empty) {                                  return false;                              }                          }                          // NB: CrLf already ripped here                          var boundaryNoCrLf = new byte[boundaryBytes.Length - 2];                          Array.Copy(boundaryBytes' 2' boundaryNoCrLf' 0' boundaryBytes.Length - 2);                          if (!stream.ReadTo(boundaryNoCrLf' out temp)) {                              return false;                          }                          if (temp.Length != 0) {                              return false;                          }                          return true;                      }                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: while ((headerLine = stream.ReadLine(Encoding.UTF8)) != string.Empty) {                  // parse 'Content-" headers                  match = ContentTypeFormDataRegex.Match(headerLine);                  if (match.Success) {                      // nested: Content-Type: multipart/mixed; boundary=BbC04y                      contentType = match.Groups[1].Value.Trim();                      if (match.Groups[2].Success) {                          string fileBoundary = match.Groups[4].Value;                          byte[] fileBoundaryBytes = Encoding.UTF8.GetBytes("\r\n--" + fileBoundary);                          byte[] temp;                          if (!stream.ReadTo(fileBoundaryBytes' out temp)) {                              return false;                          }                          if (stream.ReadLine(Encoding.UTF8) != string.Empty) {                              return false;                          }                          bool moreFiles = true;                          while (moreFiles) {                              string line = stream.ReadLine(Encoding.UTF8);                              match = ContentDispositionFileRegex.Match(line);                              if (!match.Success) {                                  return false;                              }                              string filename = match.Groups[1].Value;                              if (!ParseMultipartFile(stream' form' fieldName' filename' fileBoundaryBytes)) {                                  return false;                              }                              line = stream.ReadLine(Encoding.UTF8);                              if (line == "--") {                                  moreFiles = false;                              }                              else if (line != string.Empty) {                                  return false;                              }                          }                          // NB: CrLf already ripped here                          var boundaryNoCrLf = new byte[boundaryBytes.Length - 2];                          Array.Copy(boundaryBytes' 2' boundaryNoCrLf' 0' boundaryBytes.Length - 2);                          if (!stream.ReadTo(boundaryNoCrLf' out temp)) {                              return false;                          }                          if (temp.Length != 0) {                              return false;                          }                          return true;                      }                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: while ((headerLine = stream.ReadLine(Encoding.UTF8)) != string.Empty) {                  // parse 'Content-" headers                  match = ContentTypeFormDataRegex.Match(headerLine);                  if (match.Success) {                      // nested: Content-Type: multipart/mixed; boundary=BbC04y                      contentType = match.Groups[1].Value.Trim();                      if (match.Groups[2].Success) {                          string fileBoundary = match.Groups[4].Value;                          byte[] fileBoundaryBytes = Encoding.UTF8.GetBytes("\r\n--" + fileBoundary);                          byte[] temp;                          if (!stream.ReadTo(fileBoundaryBytes' out temp)) {                              return false;                          }                          if (stream.ReadLine(Encoding.UTF8) != string.Empty) {                              return false;                          }                          bool moreFiles = true;                          while (moreFiles) {                              string line = stream.ReadLine(Encoding.UTF8);                              match = ContentDispositionFileRegex.Match(line);                              if (!match.Success) {                                  return false;                              }                              string filename = match.Groups[1].Value;                              if (!ParseMultipartFile(stream' form' fieldName' filename' fileBoundaryBytes)) {                                  return false;                              }                              line = stream.ReadLine(Encoding.UTF8);                              if (line == "--") {                                  moreFiles = false;                              }                              else if (line != string.Empty) {                                  return false;                              }                          }                          // NB: CrLf already ripped here                          var boundaryNoCrLf = new byte[boundaryBytes.Length - 2];                          Array.Copy(boundaryBytes' 2' boundaryNoCrLf' 0' boundaryBytes.Length - 2);                          if (!stream.ReadTo(boundaryNoCrLf' out temp)) {                              return false;                          }                          if (temp.Length != 0) {                              return false;                          }                          return true;                      }                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: while ((headerLine = stream.ReadLine(Encoding.UTF8)) != string.Empty) {                  // parse 'Content-" headers                  match = ContentTypeFormDataRegex.Match(headerLine);                  if (match.Success) {                      // nested: Content-Type: multipart/mixed; boundary=BbC04y                      contentType = match.Groups[1].Value.Trim();                      if (match.Groups[2].Success) {                          string fileBoundary = match.Groups[4].Value;                          byte[] fileBoundaryBytes = Encoding.UTF8.GetBytes("\r\n--" + fileBoundary);                          byte[] temp;                          if (!stream.ReadTo(fileBoundaryBytes' out temp)) {                              return false;                          }                          if (stream.ReadLine(Encoding.UTF8) != string.Empty) {                              return false;                          }                          bool moreFiles = true;                          while (moreFiles) {                              string line = stream.ReadLine(Encoding.UTF8);                              match = ContentDispositionFileRegex.Match(line);                              if (!match.Success) {                                  return false;                              }                              string filename = match.Groups[1].Value;                              if (!ParseMultipartFile(stream' form' fieldName' filename' fileBoundaryBytes)) {                                  return false;                              }                              line = stream.ReadLine(Encoding.UTF8);                              if (line == "--") {                                  moreFiles = false;                              }                              else if (line != string.Empty) {                                  return false;                              }                          }                          // NB: CrLf already ripped here                          var boundaryNoCrLf = new byte[boundaryBytes.Length - 2];                          Array.Copy(boundaryBytes' 2' boundaryNoCrLf' 0' boundaryBytes.Length - 2);                          if (!stream.ReadTo(boundaryNoCrLf' out temp)) {                              return false;                          }                          if (temp.Length != 0) {                              return false;                          }                          return true;                      }                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: while ((headerLine = stream.ReadLine(Encoding.UTF8)) != string.Empty) {                  // parse 'Content-" headers                  match = ContentTypeFormDataRegex.Match(headerLine);                  if (match.Success) {                      // nested: Content-Type: multipart/mixed; boundary=BbC04y                      contentType = match.Groups[1].Value.Trim();                      if (match.Groups[2].Success) {                          string fileBoundary = match.Groups[4].Value;                          byte[] fileBoundaryBytes = Encoding.UTF8.GetBytes("\r\n--" + fileBoundary);                          byte[] temp;                          if (!stream.ReadTo(fileBoundaryBytes' out temp)) {                              return false;                          }                          if (stream.ReadLine(Encoding.UTF8) != string.Empty) {                              return false;                          }                          bool moreFiles = true;                          while (moreFiles) {                              string line = stream.ReadLine(Encoding.UTF8);                              match = ContentDispositionFileRegex.Match(line);                              if (!match.Success) {                                  return false;                              }                              string filename = match.Groups[1].Value;                              if (!ParseMultipartFile(stream' form' fieldName' filename' fileBoundaryBytes)) {                                  return false;                              }                              line = stream.ReadLine(Encoding.UTF8);                              if (line == "--") {                                  moreFiles = false;                              }                              else if (line != string.Empty) {                                  return false;                              }                          }                          // NB: CrLf already ripped here                          var boundaryNoCrLf = new byte[boundaryBytes.Length - 2];                          Array.Copy(boundaryBytes' 2' boundaryNoCrLf' 0' boundaryBytes.Length - 2);                          if (!stream.ReadTo(boundaryNoCrLf' out temp)) {                              return false;                          }                          if (temp.Length != 0) {                              return false;                          }                          return true;                      }                  }              }
Magic Number,Simple.Owin.Forms,FormData,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin.Forms\FormData.cs,ParseMultipartField,The following statement contains a magic number: Encoding encoding = match.Success ? Encoding.GetEncoding(match.Groups[2].Value) : Encoding.UTF8;
Magic Number,Simple.Owin.Helpers,StreamExtensions,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Helpers\StreamExtensions.cs,CopyToAsync,The following statement contains a magic number: long bufferSize = 4096;
Magic Number,Simple.Owin,HttpHeaderLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpHeaderLine.cs,HttpHeaderLine,The following statement contains a magic number: var parts = httpHeaderLine.Split(new[] { ':' }' 2);
Magic Number,Simple.Owin,HttpHeaderLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpHeaderLine.cs,HttpHeaderLine,The following statement contains a magic number: for (int i = 1; i < parts1.Length; i++) {                  var prop = parts1[i].Split(new[] { '=' }' 2);                  _properties.Add(prop[0]' prop[1]);              }
Magic Number,Simple.Owin,HttpHeaders,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpHeaders.cs,AddRaw,The following statement contains a magic number: if (split.Length > 2) {                  throw new Exception("invalid header format.");              }
Magic Number,Simple.Owin,HttpRequestLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpRequestLine.cs,Parse,The following statement contains a magic number: switch (parts.Length) {                  case 0:                      return Invalid;                  case 1:                      return new HttpRequestLine(parts[0]);                  case 2:                      return new HttpRequestLine(parts[0]' parts[1]);                  case 3:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]);                  default:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]) { IsValid = false };              }
Magic Number,Simple.Owin,HttpRequestLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpRequestLine.cs,Parse,The following statement contains a magic number: switch (parts.Length) {                  case 0:                      return Invalid;                  case 1:                      return new HttpRequestLine(parts[0]);                  case 2:                      return new HttpRequestLine(parts[0]' parts[1]);                  case 3:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]);                  default:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]) { IsValid = false };              }
Magic Number,Simple.Owin,HttpRequestLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpRequestLine.cs,Parse,The following statement contains a magic number: switch (parts.Length) {                  case 0:                      return Invalid;                  case 1:                      return new HttpRequestLine(parts[0]);                  case 2:                      return new HttpRequestLine(parts[0]' parts[1]);                  case 3:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]);                  default:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]) { IsValid = false };              }
Magic Number,Simple.Owin,HttpRequestLine,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\HttpRequestLine.cs,Parse,The following statement contains a magic number: switch (parts.Length) {                  case 0:                      return Invalid;                  case 1:                      return new HttpRequestLine(parts[0]);                  case 2:                      return new HttpRequestLine(parts[0]' parts[1]);                  case 3:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]);                  default:                      return new HttpRequestLine(parts[0]' parts[1]' parts[2]) { IsValid = false };              }
Magic Number,Simple.Owin,OwinContext,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\OwinContext.cs,OwinContext,The following statement contains a magic number: ContextKey = string.Format("{0}:{1}:{2}"' OwinKeys.Simple.Context' assemblyName.Name' assemblyName.Version.ToString(3));
Magic Number,Simple.Owin,OwinRequest,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\OwinRequest.cs,MakeUri,The following statement contains a magic number: int port = _environment.GetValueOrDefault(OwinKeys.Server.LocalPort' 80);
Magic Number,Simple.Owin,QueryString,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\QueryString.cs,Parse,The following statement contains a magic number: foreach (var chunk in chunks) {                  var parts = chunk.Split('=');                  if (!workingDictionary.ContainsKey(parts[0])) {                      workingDictionary.Add(parts[0]' new List<string>());                  }                  workingDictionary[parts[0]].Add(parts.Length == 2 ? UrlHelper.Decode(parts[1]) : string.Empty);              }
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,AcceptedRedirect,The following statement contains a magic number: return new Status(202' "Accepted"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,CreatedRedirect,The following statement contains a magic number: return new Status(201' "Created"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,Found,The following statement contains a magic number: return new Status(302' "Found"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,MovedPermanently,The following statement contains a magic number: return new Status(301' "Moved Permanently"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,SeeOther,The following statement contains a magic number: return new Status(303' "See Other"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,TemporaryRedirect,The following statement contains a magic number: return new Status(307' "Temporary Redirect"' location);
Magic Number,Simple.Owin,Is,C:\repos\EddieGarmon_Simple.Owin\Source\Framework\Simple.Owin\Status.cs,UseProxy,The following statement contains a magic number: return new Status(305' "Use Proxy"' location);
