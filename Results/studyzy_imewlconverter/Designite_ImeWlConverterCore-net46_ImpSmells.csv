Implementation smell,Namespace,Class,File,Method,Description
Long Method,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The method has 162 lines of code.
Long Method,Studyzy.IMEWLConverter.Helpers,FileOperationHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\FileOperationHelper.cs,AutoMatchSourceWLType,The method has 104 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The method has 107 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The method has 116 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The method has 107 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterDynHeader.cs,Decode,The method has 128 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestArchive,The method has 126 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The method has 248 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLocalEntryHeader,The method has 118 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,The method has 117 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,RunUpdates,The method has 137 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The method has 150 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,The method has 106 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,PutNextEntry,The method has 221 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,CloseEntry,The method has 105 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,Finish,The method has 132 lines of code.
Complex Method,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,Run,Cyclomatic complexity of the method is 14
Complex Method,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,Cyclomatic complexity of the method is 38
Complex Method,Studyzy.IMEWLConverter,MainBody,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\MainBody.cs,GenerateDestinationCode,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,Cyclomatic complexity of the method is 11
Complex Method,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetFirstSecondLastCode,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetChaoyin,Cyclomatic complexity of the method is 9
Complex Method,Studyzy.IMEWLConverter.Helpers,CodeTypeHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\CodeTypeHelper.cs,GetCodeTypeName,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.Helpers,CodeTypeHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\CodeTypeHelper.cs,GetGenerater,Cyclomatic complexity of the method is 17
Complex Method,Studyzy.IMEWLConverter.Helpers,CollectionHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\CollectionHelper.cs,GetString,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.Helpers,FileOperationHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\FileOperationHelper.cs,AutoMatchSourceWLType,Cyclomatic complexity of the method is 21
Complex Method,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.IME,Rime,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Rime.cs,ExportLine,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,Cyclomatic complexity of the method is 14
Complex Method,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,Cyclomatic complexity of the method is 8
Complex Method,Studyzy.IMEWLConverter.IME,Xiaoxiao,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Xiaoxiao.cs,Export,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Core,FileSystemScanner,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\FileSystemScanner.cs,ScanDir,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Core,NameFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\NameFilter.cs,SplitQuoted,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\StreamUtils.cs,Copy,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\WindowsPathUtils.cs,DropPathRoot,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,SetLevel,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,Cyclomatic complexity of the method is 23
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractZip,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractFileEntry,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractEntry,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\WindowsNameTransform.cs,MakeValidName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntryFactory.cs,MakeFileEntry,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestArchive,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,Cyclomatic complexity of the method is 42
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,BeginUpdate,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLocalEntryHeader,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteCentralDirectoryHeader,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,RunUpdates,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLocalHeader,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,CloseEntry,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,InitialRead,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,BodyRead,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,PutNextEntry,Cyclomatic complexity of the method is 33
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,CloseEntry,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,Finish,Cyclomatic complexity of the method is 19
Long Parameter List,Studyzy.IMEWLConverter.Entities,WordLibraryStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\WordLibraryStream.cs,WordLibraryStream,The method has 5 parameters. Parameters: import' export' path' encoding' sw
Long Parameter List,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The method has 7 parameters. Parameters: inflatedBytes' offsetWords' offsetXml' dataLen' wordStringDecoder' xmlStringDecoder' i
Long Parameter List,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,GetPyAndWord,The method has 5 parameters. Parameters: fs' dict' attriPos1' attriPos2' userHeader
Long Parameter List,Studyzy.IMEWLConverter.Language,SystemKernel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Language\SystemKernel.cs,LCMapString,The method has 6 parameters. Parameters: Locale' dwMapFlags' lpSrcStr' cchSrc' lpDestStr' cchDest
Long Parameter List,ICSharpCode.SharpZipLib.Core,ExtendedPathFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\PathFilter.cs,ExtendedPathFilter,The method has 5 parameters. Parameters: filter' minSize' maxSize' minDate' maxDate
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\StreamUtils.cs,Copy,The method has 7 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\StreamUtils.cs,Copy,The method has 8 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name' fixedTarget
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicEncryptCryptoTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicDecryptCryptoTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESTransform.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: zipFileName' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: outputStream' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractZip,The method has 7 parameters. Parameters: zipFileName' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractZip,The method has 8 parameters. Parameters: inputStream' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' isStreamOwner
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CopyBytes,The method has 5 parameters. Parameters: update' destination' source' bytesToCopy' updateCrc
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CopyEntryDataDirect,The method has 5 parameters. Parameters: update' stream' updateCrc' destinationPosition' sourcePosition
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralFileHeaderSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralDirLocatorSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipConstants.cs,,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,UpdateCommentOnly,The length of the parameter CentralHeaderCommentSizeOffset is 30.
Long Statement,Studyzy.IMEWLConverter.IME,MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\MsPinyin.cs,Export,The length of the statement  "                "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<ns1:Dictionary xmlns:ns1=\"http://www.microsoft.com/ime/dctx\">"); " is 133.
Long Statement,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,GetPyAndWord,The length of the statement  "            var wordLibrary = new WordLibrary() { Word = word.WordString'Rank=(int)word.Attribute.Frequency'CodeType=CodeType.NoCode }; " is 123.
Long Statement,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetDataPosition,The length of the statement  "                Debug.WriteLine($"GetData overflow data_id: {dataId} offset: {offset}\nheader [ used: {header.UsedDataSize} size: {header.DataSize} ]"); " is 136.
Long Statement,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESStream.cs,Read,The length of the statement  "                            throw new Exception("AES Authentication Code does not match. This is a super-CRC check on the data in the file after compression and encryption. \r\n" " is 150.
Complex Conditional,Studyzy.IMEWLConverter.Helpers,PinyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\PinyinHelper.cs,AddToneToPinyin,The conditional expression  "pinyin == py + "0" || pinyin == py + "1" || pinyin == py + "2" || pinyin == py + "3" ||                          pinyin == py + "4" || pinyin == py + "5""  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\WindowsPathUtils.cs,DropPathRoot,The conditional expression  "(index <= path.Length) &&                                 (((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[curMatch + best_len] != scan_end ||                      window[curMatch + best_len - 1] != scan_end1 ||                      window[curMatch] != window[scan] ||                      window[curMatch + 1] != window[scan + 1]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      window[++scan] == window[++match] &&                      (scan < strend)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= MAX_BLOCK_SIZE) || // Block is full                  (blockStart < WSIZE && storedLength >= MAX_DIST) || // Block may move out of window                  flush"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= MIN_MATCH &&                      (hashHead = InsertString()) != 0 &&                      strategy != DeflateStrategy.HuffmanOnly &&                      strstart - hashHead <= MAX_DIST &&                      FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&                          hashHead != 0 &&                          strstart - hashHead <= MAX_DIST &&                          FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 &&                              (strategy == DeflateStrategy.Filtered ||                               (matchLen == MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The conditional expression  "(thisDiskNumber == 0xffff) ||                  (startCentralDirDisk == 0xffff) ||                  (entriesForThisDisk == 0xffff) ||                  (entriesForWholeCentralDir == 0xffff) ||                  (centralDirSize == 0xffffffff) ||                  (offsetOfCentralDir == 0xffffffff)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "header == ZipConstants.CentralHeaderSignature ||                  header == ZipConstants.EndOfCentralDirectorySignature ||                  header == ZipConstants.CentralHeaderDigitalSignature ||                  header == ZipConstants.ArchiveExtraDataSignature ||                  header == ZipConstants.Zip64CentralFileHeaderSignature"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "method == (int) CompressionMethod.Stored &&                  (!isCrypted && csize != size || (isCrypted && csize - ZipConstants.CryptoHeaderSize != size))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,BodyRead,The conditional expression  "(flags & 8) == 0 &&                              (inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)"  is complex.
Empty Catch Block,Studyzy.IMEWLConverter.IME,MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\MsPinyin.cs,Export,The method has an empty catch block.
Empty Catch Block,Studyzy.IMEWLConverter.IME,PinyinJiaJia,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\PinyinJiaJia.cs,ImportText,The method has an empty catch block.
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,ConsoleRun,The following statement contains a magic number: pattern.Sort = new List<int> {2' 1' 3};
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,ConsoleRun,The following statement contains a magic number: pattern.Sort = new List<int> {2' 1' 3};
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: wordLibraryImport = GetImportInterface(command.Substring(3));
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: wordLibraryExport = GetExportInterface(command.Substring(3));
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: codingFile = command.Substring(3);
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: var filterStrs = command.Substring(4);
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: var to = Convert.ToInt32(match.Groups[2].Value);
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: var codeType = command.Substring(4).ToLower();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: var rankType = command.Substring(3).ToLower();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: var os = command.Substring(4).ToLower();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: string ecodes = command.Substring(5);
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: format = command.Substring(3);
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: i < 3
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: pattern.CodeSplitString = format[3].ToString();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: pattern.SplitString = format[4].ToString();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: string t = format[5].ToString().ToLower();
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: pattern.ContainCode = (format[6].ToString().ToLower() == "y");
Magic Number,Studyzy.IMEWLConverter,ConsoleRun,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\ConsoleRun.cs,RunCommand,The following statement contains a magic number: pattern.ContainRank = (format[8].ToString().ToLower() == "y");
Magic Number,Studyzy.IMEWLConverter,MainBody,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\MainBody.cs,InitTimer,The following statement contains a magic number: int interval = 3000;
Magic Number,Studyzy.IMEWLConverter.Entities,FilterConfig,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\FilterConfig.cs,FilterConfig,The following statement contains a magic number: WordLengthTo = 100;
Magic Number,Studyzy.IMEWLConverter.Entities,FilterConfig,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\FilterConfig.cs,FilterConfig,The following statement contains a magic number: WordRankTo = 999999;
Magic Number,Studyzy.IMEWLConverter.Entities,FilterConfig,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\FilterConfig.cs,FilterConfig,The following statement contains a magic number: WordRankPercentage = 100;
Magic Number,Studyzy.IMEWLConverter.Entities,ParsePattern,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\ParsePattern.cs,ParsePattern,The following statement contains a magic number: Sort = new List<int> {1' 2' 3};
Magic Number,Studyzy.IMEWLConverter.Entities,ParsePattern,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\ParsePattern.cs,ParsePattern,The following statement contains a magic number: Sort = new List<int> {1' 2' 3};
Magic Number,Studyzy.IMEWLConverter.Entities,ParsePattern,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Entities\ParsePattern.cs,BuildWlString,The following statement contains a magic number: dic.Add(Sort[2]' cp);
Magic Number,Studyzy.IMEWLConverter.Filters,LengthFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Filters\LengthFilter.cs,LengthFilter,The following statement contains a magic number: MaxLength = 9999;
Magic Number,Studyzy.IMEWLConverter.Filters,RankFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Filters\RankFilter.cs,RankFilter,The following statement contains a magic number: MaxLength = 999999;
Magic Number,Studyzy.IMEWLConverter.Filters,RankPercentageFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Filters\RankPercentageFilter.cs,Filter,The following statement contains a magic number: Percentage == 100
Magic Number,Studyzy.IMEWLConverter.Filters,RankPercentageFilter,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Filters\RankPercentageFilter.cs,Filter,The following statement contains a magic number: int count = list.Count*Percentage/100;
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: str.Length == 2
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: codes.Add(GetFirstAndLastCode(str[2]));
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: str.Length == 3
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: IList<string> code3 = GetFirstAndLastCode(str[2]);
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: codes.Add(GetFirstAndLastCode(str[3]));
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: str.Length == 4
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: codes.Add(GetFirstCode(str[2]));
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: codes.Add(GetLastCode(str[str.Length - 2]));
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetCodeOfString,The following statement contains a magic number: str.Length >= 5
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetFirstSecondLastCode,The following statement contains a magic number: arr[0].Length > 2
Magic Number,Studyzy.IMEWLConverter.Generaters,Cangjie5Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Cangjie5Generater.cs,GetFirstSecondLastCode,The following statement contains a magic number: cangjy.Code.Length > 2
Magic Number,Studyzy.IMEWLConverter.Generaters,SelfDefiningCodeGenerater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\SelfDefiningCodeGenerater.cs,GetCodeOfString,The following statement contains a magic number: string key = kv[0].Substring(5);
Magic Number,Studyzy.IMEWLConverter.Generaters,SelfDefiningCodeGenerater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\SelfDefiningCodeGenerater.cs,GetStringCode,The following statement contains a magic number: int cindex = Convert.ToInt32(s[2].ToString());
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: return code1.Substring(0' 2) + code2.Substring(0' 2);
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: return code1.Substring(0' 2) + code2.Substring(0' 2);
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: str.Length == 2
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: string code3 = GetDefaultCodeOfChar(str[2]);
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: return code1[0].ToString() + code2[0] + code3.Substring(0' 2);
Magic Number,Studyzy.IMEWLConverter.Generaters,Wubi86Generater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\Wubi86Generater.cs,GetStringWubiCode,The following statement contains a magic number: str.Length == 3
Magic Number,Studyzy.IMEWLConverter.Generaters,ZhengmaGenerater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Generaters\ZhengmaGenerater.cs,GetCodeOfString,The following statement contains a magic number: str.Length == 2
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt16,The following statement contains a magic number: var temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt16,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt32,The following statement contains a magic number: var temp = new byte[4];
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt32,The following statement contains a magic number: fs.Read(temp' 0' 4);
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadUInt16,The following statement contains a magic number: var temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadUInt16,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadUInt32,The following statement contains a magic number: var temp = new byte[4];
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadUInt32,The following statement contains a magic number: fs.Read(temp' 0' 4);
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt64,The following statement contains a magic number: var temp = new byte[8];
Magic Number,Studyzy.IMEWLConverter.Helpers,BinFileHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\BinFileHelper.cs,ReadInt64,The following statement contains a magic number: fs.Read(temp' 0' 8);
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetChaoyin,The following statement contains a magic number: int yindiao = 10;
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "q";                  case 3:                      return "z";                  case 4:                      return "p";                  case 5:                      return "";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "q";                  case 3:                      return "z";                  case 4:                      return "p";                  case 5:                      return "";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "q";                  case 3:                      return "z";                  case 4:                      return "p";                  case 5:                      return "";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "q";                  case 3:                      return "z";                  case 4:                      return "p";                  case 5:                      return "";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'q':                      return 2;                  case 'z':                      return 3;                  case 'p':                      return 4;                                    default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'q':                      return 2;                  case 'z':                      return 3;                  case 'p':                      return 4;                                    default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ChaoyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ChaoyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'q':                      return 2;                  case 'z':                      return 3;                  case 'p':                      return 4;                                    default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,FileOperationHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\FileOperationHelper.cs,AutoMatchSourceWLType,The following statement contains a magic number: i < 5
Magic Number,Studyzy.IMEWLConverter.Helpers,FileOperationHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\FileOperationHelper.cs,GetType,The following statement contains a magic number: byte[] ss = r.ReadBytes(3);
Magic Number,Studyzy.IMEWLConverter.Helpers,FileOperationHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\FileOperationHelper.cs,GetType,The following statement contains a magic number: ss[0] == 0xEF && ss[1] == 0xBB && ss[2] == 0xBF
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetZhuyin,The following statement contains a magic number: int yindiao = 10;
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "ˊ";                  case 3:                      return "ˇ";                  case 4:                      return "ˋ";                  case 5:                      return "·";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "ˊ";                  case 3:                      return "ˇ";                  case 4:                      return "ˋ";                  case 5:                      return "·";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "ˊ";                  case 3:                      return "ˇ";                  case 4:                      return "ˋ";                  case 5:                      return "·";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoZhuyin,The following statement contains a magic number: switch (yindiao)              {                  case 1:                      return "";                  case 2:                      return "ˊ";                  case 3:                      return "ˇ";                  case 4:                      return "ˋ";                  case 5:                      return "·";                  default:                      return "";              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'ˊ':                      return 2;                  case 'ˇ':                      return 3;                  case 'ˋ':                      return 4;                  case '·':                      return 5;                  default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'ˊ':                      return 2;                  case 'ˇ':                      return 3;                  case 'ˋ':                      return 4;                  case '·':                      return 5;                  default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'ˊ':                      return 2;                  case 'ˇ':                      return 3;                  case 'ˋ':                      return 4;                  case '·':                      return 5;                  default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.Helpers,ZhuyinHelper,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Helpers\ZhuyinHelper.cs,GetYindiaoPinyin,The following statement contains a magic number: switch (yindiao)              {                  case 'ˊ':                      return 2;                  case 'ˇ':                      return 3;                  case 'ˋ':                      return 4;                  case '·':                      return 5;                  default:                      return 1;              }
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyin.cs,ImportLine,The following statement contains a magic number: array.Length == 2
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: var temp = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: len > 1000
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: temp = new byte[2*len];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2*len);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: var temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: temp = new byte[pinyinLen*2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: fs.Read(temp' 0' pinyinLen*2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: temp = new byte[wordLen*2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduPinyinBdict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduPinyinBdict.cs,SpecialWord,The following statement contains a magic number: fs.Read(temp' 0' wordLen*2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: var temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: temp = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: temp = new byte[2*len];
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiBcd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiBcd.cs,ImportWord,The following statement contains a magic number: fs.Read(temp' 0' 2*len);
Magic Number,Studyzy.IMEWLConverter.IME,BaiduShoujiEng,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\BaiduShoujiEng.cs,ExportLine,The following statement contains a magic number: return wl.Word + "\t" + (54999 + wl.Rank);
Magic Number,Studyzy.IMEWLConverter.IME,GooglePinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\GooglePinyin.cs,ImportLine,The following statement contains a magic number: wl.PinYin = c[2].Split(new[] {' '}' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Studyzy.IMEWLConverter.IME,iFlyIME,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\iFlyIME.cs,Export,The following statement contains a magic number: const int MAX_COUNT = 16000;
Magic Number,Studyzy.IMEWLConverter.IME,iFlyIME,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\iFlyIME.cs,Export,The following statement contains a magic number: wl.Word.Length > 1 && wl.Word.Length < 17
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Parse,The following statement contains a magic number: byte[] bs = BinFileHelper.ReadArray(fs' 4);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Parse,The following statement contains a magic number: fs.Position = offsetData + 4;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Parse,The following statement contains a magic number: int offsetWithInfo = BinFileHelper.ReadInt32(fs) + offsetData + 12;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Parse,The following statement contains a magic number: type == 3
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDictionary,The following statement contains a magic number: int limit = BinFileHelper.ReadInt32(fs) + offsetWithIndex + 8;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDictionary,The following statement contains a magic number: int definitions = (offsetCompressedDataHeader - offsetIndex)/4;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDictionary,The following statement contains a magic number: fs.Position = offsetCompressedDataHeader + 8;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDictionary,The following statement contains a magic number: Debug.WriteLine("文件大小（解压缩后）：" + (inflatedWordsIndexLength + inflatedWordsLength + inflatedXmlLength)/1024                              + " KB");
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: var in1 = new InflaterInputStream(stream' inflator' 1024*8);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: var in1 = new InflaterInputStream(stream' inflator' 1024*8);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: var buffer = new byte[1024*8];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: var buffer = new byte[1024*8];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: (len = in1.Read(buffer' 0' 1024*8)) > 0
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Decompress,The following statement contains a magic number: (len = in1.Read(buffer' 0' 1024*8)) > 0
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,Extract,The following statement contains a magic number: int dataLen = 10;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: var idxData = new int[6];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: int flags = idxData[2];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: int refs = idxData[3];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: int currentWordOffset = idxData[4];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: int currenXmlOffset = idxData[5];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: currenXmlOffset = idxData[5];
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,ReadDefinitionData,The following statement contains a magic number: lastWordPos += 4;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[1] = BitConverter.ToInt32(dataRawBytes' position + 4);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[2] = dataRawBytes[position + 8] & 0xff;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[2] = dataRawBytes[position + 8] & 0xff;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[3] = dataRawBytes[position + 9] & 0xff;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[3] = dataRawBytes[position + 9] & 0xff;
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[4] = BitConverter.ToInt32(dataRawBytes' position + 10);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[4] = BitConverter.ToInt32(dataRawBytes' position + 10);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[5] = BitConverter.ToInt32(dataRawBytes' position + 14);
Magic Number,Studyzy.IMEWLConverter.IME,LingoesLd2,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\LingoesLd2.cs,GetIdxData,The following statement contains a magic number: wordIdxData[5] = BitConverter.ToInt32(dataRawBytes' position + 14);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyin.cs,ImportLine,The following statement contains a magic number: int count = Convert.ToInt32(sp[2]);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: var str = new byte[128];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: var outstr = new byte[128];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: fs.Read(str' 0' 128);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: str[4] == 0x44
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: str[4] == 0x45
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: str = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: fs.Read(str' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: num = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: fs.Read(num' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: int mark = num[0] + num[1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: str = new byte[num[2]];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadQcel,The following statement contains a magic number: fs.Read(str' 0' (num[2]));
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: var num = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: fs.Read(num' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int samePYcount = num[0] + num[1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int pinyinLen = num[2] + num[3] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int pinyinLen = num[2] + num[3] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int pinyinLen = num[2] + num[3] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: var str = new byte[256];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i * 2] + str[i * 2 + 1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i * 2] + str[i * 2 + 1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i * 2] + str[i * 2 + 1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: i < pinyinLen / 2
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: num = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: fs.Read(num' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: int hzBytecount = num[0] + num[1] * 256;
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: var temp = new byte[6];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQcel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQcel.cs,ReadAPinyinWord,The following statement contains a magic number: i < 6
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQpyd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQpyd.cs,ParseQpyd,The following statement contains a magic number: var startAddressByte = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQpyd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQpyd.cs,ParseQpyd,The following statement contains a magic number: fs.Read(startAddressByte' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,QQPinyinQpyd,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQPinyinQpyd.cs,ParseQpyd,The following statement contains a magic number: int bufferSize = 2048;
Magic Number,Studyzy.IMEWLConverter.IME,QQShouji,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\QQShouji.cs,Export,The following statement contains a magic number: number = (int) Math.Ceiling((wlList.Count - i)*100.0/wlList.Count);
Magic Number,Studyzy.IMEWLConverter.IME,Rime,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Rime.cs,ImportLine,The following statement contains a magic number: wl.Rank = Convert.ToInt32(lineArray[2]);
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildLineFormat,The following statement contains a magic number: dictionary.Add(UserDefiningPattern.Sort[2]' "{2}");
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: index1 == 2 && UserDefiningPattern.ContainRank
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: index2 == 2 && UserDefiningPattern.ContainRank
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: int index2 = UserDefiningPattern.Sort.FindIndex(i => i == newSort[2]);
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: code = strlist[2];
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: word = strlist[2];
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: rank = Convert.ToInt32(strlist[2]);
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: index2 == 2 && UserDefiningPattern.ContainRank
Magic Number,Studyzy.IMEWLConverter.IME,SelfDefining,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SelfDefining.cs,BuildWordLibrary,The following statement contains a magic number: strlist.Length > 2
Magic Number,Studyzy.IMEWLConverter.IME,ShouxinPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ShouxinPinyin.cs,ImportLine,The following statement contains a magic number: wl.Rank = Convert.ToInt32(c[2]);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: fs.Seek(4' SeekOrigin.Begin);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: fs.Position != 4
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: fs.Seek(20' SeekOrigin.Begin);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: Debug.Assert(fs.Position == uintP4 + 8);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: var headerSize = 12 * ((userDict.AttributeList.Count) + userDict.AIntList.Count + userDict.KeyList.Count) + 24;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: var headerSize = 12 * ((userDict.AttributeList.Count) + userDict.AIntList.Count + userDict.KeyList.Count) + 24;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: fs.Seek(8' SeekOrigin.Current);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: Debug.Assert(totalSize + headerSize + uintP4 + 8 == size - UserDictHeaderSize);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,InitialiseUserDict,The following statement contains a magic number: Debug.Assert(uintP4 + 8 + headerSize == fs.Position);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,ReadKeys,The following statement contains a magic number: Debug.Assert(key.DictTypeDef < 100);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,ReadAllWords,The following statement contains a magic number: fs.Seek(attrBasePos + dict.DataTypeSize[keyId] - 4' SeekOrigin.Begin);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,ReadAllWords,The following statement contains a magic number: fs.Seek(attr2BasePos + dict.AttrSize[keyId] - 4' SeekOrigin.Begin);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var xk = (((p1 + p2) << 2) + ((p1 + p3) << 2)) & 0xffff;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var xk = (((p1 + p2) << 2) + ((p1 + p3) << 2)) & 0xffff;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var n = BinFileHelper.ReadUInt16(fs)/2;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var decwords = new byte[n*4];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var shift = (int)(p2 % 8);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var dch = (ch << (16 - (shift % 8)) | (ch >> shift)) & 0xffff;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: var dch = (ch << (16 - (shift % 8)) | (ch >> shift)) & 0xffff;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(dch)' 0' decwords' i*4' 4);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinBinFromPython,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,decryptWords,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(dch)' 0' decwords' i*4' 4);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinUserHeader,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,Parse,The following statement contains a magic number: fs.Seek(fs.Position + 56' SeekOrigin.Begin);
Magic Number,Studyzy.IMEWLConverter.IME,WordAttribute,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinBinFromPython.cs,Parse,The following statement contains a magic number: fs.Seek(4' SeekOrigin.Current);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,SougouPinyinDict,The following statement contains a magic number: KeyHashSize[0] = 500;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetHashStorePosition,The following statement contains a magic number: return DsBasePos + HeaderItemsIdxList[indexId].Offset - 8 * BaseHashSize[indexId];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,Initialise,The following statement contains a magic number: var size = (KeyList[i].DictTypeDef >> 2) & 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,Initialise,The following statement contains a magic number: var size = (KeyList[i].DictTypeDef >> 2) & 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetDataTypesize,The following statement contains a magic number: i > 0 || maskedTypeDef != 4
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetDataTypesize,The following statement contains a magic number: val += 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetNonAttributeDataSize,The following statement contains a magic number: i > 0 || maskedTypeDef != 4
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetNonAttributeDataSize,The following statement contains a magic number: val += 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetNonAttributeDataSize,The following statement contains a magic number: return val + 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinDict,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinDict.cs,GetAttributeDataSize,The following statement contains a magic number: val += 4;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: var str = new byte[128];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: var outstr = new byte[128];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: fs.Read(str' 0' 128);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: str[4] == 0x44
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: str[4] == 0x45
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: str = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: fs.Read(str' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: num = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: fs.Read(num' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: int mark = num[0] + num[1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: str = new byte[128];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadScel,The following statement contains a magic number: fs.Read(str' 0' (num[2]));
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: var num = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: fs.Read(num' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int samePYcount = num[0] + num[1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int count = num[2] + num[3]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int count = num[2] + num[3]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int count = num[2] + num[3]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: var str = new byte[256];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i*2] + str[i*2 + 1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i*2] + str[i*2 + 1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int key = str[i*2] + str[i*2 + 1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: i < count/2
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: num = new byte[2];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: fs.Read(num' 0' 2);
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: int hzBytecount = num[0] + num[1]*256;
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: var temp = new byte[6];
Magic Number,Studyzy.IMEWLConverter.IME,SougouPinyinScel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\SougouPinyinScel.cs,ReadAPinyinWord,The following statement contains a magic number: i < 6
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,ReadOnePhrase,The following statement contains a magic number: var pyBytesLen = hanzi_offset - 18;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,ReadOnePhrase,The following statement contains a magic number: var wordBytesLen = nextStartPosition - (int) fs.Position - 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: bw.Write(BitConverter.GetBytes(0x40 + 4*wlList.Count));
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Export,The following statement contains a magic number: fs.Write(BitConverter.GetBytes(fs.Length)' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Filter,The following statement contains a magic number: wl.GetPinYinLength() > 32
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsPinyin,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsPinyin.cs,Filter,The following statement contains a magic number: wl.Word.Length > 64
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,ReadOnePhrase,The following statement contains a magic number: var pyBytesLen = hanzi_offset - 18;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,ReadOnePhrase,The following statement contains a magic number: var wordBytesLen = nextStartPosition - (int) fs.Position - 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: bw.Write(BitConverter.GetBytes(0x40 + 4*wlList.Count));
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: offset += 8 +8+ wl.Word.Length*2 + 2 + wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: var hanzi_offset = 8 +8+ wl.GetPinYinLength()*2 + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Export,The following statement contains a magic number: fs.Write(BitConverter.GetBytes(fs.Length)' 0' 4);
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Filter,The following statement contains a magic number: wl.GetPinYinLength() > 32
Magic Number,Studyzy.IMEWLConverter.IME,Win10MsWubi,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Win10MsWubi.cs,Filter,The following statement contains a magic number: wl.Word.Length > 64
Magic Number,Studyzy.IMEWLConverter.IME,YahooKeyKey,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\YahooKeyKey.cs,IsWordLine,The following statement contains a magic number: return line.Split('\t').Length == 4;
Magic Number,Studyzy.IMEWLConverter.IME,ZiGuangPinyinUwl,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Import,The following statement contains a magic number: fs.Position = 0xC00 + 1024*i;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: int len = LenDic.IndexOf((byte) lenCode) + 2;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: lenByte = len*4 + 4;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: lenByte = len*4 + 4;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: var rankB = new byte[4];
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: i < 3
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: wl.Rank = (BitConverter.ToInt32(rankB' 0) - 1)/32;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: int pyLen = Math.Min(8' len);
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: int smIndex = smB & 31;
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: int ymIndex = (smB >> 5) + (ymB << 3);
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: int ymIndex = (smB >> 5) + (ymB << 3);
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: var hzB = new byte[len*2];
Magic Number,Studyzy.IMEWLConverter.IME,Segment,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\ZiGuangPinyinUwl.cs,Parse,The following statement contains a magic number: stream.Read(hzB' 0' len*2);
Magic Number,Studyzy.IMEWLConverter.Language,SystemKernel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Language\SystemKernel.cs,ToChs,The following statement contains a magic number: Encoding gb2312 = Encoding.GetEncoding(936);
Magic Number,Studyzy.IMEWLConverter.Language,SystemKernel,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\Language\SystemKernel.cs,ToCht,The following statement contains a magic number: Encoding gb2312 = Encoding.GetEncoding(936);
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: int n = 3800;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\CRC32.cs,Update,The following statement contains a magic number: crc = CrcTable[(crc ^ value) & 0xFF] ^ (crc >> 8);
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\CRC32.cs,Update,The following statement contains a magic number: crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\CRC32.cs,ComputeCrc32,The following statement contains a magic number: return (CrcTable[(oldCrc ^ value) & 0xFF] ^ (oldCrc >> 8));
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: int temp = (globalCrc >> 24) ^ value;
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: temp = 256 + temp;
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: globalCrc = unchecked((int) ((globalCrc << 8) ^ crc32Table[temp]));
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\StreamUtils.cs,Copy,The following statement contains a magic number: buffer.Length < 128
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\StreamUtils.cs,Copy,The following statement contains a magic number: buffer.Length < 128
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: int index = 2;
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: int elements = 2;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[1] = newKeys[1]*134775813 + 1;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte) (newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte) (newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte) (newKeys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: var result = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[1] = (byte) ((newKeys[0] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte) ((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte) ((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte) ((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte) ((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[4] = (byte) (newKeys[1] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte) ((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte) ((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte) ((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte) ((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte) ((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte) ((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte) (newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte) (newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte) ((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte) ((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte) ((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte) ((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte) ((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte) ((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte) ((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte) ((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte) ((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: return (byte) ((temp*(temp ^ 1)) >> 8);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keyData.Length != 12
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys = new uint[3];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint) ((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint) ((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint) ((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint) ((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint) ((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint) ((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint) ((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[1] = keys[1]*134775813 + 1;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte) (keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte) (keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte) (keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,Reset,The following statement contains a magic number: keys[2] = 0;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicManaged,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\PkzipClassic.cs,GenerateKey,The following statement contains a magic number: key_ = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESStream.cs,ZipAESStream,The following statement contains a magic number: _slideBuffer = new byte[1024];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: blockSize != 16 && blockSize != 32
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: blockSize != 16 && blockSize != 32
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: throw new Exception("Invalid salt len. Must be " + blockSize/2 + " for blocksize " + blockSize);
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: saltBytes.Length != blockSize/2
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflater,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +                                ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +                                ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +                                ((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags < 0 || level_flags > 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header |= level_flags << 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header%31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header%31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: pending.WriteShortMSB(chksum >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int neededbits = 8 + ((-pending.BitCount) & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int neededbits = 8 + ((-pending.BitCount) & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: pending.WriteBits(2' 10);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: pending.WriteBits(2' 10);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: neededbits -= 10;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2*WSIZE];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,SetDictionary,The following statement contains a magic number: strstart += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: (level < 0) || (level > 9)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: int more = 2*WSIZE - lookahead - strstart;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: chainLength >>= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: match = curMatch + 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: scan += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: strstart > 2*WSIZE - MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: strstart >= 2*WSIZE - MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: matchLen <= 5 &&                              (strategy == DeflateStrategy.Filtered ||                               (matchLen == MIN_MATCH && strstart - matchStart > TooFar))
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: prevLen -= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x030 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDCodes[i] = BitReverse(i << 11);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDLength[i] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree = new Tree(this' DIST_NUM' 1' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261)/4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261)/4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits > 0 && bits <= 5
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits = dc/2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int blTreeCodes = 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes*3 + blTree.GetEncodedLength() +                            literalTree.GetEncodedLength() + distTree.GetEncodedLength() +                            extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes*3 + blTree.GetEncodedLength() +                            literalTree.GetEncodedLength() + distTree.GetEncodedLength() +                            extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte) (length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: int lc = Lcode(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261)/4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261)/4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += dc/2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: dc >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |                              bit4Reverse[(toReverse >> 4) & 0xF] << 8 |                              bit4Reverse[(toReverse >> 8) & 0xF] << 4 |                              bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: return 285;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length == 255
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: int code = 257;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: code += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: code += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: distance >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: code += bl_counts[bits] << (15 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: nextCode[bits - 1] += 1 << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: pos > 0 && freqs[heap[ppos = (pos - 1)/2]] > freq
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int node = maxCode < 2 ? ++maxCode : 0;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heapLen < 2
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var childs = new int[4*heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var childs = new int[4*heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: var values = new int[2*heapLen - 1];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2*i] = node;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2*i + 1] = -1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: values[i] = freqs[node] << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = path*2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2*last] = first;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2*last + 1] = second;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = ppos*2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heap[0] != childs.Length/2 - 1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numNodes = childs.Length/2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numLeafs = (numNodes + 1)/2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2*i]] = lengths[childs[2*i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: childs[2*i + 1] != -1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength - 2] -= overflow;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int nodePtr = 2*numLeafs;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int childPtr = 2*childs[nodePtr++];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header%31 != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: (header & 0x0f00) != (Deflater.DEFLATED << 8)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: int dictByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: readAdler = (readAdler << 8) | dictByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)                  {                      case DECODE_HUFFMAN:                          // This is the inner loop so it is optimized a bit                          while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)                          {                              outputWindow.Write(symbol);                              if (--free < 258)                              {                                  return true;                              }                          }                            if (symbol < 257)                          {                              if (symbol < 0)                              {                                  return false;                              }                              // symbol == 256: end of block                              distTree = null;                              litlenTree = null;                              mode = DECODE_BLOCKS;                              return true;                          }                            try                          {                              repLength = CPLENS[symbol - 257];                              neededBits = CPLEXT[symbol - 257];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep length code");                          }                          goto case DECODE_HUFFMAN_LENBITS; // fall through                        case DECODE_HUFFMAN_LENBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_LENBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repLength += i;                          }                          mode = DECODE_HUFFMAN_DIST;                          goto case DECODE_HUFFMAN_DIST; // fall through                        case DECODE_HUFFMAN_DIST:                          symbol = distTree.GetSymbol(input);                          if (symbol < 0)                          {                              return false;                          }                            try                          {                              repDist = CPDIST[symbol];                              neededBits = CPDEXT[symbol];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep dist code");                          }                            goto case DECODE_HUFFMAN_DISTBITS; // fall through                        case DECODE_HUFFMAN_DISTBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_DISTBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repDist += i;                          }                            outputWindow.Repeat(repLength' repDist);                          free -= repLength;                          mode = DECODE_HUFFMAN;                          break;                        default:                          throw new SharpZipBaseException("Inflater unknown mode");                  }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)                  {                      case DECODE_HUFFMAN:                          // This is the inner loop so it is optimized a bit                          while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)                          {                              outputWindow.Write(symbol);                              if (--free < 258)                              {                                  return true;                              }                          }                            if (symbol < 257)                          {                              if (symbol < 0)                              {                                  return false;                              }                              // symbol == 256: end of block                              distTree = null;                              litlenTree = null;                              mode = DECODE_BLOCKS;                              return true;                          }                            try                          {                              repLength = CPLENS[symbol - 257];                              neededBits = CPLEXT[symbol - 257];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep length code");                          }                          goto case DECODE_HUFFMAN_LENBITS; // fall through                        case DECODE_HUFFMAN_LENBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_LENBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repLength += i;                          }                          mode = DECODE_HUFFMAN_DIST;                          goto case DECODE_HUFFMAN_DIST; // fall through                        case DECODE_HUFFMAN_DIST:                          symbol = distTree.GetSymbol(input);                          if (symbol < 0)                          {                              return false;                          }                            try                          {                              repDist = CPDIST[symbol];                              neededBits = CPDEXT[symbol];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep dist code");                          }                            goto case DECODE_HUFFMAN_DISTBITS; // fall through                        case DECODE_HUFFMAN_DISTBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_DISTBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repDist += i;                          }                            outputWindow.Repeat(repLength' repDist);                          free -= repLength;                          mode = DECODE_HUFFMAN;                          break;                        default:                          throw new SharpZipBaseException("Inflater unknown mode");                  }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)                  {                      case DECODE_HUFFMAN:                          // This is the inner loop so it is optimized a bit                          while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)                          {                              outputWindow.Write(symbol);                              if (--free < 258)                              {                                  return true;                              }                          }                            if (symbol < 257)                          {                              if (symbol < 0)                              {                                  return false;                              }                              // symbol == 256: end of block                              distTree = null;                              litlenTree = null;                              mode = DECODE_BLOCKS;                              return true;                          }                            try                          {                              repLength = CPLENS[symbol - 257];                              neededBits = CPLEXT[symbol - 257];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep length code");                          }                          goto case DECODE_HUFFMAN_LENBITS; // fall through                        case DECODE_HUFFMAN_LENBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_LENBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repLength += i;                          }                          mode = DECODE_HUFFMAN_DIST;                          goto case DECODE_HUFFMAN_DIST; // fall through                        case DECODE_HUFFMAN_DIST:                          symbol = distTree.GetSymbol(input);                          if (symbol < 0)                          {                              return false;                          }                            try                          {                              repDist = CPDIST[symbol];                              neededBits = CPDEXT[symbol];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep dist code");                          }                            goto case DECODE_HUFFMAN_DISTBITS; // fall through                        case DECODE_HUFFMAN_DISTBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_DISTBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repDist += i;                          }                            outputWindow.Repeat(repLength' repDist);                          free -= repLength;                          mode = DECODE_HUFFMAN;                          break;                        default:                          throw new SharpZipBaseException("Inflater unknown mode");                  }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)                  {                      case DECODE_HUFFMAN:                          // This is the inner loop so it is optimized a bit                          while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)                          {                              outputWindow.Write(symbol);                              if (--free < 258)                              {                                  return true;                              }                          }                            if (symbol < 257)                          {                              if (symbol < 0)                              {                                  return false;                              }                              // symbol == 256: end of block                              distTree = null;                              litlenTree = null;                              mode = DECODE_BLOCKS;                              return true;                          }                            try                          {                              repLength = CPLENS[symbol - 257];                              neededBits = CPLEXT[symbol - 257];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep length code");                          }                          goto case DECODE_HUFFMAN_LENBITS; // fall through                        case DECODE_HUFFMAN_LENBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_LENBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repLength += i;                          }                          mode = DECODE_HUFFMAN_DIST;                          goto case DECODE_HUFFMAN_DIST; // fall through                        case DECODE_HUFFMAN_DIST:                          symbol = distTree.GetSymbol(input);                          if (symbol < 0)                          {                              return false;                          }                            try                          {                              repDist = CPDIST[symbol];                              neededBits = CPDEXT[symbol];                          }                          catch (Exception)                          {                              throw new SharpZipBaseException("Illegal rep dist code");                          }                            goto case DECODE_HUFFMAN_DISTBITS; // fall through                        case DECODE_HUFFMAN_DISTBITS:                          if (neededBits > 0)                          {                              mode = DECODE_HUFFMAN_DISTBITS;                              int i = input.PeekBits(neededBits);                              if (i < 0)                              {                                  return false;                              }                              input.DropBits(neededBits);                              repDist += i;                          }                            outputWindow.Repeat(repLength' repDist);                          free -= repLength;                          mode = DECODE_HUFFMAN;                          break;                        default:                          throw new SharpZipBaseException("Inflater unknown mode");                  }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: free >= 258
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: int chkByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: readAdler = (readAdler << 8) | chkByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode)              {                  case DECODE_HEADER:                      return DecodeHeader();                    case DECODE_DICT:                      return DecodeDict();                    case DECODE_CHKSUM:                      return DecodeChksum();                    case DECODE_BLOCKS:                      if (isLastBlock)                      {                          if (noHeader)                          {                              mode = FINISHED;                              return false;                          }                          input.SkipToByteBoundary();                          neededBits = 32;                          mode = DECODE_CHKSUM;                          return true;                      }                        int type = input.PeekBits(3);                      if (type < 0)                      {                          return false;                      }                      input.DropBits(3);                        if ((type & 1) != 0)                      {                          isLastBlock = true;                      }                      switch (type >> 1)                      {                          case DeflaterConstants.STORED_BLOCK:                              input.SkipToByteBoundary();                              mode = DECODE_STORED_LEN1;                              break;                          case DeflaterConstants.STATIC_TREES:                              litlenTree = InflaterHuffmanTree.defLitLenTree;                              distTree = InflaterHuffmanTree.defDistTree;                              mode = DECODE_HUFFMAN;                              break;                          case DeflaterConstants.DYN_TREES:                              dynHeader = new InflaterDynHeader();                              mode = DECODE_DYN_HEADER;                              break;                          default:                              throw new SharpZipBaseException("Unknown block type " + type);                      }                      return true;                    case DECODE_STORED_LEN1:                  {                      if ((uncomprLen = input.PeekBits(16)) < 0)                      {                          return false;                      }                      input.DropBits(16);                      mode = DECODE_STORED_LEN2;                  }                      goto case DECODE_STORED_LEN2; // fall through                    case DECODE_STORED_LEN2:                  {                      int nlen = input.PeekBits(16);                      if (nlen < 0)                      {                          return false;                      }                      input.DropBits(16);                      if (nlen != (uncomprLen ^ 0xffff))                      {                          throw new SharpZipBaseException("broken uncompressed block");                      }                      mode = DECODE_STORED;                  }                      goto case DECODE_STORED; // fall through                    case DECODE_STORED:                  {                      int more = outputWindow.CopyStored(input' uncomprLen);                      uncomprLen -= more;                      if (uncomprLen == 0)                      {                          mode = DECODE_BLOCKS;                          return true;                      }                      return !input.IsNeedingInput;                  }                    case DECODE_DYN_HEADER:                      if (!dynHeader.Decode(input))                      {                          return false;                      }                        litlenTree = dynHeader.BuildLitLenTree();                      distTree = dynHeader.BuildDistTree();                      mode = DECODE_HUFFMAN;                      goto case DECODE_HUFFMAN; // fall through                    case DECODE_HUFFMAN:                  case DECODE_HUFFMAN_LENBITS:                  case DECODE_HUFFMAN_DIST:                  case DECODE_HUFFMAN_DISTBITS:                      return DecodeHuffman();                    case FINISHED:                      return false;                    default:                      throw new SharpZipBaseException("Inflater.Decode unknown mode");              }
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: var codeLengths = new byte[288];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 288
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths = new byte[32];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 32
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code += blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treeSize += (end - start) >> (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code -= blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treePtr += 1 << (bits - 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[revcode] = (short) ((i << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits <= 9
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: nextCode[bits] = code + (1 << (16 - bits));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int subtree = -(symbol >> 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int bitlen = symbol & 15;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: symbol = tree[subtree | (lookahead >> 9)];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: (lookahead = input.PeekBits(9)) >= 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 24));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: bitCount > 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bits >>= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount -= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount >= 16
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (s >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bits >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\DeflaterOutputStream.cs,DeflaterOutputStream,The following statement contains a magic number: bufferSize < 512
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\DeflaterOutputStream.cs,InitializeAESPassword,The following statement contains a magic number: int blockSize = entry.AESKeySize/8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize = 1024;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize < 1024
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeShort,The following statement contains a magic number: return ReadLeByte() | (ReadLeByte() << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeInt,The following statement contains a magic number: return ReadLeShort() | (ReadLeShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeLong,The following statement contains a magic number: return (uint) ReadLeInt() | ((long) ReadLeInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\InflaterInputStream.cs,Skip,The following statement contains a magic number: int length = 2048;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: buffer_ |= (uint) ((window_[windowStart_++] & 0xff |                                      (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: bitsInBuffer_ += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: (bitsInBuffer_ & 7) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: buffer_ >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: bitsInBuffer_ += 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,AddFileContents,The following statement contains a magic number: buffer_ = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\FastZip.cs,ExtractFileEntry,The following statement contains a magic number: buffer_ = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 3;
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = ':';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ZipEntry,The following statement contains a magic number: (versionRequiredToExtract != 0) && (versionRequiredToExtract < 10)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: extraData.ValueLength < 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: extraData.ValueLength < 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: ntfsLength >= 24
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: extraData.UnreadCount >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: extraData.Find(10)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntry.cs,ProcessAESExtraData,The following statement contains a magic number: length < 7
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,The following statement contains a magic number: externalAttributes |= (setAttributes_ | 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _modificationTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                                           new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _lastAccessTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                                         new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: _createTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +                                     new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _modificationTime.ToUniversalTime() -                                      new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _lastAccessTime.ToUniversalTime() -                                      new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: TimeSpan span = _createTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return ((value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||                      (value <= new DateTime(2038' 1' 19' 03' 14' 07)));
Magic Number,ICSharpCode.SharpZipLib.Zip,NTTaggedData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: helperStream.WriteLEShort(24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,Find,The following statement contains a magic number: (localTag != headerID) && (_index < _data.Length - 3)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: int newLength = _data.Length + addLength + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: newLength -= (ValueLength + 4);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,AddLeShort,The following statement contains a magic number: _newEntry.WriteByte((byte) (toAdd >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,AddLeInt,The following statement contains a magic number: AddLeShort((short) (toAdd >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,AddLeLong,The following statement contains a magic number: AddLeInt((int) (toAdd >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: int trueStart = _readValueStart - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: var newData = new byte[_data.Length - (ValueLength + 4)];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: int trueEnd = trueStart + ValueLength + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: ReadCheck(8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: return (ReadInt() & 0xffffffff) | (((long) ReadInt()) << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: ReadCheck(4);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +                           (_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +                           (_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +                           (_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +                           (_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +                           (_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: _index += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: ReadCheck(2);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: (_readValueStart > _data.Length) ||                  (_readValueStart < 4)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: _index + length < 4
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: _index > _data.Length - 2
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: _data[index + 1] = (byte) (source >> 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestArchive,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion > ZipConstants.VersionMadeBy)                              || ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64))
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: (extractVersion <= 63) && // Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: ((localFlags & (int) GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: extractVersion < 50
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: ((localFlags & (int) GeneralBitFlags.Patched) != 0) && (extractVersion < 27)
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: extractVersion < 62
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: compressedSize > ZipConstants.CryptoHeaderSize + 2
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLEShort,The following statement contains a magic number: baseStream_.WriteByte((byte) ((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLEUshort,The following statement contains a magic number: baseStream_.WriteByte((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort) (value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLeLong,The following statement contains a magic number: WriteLEInt((int) (value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint((uint) (value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: result = ZipConstants.DataDescriptorSize - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: result = ZipConstants.Zip64DataDescriptorSize - 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,GetOutputStream,The following statement contains a magic number: switch (entry.CompressionMethod)              {                  case CompressionMethod.Stored:                      result = new UncompressedStream(result);                      break;                    case CompressionMethod.Deflated:                      var dos = new DeflaterOutputStream(result' new Deflater(9' true));                      dos.IsStreamOwner = false;                      result = dos;                      break;                    default:                      throw new ZipException("Unknown compression method " + entry.CompressionMethod);              }
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CopyEntryDirect,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CopyEntry,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,UpdateCommentOnly,The following statement contains a magic number: const int CentralHeaderCommentSizeOffset = 16;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadLEUshort,The following statement contains a magic number: return unchecked((ushort) ((ushort) data1 | (ushort) (data2 << 8)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadLEUint,The following statement contains a magic number: return (uint) (ReadLEUshort() | (ReadLEUshort() << 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadLEUlong,The following statement contains a magic number: return ReadLEUint() | ((ulong) ReadLEUint() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long) centralDirSize + offsetOfCentralDir);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long) centralDirSize))
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: entry.CryptoCheckValue = (byte) (crc >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: (bitFlags & 8) == 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: WriteEncryptionHeader(result' entry.DosTime << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: (entry.Crc < 0) || (entry.Flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte) (crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte) (crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,MakeTemporaryCopy,The following statement contains a magic number: StreamUtils.Copy(stream' temporaryStream_' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,OpenForDirectUpdate,The following statement contains a magic number: StreamUtils.Copy(stream' result' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteZip64EndOfCentralDirectory,The following statement contains a magic number: WriteLELong(44);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,ReadLEShort,The following statement contains a magic number: return byteValue1 | (byteValue2 << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,ReadLEInt,The following statement contains a magic number: return ReadLEShort() | (ReadLEShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,ReadLELong,The following statement contains a magic number: return (uint) ReadLEInt() | ((long) ReadLEInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLEShort,The following statement contains a magic number: stream_.WriteByte((byte) ((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLEUshort,The following statement contains a magic number: stream_.WriteByte((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort) (value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLELong,The following statement contains a magic number: WriteLEInt((int) (value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint((uint) (value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: result += 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: result += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: entry.CryptoCheckValue = (byte) ((crc2 >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: (flags & 8) == 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,CompleteCloseEntry,The following statement contains a magic number: (flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: var tmp = new byte[4096];
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: (flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,BodyRead,The following statement contains a magic number: switch (method)              {                  case (int) CompressionMethod.Deflated:                      count = base.Read(buffer' offset' count);                      if (count <= 0)                      {                          if (!inf.IsFinished)                          {                              throw new ZipException("Inflater not finished!");                          }                          inputBuffer.Available = inf.RemainingInput;                            // A csize of -1 is from an unpatched local header                          if ((flags & 8) == 0 &&                              (inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size))                          {                              throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" +                                                     inf.TotalOut);                          }                          inf.Reset();                          finished = true;                      }                      break;                    case (int) CompressionMethod.Stored:                      if ((count > csize) && (csize >= 0))                      {                          count = (int) csize;                      }                        if (count > 0)                      {                          count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);                          if (count > 0)                          {                              csize -= count;                              size -= count;                          }                      }                        if (csize == 0)                      {                          finished = true;                      }                      else                      {                          if (count < 0)                          {                              throw new ZipException("EOF in stored block");                          }                      }                      break;              }
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryCharsRelaxed[howMany - 2] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: howMany = invalidPathChars.Length + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '\\';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = '*';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 4] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,WriteLeShort,The following statement contains a magic number: baseOutputStream_.WriteByte((byte) ((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,WriteLeInt,The following statement contains a magic number: WriteLeShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,WriteLeLong,The following statement contains a magic number: WriteLeInt((int) (value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: entry.Flags |= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: entry.Flags |= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: baseOutputStream_.Write(AESAuthCode' 0' 10);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: (curEntry.Flags & 8) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte) (crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte) (crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,AddExtraDataAES,The following statement contains a magic number: const int VENDOR_VERSION = 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,CopyAndEncrypt,The following statement contains a magic number: const int CopyBufferSize = 4096;
Missing Default,Studyzy.IMEWLConverter.IME,Rime,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\IME\Rime.cs,GetLineSplit,The following switch statement is missing a default case: switch (os)              {                  case OperationSystem.Windows:                      return "\r\n";                    case OperationSystem.MacOS:                      return "\r";                    case OperationSystem.Linux:                      return "\n";              }
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction)                  {                      case DEFLATE_STORED:                          if (strstart > blockStart)                          {                              huffman.FlushStoredBlock(window' blockStart'                                  strstart - blockStart' false);                              blockStart = strstart;                          }                          UpdateHash();                          break;                        case DEFLATE_FAST:                          if (strstart > blockStart)                          {                              huffman.FlushBlock(window' blockStart' strstart - blockStart'                                  false);                              blockStart = strstart;                          }                          break;                        case DEFLATE_SLOW:                          if (prevAvailable)                          {                              huffman.TallyLit(window[strstart - 1] & 0xff);                          }                          if (strstart > blockStart)                          {                              huffman.FlushBlock(window' blockStart' strstart - blockStart' false);                              blockStart = strstart;                          }                          prevAvailable = false;                          matchLen = MIN_MATCH - 1;                          break;                  }
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode)                  {                      case LNUM:                          lnum = input.PeekBits(5);                          if (lnum < 0)                          {                              return false;                          }                          lnum += 257;                          input.DropBits(5);                          //  	    System.err.println("LNUM: "+lnum);                          mode = DNUM;                          goto case DNUM; // fall through                      case DNUM:                          dnum = input.PeekBits(5);                          if (dnum < 0)                          {                              return false;                          }                          dnum++;                          input.DropBits(5);                          //  	    System.err.println("DNUM: "+dnum);                          num = lnum + dnum;                          litdistLens = new byte[num];                          mode = BLNUM;                          goto case BLNUM; // fall through                      case BLNUM:                          blnum = input.PeekBits(4);                          if (blnum < 0)                          {                              return false;                          }                          blnum += 4;                          input.DropBits(4);                          blLens = new byte[19];                          ptr = 0;                          //  	    System.err.println("BLNUM: "+blnum);                          mode = BLLENS;                          goto case BLLENS; // fall through                      case BLLENS:                          while (ptr < blnum)                          {                              int len = input.PeekBits(3);                              if (len < 0)                              {                                  return false;                              }                              input.DropBits(3);                              //  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);                              blLens[BL_ORDER[ptr]] = (byte) len;                              ptr++;                          }                          blTree = new InflaterHuffmanTree(blLens);                          blLens = null;                          ptr = 0;                          mode = LENS;                          goto case LENS; // fall through                      case LENS:                      {                          int symbol;                          while (((symbol = blTree.GetSymbol(input)) & ~15) == 0)                          {                              /* Normal case: symbol in [0..15] */                                //  		  System.err.println("litdistLens["+ptr+"]: "+symbol);                              litdistLens[ptr++] = lastLen = (byte) symbol;                                if (ptr == num)                              {                                  /* Finished */                                  return true;                              }                          }                            /* need more input ? */                          if (symbol < 0)                          {                              return false;                          }                            /* otherwise repeat code */                          if (symbol >= 17)                          {                              /* repeat zero */                              //  		  System.err.println("repeating zero");                              lastLen = 0;                          }                          else                          {                              if (ptr == 0)                              {                                  throw new SharpZipBaseException();                              }                          }                          repSymbol = symbol - 16;                      }                          mode = REPS;                          goto case REPS; // fall through                      case REPS:                      {                          int bits = repBits[repSymbol];                          int count = input.PeekBits(bits);                          if (count < 0)                          {                              return false;                          }                          input.DropBits(bits);                          count += repMin[repSymbol];                          //  	      System.err.println("litdistLens repeated: "+count);                            if (ptr + count > num)                          {                              throw new SharpZipBaseException();                          }                          while (count-- > 0)                          {                              litdistLens[ptr++] = lastLen;                          }                            if (ptr == num)                          {                              /* Finished */                              return true;                          }                      }                          mode = LENS;                          goto decode_loop;                  }
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,WriteLocalEntryHeader,The following switch statement is missing a default case: switch (useZip64_)                  {                      case UseZip64.Dynamic:                          if (entry.Size < 0)                          {                              entry.ForceZip64();                          }                          break;                        case UseZip64.On:                          entry.ForceZip64();                          break;                        case UseZip64.Off:                          // Do nothing.  The entry itself may be using Zip64 independantly.                          break;                  }
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,RunUpdates,The following switch statement is missing a default case: switch (update.Command)                          {                              case UpdateCommand.Copy:                                  if (directUpdate)                                  {                                      CopyEntryDirect(workFile' update' ref destinationPosition);                                  }                                  else                                  {                                      CopyEntry(workFile' update);                                  }                                  break;                                case UpdateCommand.Modify:                                  // TODO: Direct modifying of an entry will take some legwork.                                  ModifyEntry(workFile' update);                                  break;                                case UpdateCommand.Add:                                  if (!IsNewArchive && directUpdate)                                  {                                      workFile.baseStream_.Position = destinationPosition;                                  }                                    AddEntry(workFile' update);                                    if (directUpdate)                                  {                                      destinationPosition = workFile.baseStream_.Position;                                  }                                  break;                          }
Missing Default,ICSharpCode.SharpZipLib.Zip,PartialInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipFile.cs,Seek,The following switch statement is missing a default case: switch (origin)                  {                      case SeekOrigin.Begin:                          newPos = start_ + offset;                          break;                        case SeekOrigin.Current:                          newPos = readPos_ + offset;                          break;                        case SeekOrigin.End:                          newPos = end_ + offset;                          break;                  }
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipInputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipInputStream.cs,BodyRead,The following switch statement is missing a default case: switch (method)              {                  case (int) CompressionMethod.Deflated:                      count = base.Read(buffer' offset' count);                      if (count <= 0)                      {                          if (!inf.IsFinished)                          {                              throw new ZipException("Inflater not finished!");                          }                          inputBuffer.Available = inf.RemainingInput;                            // A csize of -1 is from an unpatched local header                          if ((flags & 8) == 0 &&                              (inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size))                          {                              throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" +                                                     inf.TotalOut);                          }                          inf.Reset();                          finished = true;                      }                      break;                    case (int) CompressionMethod.Stored:                      if ((count > csize) && (csize >= 0))                      {                          count = (int) csize;                      }                        if (count > 0)                      {                          count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);                          if (count > 0)                          {                              csize -= count;                              size -= count;                          }                      }                        if (csize == 0)                      {                          finished = true;                      }                      else                      {                          if (count < 0)                          {                              throw new ZipException("EOF in stored block");                          }                      }                      break;              }
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,D:\research\architectureSmells\repos1\studyzy_imewlconverter\src\ImeWlConverterCore\SharpZLib\Zip\ZipOutputStream.cs,Write,The following switch statement is missing a default case: switch (curMethod)              {                  case CompressionMethod.Deflated:                      base.Write(buffer' offset' count);                      break;                    case CompressionMethod.Stored:                      if (Password != null)                      {                          CopyAndEncrypt(buffer' offset' count);                      }                      else                      {                          baseOutputStream_.Write(buffer' offset' count);                      }                      break;              }
