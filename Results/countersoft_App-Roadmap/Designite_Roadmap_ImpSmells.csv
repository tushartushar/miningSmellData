Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,Cyclomatic complexity of the method is 10
Complex Method,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,Cyclomatic complexity of the method is 9
Complex Method,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,Cyclomatic complexity of the method is 8
Long Parameter List,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,The method has 5 parameters.
Long Parameter List,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The method has 12 parameters.
Long Parameter List,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The method has 7 parameters.
Long Parameter List,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,AddChildVersions,The method has 6 parameters.
Long Parameter List,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,SetColumns,The method has 11 parameters.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,The length of the statement  "	var filter = IsSessionFilter () || CurrentCard.CardType != ProjectTemplatePageType.Custom && "app/roadmap/view".Equals (CurrentCard.Url' StringComparison.InvariantCultureIgnoreCase) ? HttpSessionManager.GetFilter (CurrentCard.Id' IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id)) : CurrentCard.Filter; " is 335.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,The length of the statement  "	versions = Cache.Versions.GetAll ().Where (v => v.ProjectId == currentProjectId && v.Released == false && v.Archived == false).OrderBy (o => o.Sequence); " is 153.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,The length of the statement  "	model.ProjectList = new SelectList (viewableProjects' "Entity.Id"' "Entity.Name"' currentProjectId.GetValueOrDefault ()); " is 121.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "			select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3); " is 287.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "			select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3); " is 302.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "			IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id)); " is 139.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "			model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false); " is 199.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "	model [ItemAttributeVisibility.CalculatedTimeLogged] = CanSeeProjectItemAttribute (ItemAttributeVisibility.CalculatedTimeLogged); " is 129.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The length of the statement  "	model [ItemAttributeVisibility.CalculatedTimeRemaining] = model [ItemAttributeVisibility.EstimatedEffort] && model [ItemAttributeVisibility.CalculatedTimeLogged]; " is 162.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildAllProjectVersions,The length of the statement  "	builder.AppendFormat ("<a href='{0}workspace/{1}/apps/roadmap/getroadmap?versionId={2}&projectId={3}'>"' UserContext.Url' CurrentCard.Id' version.Id' CurrentProject.Entity.Id); " is 176.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The length of the statement  "	IEnumerable<Countersoft.Gemini.Commons.Entity.Version> versions = Cache.Versions.GetAll ().Where (v => v.ProjectId == projectId && v.Released == false && v.Archived == false).OrderBy (o => o.Sequence); " is 201.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The length of the statement  "		statusBar = RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("1F21A63F-94FF-46D0-8773-9E482EF0CA90"' "views/StatusBar.cshtml")' model)' " is 150.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The length of the statement  "		versions = RenderPartialViewToString (this' AppManager.Instance.GetAppUrl ("1F21A63F-94FF-46D0-8773-9E482EF0CA90"' "views/VersionProgress.cshtml")' model) " is 154.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetColumns,The length of the statement  "	IssuesFilter filter = ItemFilterManager.TransformFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' projectId)); " is 126.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetColumns,The length of the statement  "	model.Columns = GridManager.GetAvailableColumns (filter.GetProjects ()' IssueFilterHelper.AggregateTypes (filter' ProjectManager' MetaManager)' fields); " is 152.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,SetColumns,The length of the statement  "	currentView.RemoveAll (v => !v.IsCustomField && selected.Find (s => s.ItemId == ((int)v.Attribute).ToString ()) == null); " is 121.
Long Statement,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,SetColumns,The length of the statement  "	var extra = selected.FindAll (s => currentView.Find (v => !v.IsCustomField && s.ItemId == ((int)v.Attribute).ToString () || v.IsCustomField && s.ItemId == v.CustomFieldId) == null); " is 181.
Empty Catch Block,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,Show,The method has an empty catch block.
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: foreach (var version in versions) {  	RoadmapAppModel tmp = new RoadmapAppModel ();  	builder.Append (BuildAllProjectVersions (version.Entity' version.Entity.Id == versionId' version.HierarchyLevel));  	if (version.Entity.Id == versionId) {  		var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  		var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  			CurrentProject  		})' visibility' new List<int> () {  			version.Project.Entity.Id  		});  		List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  		GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  		// get the version specific data  		tmp.Issues = issues;  		tmp.Columns = gridColumns;  		tmp.Options = gridOptions;  		tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  		tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  		tmp.Statuses = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.StatusId'  			Name = i.Status  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		tmp.Types = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.TypeId'  			Name = i.Type  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		// store the version Id   		model.VersionId = version.Entity.Id;  		model.VersionLabel = version.Entity.Name;  		model.Closed = tmp.Closed;  		model.Columns = tmp.Columns;  		model.Issues = tmp.Issues;  		model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  		model.Open = tmp.Open;  		model.Options = tmp.Options;  		model.Statuses = tmp.Statuses;  		model.Types = tmp.Types;  		model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  		model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  		model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  		model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  		model.ReleaseStartDate = version.Entity.StartDate;  		model.ReleaseEndDate = version.Entity.ReleaseDate;  		// Now get with the extra data that we need  		var projectId = UserContext.Project.Entity.Id;  		IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  		filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  		if (OriginalFilter != null) {  			filter.SortField = OriginalFilter.SortField;  			filter.SortOrder = OriginalFilter.SortOrder;  		}  		ItemFilterManager.SetSortedColumns (gridColumns' filter);  		model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  	}  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: foreach (var version in versions) {  	RoadmapAppModel tmp = new RoadmapAppModel ();  	builder.Append (BuildAllProjectVersions (version.Entity' version.Entity.Id == versionId' version.HierarchyLevel));  	if (version.Entity.Id == versionId) {  		var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  		var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  			CurrentProject  		})' visibility' new List<int> () {  			version.Project.Entity.Id  		});  		List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  		GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  		// get the version specific data  		tmp.Issues = issues;  		tmp.Columns = gridColumns;  		tmp.Options = gridOptions;  		tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  		tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  		tmp.Statuses = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.StatusId'  			Name = i.Status  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		tmp.Types = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.TypeId'  			Name = i.Type  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		// store the version Id   		model.VersionId = version.Entity.Id;  		model.VersionLabel = version.Entity.Name;  		model.Closed = tmp.Closed;  		model.Columns = tmp.Columns;  		model.Issues = tmp.Issues;  		model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  		model.Open = tmp.Open;  		model.Options = tmp.Options;  		model.Statuses = tmp.Statuses;  		model.Types = tmp.Types;  		model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  		model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  		model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  		model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  		model.ReleaseStartDate = version.Entity.StartDate;  		model.ReleaseEndDate = version.Entity.ReleaseDate;  		// Now get with the extra data that we need  		var projectId = UserContext.Project.Entity.Id;  		IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  		filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  		if (OriginalFilter != null) {  			filter.SortField = OriginalFilter.SortField;  			filter.SortOrder = OriginalFilter.SortOrder;  		}  		ItemFilterManager.SetSortedColumns (gridColumns' filter);  		model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  	}  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: foreach (var version in versions) {  	RoadmapAppModel tmp = new RoadmapAppModel ();  	builder.Append (BuildAllProjectVersions (version.Entity' version.Entity.Id == versionId' version.HierarchyLevel));  	if (version.Entity.Id == versionId) {  		var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  		var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  			CurrentProject  		})' visibility' new List<int> () {  			version.Project.Entity.Id  		});  		List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  		GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  		// get the version specific data  		tmp.Issues = issues;  		tmp.Columns = gridColumns;  		tmp.Options = gridOptions;  		tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  		tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  		tmp.Statuses = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.StatusId'  			Name = i.Status  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		tmp.Types = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.TypeId'  			Name = i.Type  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		// store the version Id   		model.VersionId = version.Entity.Id;  		model.VersionLabel = version.Entity.Name;  		model.Closed = tmp.Closed;  		model.Columns = tmp.Columns;  		model.Issues = tmp.Issues;  		model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  		model.Open = tmp.Open;  		model.Options = tmp.Options;  		model.Statuses = tmp.Statuses;  		model.Types = tmp.Types;  		model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  		model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  		model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  		model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  		model.ReleaseStartDate = version.Entity.StartDate;  		model.ReleaseEndDate = version.Entity.ReleaseDate;  		// Now get with the extra data that we need  		var projectId = UserContext.Project.Entity.Id;  		IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  		filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  		if (OriginalFilter != null) {  			filter.SortField = OriginalFilter.SortField;  			filter.SortOrder = OriginalFilter.SortOrder;  		}  		ItemFilterManager.SetSortedColumns (gridColumns' filter);  		model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  	}  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: foreach (var version in versions) {  	RoadmapAppModel tmp = new RoadmapAppModel ();  	builder.Append (BuildAllProjectVersions (version.Entity' version.Entity.Id == versionId' version.HierarchyLevel));  	if (version.Entity.Id == versionId) {  		var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  		var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  			CurrentProject  		})' visibility' new List<int> () {  			version.Project.Entity.Id  		});  		List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  		GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  		// get the version specific data  		tmp.Issues = issues;  		tmp.Columns = gridColumns;  		tmp.Options = gridOptions;  		tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  		tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  		tmp.Statuses = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.StatusId'  			Name = i.Status  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		tmp.Types = (from i in tmp.Issues  		group i by new {  			Id = i.Entity.TypeId'  			Name = i.Type  		} into g  		select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  		// store the version Id   		model.VersionId = version.Entity.Id;  		model.VersionLabel = version.Entity.Name;  		model.Closed = tmp.Closed;  		model.Columns = tmp.Columns;  		model.Issues = tmp.Issues;  		model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  		model.Open = tmp.Open;  		model.Options = tmp.Options;  		model.Statuses = tmp.Statuses;  		model.Types = tmp.Types;  		model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  		model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  		model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  		model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  		model.ReleaseStartDate = version.Entity.StartDate;  		model.ReleaseEndDate = version.Entity.ReleaseDate;  		// Now get with the extra data that we need  		var projectId = UserContext.Project.Entity.Id;  		IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  		filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  		if (OriginalFilter != null) {  			filter.SortField = OriginalFilter.SortField;  			filter.SortOrder = OriginalFilter.SortOrder;  		}  		ItemFilterManager.SetSortedColumns (gridColumns' filter);  		model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  	}  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: if (version.Entity.Id == versionId) {  	var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  	var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  		CurrentProject  	})' visibility' new List<int> () {  		version.Project.Entity.Id  	});  	List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  	GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  	// get the version specific data  	tmp.Issues = issues;  	tmp.Columns = gridColumns;  	tmp.Options = gridOptions;  	tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  	tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  	tmp.Statuses = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.StatusId'  		Name = i.Status  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	tmp.Types = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.TypeId'  		Name = i.Type  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	// store the version Id   	model.VersionId = version.Entity.Id;  	model.VersionLabel = version.Entity.Name;  	model.Closed = tmp.Closed;  	model.Columns = tmp.Columns;  	model.Issues = tmp.Issues;  	model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  	model.Open = tmp.Open;  	model.Options = tmp.Options;  	model.Statuses = tmp.Statuses;  	model.Types = tmp.Types;  	model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  	model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  	model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  	model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  	model.ReleaseStartDate = version.Entity.StartDate;  	model.ReleaseEndDate = version.Entity.ReleaseDate;  	// Now get with the extra data that we need  	var projectId = UserContext.Project.Entity.Id;  	IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  	filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  	if (OriginalFilter != null) {  		filter.SortField = OriginalFilter.SortField;  		filter.SortOrder = OriginalFilter.SortOrder;  	}  	ItemFilterManager.SetSortedColumns (gridColumns' filter);  	model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: if (version.Entity.Id == versionId) {  	var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  	var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  		CurrentProject  	})' visibility' new List<int> () {  		version.Project.Entity.Id  	});  	List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  	GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  	// get the version specific data  	tmp.Issues = issues;  	tmp.Columns = gridColumns;  	tmp.Options = gridOptions;  	tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  	tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  	tmp.Statuses = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.StatusId'  		Name = i.Status  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	tmp.Types = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.TypeId'  		Name = i.Type  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	// store the version Id   	model.VersionId = version.Entity.Id;  	model.VersionLabel = version.Entity.Name;  	model.Closed = tmp.Closed;  	model.Columns = tmp.Columns;  	model.Issues = tmp.Issues;  	model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  	model.Open = tmp.Open;  	model.Options = tmp.Options;  	model.Statuses = tmp.Statuses;  	model.Types = tmp.Types;  	model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  	model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  	model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  	model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  	model.ReleaseStartDate = version.Entity.StartDate;  	model.ReleaseEndDate = version.Entity.ReleaseDate;  	// Now get with the extra data that we need  	var projectId = UserContext.Project.Entity.Id;  	IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  	filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  	if (OriginalFilter != null) {  		filter.SortField = OriginalFilter.SortField;  		filter.SortOrder = OriginalFilter.SortOrder;  	}  	ItemFilterManager.SetSortedColumns (gridColumns' filter);  	model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: if (version.Entity.Id == versionId) {  	var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  	var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  		CurrentProject  	})' visibility' new List<int> () {  		version.Project.Entity.Id  	});  	List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  	GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  	// get the version specific data  	tmp.Issues = issues;  	tmp.Columns = gridColumns;  	tmp.Options = gridOptions;  	tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  	tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  	tmp.Statuses = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.StatusId'  		Name = i.Status  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	tmp.Types = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.TypeId'  		Name = i.Type  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	// store the version Id   	model.VersionId = version.Entity.Id;  	model.VersionLabel = version.Entity.Name;  	model.Closed = tmp.Closed;  	model.Columns = tmp.Columns;  	model.Issues = tmp.Issues;  	model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  	model.Open = tmp.Open;  	model.Options = tmp.Options;  	model.Statuses = tmp.Statuses;  	model.Types = tmp.Types;  	model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  	model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  	model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  	model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  	model.ReleaseStartDate = version.Entity.StartDate;  	model.ReleaseEndDate = version.Entity.ReleaseDate;  	// Now get with the extra data that we need  	var projectId = UserContext.Project.Entity.Id;  	IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  	filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  	if (OriginalFilter != null) {  		filter.SortField = OriginalFilter.SortField;  		filter.SortOrder = OriginalFilter.SortOrder;  	}  	ItemFilterManager.SetSortedColumns (gridColumns' filter);  	model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: if (version.Entity.Id == versionId) {  	var visibility = GetRoadmapFields (UserContext.Project.Entity.Id);  	var properties = GridManager.GetDisplayProperties (MetaManager.TypeGetAll (new List<ProjectDto> () {  		CurrentProject  	})' visibility' new List<int> () {  		version.Project.Entity.Id  	});  	List<ColumnInfoModel> gridColumns = GridManager.DescribeGridColumns (properties);  	GridOptionsModel gridOptions = GridManager.DescribeGridOptions ();  	// get the version specific data  	tmp.Issues = issues;  	tmp.Columns = gridColumns;  	tmp.Options = gridOptions;  	tmp.Closed = tmp.Issues.Count (i => i.IsClosed);  	tmp.Open = tmp.Issues.Count (i => !i.IsClosed);  	tmp.Statuses = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.StatusId'  		Name = i.Status  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	tmp.Types = (from i in tmp.Issues  	group i by new {  		Id = i.Entity.TypeId'  		Name = i.Type  	} into g  	select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  	// store the version Id   	model.VersionId = version.Entity.Id;  	model.VersionLabel = version.Entity.Name;  	model.Closed = tmp.Closed;  	model.Columns = tmp.Columns;  	model.Issues = tmp.Issues;  	model.DisplayData = GridManager.GetDisplayData (tmp.Issues' tmp.Columns);  	model.Open = tmp.Open;  	model.Options = tmp.Options;  	model.Statuses = tmp.Statuses;  	model.Types = tmp.Types;  	model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  	model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  	model.Remain = model.Estimated > model.Logged ? model.Estimated - model.Logged : 0;  	model.TimeLoggedOver = model.Logged > model.Estimated ? model.Logged - model.Estimated : 0;  	model.ReleaseStartDate = version.Entity.StartDate;  	model.ReleaseEndDate = version.Entity.ReleaseDate;  	// Now get with the extra data that we need  	var projectId = UserContext.Project.Entity.Id;  	IssuesGridFilter defaultFilter = new IssuesGridFilter (IssuesFilter.CreateProjectFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id));  	filter = IssuesFilter.CreateVersionFilter (CurrentUser.Entity.Id' CurrentProject.Entity.Id' version.Entity.Id);  	if (OriginalFilter != null) {  		filter.SortField = OriginalFilter.SortField;  		filter.SortOrder = OriginalFilter.SortOrder;  	}  	ItemFilterManager.SetSortedColumns (gridColumns' filter);  	model.Filter = IssueFilterHelper.PopulateModel (model.Filter' filter' filter' PermissionsManager' ItemFilterManager' IssueFilterHelper.GetViewableFields (filter' ProjectManager' MetaManager)' false);  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: tmp.Statuses = (from i in tmp.Issues  group i by new {  	Id = i.Entity.StatusId'  	Name = i.Status  } into g  select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&statuses={3}"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: tmp.Types = (from i in tmp.Issues  group i by new {  	Id = i.Entity.TypeId'  	Name = i.Type  } into g  select new Triple<string' int' string> (g.Key.Name' g.Count ()' string.Format ("{0}{1}?versions={2}&types={3}&includeclosed=yes"' UserContext.Url' NavigationHelper.GetProjectPageUrl (UserContext.Project' ProjectTemplatePageType.Items)' versionId' g.Key.Id))).OrderByDescending (g => g.Second).Take (3);  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: model.Estimated = issues.Sum (i => i.Entity.EstimatedHours * 60 + i.EstimatedMinutes);  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildModelData,The following statement contains a magic number: model.Logged = issues.Sum (i => i.Entity.LoggedHours * 60 + i.Entity.LoggedMinutes);  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,BuildAllProjectVersions,The following statement contains a magic number: builder.AppendFormat ("<div data-id='{0}' class='version-box' style='margin-left:{1}px'>"' version.Id' level * 10);  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The following statement contains a magic number: if (Request.Form.Keys.Count > 0) {  	filter = new IssuesFilter ();  	string[] sort = Request.Form [0].Split (new char[] {  		'|'  	}' StringSplitOptions.RemoveEmptyEntries);  	StringBuilder sortField = new StringBuilder ();  	StringBuilder sortDirection = new StringBuilder ();  	for (int i = 0; i < sort.Length; i += 2) {  		sortField.Append (sort [i]);  		sortField.Append ('|');  		sortDirection.Append (sort [i + 1] == "0" ? (int)SortDirection.Ascending : (int)SortDirection.Descending);  		sortDirection.Append ('|');  	}  	filter.SortField = sortField.ToString ();  	filter.SortOrder = sortDirection.ToString ();  	filter.ShowSequenced = false;  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The following statement contains a magic number: for (int i = 0; i < sort.Length; i += 2) {  	sortField.Append (sort [i]);  	sortField.Append ('|');  	sortDirection.Append (sort [i + 1] == "0" ? (int)SortDirection.Ascending : (int)SortDirection.Descending);  	sortDirection.Append ('|');  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,GetRoadmap,The following statement contains a magic number: i += 2
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,SetColumns,The following statement contains a magic number: foreach (var selectedCol in extra) {  	UserIssuesView column = new UserIssuesView ();  	column.UserId = CurrentUser.Entity.Id;  	column.ProjectId = projectId;  	column.Sequence = 999;  	column.ViewType = ProjectTemplatePageType.Custom;  	if (selectedCol.ItemId.StartsWith ("cf_"' StringComparison.InvariantCulture)) {  		column.CustomFieldId = selectedCol.ItemId;  	}  	else {  		column.Attribute = (ItemAttributeVisibility)selectedCol.ItemId.ToInt ();  	}  	currentView.Add (column);  }  
Magic Number,Roadmap,PageRoadmap,C:\repos\countersoft_App-Roadmap\Roadmap.cs,SetColumns,The following statement contains a magic number: column.Sequence = 999;  
