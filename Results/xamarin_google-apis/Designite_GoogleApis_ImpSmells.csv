Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The method has 60 lines of code.
Long Method,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The method has 132 lines of code.
Long Method,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,InitEntities,The method has 257 lines of code.
Long Method,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,GetNextToken,The method has 72 lines of code.
Complex Method,Google.Apis.Discovery,BaseService,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\Service.cs,DeserializeResponse,Cyclomatic complexity of the method is 8
Complex Method,Google.Apis.Discovery,CachedWebDiscoveryDevice,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\CachedWebDiscoveryDevice.cs,Fetch,Cyclomatic complexity of the method is 7
Complex Method,Google.Apis.Requests,HttpWebRequestBuilder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\HttpWebRequestBuilder.cs,AddParameter,Cyclomatic complexity of the method is 12
Complex Method,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,HandleFailedRequest,Cyclomatic complexity of the method is 7
Complex Method,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,CreateRequest,Cyclomatic complexity of the method is 7
Complex Method,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,BuildRequest,Cyclomatic complexity of the method is 13
Complex Method,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,CreateWebRequest,Cyclomatic complexity of the method is 11
Complex Method,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,HttpMethodHasBody,Cyclomatic complexity of the method is 7
Complex Method,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ThrowErrorMessageIfPresent,Cyclomatic complexity of the method is 9
Complex Method,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 26
Complex Method,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 21
Complex Method,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 13
Complex Method,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,Cyclomatic complexity of the method is 7
Complex Method,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Complex Method,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,Cyclomatic complexity of the method is 8
Complex Method,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,Cyclomatic complexity of the method is 9
Complex Method,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,Cyclomatic complexity of the method is 36
Complex Method,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,GetNextToken,Cyclomatic complexity of the method is 41
Complex Method,Google.Apis.Json,JsonReader,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\JsonReader.cs,ParseExpression,Cyclomatic complexity of the method is 18
Complex Method,Google.Apis.Json,JsonReader,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\JsonReader.cs,ParseObject,Cyclomatic complexity of the method is 16
Long Parameter List,Google.Apis.Authentication,OAuth3LeggedAuthenticator,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Authentication\OAuth3LeggedAuthenticator.cs,OAuth3LeggedAuthenticator,The method has 4 parameters.
Long Parameter List,Google.Apis.Authentication,OAuth2LeggedAuthenticator,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Authentication\OAuth2LeggedAuthenticator.cs,OAuth2LeggedAuthenticator,The method has 4 parameters.
Long Parameter List,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ResumableUpload,The method has 5 parameters.
Long Parameter List,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ResumableUpload,The method has 5 parameters.
Long Parameter List,Google.Apis.Util,EnumStringValueTypeConverter,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Util\EnumStringValueTypeConverter.cs,ConvertTo,The method has 4 parameters.
Long Parameter List,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HeaderNameValueEncode,The method has 4 parameters.
Long Parameter List,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The method has 4 parameters.
Long Parameter List,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The method has 8 parameters.
Long Parameter List,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The method has 8 parameters.
Long Parameter List,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The method has 9 parameters.
Long Parameter List,Google.Apis,OAuthUtil,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthUtil.cs,GenerateAuthorizationHeader,The method has 4 parameters.
Long Parameter List,Google.Apis,OAuthUtil,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthUtil.cs,GenerateAuthorizationHeader,The method has 6 parameters.
Long Parameter List,Google.Apis.Logging,ConsoleLogger,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Logging\ConsoleLogger.cs,Log,The method has 5 parameters.
Long Parameter List,Google,GoogleApiRequestException,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\GoogleApiException.cs,GoogleApiRequestException,The method has 4 parameters.
Long Statement,Google.Apis.Authentication,OAuth3LeggedAuthenticator,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Authentication\OAuth3LeggedAuthenticator.cs,ApplyAuthenticationToRequest,The length of the statement  "	string oauthHeader = OAuthUtil.GenerateAuthorizationHeader (request.RequestUri' ConsumerKey' ConsumerSecret' Token' TokenSecret' request.Method); " is 145.
Long Statement,Google.Apis.Authentication,OAuth2LeggedAuthenticator,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Authentication\OAuth2LeggedAuthenticator.cs,ApplyAuthenticationToRequest,The length of the statement  "	string oauthHeader = OAuthUtil.GenerateAuthorizationHeader (request.RequestUri' ConsumerKey' ConsumerSecret' null' null' request.Method); " is 137.
Long Statement,Google.Apis.Discovery,CachedWebDiscoveryDevice,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\CachedWebDiscoveryDevice.cs,Fetch,The length of the statement  "				logger.Warning (string.Format ("Failed to refetch an outdated cache document [{0}]" + " - Using cached document. Exception: {1}"' DiscoveryUri' ex.Message)' ex); " is 161.
Long Statement,Google.Apis.Requests,HttpWebRequestBuilder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\HttpWebRequestBuilder.cs,BuildUri,The length of the statement  "		restPath.Append (String.Join ("&"' QueryParameters.Select (x => String.Format ("{0}={1}"' Uri.EscapeDataString (x.Key)' Uri.EscapeDataString (x.Value))).ToArray ())); " is 166.
Long Statement,Google.Apis.Requests,ServiceRequest,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ServiceRequest.cs,CreateParameterDictionary,The length of the statement  "		RequestParameterAttribute requestParameterAttribute = property.GetCustomAttributes (typeof(RequestParameterAttribute)' false).FirstOrDefault () as RequestParameterAttribute; " is 173.
Long Statement,Google.Apis.Requests,SingleError,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\SingleError.cs,ToString,The length of the statement  "	return string.Format ("Message[{0}] Location[{1} - {2}] Reason[{3}] Domain[{4}]"' Message' Location' LocationType' Reason' Domain); " is 131.
Long Statement,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,CreateRequest,The length of the statement  "		throw new NotSupportedException (string.Format ("The HttpMethod[{0}] of Method[{1}] in Service[{2}] was not supported"' method.HttpMethod' method.Name' service.Name)); " is 167.
Long Statement,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,BuildRequest,The length of the statement  "		if (!(Method.Parameters.TryGetValue (parameter.Key' out parameterDefinition) || Service.Parameters.TryGetValue (parameter.Key' out parameterDefinition))) { " is 155.
Long Statement,Google.Apis.Util,Utilities,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Util\Utilities.cs,GetStringValue,The length of the statement  "	throw new ArgumentException (string.Format ("Enum value '{0}' does not contain a StringValue attribute"' entry)' "value"); " is 122.
Long Statement,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The length of the statement  "	return GenerateSignature (url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' SignatureTypes.HMACSHA1); " is 135.
Long Statement,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The length of the statement  "		string signatureBase = GenerateSignatureBase (url' consumerKey' token' tokenSecret' httpMethod' timeStamp' nonce' HMACSHA1SignatureType); " is 137.
Long Statement,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateOAuthSignature,The length of the statement  "	return string.Format ("{0}&{1}"' EncodingPerRFC3986 (consumerSecret)' string.IsNullOrEmpty (tokenSecret) ? "" : EncodingPerRFC3986 (tokenSecret)); " is 146.
Long Statement,Google.Apis,OAuthUtil,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthUtil.cs,GenerateAuthorizationHeader,The length of the statement  "	string signature = oauthUtil.GenerateSignature (uri' consumerKey' consumerSecret' token' tokenSecret' httpMethod.ToUpper ()' timeStamp' nonce); " is 143.
Long Statement,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,GetNextToken,The length of the statement  "				while (IsTokenSeperator ((char)reader.Peek ()) == false || ((char)reader.Peek () == '.') || ((char)reader.Peek () == '+') || ((char)reader.Peek () == '-')) { " is 157.
Long Statement,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,GetNextToken,The length of the statement  "				if (Decimal.TryParse (token.Value' NumberStyles.Number | NumberStyles.AllowExponent' CultureInfo.InvariantCulture' out decNumber)) { " is 132.
Long Statement,Google.Apis.Json,JsonDictionary,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\JsonDictionary.cs,GetMandatoryValue,The length of the statement  "		throw new ArgumentException (string.Format ("The type \"{1}\" of the value of \"{0}\" is not of the expected type \"{2}\""' val.GetType ()' key' typeof(T))); " is 157.
Long Statement,Google.Apis.Json,JsonReader,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\JsonReader.cs,ParseObject,The length of the statement  "		throw new ArgumentException ("Unable to parse object. Found object " + token + " while looking for property name or object end."); " is 130.
Long Statement,Google.Apis.Discovery.Schema,FutureJsonSchema,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\Schema\FutureJsonSchema.cs,Resolve,The length of the statement  "		throw new ArgumentException ("schema"' "Attempting to resolve a FutureSchema with incorrect id FutureId[" + Id + "] passedinId[" + schema.Id + "]"); " is 148.
Complex Conditional,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Empty Catch Block,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,Upload,The method has an empty catch block.
Empty Catch Block,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,Upload,The method has an empty catch block.
Empty Catch Block,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ThrowErrorMessageIfPresent,The method has an empty catch block.
Magic Number,Google.Apis.Discovery,BaseService,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\Service.cs,RemoveAnnotations,The following statement contains a magic number: if (js.ContainsKey ("$ref") && js.ContainsKey ("annotations") && depth >= 3) {  	js.Remove ("annotations");  }  
Magic Number,Google.Apis.Discovery,WebDiscoveryDevice,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\WebDiscoveryDevice.cs,WebDiscoveryDevice,The following statement contains a magic number: TimeoutInSeconds = 30;  
Magic Number,Google.Apis.Discovery,WebDiscoveryDevice,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\WebDiscoveryDevice.cs,Fetch,The following statement contains a magic number: request.Timeout = TimeoutInSeconds * 1000;  
Magic Number,Google.Apis.Discovery,CachedWebDiscoveryDevice,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\CachedWebDiscoveryDevice.cs,CachedWebDiscoveryDevice,The following statement contains a magic number: CacheDuration = (uint)(new TimeSpan (3' 0' 0' 0).TotalSeconds);  
Magic Number,Google.Apis.Requests,ParameterCollection,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ParameterCollection.cs,FromQueryString,The following statement contains a magic number: foreach (var param in qsParam) {  	// Split the parameter into key and value.  	var info = param.Split (new[] {  		'='  	}' 2);  	if (info.Length >= 2) {  		collection.Add (Uri.UnescapeDataString (info [0])' Uri.UnescapeDataString (info [1]));  	}  }  
Magic Number,Google.Apis.Requests,ParameterCollection,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ParameterCollection.cs,FromQueryString,The following statement contains a magic number: foreach (var param in qsParam) {  	// Split the parameter into key and value.  	var info = param.Split (new[] {  		'='  	}' 2);  	if (info.Length >= 2) {  		collection.Add (Uri.UnescapeDataString (info [0])' Uri.UnescapeDataString (info [1]));  	}  }  
Magic Number,Google.Apis.Requests,ParameterCollection,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ParameterCollection.cs,FromQueryString,The following statement contains a magic number: if (info.Length >= 2) {  	collection.Add (Uri.UnescapeDataString (info [0])' Uri.UnescapeDataString (info [1]));  }  
Magic Number,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: MaximumRetries = 3;  
Magic Number,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: RetryWaitTimeIncreaseFactor = 2.0;  
Magic Number,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: RetryInitialWaitTime = 1000;  
Magic Number,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,SendChunk,The following statement contains a magic number: try {  	Stream requestStream = req.GetRequestStream ();  	int dataWritten = 0;  	while (dataWritten < chunkSize) {  		int len = stream.Read (buffer' 0' buffer.Length);  		requestStream.Write (buffer' 0' len);  		dataWritten += len;  	}  	// req.GetResponse() will throw an exception when this request   	// completes successfully because the server returns an HTTP 308  	// on successful upload of a chunk. On the last chunk' server  	// returns 200 OK or 201 Created  	HttpWebResponse response = (HttpWebResponse)req.GetResponse ();  	// Only the final chunk will reach here in the code. That final chunk  	// response body has the content for the status code.  	if (response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Created) {  		ProcessResponse (response);  	}  } catch (WebException we) {  	// Catch and release on HTTP response code 308. The upload protocol  	// uses 308 to indicate that there is more data expected from the server.  	var response = we.Response as HttpWebResponse;  	if (response == null || response.StatusCode != (HttpStatusCode)308)  		throw;  }  
Magic Number,Google.Apis.Upload,ResumableUpload,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,SendChunk,The following statement contains a magic number: if (response == null || response.StatusCode != (HttpStatusCode)308)  	throw;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	char c = s [i];  	if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  	#if NET_4_0  					    || c == '\'' #endif  	) {  		needEncode = true;  		break;  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\'' #endif  ) {  	needEncode = true;  	break;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else  			output.Append (ch);  		break;  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else  			output.Append (ch);  		break;  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else  		output.Append (ch);  	break;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else  		output.Append (ch);  	break;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  } else  	output.Append (ch);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  } else  	output.Append (ch);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		} else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		} else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			} else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	} else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	} else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			} else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		} else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		} else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	} else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		} else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  } else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  } else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	} else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  } else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	} else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  } else {  	state = 3;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  } else {  	state = 3;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 3;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  } else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		} else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	} else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	} else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  } else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  } else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  } else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	} else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  } else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (number > 65535) {  	output.Append ("&#");  	output.Append (number.ToString (CultureInfo.InvariantCulture));  	output.Append (";");  } else {  	output.Append ((char)number);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: number = number * 16 + Uri.FromHex (c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: number = number * 10 + ((int)c - '0');  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  } else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = i >> 12;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 8) & 0x0F;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 4) & 0x0F;  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	} else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  } else  	result.WriteByte ((byte)c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	} else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  } else  	result.WriteByte ((byte)c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (isUnicode && c > 127) {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	result.WriteByte ((byte)'0');  	result.WriteByte ((byte)'0');  } else  	result.WriteByte ((byte)'%');  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  } else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  } else  	result.WriteByte ((byte)c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  } else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  } else  	result.WriteByte ((byte)c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  } else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  } else  	result.WriteByte ((byte)c);  
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: for (int i = 0; i < bIn.Length; i++) {  	result.WriteByte ((byte)'%');  	int idx = ((int)bIn [i]) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)bIn [i]) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {  	foreach (byte b in e.GetBytes (new char[] {  		ch  	}))  		buf.Add (b);  } else  	buf.Add ((byte)ch);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			} else  				WriteCharBytes (bytes' '%'' e);  		} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		} else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		} else  			WriteCharBytes (bytes' '%'' e);  	} else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	} else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	} else  		WriteCharBytes (bytes' '%'' e);  } else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 5;  } else  	WriteCharBytes (bytes' '%'' e);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  } else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	int current = GetInt (bytes [i]);  	if (current == -1)  		return -1;  	value = (value << 4) + current;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: value = (value << 4) + current;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: if (c > 127)  	return -1;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: val = (val << 4) + current;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	} else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	} else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  } else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	output.Append ((char)xchar);  	i += 5;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	} else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	} else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	} else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  } else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  } else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  } else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: if (xchar != -1) {  	c = (char)xchar;  	i += 2;  }  
Magic Number,ImportedFromMono.System.Web,HttpUtility,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: i += 2;  
Magic Number,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) {  	normalizedUrl += ":" + url.Port;  }  
Magic Number,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) {  	normalizedUrl += ":" + url.Port;  }  
Magic Number,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();  
Magic Number,Google.Apis,OAuthBase,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: while ((next = (char)reader.Read ()) != seperator) {  	if (next == '\\') {  		next = (char)reader.Read ();  		switch (next) {  		case 'n':  			next = '\n';  			break;  		case 'r':  			next = '\r';  			break;  		case 't':  			next = '\t';  			break;  		case '\'':  			next = '\'';  			break;  		case '/':  			next = '/';  			break;  		case '"':  			next = '\"';  			break;  		case '\\':  			next = '\\';  			break;  		case 'b':  			// backspace  			next = '\b';  			break;  		case 'u':  			// 4 digit hexadecimal unicode escape  			char[] escapedCharAry = new char[4];  			for (int i = 0; i < 4; i++) {  				escapedCharAry [i] = (char)reader.Read ();  			}  			String escapedCharStr = new String (escapedCharAry);  			int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  			next = Convert.ToChar (escapedCharInt);  			break;  		default:  			break;  		}  	}  	sb.Append (next);  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: while ((next = (char)reader.Read ()) != seperator) {  	if (next == '\\') {  		next = (char)reader.Read ();  		switch (next) {  		case 'n':  			next = '\n';  			break;  		case 'r':  			next = '\r';  			break;  		case 't':  			next = '\t';  			break;  		case '\'':  			next = '\'';  			break;  		case '/':  			next = '/';  			break;  		case '"':  			next = '\"';  			break;  		case '\\':  			next = '\\';  			break;  		case 'b':  			// backspace  			next = '\b';  			break;  		case 'u':  			// 4 digit hexadecimal unicode escape  			char[] escapedCharAry = new char[4];  			for (int i = 0; i < 4; i++) {  				escapedCharAry [i] = (char)reader.Read ();  			}  			String escapedCharStr = new String (escapedCharAry);  			int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  			next = Convert.ToChar (escapedCharInt);  			break;  		default:  			break;  		}  	}  	sb.Append (next);  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: if (next == '\\') {  	next = (char)reader.Read ();  	switch (next) {  	case 'n':  		next = '\n';  		break;  	case 'r':  		next = '\r';  		break;  	case 't':  		next = '\t';  		break;  	case '\'':  		next = '\'';  		break;  	case '/':  		next = '/';  		break;  	case '"':  		next = '\"';  		break;  	case '\\':  		next = '\\';  		break;  	case 'b':  		// backspace  		next = '\b';  		break;  	case 'u':  		// 4 digit hexadecimal unicode escape  		char[] escapedCharAry = new char[4];  		for (int i = 0; i < 4; i++) {  			escapedCharAry [i] = (char)reader.Read ();  		}  		String escapedCharStr = new String (escapedCharAry);  		int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  		next = Convert.ToChar (escapedCharInt);  		break;  	default:  		break;  	}  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: if (next == '\\') {  	next = (char)reader.Read ();  	switch (next) {  	case 'n':  		next = '\n';  		break;  	case 'r':  		next = '\r';  		break;  	case 't':  		next = '\t';  		break;  	case '\'':  		next = '\'';  		break;  	case '/':  		next = '/';  		break;  	case '"':  		next = '\"';  		break;  	case '\\':  		next = '\\';  		break;  	case 'b':  		// backspace  		next = '\b';  		break;  	case 'u':  		// 4 digit hexadecimal unicode escape  		char[] escapedCharAry = new char[4];  		for (int i = 0; i < 4; i++) {  			escapedCharAry [i] = (char)reader.Read ();  		}  		String escapedCharStr = new String (escapedCharAry);  		int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  		next = Convert.ToChar (escapedCharInt);  		break;  	default:  		break;  	}  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: switch (next) {  case 'n':  	next = '\n';  	break;  case 'r':  	next = '\r';  	break;  case 't':  	next = '\t';  	break;  case '\'':  	next = '\'';  	break;  case '/':  	next = '/';  	break;  case '"':  	next = '\"';  	break;  case '\\':  	next = '\\';  	break;  case 'b':  	// backspace  	next = '\b';  	break;  case 'u':  	// 4 digit hexadecimal unicode escape  	char[] escapedCharAry = new char[4];  	for (int i = 0; i < 4; i++) {  		escapedCharAry [i] = (char)reader.Read ();  	}  	String escapedCharStr = new String (escapedCharAry);  	int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  	next = Convert.ToChar (escapedCharInt);  	break;  default:  	break;  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: switch (next) {  case 'n':  	next = '\n';  	break;  case 'r':  	next = '\r';  	break;  case 't':  	next = '\t';  	break;  case '\'':  	next = '\'';  	break;  case '/':  	next = '/';  	break;  case '"':  	next = '\"';  	break;  case '\\':  	next = '\\';  	break;  case 'b':  	// backspace  	next = '\b';  	break;  case 'u':  	// 4 digit hexadecimal unicode escape  	char[] escapedCharAry = new char[4];  	for (int i = 0; i < 4; i++) {  		escapedCharAry [i] = (char)reader.Read ();  	}  	String escapedCharStr = new String (escapedCharAry);  	int escapedCharInt = int.Parse (escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);  	next = Convert.ToChar (escapedCharInt);  	break;  default:  	break;  }  
Magic Number,Google.Apis.Json,TokenStream,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	escapedCharAry [i] = (char)reader.Read ();  }  
Missing Default,Google.Apis.Requests,Request,D:\newReposJune17\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,CreateWebRequest,The following switch statement is missing a default case: switch (action) {  case ETagAction.IfMatch:  	request.Headers [HttpRequestHeader.IfMatch] = ETag;  	break;  case ETagAction.IfNoneMatch:  	request.Headers [HttpRequestHeader.IfNoneMatch] = ETag;  	break;  }  
