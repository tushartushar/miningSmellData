Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The method has 167 lines of code.
Long Method,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,InitEntities,The method has 257 lines of code.
Complex Method,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,Cyclomatic complexity of the method is 8
Complex Method,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlAttributeEncode,Cyclomatic complexity of the method is 8
Complex Method,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,Cyclomatic complexity of the method is 12
Complex Method,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Complex Method,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,Cyclomatic complexity of the method is 8
Long Parameter List,Google.Apis.Upload,ResumableUpload<TRequest>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ResumableUpload,The method has 5 parameters. Parameters: baseUri' path' httpMethod' contentStream' contentType
Long Parameter List,Google.Apis.Upload,ResumableUpload<TRequest;TResponse>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ResumableUpload,The method has 5 parameters. Parameters: baseUri' path' httpMethod' contentStream' contentType
Long Parameter List,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The method has 8 parameters. Parameters: url' consumerKey' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType
Long Parameter List,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The method has 8 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce
Long Parameter List,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignature,The method has 9 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType
Long Parameter List,Google.Apis,OAuthUtil,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthUtil.cs,GenerateAuthorizationHeader,The method has 6 parameters. Parameters: uri' consumerKey' consumerSecret' token' tokenSecret' httpMethod
Long Parameter List,Google.Apis.Logging,ConsoleLogger,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Logging\ConsoleLogger.cs,Log,The method has 5 parameters. Parameters: destination' category' color' message' formatArgs
Complex Conditional,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Complex Conditional,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Complex Conditional,Google.Apis.Json,TokenStream,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,GetNextToken,The conditional expression  "IsTokenSeperator((char) reader.Peek()) == false || ((char) reader.Peek() == '.') ||                                     ((char) reader.Peek() == '+') || ((char) reader.Peek() == '-')"  is complex.
Empty Catch Block,Google.Apis.Upload,ResumableUpload<TRequest>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,Upload,The method has an empty catch block.
Empty Catch Block,Google.Apis.Upload,ResumableUpload<TRequest>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,Upload,The method has an empty catch block.
Empty Catch Block,Google.Apis.Upload,ResumableUpload<TRequest>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,ThrowErrorMessageIfPresent,The method has an empty catch block.
Magic Number,Google.Apis.Discovery,BaseService,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\Service.cs,RemoveAnnotations,The following statement contains a magic number: if (js.ContainsKey("$ref") && js.ContainsKey("annotations") && depth >= 3)              {                  js.Remove("annotations");              }
Magic Number,Google.Apis.Discovery,WebDiscoveryDevice,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\WebDiscoveryDevice.cs,WebDiscoveryDevice,The following statement contains a magic number: TimeoutInSeconds = 30;
Magic Number,Google.Apis.Discovery,WebDiscoveryDevice,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\WebDiscoveryDevice.cs,Fetch,The following statement contains a magic number: request.Timeout = TimeoutInSeconds * 1000;
Magic Number,Google.Apis.Discovery,CachedWebDiscoveryDevice,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Discovery\CachedWebDiscoveryDevice.cs,CachedWebDiscoveryDevice,The following statement contains a magic number: CacheDuration = (uint) (new TimeSpan(3' 0' 0' 0).TotalSeconds);
Magic Number,Google.Apis.Requests,ParameterCollection,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ParameterCollection.cs,FromQueryString,The following statement contains a magic number: foreach (var param in qsParam)              {                  // Split the parameter into key and value.                  var info = param.Split(new [] {'='}' 2);                  if (info.Length >= 2)                  {                      collection.Add(Uri.UnescapeDataString(info[0])' Uri.UnescapeDataString(info[1]));                  }              }
Magic Number,Google.Apis.Requests,ParameterCollection,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\ParameterCollection.cs,FromQueryString,The following statement contains a magic number: foreach (var param in qsParam)              {                  // Split the parameter into key and value.                  var info = param.Split(new [] {'='}' 2);                  if (info.Length >= 2)                  {                      collection.Add(Uri.UnescapeDataString(info[0])' Uri.UnescapeDataString(info[1]));                  }              }
Magic Number,Google.Apis.Requests,Request,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: MaximumRetries = 3;
Magic Number,Google.Apis.Requests,Request,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: RetryWaitTimeIncreaseFactor = 2.0;
Magic Number,Google.Apis.Requests,Request,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,Request,The following statement contains a magic number: RetryInitialWaitTime = 1000;
Magic Number,Google.Apis.Upload,ResumableUpload<TRequest>,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Upload\ResumableUpload.cs,SendChunk,The following statement contains a magic number: try              {                  Stream requestStream = req.GetRequestStream();                    int dataWritten = 0;                  while (dataWritten < chunkSize)                  {                      int len = stream.Read(buffer' 0' buffer.Length);                      requestStream.Write(buffer' 0' len);                      dataWritten += len;                  }                    // req.GetResponse() will throw an exception when this request                   // completes successfully because the server returns an HTTP 308                  // on successful upload of a chunk. On the last chunk' server                  // returns 200 OK or 201 Created                  HttpWebResponse response = (HttpWebResponse)req.GetResponse();                    // Only the final chunk will reach here in the code. That final chunk                  // response body has the content for the status code.                  if (response.StatusCode == HttpStatusCode.OK ||                      response.StatusCode == HttpStatusCode.Created)                  {                      ProcessResponse(response);                  }              }              catch (WebException we)              {                  // Catch and release on HTTP response code 308. The upload protocol                  // uses 308 to indicate that there is more data expected from the server.                  var response = we.Response as HttpWebResponse;                  if(response == null || response.StatusCode != (HttpStatusCode)308)                      throw;              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  ch = input[i];                    if ((ch < 32 && ch != 9) || ch == 127)                      StringBuilderAppend(String.Format("%{0:x2}"' (int)ch)' ref sb);              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)              {                  char c = s[i];                  if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\''  #endif  )                  {                      needEncode = true;                      break;                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  switch (s[i])                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif                      case '\uff1c':                          output.Append("&#65308;");                          break;                        case '\uff1e':                          output.Append("&#65310;");                          break;                        default:                          ch = s[i];                          if (ch > 159 && ch < 256)                          {                              output.Append("&#");                              output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                              output.Append(ch);                          break;                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  switch (s[i])                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;  #if NET_4_0  					case '\'':  						output.Append ("&#39;");  						break;  #endif                      case '\uff1c':                          output.Append("&#65308;");                          break;                        case '\uff1e':                          output.Append("&#65310;");                          break;                        default:                          ch = s[i];                          if (ch > 159 && ch < 256)                          {                              output.Append("&#");                              output.Append(((int)ch).ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                              output.Append(ch);                          break;                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                  if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                          state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                      if (have_trailing_digits)                      {                          entity.Append(number.ToString(CultureInfo.InvariantCulture));                          have_trailing_digits = false;                      }                        output.Append(entity.ToString());                      entity.Length = 0;                      entity.Append('&');                      continue;                  }                    if (state == 1)                  {                      if (c == ';')                      {                          state = 0;                          output.Append(entity.ToString());                          output.Append(c);                          entity.Length = 0;                      }                      else                      {                          number = 0;                          is_hex_value = false;                          if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                          entity.Append(c);  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                  }                  else if (state == 2)                  {                      entity.Append(c);                      if (c == ';')                      {                          string key = entity.ToString();                          if (key.Length > 1 && Entities.ContainsKey(key.Substring(1' key.Length - 2)))                              key = Entities[key.Substring(1' key.Length - 2)].ToString();                            output.Append(key);                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                      }                  }                  else if (state == 3)                  {                      if (c == ';')                      {  #if NET_4_0  						if (number == 0)  							output.Append (rawEntity.ToString () + ";");  						else  #endif                          if (number > 65535)                          {                              output.Append("&#");                              output.Append(number.ToString(CultureInfo.InvariantCulture));                              output.Append(";");                          }                          else                          {                              output.Append((char)number);                          }                          state = 0;                          entity.Length = 0;  #if NET_4_0  						rawEntity.Length = 0;  #endif                          have_trailing_digits = false;                      }                      else if (is_hex_value && Uri.IsHexDigit(c))                      {                          number = number * 16 + Uri.FromHex(c);                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (Char.IsDigit(c))                      {                          number = number * 10 + ((int)c - '0');                          have_trailing_digits = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else if (number == 0 && (c == 'x' || c == 'X'))                      {                          is_hex_value = true;  #if NET_4_0  						rawEntity.Append (c);  #endif                      }                      else                      {                          state = 2;                          if (have_trailing_digits)                          {                              entity.Append(number.ToString(CultureInfo.InvariantCulture));                              have_trailing_digits = false;                          }                          entity.Append(c);                      }                  }              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                  int i = (int)c;                    result.WriteByte((byte)'%');                  result.WriteByte((byte)'u');                  idx = i >> 12;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 8) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = (i >> 4) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  idx = i & 0x0F;                  result.WriteByte((byte)hexChars[idx]);                  return;              }
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                      result.WriteByte((byte)'%');                    int idx = ((int)c) >> 4;                  result.WriteByte((byte)hexChars[idx]);                  idx = ((int)c) & 0x0F;                  result.WriteByte((byte)hexChars[idx]);              }              else                  result.WriteByte((byte)c);
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,ImportedFromMono.System.Web.Util,HttpEncoder,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpEncoder.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                  for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                      int idx = ((int)bIn[i]) >> 4;                      result.WriteByte((byte)hexChars[idx]);                      idx = ((int)bIn[i]) & 0x0F;                      result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                  result.WriteByte((byte)'2');                  result.WriteByte((byte)'0');              }              else                  result.WriteByte((byte)c);
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                      buf.Add(b);              }              else                  buf.Add((byte)ch);
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                  if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                          if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                              i += 5;                          }                          else                              WriteCharBytes(bytes' '%'' e);                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                          i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                      WriteCharBytes(bytes' ' '' e);                  else                      WriteCharBytes(bytes' ch' e);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')                  return c - 'a' + 10;
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')                  return c - 'A' + 10;
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                  if (current == -1)                      return -1;                  value = (value << 4) + current;              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                  if (c > 127)                      return -1;                    int current = GetInt((byte)c);                  if (current == -1)                      return -1;                  val = (val << 4) + current;              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                              acc.SetLength(0);                          }                          xchar = GetChar(bytes' i + 2' 4);                          if (xchar != -1)                          {                              output.Append((char)xchar);                              i += 5;                              continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                          i += 2;                          continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                      acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,ImportedFromMono.System.Web,HttpUtility,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\ThirdParty\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                  if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                      if (xchar != -1)                      {                          c = (char)xchar;                          i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))              {                  normalizedUrl += ":" + url.Port;              }
Magic Number,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))              {                  normalizedUrl += ":" + url.Port;              }
Magic Number,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,Google.Apis,OAuthBase,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,Google.Apis,OAuthUtil,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\OAuthUtil.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Google.Apis,Utilities,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Utilities.cs,EncodeSlugHeader,The following statement contains a magic number: StringBuilder returnString = new StringBuilder(256);
Magic Number,Google.Apis.Json,TokenStream,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: while ((next = (char) reader.Read()) != seperator)              {                  if (next == '\\')                  {                      next = (char) reader.Read();                      switch (next)                      {                          case 'n':                              next = '\n';                              break;                          case 'r':                              next = '\r';                              break;                          case 't':                              next = '\t';                              break;                          case '\'':                              next = '\'';                              break;                          case '/':                              next = '/';                              break;                          case '"':                              next = '\"';                              break;                          case '\\':                              next = '\\';                              break;                          case 'b':                              // backspace                              next = '\b';                              break;                          case 'u':                              // 4 digit hexadecimal unicode escape                              char[] escapedCharAry = new char[4];                              for (int i = 0; i < 4; i++)                              {                                  escapedCharAry[i] = (char) reader.Read();                              }                                String escapedCharStr = new String(escapedCharAry);                              int escapedCharInt = int.Parse(                                  escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);                              next = Convert.ToChar(escapedCharInt);                              break;                          default:                              break;                      }                  }                  sb.Append(next);              }
Magic Number,Google.Apis.Json,TokenStream,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Json\TokenStream.cs,ParseString,The following statement contains a magic number: while ((next = (char) reader.Read()) != seperator)              {                  if (next == '\\')                  {                      next = (char) reader.Read();                      switch (next)                      {                          case 'n':                              next = '\n';                              break;                          case 'r':                              next = '\r';                              break;                          case 't':                              next = '\t';                              break;                          case '\'':                              next = '\'';                              break;                          case '/':                              next = '/';                              break;                          case '"':                              next = '\"';                              break;                          case '\\':                              next = '\\';                              break;                          case 'b':                              // backspace                              next = '\b';                              break;                          case 'u':                              // 4 digit hexadecimal unicode escape                              char[] escapedCharAry = new char[4];                              for (int i = 0; i < 4; i++)                              {                                  escapedCharAry[i] = (char) reader.Read();                              }                                String escapedCharStr = new String(escapedCharAry);                              int escapedCharInt = int.Parse(                                  escapedCharStr' NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo);                              next = Convert.ToChar(escapedCharInt);                              break;                          default:                              break;                      }                  }                  sb.Append(next);              }
Missing Default,Google.Apis.Requests,Request,C:\repos\xamarin_google-apis\src\Externals\google-api-dotnet-client\Src\GoogleApis\Apis\Requests\Request.cs,CreateWebRequest,The following switch statement is missing a default case: switch (action)                  {                      case ETagAction.IfMatch:                          request.Headers[HttpRequestHeader.IfMatch] = ETag;                          break;                        case ETagAction.IfNoneMatch:                          request.Headers[HttpRequestHeader.IfNoneMatch] = ETag;                          break;                  }
