Implementation smell,Namespace,Class,File,Method,Description
Long Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateVectorRenders,The method has 203 lines of code.
Long Method,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The method has 137 lines of code.
Long Method,kOS.Sound,Voice,C:\repos\KSP-KOS_KOS\src\kOS\Sound\Voice.cs,Update,The method has 104 lines of code.
Complex Method,kOS.AddOns.InfernalRobotics,IRWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\InfernalRobotics\IRWrapper.cs,InitWrapper,Cyclomatic complexity of the method is 14
Complex Method,kOS.AddOns.TrajectoriesAddon,TRWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\TRWrapper.cs,init,Cyclomatic complexity of the method is 8
Complex Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,SteeringManager,Cyclomatic complexity of the method is 8
Complex Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateVectorRenders,Cyclomatic complexity of the method is 33
Complex Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,WriteCSVs,Cyclomatic complexity of the method is 8
Complex Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,DisposeVectorRenderers,Cyclomatic complexity of the method is 16
Complex Method,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,kOS,KSPLogger,C:\repos\KSP-KOS_KOS\src\kOS\KSPLogger.cs,TraceLog,Cyclomatic complexity of the method is 8
Complex Method,kOS,SharedObjects,C:\repos\KSP-KOS_KOS\src\kOS\SharedObjects.cs,DestroyObjects,Cyclomatic complexity of the method is 9
Complex Method,kOS.Module,kOSLightModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSLightModule.cs,updateColor,Cyclomatic complexity of the method is 10
Complex Method,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,Cyclomatic complexity of the method is 9
Complex Method,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitObjects,Cyclomatic complexity of the method is 9
Complex Method,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ProcessKeyEvents,Cyclomatic complexity of the method is 9
Complex Method,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,Cyclomatic complexity of the method is 18
Complex Method,kOS.Sound,Voice,C:\repos\KSP-KOS_KOS\src\kOS\Sound\Voice.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LoadGame,Cyclomatic complexity of the method is 8
Complex Method,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,SetSuffix,Cyclomatic complexity of the method is 8
Complex Method,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,PushNewSetting,Cyclomatic complexity of the method is 15
Complex Method,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,Cyclomatic complexity of the method is 17
Complex Method,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,GetPartsInGroup,Cyclomatic complexity of the method is 21
Complex Method,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,GetModulesInGroup,Cyclomatic complexity of the method is 21
Complex Method,kOS.Suffixed.PartModuleField,PartModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\PartModuleFields.cs,IsLegalValue,Cyclomatic complexity of the method is 11
Complex Method,kOS.Suffixed.Part,ModuleEngineAdapter,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\ModuleEngineAdapter.cs,GetEngineThrust,Cyclomatic complexity of the method is 8
Complex Method,kOS.Suffixed.Widget,Widget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Widget.cs,GetTexture,Cyclomatic complexity of the method is 8
Complex Method,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,Cyclomatic complexity of the method is 10
Complex Method,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,kOS.AddOns.KerbalAlarmClock,KACWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACWrapper.cs,InitKACWrapper,Cyclomatic complexity of the method is 8
Long Parameter List,kOS.Communication,Message,C:\repos\KSP-KOS_KOS\src\kOS\Communication\Message.cs,Create,The method has 5 parameters. Parameters: content' sentAt' receivedAt' sender' processor
Long Parameter List,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Update,The method has 5 parameters. Parameters: sampleTime' input' setpoint' momentOfInertia' maxOutput
Long Parameter List,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,DoExecuteWork,The method has 8 parameters. Parameters: shared' start' vec' rgba' str' scale' show' width
Long Parameter List,kOS.Module,AssetManager,C:\repos\KSP-KOS_KOS\src\kOS\Module\AssetManager.cs,GetSystemFontByNameAndSize,The method has 5 parameters. Parameters: name' size' checkMono' doErrorMessage' doDetectedCheck
Long Parameter List,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,AttachTo,The method has 5 parameters. Parameters: width' height' title' sharedObj' w
Long Parameter List,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawCursorAt,The method has 7 parameters. Parameters: ch' x' y' reversingScreen' charWidth' charHeight' brightness
Long Parameter List,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,Summon,The method has 9 parameters. Parameters: leftX' topY' minWidth' title' subTitle' current' choices' callWhenChanged' callWhenClosed
Long Parameter List,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,NoteValue,The method has 5 parameters. Parameters: freq' endFreq' vol' keyDownLength' duration
Long Parameter List,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,NoteValue,The method has 5 parameters. Parameters: letterNote' endLetterNote' vol' keyDownLength' duration
Long Parameter List,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,ResourceTransferValue,The method has 5 parameters. Parameters: transferManager' resourceInfo' transferTo' transferFrom' amount
Long Parameter List,kOS.Suffixed,Node,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Node.cs,Node,The method has 5 parameters. Parameters: time' radialOut' normal' prograde' shareObj
Long Parameter List,kOS.Suffixed.Widget,Slider,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Slider.cs,Slider,The method has 5 parameters. Parameters: parent' h_not_v' v' from' to
Long Identifier,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,,The length of the parameter terminalClosedTelnetIconTexture is 31.
Long Statement,kOS.AddOns.ActionGroupsExtended,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\ActionGroupsExtended\Addon.cs,InitializeSuffixes,The length of the statement  "            //AddSuffix("DELAY"' new OneArgsSuffix<double' VesselTarget>(RTGetDelay' "Get current Shortest Signal Delay for Vessel")); " is 122.
Long Statement,kOS.AddOns.InfernalRobotics,IRControlGroupWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\InfernalRobotics\IRControlGroup.cs,GetVessel,The length of the statement  "                //IF IR version is 0.21.4 or below IR API may return null' but it also means that IR API only returns groups for ActiveVessel " is 125.
Long Statement,kOS.AddOns.InfernalRobotics,IRControlGroupWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\InfernalRobotics\IRControlGroup.cs,GetVessel,The length of the statement  "                return cg.Vessel != null ? VesselTarget.CreateOrGetExisting(cg.Vessel' shared) : VesselTarget.CreateOrGetExisting(FlightGlobals.ActiveVessel' shared); " is 150.
Long Statement,kOS.AddOns.InfernalRobotics,IRControlGroupWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\InfernalRobotics\IRControlGroup.cs,GetVessel,The length of the statement  "                return VesselTarget.CreateOrGetExisting(shared.Vessel' shared); //user should not be able to get here anyway' but to avoid null will return shared.Vessel " is 153.
Long Statement,kOS.AddOns.RemoteTech,RemoteTechHook,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\RemoteTechHook.cs,InitializeAPI,The length of the statement  "            var loadedAssembly = AssemblyLoader.loadedAssemblies.FirstOrDefault(a => a.assembly.GetName().Name.Equals(REMOTE_TECH_ASSEMBLY)); " is 129.
Long Statement,kOS.AddOns.RemoteTech,RemoteTechHook,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\RemoteTechHook.cs,InitializeAPI,The length of the statement  "            SafeHouse.Logger.Log(string.Format("Found RemoteTech! Version: {0}.{1}"' loadedAssembly.versionMajor' loadedAssembly.versionMinor));  " is 132.
Long Statement,kOS.AddOns.RemoteTech,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("DELAY"' new OneArgsSuffix<ScalarValue' VesselTarget>(RTGetDelay' "Get current Shortest Signal Delay for Vessel")); " is 125.
Long Statement,kOS.AddOns.RemoteTech,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("HASCONNECTION"' new OneArgsSuffix<BooleanValue' VesselTarget>(RTHasConnection' "True if ship has any connection")); " is 126.
Long Statement,kOS.AddOns.RemoteTech,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("HASKSCCONNECTION"' new OneArgsSuffix<BooleanValue' VesselTarget>(RTHasKSCConnection' "True if ship has connection to KSC")); " is 135.
Long Statement,kOS.AddOns.RemoteTech,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ANTENNAHASCONNECTION"' new OneArgsSuffix<BooleanValue' PartValue>(RTAntennaHasConnection' "True if antenna has any connection")); " is 140.
Long Statement,kOS.AddOns.RemoteTech,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("HASLOCALCONTROL"' new OneArgsSuffix<BooleanValue' VesselTarget>(RTHasLocalControl' "True if ship has locacl control (i.e. a pilot in a command module)")); " is 165.
Long Statement,kOS.AddOns.RemoteTech,RemoteTechAntennaModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\RemoteTechAntennaModuleFields.cs,GetTargetGuid,The length of the statement  "                    var body = FlightGlobals.Bodies.Where(b => b.bodyName.Equals(targetString' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault(); " is 138.
Long Statement,kOS.AddOns.RemoteTech,RemoteTechAntennaModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\RemoteTechAntennaModuleFields.cs,GetTargetGuid,The length of the statement  "                        var vessel = FlightGlobals.Vessels.FirstOrDefault(v => v.vesselName.Equals(targetString' StringComparison.InvariantCultureIgnoreCase)); " is 135.
Long Statement,kOS.AddOns.RemoteTech,RemoteTechConnectivityManager,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\RemoteTech\RemoteTechConnectivityManager.cs,HasConnectionToControl,The length of the statement  "                return vessel.CurrentControlLevel >= Vessel.ControlLevel.PARTIAL_MANNED; // default to checking for local control if the vessel isn't configured for RT. " is 152.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("HASIMPACT"' new Suffix<BooleanValue>(HasImpact' "Check whether Trajectories has predicted an impact position for the current vessel.")); " is 147.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new string[] { "CORRECTEDVEC"' "CORRECTEDVECTOR" }' new Suffix<Vector>(CorrectedVector' "Offset plus PlannedVect' somewhat corrected to glide ship towards target.")); " is 176.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new string[] { "PLANNEDVEC"' "PLANNEDVECTOR" }' new Suffix<Vector>(PlannedVector' "Vector at which to point to follow predicted trajectory.")); " is 153.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,ImpactPos,The length of the statement  "                throw new KOSException("You may only call addons:TR:impactPos from the active vessel. Always check addons:tr:hasImpact"); " is 121.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,CorrectedVector,The length of the statement  "                throw new KOSException("You may only call addons:TR:correctedVect from the active vessel. Always check addons:tr:hasImpact"); " is 125.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,PlannedVector,The length of the statement  "                throw new KOSException("You may only call addons:TR:plannedVect from the active vessel. Always check addons:tr:hasImpact"); " is 123.
Long Statement,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,SetTarget,The length of the statement  "                throw new KOSException("You may only call addons:TR:setTarget from the active vessel. Always check addons:tr:hasImpact"); " is 121.
Long Statement,kOS.Binding,FlightControlManager,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightControlManager.cs,GetThrottleValue,The length of the statement  "            var throttleManager = kOSVesselModule.GetInstance(Shared.Vessel).GetFlightControlParameter("throttle"); // will throw its own exception if the parameter doesn't exist " is 166.
Long Statement,kOS.Binding,FlightControlManager,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightControlManager.cs,ToggleFlyByWire,The length of the statement  "            var param = kOSVesselModule.GetInstance(Shared.Vessel).GetFlightControlParameter(paramName); // will throw its own exception if the parameter doesn't exist " is 155.
Long Statement,kOS.Binding,FlightControlManager,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightControlManager.cs,SelectAutopilotMode,The length of the statement  "                    string.Format("Cannot set SAS mode to a direction. Should use the name of the mode (as string' e.g. \"PROGRADE\"' not PROGRADE) for SASMODE. Alternatively' can use LOCK STEERING TO Direction instead of using SAS")); " is 215.
Long Statement,kOS.Binding,FlightControlManager,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightControlManager.cs,SelectAutopilotMode,The length of the statement  "                        string.Format("Cannot set autopilot value' pilot/probe does not support {0}' or there is no node/target"' autopilotMode)); " is 122.
Long Statement,kOS.Binding,FlightControlManager,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightControlManager.cs,SelectAutopilotMode,The length of the statement  "                    // TODO: figure out how to make RemoteTech allow the built in autopilot control.  This may require modification to RemoteTech itself. " is 133.
Long Statement,kOS.Binding,FlightStats,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightStats.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddGetter("ANGULARVELOCITY"' () => shared.Vessel.transform.InverseTransformDirection(shared.Vessel.GetComponent<Rigidbody>().angularVelocity)); " is 161.
Long Statement,kOS.Binding,FlightStats,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightStats.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddGetter("STEERINGMANAGER"' () => (SteeringManager)kOSVesselModule.GetInstance(shared.Vessel).GetFlightControlParameter("steering")); " is 152.
Long Statement,kOS.Binding,FlightStats,C:\repos\KSP-KOS_KOS\src\kOS\Binding\FlightStats.cs,GetAllNodes,The length of the statement  "            var ret = new ListValue<Node>(vessel.patchedConicSolver.maneuverNodes.Select(e => Node.FromExisting(vessel' e' shared))); " is 121.
Long Statement,kOS.Binding,TerminalSettings,C:\repos\KSP-KOS_KOS\src\kOS\Binding\TerminalSettings.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddGetter("TERMINAL"' () => terminalStructInstance ?? (terminalStructInstance = new TerminalStruct(shared)) ); " is 128.
Long Statement,kOS.Binding,BindingTimeWarp,C:\repos\KSP-KOS_KOS\src\kOS\Binding\BindingsUniverse.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddGetter("CONTROLCONNECTION"' () => controlConnection ?? (controlConnection = new ControlConnection(shared))); " is 129.
Long Statement,kOS.Binding,BindingTimeWarp,C:\repos\KSP-KOS_KOS\src\kOS\Binding\BindingsUniverse.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddSetter("WARPMODE"' val => TimeWarpValue.Instance.SetModeAsString((StringValue)StringValue.FromPrimitive(val.ToString()))); " is 143.
Long Statement,kOS.Binding,BindingTimeWarp,C:\repos\KSP-KOS_KOS\src\kOS\Binding\BindingsUniverse.cs,AddTo,The length of the statement  "            shared.BindingMgr.AddSetter("WARP"' val => TimeWarpValue.Instance.SetWarp((ScalarIntValue)ScalarIntValue.FromPrimitive(val))); " is 126.
Long Statement,kOS.Callback,KOSGameEventDispatcher,C:\repos\KSP-KOS_KOS\src\kOS\Callback\KOSGameEventDispatcher.cs,SendToSwitchVesselNotifyees,The length of the statement  "                    Shared.Cpu.AddTrigger(del' VesselTarget.CreateOrGetExisting(fromVes' Shared)' VesselTarget.CreateOrGetExisting(toVes' Shared)); " is 127.
Long Statement,kOS.Callback,KOSGameEventDispatcher,C:\repos\KSP-KOS_KOS\src\kOS\Callback\KOSGameEventDispatcher.cs,SendToSOIChangeNotifyees,The length of the statement  "                    Shared.Cpu.AddTrigger(del' BodyTarget.CreateOrGetExisting(evt.@from' Shared)' BodyTarget.CreateOrGetExisting(evt.to' Shared)); " is 126.
Long Statement,kOS.Communication,CommNetConnectivityManager,C:\repos\KSP-KOS_KOS\src\kOS\Communication\CommNetConnectivityManager.cs,HasConnection,The length of the statement  "            return vessel1.id == vessel2.id || net.FindPath(vessel1.Connection.Comm' tempPath' vessel2.Connection.Comm) || net.FindPath(vessel2.Connection.Comm' tempPath' vessel1.Connection.Comm); " is 184.
Long Statement,kOS.Communication,ConnectivityManager,C:\repos\KSP-KOS_KOS\src\kOS\Communication\ConnectivityManager.cs,RefreshInstance,The length of the statement  "                    SafeHouse.Logger.LogError("ConnectivityManager.RefreshInstance - Failed to instantiate " + GetSelectedManagerType().Name); " is 122.
Long Statement,kOS.Communication,kOSConnectivityParameters,C:\repos\KSP-KOS_KOS\src\kOS\Communication\kOSConnectivityParameters.cs,CheckNewManagers,The length of the statement  "            if (!availableConnectivityManagers.Contains(connectivityHandler) || !availableConnectivityManagers.IsSubsetOf(knownHandlers)) " is 125.
Long Statement,kOS.Communication,InterVesselManager,C:\repos\KSP-KOS_KOS\src\kOS\Communication\InterVesselManager.cs,OnSave,The length of the statement  "                    ConfigNode queueNode = ConfigNodeFormatter.Instance.ToConfigNode(new SafeSerializationMgr(null).Dump(vesselQueues[id])); " is 120.
Long Statement,kOS.Communication,MessageQueueStructure,C:\repos\KSP-KOS_KOS\src\kOS\Communication\MessageQueueStructure.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("POP"'      new NoArgsSuffix<MessageStructure>        (() => new MessageStructure(messageQueue.Pop()' sharedObjects))); " is 129.
Long Statement,kOS.Communication,MessageQueueStructure,C:\repos\KSP-KOS_KOS\src\kOS\Communication\MessageQueueStructure.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("PEEK"'     new NoArgsSuffix<MessageStructure>        (() => new MessageStructure(messageQueue.Peek()' sharedObjects))); " is 130.
Long Statement,kOS.Communication,MessageQueueStructure,C:\repos\KSP-KOS_KOS\src\kOS\Communication\MessageQueueStructure.cs,PushMessage,The length of the statement  "                messageQueue.Push(Message.Create(content' sentAt' sentAt' VesselTarget.CreateOrGetExisting(sharedObjects.Vessel' sharedObjects)' " is 128.
Long Statement,kOS.Communication,VesselConnection,C:\repos\KSP-KOS_KOS\src\kOS\Communication\VesselConnection.cs,SendMessage,The length of the statement  "            queue.Push(Message.Create(content' sentAt' receivedAt' VesselTarget.CreateOrGetExisting(shared)' shared.Processor.Tag)); " is 120.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SHOWFACINGVECTORS"' new SetSuffix<BooleanValue>(() => ShowFacingVectors' value => ShowFacingVectors = value)); " is 121.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SHOWANGULARVECTORS"' new SetSuffix<BooleanValue>(() => ShowAngularVectors' value => ShowAngularVectors = value)); " is 124.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SHOWSTEERINGSTATS"' new SetSuffix<BooleanValue>(() => ShowSteeringStats' value => ShowSteeringStats = value)); " is 121.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("PITCHTORQUEADJUST"' new SetSuffix<ScalarValue>(() => PitchTorqueAdjust' value => PitchTorqueAdjust = value)); " is 120.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("PITCHTORQUEFACTOR"' new SetSuffix<ScalarValue>(() => PitchTorqueFactor' value => PitchTorqueFactor = value)); " is 120.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ROLLCONTROLANGLERANGE"' new SetSuffix<ScalarValue>(() => RollControlAngleRange' value => RollControlAngleRange = value)); " is 132.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ENABLETORQUEADJUST"' new SetSuffix<BooleanValue>(() => EnableTorqueAdjust' value => EnableTorqueAdjust = value)); " is 124.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,GetDirectionFromValue,The length of the statement  "                "STEERING"' KOSNomenclature.GetKOSName(value.GetType())' "Direction' Vector' Maneuver Node' or special string \"KILL\""); " is 121.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateStateVectors,The length of the statement  "            // TODO: Currently adjustments to MOI are only enabled in debug compiles.  Using this feature seems to be buggy' but it has potential " is 133.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The length of the statement  "            // Calculate the maximum allowable angular velocity and apply the limit' something we can stop in a reasonable amount of time " is 125.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The length of the statement  "            // Because the value of phi is already error' we say the input is -error and the setpoint is 0 so the PID has the correct sign " is 126.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The length of the statement  "            //tgtPitchTorque = pitchPI.Update(sampletime' pitchRate.Update(omega.x)' tgtPitchOmega' momentOfInertia.x' controlTorque.x); " is 124.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The length of the statement  "            //tgtRollTorque = rollPI.Update(sampletime' rollRate.Update(omega.z)' tgtRollOmega' momentOfInertia.y' controlTorque.y); " is 120.
Long Statement,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,WriteCSVs,The length of the statement  "                adjustTorqueWriter.WriteLine("LastSampleTime'Target Pitch'Measured Pitch'Average Adjust Pitch'Raw Pitch'Target Yaw'Measured Yaw'Average Adjust Yaw'Raw Yaw'Target Roll'Measured Roll'Average Adjust Roll'Raw Roll'Samples Roll"); " is 225.
Long Statement,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ToCSVString,The length of the statement  "                    Loop.LastSampleTime' Loop.Input' Loop.Setpoint' Loop.Error' Loop.ErrorSum' Loop.Output' Loop.Kp' Loop.Ki' Tr' Ts' I' Loop.MaxOutput); " is 133.
Long Statement,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateAutopilot,The length of the statement  "            if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(controlShared.Vessel)' VesselUtils.GetVelocityHeading(controlShared.Vessel))) <= 90) " is 144.
Long Statement,kOS.Function,FunctionBuildList,C:\repos\KSP-KOS_KOS\src\kOS\Function\BuildList.cs,Execute,The length of the statement  "                    list = ListValue.CreateList(shared.ProcessorMgr.processors.Values.ToList().Select(processor => PartModuleFieldsFactory.Construct(processor' shared))); " is 150.
Long Statement,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                    ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_LEFT); " is 152.
Long Statement,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                    ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_CENTER); " is 154.
Long Statement,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                    ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_RIGHT); " is 153.
Long Statement,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                    ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.LOWER_CENTER); " is 154.
Long Statement,kOS.Function,FunctionStage,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                SafeHouse.Logger.Log("FAIL SILENT: Stage is called before it is ready' Use STAGE:READY to check first if staging rapidly"); " is 123.
Long Statement,kOS.Function,FunctionStage,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "                throw new KOSCommandInvalidHereException(LineCol.Unknown()' "STAGE"' "a non-active SHIP' KSP does not support this"' "Core is on the active vessel"); " is 149.
Long Statement,kOS.Function,WarpTo,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The length of the statement  "            // TODO: As of KSP v1.0.2' the maxTimeWarping and minTimeWarping parameters behave as time limiters' not actual warp limiters " is 125.
Long Statement,kOS.Function,FunctionWaypoint,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The length of the statement  "            if (point == null) // Either it had no greek letter' or it did but wasn't a waypoint cluster.  Try it as a vanilla waypoint: " is 124.
Long Statement,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetFileList,The length of the statement  "            IOrderedEnumerable<VolumeItem> items = shared.VolumeMgr.CurrentDirectory.ListAsLexicon().Values.Cast<VolumeItem>().OrderBy(i => i.Name); " is 136.
Long Statement,kOS,KSPLogger,C:\repos\KSP-KOS_KOS\src\kOS\KSPLogger.cs,LogWarningAndScreen,The length of the statement  "            ScreenMessages.PostScreenMessage("<color=#dddd55><size=30>" + s + "</size></color>"' 20' ScreenMessageStyle.UPPER_CENTER); " is 122.
Long Statement,kOS,Core,C:\repos\KSP-KOS_KOS\src\kOS\Core.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("MESSAGES"' new NoArgsSuffix<MessageQueueStructure>(() => new MessageQueueStructure(processor.Messages' shared)' " is 122.
Long Statement,kOS.Module,Bootstrapper,C:\repos\KSP-KOS_KOS\src\kOS\Module\Bootstrapper.cs,Start,The length of the statement  "            var assemblies = AssemblyLoader.loadedAssemblies.Where(a => a.dllName.StartsWith("kOS.") || a.dllName.Equals("kOS") || a.dependencies.Where(d => d.name.Equals("kOS")).Any()).Select(a => a.assembly).ToArray(); " is 208.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,CheckMigrateSettings,The length of the statement  "                            new DialogGUIButton("Yes: migrate settings this one time'\nbut never ask again for this or any other game"' MigrateSettingsPrevent' true)' " is 138.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,CheckMigrateSettings,The length of the statement  "                            new DialogGUIButton("No: start with new default settings\nand never ask again for this or any other game"' DontMigrateAndPrevent' true) " is 135.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,MigrateSettings,The length of the statement  "            config.SetValue("SettingMigrationComment"' "All settings except telnet settings are now stored in the game's save file. Settings stored here will be ignored."); " is 160.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,MigrateSettings,The length of the statement  "                config.SetValue("PreventFutureMigrationComment"' "The user selected to prevent future migration notices when loading or creating save files.  Change the IPU value to a positive value to re-enable migrations."); " is 210.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,DontMigrate,The length of the statement  "            config.SetValue("SettingMigrationComment"' "All settings except telnet settings are now stored in the game's save file. Settings stored here will be ignored."); " is 160.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,DontMigrateAndPrevent,The length of the statement  "            config.SetValue("SettingMigrationComment"' "All settings except telnet settings are now stored in the game's save file. Settings stored here will be ignored."); " is 160.
Long Statement,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,DontMigrateAndPrevent,The length of the statement  "            config.SetValue("PreventFutureMigrationComment"' "The user selected to prevent future migration notices when loading or creating save files.  Change the IPU value to a positive value to re-enable migrations."); " is 210.
Long Statement,kOS.Module,kOSVesselModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSVesselModule.cs,CacheControllable,The length of the statement  "                    isControllableField = Vessel.GetType().GetField("isControllable"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); " is 150.
Long Statement,kOS.Module,kOSVesselModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSVesselModule.cs,GetFlightControlParameter,The length of the statement  "                throw new Exception(string.Format("kOSVesselModule on {0} does not contain a parameter named {1}"' Vessel.vesselName' name)); " is 125.
Long Statement,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,Update,The length of the statement  "                RequiredPower = this.diskSpace * ECPerBytePerSecond + SafeHouse.Config.InstructionsPerUpdate * ECPerInstruction / Time.fixedDeltaTime; " is 134.
Long Statement,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,CheckCanBoot,The length of the statement  "            else if (!shared.VolumeMgr.CheckCurrentVolumeRange()) { shared.Logger.LogException(new Safe.Exceptions.KOSVolumeOutOfRangeException("Boot")); } " is 143.
Long Statement,kOS.Persistence,PersistenceExtensions,C:\repos\KSP-KOS_KOS\src\kOS\Persistence\PersistenceExtensions.cs,ToHarddiskFile,The length of the statement  "                if (configNode.TryGetValue("ascii"' ref content)) // ASCII files just get decoded from the ConfigNode safe representation " is 121.
Long Statement,kOS.Persistence,PersistenceExtensions,C:\repos\KSP-KOS_KOS\src\kOS\Persistence\PersistenceExtensions.cs,ToHarddiskFile,The length of the statement  "                SafeHouse.Logger.LogError(string.Format("Exception caught loading file information: {0}\n\nStack Trace:\n{1}"' ex.Message' ex.StackTrace)); " is 139.
Long Statement,kOS.Persistence,PersistenceExtensions,C:\repos\KSP-KOS_KOS\src\kOS\Persistence\PersistenceExtensions.cs,ToHarddiskFile,The length of the statement  "            SafeHouse.Logger.LogError(string.Format("Error loading file information from ConfigNode at path {0} on hard disk {1}"' directory.Path' harddisk.Name)); " is 151.
Long Statement,kOS.Persistence,ConnectivityVolumeManager,C:\repos\KSP-KOS_KOS\src\kOS\Persistence\ConnectivityVolumeManager.cs,CheckRange,The length of the statement  "                if (shared.Vessel.situation == Vessel.Situations.PRELAUNCH || Communication.ConnectivityManager.HasConnectionToHome(shared.Vessel)) " is 131.
Long Statement,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The length of the statement  "                var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height); " is 185.
Long Statement,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,Awake,The length of the statement  "            var urlGetter = new WWW(string.Format("file://{0}GameData/kOS/GFX/resize-button.png"' KSPUtil.ApplicationRootPath.Replace("\\"' "/"))); " is 135.
Long Statement,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,InvokeDirtySaveLoadDialog,The length of the statement  "            dialog.Invoke(this' "\"" + loadingPath + "\" has been edited.  Save before loading \"" + loadingPath.Name + "\"?"' choices' actions); " is 133.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,Open,The length of the statement  "                    rectToFit = new Rect(0' 0' UnityEngine.Screen.width - assumeStagingListWidth' UnityEngine.Screen.height - assumeStagingListWidth); " is 130.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The length of the statement  "                else if (key.Value is float || key.Value is double) // if double' the UI will only handle it to float precisions' by the way. " is 125.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The length of the statement  "            string whichMessage = (GUI.tooltip.Length > 0 ? GUI.tooltip : TelnetStatusMessage()); // when tooltip isn't showing' show telnet status instead. " is 144.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The length of the statement  "            GUI.SetNextControlName(""); // because if you don't then there is no such thing as the "non" control to move the focus to. " is 122.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The length of the statement  "            bool userHitReturnThisPass = hasFocus && (Event.current.keyCode == KeyCode.Return || Event.current.keyCode == KeyCode.KeypadEnter); " is 131.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The length of the statement  "            string fieldValue = (backInt == 0) ? "" : backInt.ToString(); // this lets the user temporarily delete the whole value instead of having it become a zero. " is 154.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The length of the statement  "                    GUI.FocusControl(""); // unfocus this textfield - it should give the user a visual clue that the edit has been committed. " is 121.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,TelnetStatusMessage,The length of the statement  "            if (TelnetMainServer.Instance == null) // We can't control the order in which monobeavhiors are loaded' so TelnetMainServer might not be there yet. " is 147.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,TelnetStatusMessage,The length of the statement  "                return "TelnetMainServer object not found"; // hopefully the user never sees this.  It should stop happening the the time the loading screen is over. " is 149.
Long Statement,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawActiveCPUsOnPanel,The length of the statement  "            scrollPos = GUILayout.BeginScrollView(scrollPos' panelSkin.scrollView' GUILayout.MinWidth(260)' GUILayout.Height(windowRect.height - 60)); " is 138.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,GetFontIfChanged,The length of the statement  "                    terminalLetterSkin.label.font.RequestCharactersInTexture("X"); // Make sure the char in the font is lazy-loaded by Unity. " is 121.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Update,The length of the statement  "                shared.Screen.BeepsPending = 0; // Presume all the beeping has been dealt with for both the telnets and the GUI terminal. " is 121.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ProcessOneInputChar,The length of the statement  "                    // User asking for redraw (Unity already requires that we continually redraw the GUI Terminal' so this is only meaningful for telnet): " is 134.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "                           "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there."); " is 128.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "            Rect brightnessButtonRect = new Rect(1' WindowRect.height - 48' brightnessButtonImage.width' brightnessButtonImage.height); " is 123.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "            Rect fontHeightButtonRect = new Rect(30' WindowRect.height-33' fontHeightButtonImage.width' fontHeightButtonImage.height); " is 122.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "                GUI.DrawTexture(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' Texture2D.whiteTexture' ScaleMode.ScaleAndCrop ); " is 126.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "            terminalLetterSkin.label.normal.textColor = AdjustColor(reversingScreen ? bgColor : currentTextColor' screen.Brightness);             " is 121.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "            GUI.BeginGroup(new Rect(28' 38' screen.ColumnCount * charWidth + 2' screen.RowCount * charHeight + 2)); // +2's for the sake of safety margin " is 141.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "            GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label); " is 130.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The length of the statement  "                CheckResizeDrag(); // Has to occur before DragWindow or else DragWindow will consume the event and prevent drags from being seen by the resize icon. " is 148.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,NotifyOfScreenResize,The length of the statement  "            WindowRect = new Rect(WindowRect.xMin' WindowRect.yMin' sb.ColumnCount*sb.CharacterPixelWidth + 65' sb.RowCount*sb.CharacterPixelHeight + 100); " is 143.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ChangeTitle,The length of the statement  "            if (TitleText != newTitle) // For once' a direct simple reference-equals is really what we want.  Immutable strings should make this work quickly. " is 146.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,RepaintTelnet,The length of the statement  "                telnet.Write(shared.Screen.ReverseScreen ? ((char)UnicodeCommand.REVERSESCREENMODE) : ((char)UnicodeCommand.NORMALSCREENMODE)); " is 127.
Long Statement,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,RepaintTelnet,The length of the statement  "                telnet.Write((char)UnicodeCommand.BEEP); // The terminal's UnicodeMapper will convert this to ascii 0x07 if the right terminal type. " is 132.
Long Statement,kOS.Sound,VoiceValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\VoiceValue.cs,InitalizeSuffixes,The length of the statement  "            AddSuffix("WAVE"' new SetSuffix<StringValue>(() => maker.GetWaveName(voiceNum)' value => maker.SetWave(voiceNum' value.ToString()))); " is 133.
Long Statement,kOS.Sound,VoiceValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\VoiceValue.cs,Play,The length of the statement  "                throw new KOSInvalidArgumentException("Play"' "note"' "Requires either a NOTE() or a LIST() of NOTE()'s as its parameter."); " is 124.
Long Statement,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "H"' "HUE" }' new ClampSetSuffix<ScalarValue>(() => hue' value => { hue = value; ReconcileHsvToRgb(); }' 0' 255)); " is 132.
Long Statement,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "S"' "SATURATION" }' new ClampSetSuffix<ScalarValue>(() => saturation' value => { saturation = value; ReconcileHsvToRgb(); }' 0' 255)); " is 153.
Long Statement,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "V"' "VALUE" }' new ClampSetSuffix<ScalarValue>(() => hsvValue' value => { hsvValue = value; ReconcileHsvToRgb(); }' 0' 255)); " is 144.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("DEFAULTLOADDISTANCE"' new Suffix<LoadDistanceValue>(() => new LoadDistanceValue(PhysicsGlobals.Instance.VesselRangesDefault))); " is 138.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ACTIVEVESSEL"' new SetSuffix<VesselTarget>(() => VesselTarget.CreateOrGetExisting(FlightGlobals.ActiveVessel' shared)' SetActiveVessel)); " is 148.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new string[] { "FORCESETACTIVEVESSEL"' "FORCEACTIVE" }' new OneArgsSuffix<VesselTarget>(ForceSetActiveVessel)); " is 121.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SWITCHVESSELWATCHERS"' new NoArgsSuffix<UniqueSetValue<UserDelegate>>(() => shared.DispatchManager.CurrentDispatcher.GetSwitchVesselNotifyees())); " is 157.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,RevertToLaunch,The length of the statement  "            else throw new KOSCommandInvalidHereException(LineCol.Unknown()' "REVERTTOLAUNCH"' "When revert is disabled"' "When revert is enabled"); " is 136.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,RevertToEditor,The length of the statement  "            else throw new KOSCommandInvalidHereException(LineCol.Unknown()' "REVERTTOEDITOR"' "When revert is disabled"' "When revert is enabled"); " is 136.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,RevertTo,The length of the statement  "            else throw new KOSCommandInvalidHereException(LineCol.Unknown()' "REVERTTO"' "When revert is disabled"' "When revert is enabled"); " is 130.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LoadGame,The length of the statement  "                                if (KSPUtil.CheckVersion(game.file_version_major' game.file_version_minor' game.file_version_revision' 0' 24' 0) != VersionCompareResult.INCOMPATIBLE_TOO_EARLY) " is 160.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinPartCountLimit(ship.InnerTemplate' SpaceCenterFacility.SpaceplaneHangar' GameVariables.Instance.GetPartCountLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.SpaceplaneHangar)' false))); " is 247.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinSizeLimits(ship.InnerTemplate' SpaceCenterFacility.Runway' GameVariables.Instance.GetCraftSizeLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.Runway)' false))); " is 223.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinMassLimits(ship.InnerTemplate' SpaceCenterFacility.Runway' (double)GameVariables.Instance.GetCraftMassLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.Runway)' false))); " is 231.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinPartCountLimit(ship.InnerTemplate' SpaceCenterFacility.VehicleAssemblyBuilding' GameVariables.Instance.GetPartCountLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.VehicleAssemblyBuilding)' true))); " is 260.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinSizeLimits(ship.InnerTemplate' SpaceCenterFacility.LaunchPad' GameVariables.Instance.GetCraftSizeLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.LaunchPad)' true))); " is 228.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                preFlightCheck.AddTest(new CraftWithinMassLimits(ship.InnerTemplate' SpaceCenterFacility.LaunchPad' (double)GameVariables.Instance.GetCraftMassLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.LaunchPad)' true))); " is 236.
Long Statement,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LaunchShip,The length of the statement  "                throw new KOSException("Failed to lauch vessel' unrecognized lauch site: " + launchSiteName + ". Expected \"Runway\" or \"LaunchPad\"."); " is 137.
Long Statement,kOS.Suffixed,LoadDistanceValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\LoadDistanceValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ESCAPING"' new Suffix<SituationLoadDistanceValue>(() => new SituationLoadDistanceValue(vesselRanges.escaping))); " is 123.
Long Statement,kOS.Suffixed,LoadDistanceValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\LoadDistanceValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("PRELAUNCH"' new Suffix<SituationLoadDistanceValue>(() => new SituationLoadDistanceValue(vesselRanges.prelaunch))); " is 125.
Long Statement,kOS.Suffixed,LoadDistanceValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\LoadDistanceValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SPLASHED"' new Suffix<SituationLoadDistanceValue>(() => new SituationLoadDistanceValue(vesselRanges.splashed))); " is 123.
Long Statement,kOS.Suffixed,LoadDistanceValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\LoadDistanceValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SUBORBITAL"' new Suffix<SituationLoadDistanceValue>(() => new SituationLoadDistanceValue(vesselRanges.subOrbital))); " is 127.
Long Statement,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,PullResources,The length of the statement  "                // the amount is subject to floating point lameness' if we round it here it is not material to the request but should make the numbers work out nicer. " is 150.
Long Statement,kOS.Suffixed,BodyTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\BodyTarget.cs,GetVelocitiesAtUT,The length of the statement  "            if (parent == null) // only if Body is Sun and therefore has no parent' then do more complex work instead because KSP didn't provide a way itself " is 145.
Long Statement,kOS.Suffixed,BodyTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\BodyTarget.cs,GetVelocitiesAtUT,The length of the statement  "                    futureOrbitalVel = -1 * VesselTarget.CreateOrGetExisting(Shared.Vessel' Shared).GetVelocitiesAtUT(timeStamp).Orbital.ToVector3D(); " is 130.
Long Statement,kOS.Suffixed,BodyTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\BodyTarget.cs,GetVelocitiesAtUT,The length of the statement  "                Vector swappedVel = new Vector(futureOrbitalVel.x' futureOrbitalVel.z' futureOrbitalVel.y); // swap Y and Z because KSP API is weird. " is 133.
Long Statement,kOS.Suffixed,Career,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Career.cs,CanMakeNodes,The length of the statement  "            return (PatchLimit(out reason) > 0); // if the tracking center isn't good enough then that ALSO prevents maneuver nodes. " is 120.
Long Statement,kOS.Suffixed,Career,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Career.cs,CanDoActions,The length of the statement  "            float buildingLevel = Math.Max(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.VehicleAssemblyBuilding)' " is 123.
Long Statement,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "R"' "RED" }' new ClampSetSuffix<ScalarValue>(() => Red' value => { Red = value; Recalculate(); }' 0' 255)); " is 126.
Long Statement,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "G"' "GREEN" }' new ClampSetSuffix<ScalarValue>(() => Green' value => { Green = value; Recalculate(); }' 0' 255)); " is 132.
Long Statement,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "B"' "BLUE" }' new ClampSetSuffix<ScalarValue>(() => Blue' value => { Blue = value; Recalculate(); }' 0' 255)); " is 129.
Long Statement,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "A"' "ALPHA" }' new ClampSetSuffix<ScalarValue>(() => Alpha' value => { Alpha = value; Recalculate(); }' 0' 1)); " is 130.
Long Statement,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The length of the statement  "            AddSuffix(new[] { "HTML"' "HEX" }' new NoArgsSuffix<StringValue>(ToHexNotation' "Returns a string representing the color in HTML' i.e. \"#ff0000\".  Ignores transparency (alpha) information.")); " is 194.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("UCP"' new SetSuffix<BooleanValue>(() => UseCompressedPersistence' value => UseCompressedPersistence = value)); " is 121.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("BRIGHTNESS"' new ClampSetSuffix<ScalarValue>(() => TerminalBrightness' value => TerminalBrightness = value' 0f' 1f' 0.01f)); " is 135.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("DEFAULTFONTSIZE"' new ClampSetSuffix<ScalarValue>(() => TerminalFontDefaultSize' value => TerminalFontDefaultSize = value' 6f' 30f' 1f)); " is 148.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.EnableTelnet' new ConfigKey("EnableTelnet"' "TELNET"' "Enable Telnet server"' false' false' true' typeof(bool))); " is 133.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.TelnetPort' new ConfigKey("TelnetPort"' "TPORT"' "Telnet port number (must restart telnet to take effect)"' 5410' 1024' 65535' typeof(int))); " is 161.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.TelnetIPAddrString' new ConfigKey("TelnetIPAddrString"' "IPADDRESS"' "Telnet IP address string (must restart telnet to take effect)"' "127.0.0.1"' "n/a"' "n/a"' typeof(string))); " is 198.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.TerminalFontDefaultSize' new ConfigKey("TerminalFontDefaultSize"' "DEFAULTFONTSIZE"' "Initial Terminal:CHARHEIGHT when a terminal is first opened"' 12' 6' 20' typeof(int))); " is 193.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.TerminalFontName' new ConfigKey("TerminalFontName"' "FONTNAME"' "Font Name for terminal window"' "_not_chosen_yet_"' "n/a"' "n/a"' typeof(string))); " is 168.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The length of the statement  "            AddConfigKey(PropId.TerminalBrightness' new ConfigKey("TerminalBrightness"' "BRIGHTNESS"' "Initial brightness setting for new terminals"' 0.7d' 0d' 1d' typeof(double))); " is 169.
Long Statement,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,SetSuffix,The length of the statement  "            throw new Exception(string.Format("The value of the configuration key '{0}' has to be of type '{1}'"' key.Name' key.ValType)); " is 126.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTPITCHTRIM" }' new Suffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.pitchTrim))); " is 120.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTSTARBOARD" }' new Suffix<ScalarValue>(() => Invert(ReadPilot(ref FlightInputHandler.state.X)))); " is 120.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTWHEELTHROTTLE" }' new Suffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.wheelThrottle))); " is 128.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTWHEELTHROTTLETRIM" }' new Suffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.wheelThrottleTrim))); " is 136.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTWHEELSTEER" }' new Suffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.wheelSteer))); " is 122.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTWHEELSTEERTRIM" }' new Suffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.wheelSteerTrim))); " is 130.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTNEUTRAL" }' new Suffix<BooleanValue>(() => Vessel == FlightGlobals.ActiveVessel && FlightInputHandler.state.isNeutral)); " is 144.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializePilotSuffixes,The length of the statement  "            AddSuffix(new[] { "PILOTMAINTHROTTLE" }' new ClampSetSuffix<ScalarValue>(() => ReadPilot(ref FlightInputHandler.state.mainThrottle)' value => " is 141.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "WHEELSTEER" }' new ClampSetSuffix<ScalarValue>(() => wheelSteer' value => wheelSteer = value' -1' 1)); " is 121.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "WHEELSTEERTRIM" }' new ClampSetSuffix<ScalarValue>(() => wheelSteerTrim' value => wheelSteerTrim = value' -1' 1)); " is 133.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "MAINTHROTTLE" }' new ClampSetSuffix<ScalarValue>(() => mainThrottle' value => mainThrottle = value' 0' 1)); " is 126.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "WHEELTHROTTLE" }' new ClampSetSuffix<ScalarValue>(() => wheelThrottle' value => wheelThrottle = value' -1' 1)); " is 130.
Long Statement,kOS.Suffixed,FlightControl,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\FlightControl.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "WHEELTHROTTLETRIM" }' new ClampSetSuffix<ScalarValue>(() => wheelThrottleTrim' value => wheelThrottleTrim = value' -1' 1)); " is 142.
Long Statement,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GetTerrainAltitude,The length of the statement  "                if (Physics.Raycast(worldRayCastStart' (worldRayCastStop - worldRayCastStart)' out hit' float.MaxValue' 1<<TERRAIN_MASK_BIT )) " is 126.
Long Statement,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TRUEANOMALY"' new Suffix<ScalarValue>(() => Utilities.Utils.DegreeFix(Utilities.Utils.RadiansToDegrees(orbit.trueAnomaly)'0.0))); " is 140.
Long Statement,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("MEANANOMALYATEPOCH"' new Suffix<ScalarValue>(() => Utilities.Utils.DegreeFix(Utilities.Utils.RadiansToDegrees(orbit.meanAnomalyAtEpoch)' 0.0))); " is 155.
Long Statement,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("VELOCITY"' new Suffix<OrbitableVelocity>(() => GetVelocityAtUT( new TimeSpan(Planetarium.GetUniversalTime() ) ))); " is 125.
Long Statement,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,GetNextPatch,The length of the statement  "            throw new KOSSituationallyInvalidException("Cannot get next patch when no additional patches exist.  Try checking the HASNEXTPATCH suffix."); " is 141.
Long Statement,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,GetNextPatchETA,The length of the statement  "            throw new KOSSituationallyInvalidException("Cannot get eta to next patch when no additional patches exist.  Try checking the HASNEXTPATCH suffix."); " is 148.
Long Statement,kOS.Suffixed,TimeWarpValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\TimeWarpValue.cs,SetWarp,The length of the statement  "                    throw new Exception(string.Format("WARP MODE {0} unknown to kOS - did KSP's API change?"' TimeWarp.WarpMode.ToString())); " is 121.
Long Statement,kOS.Suffixed,TimeWarpValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\TimeWarpValue.cs,GetRateArrayForMode,The length of the statement  "                    throw new Exception(string.Format("WARP MODE {0} unknown to kOS - did KSP's API change?"' TimeWarp.WarpMode.ToString())); " is 121.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,The length of the statement  "            if (StartDelegate == null) // Note: if the user assigns the NoDelegate' we re-map that to null (See how the SetSuffixes of this class are set up). " is 146.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,The length of the statement  "            if (VectorDelegate == null) // Note: if the user assigns the NoDelegate' we re-map that to null (See how the SetSuffixes of this class are set up). " is 147.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,The length of the statement  "            if (ColorDelegate == null) // Note: if the user assigns the NoDelegate' we re-map that to null (See how the SetSuffixes of this class are set up). " is 146.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,The length of the statement  "            // For those UserDelegates that have been assigned' if there isn't a current UserDelegate call in progress' start a new one: " is 124.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,HandleDelegateUpdates,The length of the statement  "            // ------------------------------------------------------------------------------------------------------------------------- " is 124.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          () => VectorDelegate ?? new NoDelegate(shared.Cpu)' // never return a null to user code - make it a DoNothingDelegate instead. " is 126.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          value => { VectorDelegate = (value is NoDelegate ? null : value); } // internally use null in place of DoNothingDelegate. " is 121.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          () => ColorDelegate ?? new NoDelegate(shared.Cpu)'  // never return a null to user code - make it a DoNothingDelegate instead. " is 126.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          value => { ColorDelegate = (value is NoDelegate ? null : value); } // internally use null in place of DoNothingDelegate. " is 120.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          () => StartDelegate ?? new NoDelegate(shared.Cpu)'  // never return a null to user code - make it a DoNothingDelegate instead. " is 126.
Long Statement,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,InitializeSuffixes,The length of the statement  "                          value => { StartDelegate = (value is NoDelegate ? null : value); } // internally use null in place of DoNothingDelegate. " is 120.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("BODY"' new NoArgsSuffix<BodyTarget>(() => BodyTarget.CreateOrGetExisting(GetBody()' Shared)' "Celestial body the waypoint is attached to")); " is 151.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ALTITUDE"' new NoArgsSuffix<ScalarValue>(BuildSeaLevelAltitude' "Altitude of waypoint above sea level.  Warning' this a point somewhere in the " + "midst of the contract altitude range' not the edge of the altitude range.")); " is 236.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("AGL"' new NoArgsSuffix<ScalarValue>(() => WrappedWaypoint.altitude' "Altitude of waypoint above ground.  Warning' this a point somewhere" + "in the midst of the contract altitude range' not the edge of the altitude range.")); " is 236.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("NEARSURFACE"' new NoArgsSuffix<BooleanValue>(() => WrappedWaypoint.isOnSurface' "True if waypoint is a point near or on the body rather than high in orbit.")); " is 170.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("GROUNDED"' new NoArgsSuffix<BooleanValue>(() => WrappedWaypoint.landLocked' "True if waypoint is actually glued to the ground."));  " is 141.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("INDEX"' new NoArgsSuffix<ScalarValue>(() => WrappedWaypoint.index' "Number of this waypoint if this is a grouped waypoint (i.e. alpha/beta/gamma.."));  " is 161.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("CLUSTERED"' new NoArgsSuffix<BooleanValue>(() => WrappedWaypoint.isClustered' "True if this is a member of a cluster of waypoints (i.e. alpha/beta/gamma..")); " is 169.
Long Statement,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,GetPosition,The length of the statement  "            return new Vector(GetBody().GetWorldSurfacePosition(WrappedWaypoint.latitude' WrappedWaypoint.longitude' BuildSeaLevelAltitude())); " is 131.
Long Statement,kOS.Suffixed,TimeSpan,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Timespan.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("CLOCK"' new Suffix<StringValue>(() => string.Format("{0:00}:{1:00}:{2:00}"' (int)CalculateHour()' (int)CalculateMinute()' (int)CalculateSecond()))); " is 159.
Long Statement,kOS.Suffixed,Direction,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Direction.cs,DirectionInitializeSuffixes,The length of the statement  "            AddSuffix("INVERSE"' new Suffix<Direction>(() => new Direction(rotation.Inverse())' "Returns the inverse of this direction - meaning the rotation that would go FROM this direction TO the universe's raw orientation.")); " is 218.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,GetOrbitAtUT,The length of the statement  "            List<ManeuverNode> nodes = Vessel.patchedConicSolver == null ? new List<ManeuverNode>() : Vessel.patchedConicSolver.maneuverNodes; " is 130.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SURFACESPEED"' new Suffix<ScalarValue>(() => { throw new KOSObsoletionException("0.18.0"' "SURFACESPEED"' "GROUNDSPEED"' ""); })); " is 141.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("AIRSPEED"' new Suffix<ScalarValue>(() => (Vessel.orbit.GetVel() - FlightGlobals.currentMainBody.getRFrmVel(Vessel.CoMD)).magnitude' "the velocity of the vessel relative to the air")); " is 194.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "SHIPNAME"' "NAME" }' new SetSuffix<StringValue>(() => Vessel.vesselName' RenameVessel' "The KSP name for a craft' cannot be empty")); " is 152.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TYPE"' new SetSuffix<StringValue>(() => Vessel.vesselType.ToString()' RetypeVessel' "The Ship's KSP type (e.g. rover' base' probe)")); " is 145.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TERMVELOCITY"' new Suffix<ScalarValue>(() => { throw new KOSAtmosphereObsoletionException("17.2"' "TERMVELOCITY"' "<None>"' string.Empty); })); " is 154.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "DYNAMICPRESSURE"' "Q" }' new Suffix<ScalarValue>(() => Vessel.dynamicPressurekPa * ConstantValue.KpaToAtm' "Dynamic Pressure in Atmospheres")); " is 162.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("RESOURCES"' new Suffix<ListValue<AggregateResourceValue>>(() => AggregateResourceValue.FromVessel(Vessel' Shared)' "The Aggregate resources from every part on the craft")); " is 183.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("SOICHANGEWATCHERS"' new NoArgsSuffix<UniqueSetValue<UserDelegate>>(() => Shared.DispatchManager.CurrentDispatcher.GetSOIChangeNotifyees(Vessel))); " is 157.
Long Statement,kOS.Suffixed,VesselTarget,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselTarget.cs,GetFlightControl,The length of the statement  "            var flightControl = kOSVesselModule.GetInstance(Shared.Vessel).GetFlightControlParameter("flightcontrol") as FlightControl; " is 123.
Long Statement,kOS.Suffixed,ScienceDataValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ScienceDataValue.cs,TransmitValue,The length of the statement  "                hostPart' scienceData' scienceData.baseTransmitValue' scienceData.transmitBonus' // the parameters with data we care aboue " is 122.
Long Statement,kOS.Suffixed.PartModuleField,PartModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\PartModuleFields.cs,HasAction,The length of the statement  "            return partModule.Actions.Any(kspAction => string.Equals(kspAction.guiName' actionName' StringComparison.CurrentCultureIgnoreCase)); " is 132.
Long Statement,kOS.Suffixed.PartModuleField,PartModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\PartModuleFields.cs,GetAction,The length of the statement  "            return partModule.Actions.FirstOrDefault(kspAction => string.Equals(kspAction.guiName' cookedGuiName' StringComparison.CurrentCultureIgnoreCase)); " is 146.
Long Statement,kOS.Suffixed.PartModuleField,GimbalFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\GimbalFields.cs,InitializeGimbalSuffixes,The length of the statement  "            AddSuffix("RESPONSESPEED"' new Suffix<ScalarValue>(() => gimbal.gimbalResponseSpeed' "The Gimbal's Possible Rate of travel")); " is 126.
Long Statement,kOS.Suffixed.PartModuleField,GimbalFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\GimbalFields.cs,InitializeGimbalSuffixes,The length of the statement  "            AddSuffix("PITCHANGLE"' new Suffix<ScalarValue>(() =>  gimbal.gimbalLock ? 0 : gimbal.actuation.x' "Current Gimbal Pitch")); " is 124.
Long Statement,kOS.Suffixed.PartModuleField,GimbalFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\GimbalFields.cs,InitializeGimbalSuffixes,The length of the statement  "            AddSuffix("YAWANGLE"' new Suffix<ScalarValue>(() =>  gimbal.gimbalLock ? 0 : gimbal.actuation.z' "Current Gimbal Yaw" )); " is 121.
Long Statement,kOS.Suffixed.PartModuleField,GimbalFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\GimbalFields.cs,InitializeGimbalSuffixes,The length of the statement  "            AddSuffix("ROLLANGLE"' new Suffix<ScalarValue>(() => gimbal.gimbalLock ? 0 : gimbal.actuation.y' "Current Gimbal Roll")); " is 121.
Long Statement,kOS.Suffixed.PartModuleField,kOSProcessorFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\kOSProcessorFields.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("BOOTFILENAME"' new SetSuffix<StringValue>(GetBootFilename' SetBootFilename' "The name of the processor's boot file.")); " is 130.
Long Statement,kOS.Suffixed.PartModuleField,kOSProcessorFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\kOSProcessorFields.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("CONNECTION"' new NoArgsSuffix<ProcessorConnection>(() => new ProcessorConnection(processor' shared)' "Get a connection to this processor")); " is 151.
Long Statement,kOS.Suffixed.PartModuleField,StockScienceExperimentFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\StockScienceExperimentFields.cs,TransmitData,The length of the statement  "                    module.part' scienceData' scienceData.baseTransmitValue' scienceData.transmitBonus' // the parameters with data we care aboue " is 125.
Long Statement,kOS.Suffixed.PartModuleField,StockScienceExperimentFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\StockScienceExperimentFields.cs,TransmitData,The length of the statement  "                ScreenMessages.PostScreenMessage("No transmitters available on this vessel or no data to transmit."' 4f' ScreenMessageStyle.UPPER_LEFT); " is 136.
Long Statement,kOS.Suffixed.Part,ModuleEngineAdapter,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\ModuleEngineAdapter.cs,GetEngineThrust,The length of the statement  "                return Mathf.Lerp(engine.minFuelFlow' engine.maxFuelFlow' throttle) * flowMod * GetEngineIsp(engine' atmPressure) * engine.g * velMod; " is 134.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("AQUIRERANGE"' new Suffix<ScalarValue>(() => { throw new Safe.Exceptions.KOSObsoletionException("0.18.0"' "AQUIRERANGE"' "ACQUIRERANGE"' string.Empty); })); " is 166.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("AQUIREFORCE"' new Suffix<ScalarValue>(() => { throw new Safe.Exceptions.KOSObsoletionException("0.18.0"' "AQUIREFORCE"' "ACQUIREFORCE"' string.Empty); })); " is 166.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("AQUIRETORQUE"' new Suffix<ScalarValue>(() => { throw new Safe.Exceptions.KOSObsoletionException("0.18.0"' "AQUIRETORQUE"' "ACQUIRETORQUE"' string.Empty); })); " is 169.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("DOCKEDSHIPNAME"' new Suffix<StringValue>(() => module.vesselInfo != null ? module.vesselInfo.name : string.Empty)); " is 126.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("NODEPOSITION"' new Suffix<Vector>(GetNodePosition' "The position of the docking node itself rather than the part's center of mass")); " is 144.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("DOCKWATCHERS"' new NoArgsSuffix<UniqueSetValue<UserDelegate>>(() => Shared.DispatchManager.CurrentDispatcher.GetPartCoupleNotifyees(module.part))); " is 158.
Long Statement,kOS.Suffixed.Part,DockingPortValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\DockingPortValue.cs,DockingInitializeSuffixes,The length of the statement  "            AddSuffix("UNDOCKWATCHERS"' new NoArgsSuffix<UniqueSetValue<UserDelegate>>(() => Shared.DispatchManager.CurrentDispatcher.GetPartUndockNotifyees(module.part))); " is 160.
Long Statement,kOS.Suffixed.Part,PartValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\PartValue.cs,PartInitializeSuffixes,The length of the statement  "            AddSuffix(new[] { "MODULES"' "ALLMODULES" }' new Suffix<ListValue>(GetAllModules' "A List of all the modules' names on this part")); " is 132.
Long Statement,kOS.Suffixed.Part,PartValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\PartValue.cs,PartInitializeSuffixes,The length of the statement  "            AddSuffix("PARENT"' new Suffix<PartValue>(() => PartValueFactory.Construct(Part.parent' Shared)' "The parent part of this part")); " is 130.
Long Statement,kOS.Suffixed.Part,PartValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\PartValue.cs,PartInitializeSuffixes,The length of the statement  "            AddSuffix("HASPARENT"' new Suffix<BooleanValue>(() => Part.parent != null' "Tells you if this part has a parent' is used to avoid null exception from PARENT")); " is 160.
Long Statement,kOS.Suffixed.Part,PartValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\PartValue.cs,PartInitializeSuffixes,The length of the statement  "            AddSuffix("CHILDREN"' new Suffix<ListValue<PartValue>>(() => PartValueFactory.ConstructGeneric(Part.children' Shared)' "A LIST() of the children parts of this part")); " is 167.
Long Statement,kOS.Suffixed.Part,PartValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\PartValue.cs,ControlFrom,The length of the statement  "                throw new KOSCommandInvalidHereException(LineCol.Unknown()' "CONTROLFROM"' "a generic part value"' "a docking port or command part"); " is 133.
Long Statement,kOS.Suffixed.Widget,Slider,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Slider.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("VALUE"' new SetSuffix<ScalarValue>(() => Value' v => { if (Value != v) { Value = v; Communicate(() => valueVisible = v); } })); " is 138.
Long Statement,kOS.Suffixed.Widget,Slider,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Slider.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONCHANGE"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnChange)' v => UserOnChange = CallbackSetter(v))); " is 126.
Long Statement,kOS.Suffixed.Widget,Label,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Label.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TEXTUPDATER"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserTextUpdater)' value => UserTextUpdater = CallbackSetter(value))); " is 143.
Long Statement,kOS.Suffixed.Widget,Label,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Label.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TOOLTIP"' new SetSuffix<StringValue>(() => content.tooltip' value => { if (content.tooltip != value) { content.tooltip = value; Communicate(() => content_visible.tooltip = value); } })); " is 197.
Long Statement,kOS.Suffixed.Widget,TextField,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\TextField.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONCHANGE"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnChange)' value => UserOnChange = CallbackSetter(value))); " is 134.
Long Statement,kOS.Suffixed.Widget,TextField,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\TextField.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONCONFIRM"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnConfirm)' value => UserOnConfirm = CallbackSetter(value))); " is 137.
Long Statement,kOS.Suffixed.Widget,Button,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Button.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONTOGGLE"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnToggle)' value => UserOnToggle = CallbackSetter(value))); " is 134.
Long Statement,kOS.Suffixed.Widget,Button,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Button.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONCLICK"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnClick)' value => UserOnClick = CallbackSetter(value))); " is 131.
Long Statement,kOS.Suffixed.Widget,PopupMenu,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\PopupMenu.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("INDEX"' new SetSuffix<ScalarIntValue>(() => Index' value => { Index = value; if (Index >= 0 && Index < list.Count()) SetVisibleText(GetItemString(list[Index])); })); " is 176.
Long Statement,kOS.Suffixed.Widget,PopupMenu,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\PopupMenu.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONCHANGE"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnChange)' value => UserOnChange = CallbackSetter(value))); " is 134.
Long Statement,kOS.Suffixed.Widget,PopupMenu,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\PopupMenu.cs,CalcPopupViewHeight,The length of the statement  "            float framingPadHeight = windowPadding.top + (extendsPastBottom ? 0f : windowPadding.bottom + fudgeExtraToPreventScrollbar); " is 124.
Long Statement,kOS.Suffixed.Widget,Box,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Box.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ONRADIOCHANGE"' new SetSuffix<UserDelegate>(() => CallbackGetter(UserOnRadioChange)' value => UserOnRadioChange = CallbackSetter(value))); " is 149.
Long Statement,kOS.Suffixed.Widget,ScrollBox,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\ScrollBox.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("POSITION"' new SetSuffix<Vector>(() => new Vector(position.x'position.y'0)' value => { position.x = (float)value.X; position.y = (float)value.Y; })); " is 160.
Long Statement,kOS.Suffixed.Widget,ScrollBox,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\ScrollBox.cs,DoGUI,The length of the statement  "            position = GUILayout.BeginScrollView(position'hscrollalways'vscrollalways'hsbStyle.ReadOnly'vsbStyle.ReadOnly'ReadOnlyStyle); " is 125.
Long Statement,kOS.Suffixed.Widget,WidgetStyleRectOffset,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\WidgetStyleRectOffset.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("H"' new SetSuffix<ScalarIntValue>(() => rectOffset.left' value => { rectOffset.left = value; rectOffset.right = value; })); " is 134.
Long Statement,kOS.Suffixed.Widget,WidgetStyleRectOffset,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\WidgetStyleRectOffset.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("V"' new SetSuffix<ScalarIntValue>(() => rectOffset.top' value => { rectOffset.top = value; rectOffset.bottom = value; })); " is 133.
Long Statement,kOS.Suffixed.Widget,WidgetStyle,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\WidgetStyle.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("HSTRETCH"' new SetSuffix<BooleanValue>(() => ReadOnly.stretchWidth' value => Writable.stretchWidth = value)); " is 120.
Long Statement,kOS.Suffixed.Widget,WidgetStyle,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\WidgetStyle.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("VSTRETCH"' new SetSuffix<BooleanValue>(() => ReadOnly.stretchHeight' value => Writable.stretchHeight = value)); " is 122.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "                    "Selected IP address (\"{0}\") is not valid.  Defaulting to local loopback (\"127.0.0.1\").  Please review the selection from the toolbar kOS control panel."' " is 158.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "                SafeHouse.Config.TelnetIPAddrString = IPAddress.Loopback.ToString(); // note to @dunbaratu: do we want to default back to loopback' or just prevent starting " is 156.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "                    "Selected IP address (\"{0}\") is not currently available on this computer.  Please select a new address and re-enable the telnet server."' " is 139.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "                SafeHouse.Config.TelnetIPAddrString = IPAddress.Loopback.ToString(); // note to @dunbaratu: do we want to default back to loopback' or just prevent starting " is 156.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "            // Build the server settings here' not in the constructor' because the settings might have been altered by the user post-init: " is 126.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StartListening,The length of the statement  "            SafeHouse.Logger.Log(string.Format("{2} TelnetMainServer started listening on {0} {1}"' bindAddr' port' KSPLogger.LOGGER_PREFIX)); " is 130.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,StopListening,The length of the statement  "            SafeHouse.Logger.Log(string.Format("{2} TelnetMainServer stopped listening on {0} {1}"' bindAddr' port' KSPLogger.LOGGER_PREFIX)); " is 130.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,Start,The length of the statement  "            DontDestroyOnLoad(gameObject); // Otherwise Unity will stop calling my Update() on the next scene change because my gameObject went away. " is 137.
Long Statement,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,Update,The length of the statement  "            SafeHouse.Logger.Log(string.Format("{0} telnet server got an incoming connection from {1}"' KSPLogger.LOGGER_PREFIX' remoteIdent)); " is 131.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,ConnectToProcessor,The length of the statement  "            ConnectedProcessor.GetScreen().SetSize(ClientHeight' ClientWidth); // Reset the GUI terminal to match the telnet window. " is 120.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,ConnectToProcessor,The length of the statement  "            ConnectedProcessor.GetWindow().AttachTelnet(this); // Tell the GUI window that I am one of its telnets now (even when closed' it still does the heavy lifting). " is 159.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DisconnectFromProcessor,The length of the statement  "                alreadyDisconnecting = true; // telnet tells window to disconnect' window tells telnet to disconnect.  This stops an infinite recursion. " is 136.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DisconnectFromProcessor,The length of the statement  "                // Very important' else CPU parts that go away (from explosion' load distance' scene switch 'etc) refuse to be orphaned and won't garbage collect. " is 146.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DisconnectFromProcessor,The length of the statement  "                // That can cause subsequent reconnections from the TelnetWelcomeMenu to end up connecting you to the now dead CPU' with confusing results: " is 139.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,StopListening,The length of the statement  "                // Must use SendTextRaw' not Write' because we're about to kill the outThread before it has time to process the queue that Write uses: " is 134.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,StopListening,The length of the statement  "                SendTextRaw(terminalMapper.OutputConvert( (char)UnicodeCommand.TITLEBEGIN + "Thank you for using kOS terminal server" + (char)UnicodeCommand.TITLEEND )); " is 153.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,LineAtATime,The length of the statement  "                SendTextRaw( new[] {RFC854_IAC' RFC854_WONT' RFC858_SUPPRESS_GOAHEAD}); // don't send one char at a time' buffer the lines. " is 123.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,LineAtATime,The length of the statement  "                SendTextRaw( new[] {RFC854_IAC' RFC854_DONT' RFC857_ECHO}); // so the client shouldn't be doing a local echo (or the user would see text twice). " is 144.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,LineAtATime,The length of the statement  "                SendTextRaw( new[] {RFC854_IAC' RFC854_WILL' RFC858_SUPPRESS_GOAHEAD}); // do send one char at a time without buffering lines. " is 126.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DoInThread,The length of the statement  "                if (flushPendingInput) // When an async interrupt (like CTRL-C) is used' ignore whatever else was typed and throw it away: " is 122.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DoInThread,The length of the statement  "                int numRead = rawStream.Read(rawReadBuffer' 0' rawReadBuffer.Length); // This is blocking' so this thread will be idle when client isn't typing. " is 144.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "                SafeHouse.Logger.Log(string.Format("Bug in telnet server - expected NAWS byte {{{0}}} (RFC1073) but instead got {{{1}}}."' RFC1073_NAWS' (int)code)); " is 149.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "                SafeHouse.Logger.Log("Telnet client is trying to send me a window resize (RFC1073) command without actual width/height fields.  WTF?"); " is 135.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "            if (widthHighByte == RFC854_IAC) ++offset; // special case - to send this byte value' telnet clients have to encode it by sending it twice consecutively. " is 153.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "            if (widthLowByte == RFC854_IAC) ++offset; // special case - to send this byte value' telnet clients have to encode it by sending it twice consecutively. " is 152.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "            if (heightHighByte == RFC854_IAC) ++offset; // special case - to send this byte value' telnet clients have to encode it by sending it twice consecutively. " is 154.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The length of the statement  "            if (heightLowByte == RFC854_IAC) ++offset; // special case - to send this byte value' telnet clients have to encode it by sending it twice consecutively. " is 153.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeTermtype,The length of the statement  "                SafeHouse.Logger.Log("Bug in telnet server - expected TERMTYPE byte {" + RFC1091_TERMTYPE + "} (RFC10791) but instead got {" + (int)code + "}."); " is 145.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeTermtype,The length of the statement  "                SafeHouse.Logger.Log("Bug in telnet server - expected [IS] byte {" + RFC1091_IS + "} (RFC10791) but instead got {" + (int)code + "}."); " is 135.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeTermtype,The length of the statement  "                string newTermType = sb.ToString().Substring(0' sb.Length - 1); // -1 because it will have the RFC854_IAC byte still stuck on the end. " is 134.
Long Statement,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeTermtype,The length of the statement  "                SafeHouse.Logger.SuperVerbose(string.Format("Telnet client just told us its terminal type is: \"{0}\"."' ClientTerminalType)); " is 126.
Long Statement,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,Attach,The length of the statement  "            telnetServer.Write( (char)UnicodeCommand.TITLEBEGIN + "kOS Terminal Server Welcome Menu" + (char)UnicodeCommand.TITLEEND ); " is 123.
Long Statement,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,PrintCPUMenu,The length of the statement  "            localMenuBuffer.Remove(0'localMenuBuffer.Length); // Any time the menu is reprinted' clear out any previous buffer text. " is 120.
Long Statement,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,PrintCPUMenu,The length of the statement  "                string choice = String.Format(FORMATTER' "["+userPickNum+"]"' (guiOpen ? "yes": "no")' numTelnets' "   "' vesselLabel' "("+partLabel+")"); " is 138.
Long Statement,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,PrintCPUMenu,The length of the statement  "                telnetServer.Write(CenterPadded(String.Format(FORMATTER'""' ""' ""' ""' "<NONE>"' "")' ' ') + (char)UnicodeCommand.STARTNEXTLINE); " is 130.
Long Statement,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,OutputConvert,The length of the statement  "                        sb.Append("{Please resize to " + pendingWidth + "x" + height + "}"); // By default' assume the terminal has no such control code' but this can be overridden. " is 157.
Long Statement,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,InputConvert,The length of the statement  "                    case (char)0x00: // null char - dummy input that should be gone by the time everything got processed by the other mappers. " is 122.
Long Statement,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,InputConvert,The length of the statement  "                        outChars.Add((char)UnicodeCommand.DELETELEFT); // Map to the same as backspace' because Vt100 sends it for the backspace key' annoyingly. " is 137.
Long Statement,kOS.UserIO,TerminalXtermMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalXtermMapper.cs,OutputConvert,The length of the statement  "                                sb.AppendFormat("{0}?47h"' ESCAPE_CHARACTER);                   // <-- Tells xterm to use fixed-buffer mode' not saving in scrollback. " is 134.
Long Statement,kOS.Utilities,Utils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\Utils.cs,KOSExtensionGetObtVelocity,The length of the statement  "                Vector3d correctedVel = new Vector3d(wonkyAxesVel.x' wonkyAxesVel.z' wonkyAxesVel.y); // have to swap axes because KSP API is weird. " is 132.
Long Statement,kOS.Utilities,Utils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\Utils.cs,KOSExtensionGetObtVelocity,The length of the statement  "                return -correctedVel; // invert direction because the above gives vel of my body rel to sun' and I want vel of sun rel to my body. " is 130.
Long Statement,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetLandingLegStatus,The length of the statement  "                                if ((p.Modules[gd.baseModuleIndex] == gear) && (gd.fsm.CurrentState != gd.st_deployed)) //state string is unreliable - may be just empty " is 136.
Long Statement,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetChuteSafeStatus,The length of the statement  "                    if ((c.deploymentState == ModuleParachute.deploymentStates.STOWED) && (c.deploymentSafeState == ModuleParachute.deploymentSafeStates.SAFE)) " is 139.
Long Statement,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,DeployParachutesSafe,The length of the statement  "                    if ((c.deploymentState == ModuleParachute.deploymentStates.STOWED) && (c.deploymentSafeState == ModuleParachute.deploymentSafeStates.SAFE)) " is 139.
Long Statement,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetFacing,The length of the statement  "            Quaternion vesselFacing = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vesselRotation) * Quaternion.identity); " is 132.
Long Statement,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetFacing,The length of the statement  "            Quaternion bodyFacing = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(bodyRotation) * Quaternion.identity); " is 128.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACAPI,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACWrapper.cs,DrawAlarmActionChoice,The length of the statement  "                Int32 OutValue = (Int32)DrawAlarmActionChoiceMethod.Invoke(actualKAC' new System.Object[] { InValue' LabelText' LabelWidth' ButtonWidth }); " is 139.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACAlarmWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACAlarmWrapper.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("REPEATPERIOD"' new SetSuffix<ScalarValue>(() => alarm.RepeatAlarmPeriod' value => alarm.RepeatAlarmPeriod = value)); " is 127.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACAlarmWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACAlarmWrapper.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("ORIGINBODY"' new SetSuffix<StringValue>(() => alarm.XferOriginBodyName' value => alarm.XferOriginBodyName = value)); " is 127.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACAlarmWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACAlarmWrapper.cs,InitializeSuffixes,The length of the statement  "            AddSuffix("TARGETBODY"' new SetSuffix<StringValue>(() => alarm.XferTargetBodyName' value => alarm.XferTargetBodyName = value)); " is 127.
Long Statement,kOS.AddOns.KerbalAlarmClock,FunctionAddAlarm,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACFunctions.cs,Execute,The length of the statement  "                SafeHouse.Logger.Log(string.Format("Trying to create KAC Alarm' UT={0}' Name={1}' Type= {2}"' alarmUT' alarmName' alarmType)); " is 126.
Long Statement,kOS.AddOns.KerbalAlarmClock,FunctionAddAlarm,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACFunctions.cs,Execute,The length of the statement  "                    SafeHouse.Logger.Log(string.Format("Failed creating KAC Alarm' UT={0}' Name={1}' Type= {2}"' alarmUT' alarmName' alarmType)); " is 125.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACEventHandler,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACEventHandler.cs,Start,The length of the statement  "                Debug.Log(string.Format("{0} Kerbal Alarm Clock found' Alarms Count {1}"' KSPLogger.LOGGER_PREFIX' KACWrapper.KAC.Alarms.Count)); " is 129.
Long Statement,kOS.AddOns.KerbalAlarmClock,KACEventHandler,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACEventHandler.cs,KAC_onAlarmStateChanged,The length of the statement  "            Debug.Log(string.Format("{0}' caught Event from alarm {1}' event type {2}"' KSPLogger.LOGGER_PREFIX' e.alarm.Name' e.eventType)); " is 129.
Long Statement,kOS.AddOns.OrbitalScience,DMScienceExperimentFields,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\OrbitalScience\DMScienceExperimentFields.cs,TransmitData,The length of the statement  "                    partModule.part' scienceData' scienceData.baseTransmitValue' scienceData.transmitBonus' // the parameters with data we care aboue " is 129.
Long Statement,kOS.AddOns.OrbitalScience,DMScienceExperimentFields,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\OrbitalScience\DMScienceExperimentFields.cs,TransmitData,The length of the statement  "                ScreenMessages.PostScreenMessage("No transmitters available on this vessel or no data to transmit."' 4f' ScreenMessageStyle.UPPER_LEFT); " is 136.
Complex Conditional,kOS.Function,kList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,AddItem,The conditional expression  "columns[index].Format != string.Empty &&                              (fields[index] is int ||                               fields[index] is double ||                               fields[index] is float)"  is complex.
Complex Conditional,kOS.Module,kOSVesselModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSVesselModule.cs,CacheControllable,The conditional expression  "!Vessel.packed && !Vessel.IsControllable && commNetParams != null && commNetParams.requireSignalForControl"  is complex.
Complex Conditional,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ProcessKeyEvents,The conditional expression  "(e.keyCode == KeyCode.X && e.control) ||                      (e.keyCode == KeyCode.D && e.control)"  is complex.
Complex Conditional,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,SpecialKey,The conditional expression  "IsOpen && keyClickEnabled && wasUsed && doQueuing"  is complex.
Complex Conditional,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,LabelPlacement,The conditional expression  "screenPos.z > 0                   && screenPos.x >= 0 && screenPos.x <= 1                   && screenPos.y >= 0 && screenPos.y <= 1"  is complex.
Complex Conditional,kOS.Suffixed.PartModuleField,PartModuleFields,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\PartModuleField\PartModuleFields.cs,IsLegalValue,The conditional expression  "vec2.x < vector2.minValueX || vec2.x > vector2.maxValueX ||                              vec2.y < vector2.minValueY || vec2.y > vector2.maxValueY"  is complex.
Complex Conditional,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,GetRunningAddress,The conditional expression  "(!IsListening) || server == null || server.Server == null || (!server.Server.IsBound)"  is complex.
Complex Conditional,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,GetRunningPort,The conditional expression  "(!IsListening) || server == null || server.Server == null || (!server.Server.IsBound)"  is complex.
Complex Conditional,kOS.Utilities,Utils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\Utils.cs,KOSType,The conditional expression  "type.IsSubclassOf(typeof(Single)) ||                  type.IsSubclassOf(typeof(Double)) ||                  type.IsSubclassOf(typeof(Int32)) || type.IsSubclassOf(typeof(UInt32)) ||                  type.IsSubclassOf(typeof(Int64)) || type.IsSubclassOf(typeof(UInt64))"  is complex.
Virtual Method Call from Constructor,kOS.Sound,ProceduralSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\ProceduralSoundWave.cs,ProceduralSoundWave,The constructor "ProceduralSoundWave" calls a virtual method "InitSettings".
Virtual Method Call from Constructor,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GeoCoordinates,The constructor "GeoCoordinates" calls a virtual method "GetPosition".
Virtual Method Call from Constructor,kOS.Suffixed,OrbitInfo,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\OrbitInfo.cs,OrbitInfo,The constructor "OrbitInfo" calls a virtual method "GetName".
Empty Catch Block,kOS.AddOns.KerbalAlarmClock,KACAPI,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACWrapper.cs,ExtractAlarmList,The method has an empty catch block.
Magic Number,kOS.AddOns.ActionGroupsExtended,ActionGroupsExtendedBinding,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\ActionGroupsExtended\ActionGroupsExtendedBinding.cs,AddTo,The following statement contains a magic number: for (int outerIndex = 11; outerIndex <= 250; outerIndex++)              {                  int i = outerIndex;                  shared.BindingMgr.AddSetter("AG" + i' val => api.ActivateGroup(vessel' i' (bool) val));                  shared.BindingMgr.AddGetter("AG" + i' () => api.GetGroupState(vessel' i));              }
Magic Number,kOS.AddOns.ActionGroupsExtended,ActionGroupsExtendedBinding,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\ActionGroupsExtended\ActionGroupsExtendedBinding.cs,AddTo,The following statement contains a magic number: for (int outerIndex = 11; outerIndex <= 250; outerIndex++)              {                  int i = outerIndex;                  shared.BindingMgr.AddSetter("AG" + i' val => api.ActivateGroup(vessel' i' (bool) val));                  shared.BindingMgr.AddGetter("AG" + i' () => api.GetGroupState(vessel' i));              }
Magic Number,kOS.AddOns.TrajectoriesAddon,Addon,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\Trajectories\Addon.cs,ImpactPos,The following statement contains a magic number: if (Available())              {                  CelestialBody body = shared.Vessel.orbit.referenceBody;                  Vector3? impactVect = TRWrapper.ImpactVector();                  if (impactVect != null)                  {                      var worldImpactPos = (Vector3d)impactVect + body.position;                      var lat = body.GetLatitude(worldImpactPos);                      var lng = Utils.DegreeFix(body.GetLongitude(worldImpactPos)' -180);                      return new GeoCoordinates(shared' lat' lng);                  }                  else                  {                      throw new KOSException("Impact position is not available. Remember to check addons:tr:hasImpact");                  }              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: pitchPI.Ts = 2;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: yawPI.Ts = 2;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: rollPI.Ts = 2;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: pitchRatePI.Ki = 0.1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: yawRatePI.Ki = 0.1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: rollRatePI.Ki = 0.1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: MaxStoppingTime = 2;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,ResetToDefault,The following statement contains a magic number: RollControlAngleRange = 5;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateStateVectors,The following statement contains a magic number: vesselRotation = vesselTransform.rotation * Quaternion.Euler(-90' 0' 0);
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateTorque,The following statement contains a magic number: foreach (var pm in torqueProviders.Keys)              {                  var tp = torqueProviders[pm];                  tp.GetPotentialTorque(out pos' out neg);                  // It is possible for the torque returned to be negative.  It's also possible                  // for the positive and negative actuation to differ.  Below averages the value                  // for positive and negative actuation in an attempt to compensate for some issues                  // of differing signs and asymmetric torque.                  rawTorque.x += (Math.Abs(pos.x) + Math.Abs(neg.x)) / 2;                  rawTorque.y += (Math.Abs(pos.y) + Math.Abs(neg.y)) / 2;                  rawTorque.z += (Math.Abs(pos.z) + Math.Abs(neg.z)) / 2;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateTorque,The following statement contains a magic number: foreach (var pm in torqueProviders.Keys)              {                  var tp = torqueProviders[pm];                  tp.GetPotentialTorque(out pos' out neg);                  // It is possible for the torque returned to be negative.  It's also possible                  // for the positive and negative actuation to differ.  Below averages the value                  // for positive and negative actuation in an attempt to compensate for some issues                  // of differing signs and asymmetric torque.                  rawTorque.x += (Math.Abs(pos.x) + Math.Abs(neg.x)) / 2;                  rawTorque.y += (Math.Abs(pos.y) + Math.Abs(neg.y)) / 2;                  rawTorque.z += (Math.Abs(pos.z) + Math.Abs(neg.z)) / 2;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateTorque,The following statement contains a magic number: foreach (var pm in torqueProviders.Keys)              {                  var tp = torqueProviders[pm];                  tp.GetPotentialTorque(out pos' out neg);                  // It is possible for the torque returned to be negative.  It's also possible                  // for the positive and negative actuation to differ.  Below averages the value                  // for positive and negative actuation in an attempt to compensate for some issues                  // of differing signs and asymmetric torque.                  rawTorque.x += (Math.Abs(pos.x) + Math.Abs(neg.x)) / 2;                  rawTorque.y += (Math.Abs(pos.y) + Math.Abs(neg.y)) / 2;                  rawTorque.z += (Math.Abs(pos.z) + Math.Abs(neg.z)) / 2;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The following statement contains a magic number: if (Vector3d.Angle(vesselTop' targetForward) > 90)                  phi *= -1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The following statement contains a magic number: if (Vector3d.Angle(vesselTop' Vector3d.Exclude(vesselStarboard' targetForward)) > 90)                  phiPitch *= -1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The following statement contains a magic number: if (Vector3d.Angle(vesselStarboard' Vector3d.Exclude(vesselTop' targetForward)) > 90)                  phiYaw *= -1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdatePredictionPI,The following statement contains a magic number: if (Vector3d.Angle(vesselStarboard' Vector3d.Exclude(vesselForward' targetTop)) > 90)                  phiRoll *= -1;
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateControl,The following statement contains a magic number: if (shared.Vessel.ActionGroups[KSPActionGroup.SAS])              {                  pitchPI.ResetI();                  yawPI.ResetI();                  rollPI.ResetI();                  pitchRatePI.ResetI();                  yawRatePI.ResetI();                  rollRatePI.ResetI();                  Quaternion target = TargetDirection.Rotation * Quaternion.Euler(90' 0' 0);                  shared.Vessel.Autopilot.SAS.LockRotation(target);              }              else              {                  //TODO: include adjustment for static torque (due to engines)                  double clampAccPitch = Math.Max(Math.Abs(accPitch)' 0.005) * 2;                  accPitch = tgtPitchTorque / controlTorque.x;                  if (Math.Abs(accPitch) < EPSILON)                      accPitch = 0;                  accPitch = Math.Max(Math.Min(accPitch' clampAccPitch)' -clampAccPitch);                  c.pitch = (float)accPitch;                  double clampAccYaw = Math.Max(Math.Abs(accYaw)' 0.005) * 2;                  accYaw = tgtYawTorque / controlTorque.z;                  if (Math.Abs(accYaw) < EPSILON)                      accYaw = 0;                  accYaw = Math.Max(Math.Min(accYaw' clampAccYaw)' -clampAccYaw);                  c.yaw = (float)accYaw;                  double clampAccRoll = Math.Max(Math.Abs(accRoll)' 0.005) * 2;                  accRoll = tgtRollTorque / controlTorque.y;                  if (Math.Abs(accRoll) < EPSILON)                      accRoll = 0;                  accRoll = Math.Max(Math.Min(accRoll' clampAccRoll)' -clampAccRoll);                  c.roll = (float)accRoll;              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateVectorRenders,The following statement contains a magic number: if (ShowFacingVectors && enabled)              {                  if (vForward == null)                  {                      vForward = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vTop == null)                  {                      vTop = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vStarboard == null)                  {                      vStarboard = InitVectorRenderer(Color.red' 1' shared);                  }                    vForward.Vector = vesselForward * RENDER_MULTIPLIER;                  vTop.Vector = vesselTop * RENDER_MULTIPLIER;                  vStarboard.Vector = vesselStarboard * RENDER_MULTIPLIER;                    if (vTgtForward == null)                  {                      vTgtForward = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtTop == null)                  {                      vTgtTop = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtStarboard == null)                  {                      vTgtStarboard = InitVectorRenderer(Color.blue' 1' shared);                  }                    vTgtForward.Vector = targetForward * RENDER_MULTIPLIER * 0.75f;                  vTgtTop.Vector = targetTop * RENDER_MULTIPLIER * 0.75f;                  vTgtStarboard.Vector = targetStarboard * RENDER_MULTIPLIER * 0.75f;                    if (vWorldX == null)                  {                      vWorldX = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldY == null)                  {                      vWorldY = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldZ == null)                  {                      vWorldZ = InitVectorRenderer(Color.white' 1' shared);                  }                    vWorldX.Vector = new Vector3d(1' 0' 0) * RENDER_MULTIPLIER * 2;                  vWorldY.Vector = new Vector3d(0' 1' 0) * RENDER_MULTIPLIER * 2;                  vWorldZ.Vector = new Vector3d(0' 0' 1) * RENDER_MULTIPLIER * 2;                    if (!vForward.GetShow()) vForward.SetShow(true);                  if (!vTop.GetShow()) vTop.SetShow(true);                  if (!vStarboard.GetShow()) vStarboard.SetShow(true);                    if (!vTgtForward.GetShow()) vTgtForward.SetShow(true);                  if (!vTgtTop.GetShow()) vTgtTop.SetShow(true);                  if (!vTgtStarboard.GetShow()) vTgtStarboard.SetShow(true);                    if (!vWorldX.GetShow()) vWorldX.SetShow(true);                  if (!vWorldY.GetShow()) vWorldY.SetShow(true);                  if (!vWorldZ.GetShow()) vWorldZ.SetShow(true);              }              else              {                  if (vForward != null)                  {                      if (vForward.GetShow()) vForward.SetShow(false);                      vForward.Dispose();                      vForward = null;                  }                  if (vTop != null)                  {                      if (vTop.GetShow()) vTop.SetShow(false);                      vTop.Dispose();                      vTop = null;                  }                  if (vStarboard != null)                  {                      if (vStarboard.GetShow()) vStarboard.SetShow(false);                      vStarboard.Dispose();                      vStarboard = null;                  }                    if (vTgtForward != null)                  {                      if (vTgtForward.GetShow()) vTgtForward.SetShow(false);                      vTgtForward.Dispose();                      vTgtForward = null;                  }                  if (vTgtTop != null)                  {                      if (vTgtTop.GetShow()) vTgtTop.SetShow(false);                      vTgtTop.Dispose();                      vTgtTop = null;                  }                  if (vTgtStarboard != null)                  {                      if (vTgtStarboard.GetShow()) vTgtStarboard.SetShow(false);                      vTgtStarboard.Dispose();                      vTgtStarboard = null;                  }                    if (vWorldX != null)                  {                      if (vWorldX.GetShow()) vWorldX.SetShow(false);                      vWorldX.Dispose();                      vWorldX = null;                  }                  if (vWorldY != null)                  {                      if (vWorldY.GetShow()) vWorldY.SetShow(false);                      vWorldY.Dispose();                      vWorldY = null;                  }                  if (vWorldZ != null)                  {                      if (vWorldZ.GetShow()) vWorldZ.SetShow(false);                      vWorldZ.Dispose();                      vWorldZ = null;                  }              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateVectorRenders,The following statement contains a magic number: if (ShowFacingVectors && enabled)              {                  if (vForward == null)                  {                      vForward = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vTop == null)                  {                      vTop = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vStarboard == null)                  {                      vStarboard = InitVectorRenderer(Color.red' 1' shared);                  }                    vForward.Vector = vesselForward * RENDER_MULTIPLIER;                  vTop.Vector = vesselTop * RENDER_MULTIPLIER;                  vStarboard.Vector = vesselStarboard * RENDER_MULTIPLIER;                    if (vTgtForward == null)                  {                      vTgtForward = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtTop == null)                  {                      vTgtTop = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtStarboard == null)                  {                      vTgtStarboard = InitVectorRenderer(Color.blue' 1' shared);                  }                    vTgtForward.Vector = targetForward * RENDER_MULTIPLIER * 0.75f;                  vTgtTop.Vector = targetTop * RENDER_MULTIPLIER * 0.75f;                  vTgtStarboard.Vector = targetStarboard * RENDER_MULTIPLIER * 0.75f;                    if (vWorldX == null)                  {                      vWorldX = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldY == null)                  {                      vWorldY = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldZ == null)                  {                      vWorldZ = InitVectorRenderer(Color.white' 1' shared);                  }                    vWorldX.Vector = new Vector3d(1' 0' 0) * RENDER_MULTIPLIER * 2;                  vWorldY.Vector = new Vector3d(0' 1' 0) * RENDER_MULTIPLIER * 2;                  vWorldZ.Vector = new Vector3d(0' 0' 1) * RENDER_MULTIPLIER * 2;                    if (!vForward.GetShow()) vForward.SetShow(true);                  if (!vTop.GetShow()) vTop.SetShow(true);                  if (!vStarboard.GetShow()) vStarboard.SetShow(true);                    if (!vTgtForward.GetShow()) vTgtForward.SetShow(true);                  if (!vTgtTop.GetShow()) vTgtTop.SetShow(true);                  if (!vTgtStarboard.GetShow()) vTgtStarboard.SetShow(true);                    if (!vWorldX.GetShow()) vWorldX.SetShow(true);                  if (!vWorldY.GetShow()) vWorldY.SetShow(true);                  if (!vWorldZ.GetShow()) vWorldZ.SetShow(true);              }              else              {                  if (vForward != null)                  {                      if (vForward.GetShow()) vForward.SetShow(false);                      vForward.Dispose();                      vForward = null;                  }                  if (vTop != null)                  {                      if (vTop.GetShow()) vTop.SetShow(false);                      vTop.Dispose();                      vTop = null;                  }                  if (vStarboard != null)                  {                      if (vStarboard.GetShow()) vStarboard.SetShow(false);                      vStarboard.Dispose();                      vStarboard = null;                  }                    if (vTgtForward != null)                  {                      if (vTgtForward.GetShow()) vTgtForward.SetShow(false);                      vTgtForward.Dispose();                      vTgtForward = null;                  }                  if (vTgtTop != null)                  {                      if (vTgtTop.GetShow()) vTgtTop.SetShow(false);                      vTgtTop.Dispose();                      vTgtTop = null;                  }                  if (vTgtStarboard != null)                  {                      if (vTgtStarboard.GetShow()) vTgtStarboard.SetShow(false);                      vTgtStarboard.Dispose();                      vTgtStarboard = null;                  }                    if (vWorldX != null)                  {                      if (vWorldX.GetShow()) vWorldX.SetShow(false);                      vWorldX.Dispose();                      vWorldX = null;                  }                  if (vWorldY != null)                  {                      if (vWorldY.GetShow()) vWorldY.SetShow(false);                      vWorldY.Dispose();                      vWorldY = null;                  }                  if (vWorldZ != null)                  {                      if (vWorldZ.GetShow()) vWorldZ.SetShow(false);                      vWorldZ.Dispose();                      vWorldZ = null;                  }              }
Magic Number,kOS.Control,SteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,UpdateVectorRenders,The following statement contains a magic number: if (ShowFacingVectors && enabled)              {                  if (vForward == null)                  {                      vForward = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vTop == null)                  {                      vTop = InitVectorRenderer(Color.red' 1' shared);                  }                  if (vStarboard == null)                  {                      vStarboard = InitVectorRenderer(Color.red' 1' shared);                  }                    vForward.Vector = vesselForward * RENDER_MULTIPLIER;                  vTop.Vector = vesselTop * RENDER_MULTIPLIER;                  vStarboard.Vector = vesselStarboard * RENDER_MULTIPLIER;                    if (vTgtForward == null)                  {                      vTgtForward = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtTop == null)                  {                      vTgtTop = InitVectorRenderer(Color.blue' 1' shared);                  }                  if (vTgtStarboard == null)                  {                      vTgtStarboard = InitVectorRenderer(Color.blue' 1' shared);                  }                    vTgtForward.Vector = targetForward * RENDER_MULTIPLIER * 0.75f;                  vTgtTop.Vector = targetTop * RENDER_MULTIPLIER * 0.75f;                  vTgtStarboard.Vector = targetStarboard * RENDER_MULTIPLIER * 0.75f;                    if (vWorldX == null)                  {                      vWorldX = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldY == null)                  {                      vWorldY = InitVectorRenderer(Color.white' 1' shared);                  }                  if (vWorldZ == null)                  {                      vWorldZ = InitVectorRenderer(Color.white' 1' shared);                  }                    vWorldX.Vector = new Vector3d(1' 0' 0) * RENDER_MULTIPLIER * 2;                  vWorldY.Vector = new Vector3d(0' 1' 0) * RENDER_MULTIPLIER * 2;                  vWorldZ.Vector = new Vector3d(0' 0' 1) * RENDER_MULTIPLIER * 2;                    if (!vForward.GetShow()) vForward.SetShow(true);                  if (!vTop.GetShow()) vTop.SetShow(true);                  if (!vStarboard.GetShow()) vStarboard.SetShow(true);                    if (!vTgtForward.GetShow()) vTgtForward.SetShow(true);                  if (!vTgtTop.GetShow()) vTgtTop.SetShow(true);                  if (!vTgtStarboard.GetShow()) vTgtStarboard.SetShow(true);                    if (!vWorldX.GetShow()) vWorldX.SetShow(true);                  if (!vWorldY.GetShow()) vWorldY.SetShow(true);                  if (!vWorldZ.GetShow()) vWorldZ.SetShow(true);              }              else              {                  if (vForward != null)                  {                      if (vForward.GetShow()) vForward.SetShow(false);                      vForward.Dispose();                      vForward = null;                  }                  if (vTop != null)                  {                      if (vTop.GetShow()) vTop.SetShow(false);                      vTop.Dispose();                      vTop = null;                  }                  if (vStarboard != null)                  {                      if (vStarboard.GetShow()) vStarboard.SetShow(false);                      vStarboard.Dispose();                      vStarboard = null;                  }                    if (vTgtForward != null)                  {                      if (vTgtForward.GetShow()) vTgtForward.SetShow(false);                      vTgtForward.Dispose();                      vTgtForward = null;                  }                  if (vTgtTop != null)                  {                      if (vTgtTop.GetShow()) vTgtTop.SetShow(false);                      vTgtTop.Dispose();                      vTgtTop = null;                  }                  if (vTgtStarboard != null)                  {                      if (vTgtStarboard.GetShow()) vTgtStarboard.SetShow(false);                      vTgtStarboard.Dispose();                      vTgtStarboard = null;                  }                    if (vWorldX != null)                  {                      if (vWorldX.GetShow()) vWorldX.SetShow(false);                      vWorldX.Dispose();                      vWorldX = null;                  }                  if (vWorldY != null)                  {                      if (vWorldY.GetShow()) vWorldY.SetShow(false);                      vWorldY.Dispose();                      vWorldY = null;                  }                  if (vWorldZ != null)                  {                      if (vWorldZ.GetShow()) vWorldZ.SetShow(false);                      vWorldZ.Dispose();                      vWorldZ = null;                  }              }
Magic Number,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,TorquePI,The following statement contains a magic number: Ts = 2;
Magic Number,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Update,The following statement contains a magic number: Loop.Ki = momentOfInertia * Math.Pow(4.0 / ts' 2);
Magic Number,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Update,The following statement contains a magic number: Loop.Ki = momentOfInertia * Math.Pow(4.0 / ts' 2);
Magic Number,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Update,The following statement contains a magic number: Loop.Kp = 2 * Math.Pow(momentOfInertia * Loop.Ki' 0.5);
Magic Number,kOS.Control,TorquePI,C:\repos\KSP-KOS_KOS\src\kOS\Control\SteeringManager.cs,Update,The following statement contains a magic number: Loop.Kp = 2 * Math.Pow(momentOfInertia * Loop.Ki' 0.5);
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateAutopilot,The following statement contains a magic number: if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(controlShared.Vessel)' VesselUtils.GetVelocityHeading(controlShared.Vessel))) <= 90)              {                  c.wheelSteer = Mathf.Clamp(Value / -10' -1' 1);              }              else              {                  c.wheelSteer = -Mathf.Clamp(Value / -10' -1' 1);              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateAutopilot,The following statement contains a magic number: if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(controlShared.Vessel)' VesselUtils.GetVelocityHeading(controlShared.Vessel))) <= 90)              {                  c.wheelSteer = Mathf.Clamp(Value / -10' -1' 1);              }              else              {                  c.wheelSteer = -Mathf.Clamp(Value / -10' -1' 1);              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateAutopilot,The following statement contains a magic number: if (Mathf.Abs(VesselUtils.AngleDelta(VesselUtils.GetHeading(controlShared.Vessel)' VesselUtils.GetVelocityHeading(controlShared.Vessel))) <= 90)              {                  c.wheelSteer = Mathf.Clamp(Value / -10' -1' 1);              }              else              {                  c.wheelSteer = -Mathf.Clamp(Value / -10' -1' 1);              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateValue,The following statement contains a magic number: if (value is VesselTarget)              {                  bearing = VesselUtils.GetTargetBearing(controlShared.Vessel' ((VesselTarget)value).Vessel);              }              else if (value is GeoCoordinates)              {                  bearing = ((GeoCoordinates)value).GetBearing();              }              else              {                  try                  {                      double doubleValue = Convert.ToDouble(value);                      if (Utils.IsValidNumber(doubleValue))                      {                          bearing = (float)(Math.Round(doubleValue) - Mathf.Round(FlightGlobals.ship_heading));                          if (bearing < -180)                              bearing += 360; // i.e. 359 degrees to the left is really 1 degree to the right.                          else if (bearing > 180)                              bearing -= 360; // i.e. 359 degrees to the right is really 1 degree to the left                      }                  }                  catch                  {                      throw new KOSWrongControlValueTypeException(                          "WHEELSTEERING"'                          KOSNomenclature.GetKOSName(value.GetType())'                          string.Format(                              "{0}' {1}' or {2} (compass heading)"'                              KOSNomenclature.GetKOSName(typeof(VesselTarget))'                              KOSNomenclature.GetKOSName(typeof(GeoCoordinates))'                              KOSNomenclature.GetKOSName(typeof(ScalarValue))                              )                          );                  }              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateValue,The following statement contains a magic number: if (value is VesselTarget)              {                  bearing = VesselUtils.GetTargetBearing(controlShared.Vessel' ((VesselTarget)value).Vessel);              }              else if (value is GeoCoordinates)              {                  bearing = ((GeoCoordinates)value).GetBearing();              }              else              {                  try                  {                      double doubleValue = Convert.ToDouble(value);                      if (Utils.IsValidNumber(doubleValue))                      {                          bearing = (float)(Math.Round(doubleValue) - Mathf.Round(FlightGlobals.ship_heading));                          if (bearing < -180)                              bearing += 360; // i.e. 359 degrees to the left is really 1 degree to the right.                          else if (bearing > 180)                              bearing -= 360; // i.e. 359 degrees to the right is really 1 degree to the left                      }                  }                  catch                  {                      throw new KOSWrongControlValueTypeException(                          "WHEELSTEERING"'                          KOSNomenclature.GetKOSName(value.GetType())'                          string.Format(                              "{0}' {1}' or {2} (compass heading)"'                              KOSNomenclature.GetKOSName(typeof(VesselTarget))'                              KOSNomenclature.GetKOSName(typeof(GeoCoordinates))'                              KOSNomenclature.GetKOSName(typeof(ScalarValue))                              )                          );                  }              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateValue,The following statement contains a magic number: if (value is VesselTarget)              {                  bearing = VesselUtils.GetTargetBearing(controlShared.Vessel' ((VesselTarget)value).Vessel);              }              else if (value is GeoCoordinates)              {                  bearing = ((GeoCoordinates)value).GetBearing();              }              else              {                  try                  {                      double doubleValue = Convert.ToDouble(value);                      if (Utils.IsValidNumber(doubleValue))                      {                          bearing = (float)(Math.Round(doubleValue) - Mathf.Round(FlightGlobals.ship_heading));                          if (bearing < -180)                              bearing += 360; // i.e. 359 degrees to the left is really 1 degree to the right.                          else if (bearing > 180)                              bearing -= 360; // i.e. 359 degrees to the right is really 1 degree to the left                      }                  }                  catch                  {                      throw new KOSWrongControlValueTypeException(                          "WHEELSTEERING"'                          KOSNomenclature.GetKOSName(value.GetType())'                          string.Format(                              "{0}' {1}' or {2} (compass heading)"'                              KOSNomenclature.GetKOSName(typeof(VesselTarget))'                              KOSNomenclature.GetKOSName(typeof(GeoCoordinates))'                              KOSNomenclature.GetKOSName(typeof(ScalarValue))                              )                          );                  }              }
Magic Number,kOS.Control,WheelSteeringManager,C:\repos\KSP-KOS_KOS\src\kOS\Control\WheelSteeringManager.cs,UpdateValue,The following statement contains a magic number: if (value is VesselTarget)              {                  bearing = VesselUtils.GetTargetBearing(controlShared.Vessel' ((VesselTarget)value).Vessel);              }              else if (value is GeoCoordinates)              {                  bearing = ((GeoCoordinates)value).GetBearing();              }              else              {                  try                  {                      double doubleValue = Convert.ToDouble(value);                      if (Utils.IsValidNumber(doubleValue))                      {                          bearing = (float)(Math.Round(doubleValue) - Mathf.Round(FlightGlobals.ship_heading));                          if (bearing < -180)                              bearing += 360; // i.e. 359 degrees to the left is really 1 degree to the right.                          else if (bearing > 180)                              bearing -= 360; // i.e. 359 degrees to the right is really 1 degree to the left                      }                  }                  catch                  {                      throw new KOSWrongControlValueTypeException(                          "WHEELSTEERING"'                          KOSNomenclature.GetKOSName(value.GetType())'                          string.Format(                              "{0}' {1}' or {2} (compass heading)"'                              KOSNomenclature.GetKOSName(typeof(VesselTarget))'                              KOSNomenclature.GetKOSName(typeof(GeoCoordinates))'                              KOSNomenclature.GetKOSName(typeof(ScalarValue))                              )                          );                  }              }
Magic Number,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The following statement contains a magic number: switch (style)              {                  case 1:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_LEFT);                      break;                    case 2:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_CENTER);                      break;                    case 3:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_RIGHT);                      break;                    case 4:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.LOWER_CENTER);                      break;                    default:                      ScreenMessages.PostScreenMessage("*" + textToHud' 3f' ScreenMessageStyle.UPPER_CENTER);                      break;              }
Magic Number,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The following statement contains a magic number: switch (style)              {                  case 1:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_LEFT);                      break;                    case 2:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_CENTER);                      break;                    case 3:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_RIGHT);                      break;                    case 4:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.LOWER_CENTER);                      break;                    default:                      ScreenMessages.PostScreenMessage("*" + textToHud' 3f' ScreenMessageStyle.UPPER_CENTER);                      break;              }
Magic Number,kOS.Function,FunctionHudText,C:\repos\KSP-KOS_KOS\src\kOS\Function\Misc.cs,Execute,The following statement contains a magic number: switch (style)              {                  case 1:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_LEFT);                      break;                    case 2:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_CENTER);                      break;                    case 3:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.UPPER_RIGHT);                      break;                    case 4:                      ScreenMessages.PostScreenMessage("<color=" + htmlColour + "><size=" + size + ">" + textToHud + "</size></color>"' delay' ScreenMessageStyle.LOWER_CENTER);                      break;                    default:                      ScreenMessages.PostScreenMessage("*" + textToHud' 3f' ScreenMessageStyle.UPPER_CENTER);                      break;              }
Magic Number,kOS.Function,FunctionSlideNote,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: if (argCount >= 5)                  vol = (float) GetDouble(PopValueAssert(shared));
Magic Number,kOS.Function,FunctionSlideNote,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: if (argCount >= 4)                  keyDownDuration = (float)GetDouble(PopValueAssert(shared));
Magic Number,kOS.Function,FunctionNote,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: if (argCount >= 4)                  vol = (float) GetDouble(PopValueAssert(shared));
Magic Number,kOS.Function,FunctionNote,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: if (argCount >= 3)                  keyDownDuration = (float)GetDouble(PopValueAssert(shared));
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: double width   = (argc >= 7) ? GetDouble(PopValueAssert(shared))         : 0.2;
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: double width   = (argc >= 7) ? GetDouble(PopValueAssert(shared))         : 0.2;
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: bool   show    = (argc >= 6) ? Convert.ToBoolean(PopValueAssert(shared)) : false;
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: double scale   = (argc >= 5) ? GetDouble(PopValueAssert(shared))         : 1.0;
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: string str     = (argc >= 4) ? PopValueAssert(shared).ToString()         : "";
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: RgbaColor rgba = (argc >= 3) ? GetRgba(PopValueAssert(shared))           : new RgbaColor(1.0f' 1.0f' 1.0f);
Magic Number,kOS.Function,FunctionVecDrawNull,C:\repos\KSP-KOS_KOS\src\kOS\Function\Suffixed.cs,Execute,The following statement contains a magic number: Vector vec     = (argc >= 2) ? GetVector(PopValueAssert(shared))         : new Vector(1.0' 0.0' 0.0);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetFileList,The following statement contains a magic number: list.AddColumn("Name"' 30' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetFileList,The following statement contains a magic number: list.AddColumn("Size"' 7' ColumnAlignment.Right);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetVolumeList,The following statement contains a magic number: list.AddColumn("ID"' 6' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetVolumeList,The following statement contains a magic number: list.AddColumn("Name"' 24' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetVolumeList,The following statement contains a magic number: list.AddColumn("Size"' 7' ColumnAlignment.Right);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetProcessorList,The following statement contains a magic number: list.AddColumn("Name"' 16' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetProcessorList,The following statement contains a magic number: list.AddColumn("Tag"' 12' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetProcessorList,The following statement contains a magic number: list.AddColumn("Volume ID"' 6' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetBodyList,The following statement contains a magic number: list.AddColumn("Name"' 15' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetBodyList,The following statement contains a magic number: list.AddColumn("Distance"' 22' ColumnAlignment.Right' "0");
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetTargetList,The following statement contains a magic number: list.AddColumn("Vessel Name"' 25' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetTargetList,The following statement contains a magic number: list.AddColumn("Distance"' 12' ColumnAlignment.Right' "0.0");
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetResourceList,The following statement contains a magic number: list.AddColumn("Stage"' 11' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetResourceList,The following statement contains a magic number: list.AddColumn("Resource Name"' 28' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetResourceList,The following statement contains a magic number: list.AddColumn("Amount"' 9' ColumnAlignment.Right' "0.00");
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetPartList,The following statement contains a magic number: list.AddColumn("ID"' 28' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetPartList,The following statement contains a magic number: list.AddColumn("Name"' 20' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetEngineList,The following statement contains a magic number: list.AddColumn("ID"' 12' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetEngineList,The following statement contains a magic number: list.AddColumn("Stage"' 8' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetEngineList,The following statement contains a magic number: list.AddColumn("Name"' 28' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetSensorList,The following statement contains a magic number: list.AddColumn("Part Name"' 37' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetSensorList,The following statement contains a magic number: list.AddColumn("Sensor Type"' 11' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetConfigList,The following statement contains a magic number: list.AddColumn(""' 9' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetConfigList,The following statement contains a magic number: list.AddColumn("Name"' 34' ColumnAlignment.Left);
Magic Number,kOS.Function,FunctionPrintList,C:\repos\KSP-KOS_KOS\src\kOS\Function\PrintList.cs,GetConfigList,The following statement contains a magic number: list.AddColumn("Value"' 6' ColumnAlignment.Left);
Magic Number,kOS,KSPLogger,C:\repos\KSP-KOS_KOS\src\kOS\KSPLogger.cs,LogWarningAndScreen,The following statement contains a magic number: ScreenMessages.PostScreenMessage("<color=#dddd55><size=30>" + s + "</size></color>"' 20' ScreenMessageStyle.UPPER_CENTER);
Magic Number,kOS,KSPLogger,C:\repos\KSP-KOS_KOS\src\kOS\KSPLogger.cs,Log,The following statement contains a magic number: if (Shared != null && Shared.Cpu != null)              {                  // print a fragment of the code where the exception ocurred                  int logContextLines = 16;  #if DEBUG                  logContextLines = 999999; // in debug mode let's just dump everything because it's easier that way.  #endif                  List<string> codeFragment = Shared.Cpu.GetCodeFragment(logContextLines);                  var messageBuilder = new StringBuilder();                  messageBuilder.AppendLine("Code Fragment");                  foreach (string instruction in codeFragment)                      messageBuilder.AppendLine(instruction);                  UnityEngine.Debug.Log(messageBuilder.ToString());              }
Magic Number,kOS,KSPLogger,C:\repos\KSP-KOS_KOS\src\kOS\KSPLogger.cs,Log,The following statement contains a magic number: if (Shared != null && Shared.Cpu != null)              {                  // print a fragment of the code where the exception ocurred                  int logContextLines = 16;  #if DEBUG                  logContextLines = 999999; // in debug mode let's just dump everything because it's easier that way.  #endif                  List<string> codeFragment = Shared.Cpu.GetCodeFragment(logContextLines);                  var messageBuilder = new StringBuilder();                  messageBuilder.AppendLine("Code Fragment");                  foreach (string instruction in codeFragment)                      messageBuilder.AppendLine(instruction);                  UnityEngine.Debug.Log(messageBuilder.ToString());              }
Magic Number,kOS.Module,Bootstrapper,C:\repos\KSP-KOS_KOS\src\kOS\Module\Bootstrapper.cs,MigrateBootAndRename,The following statement contains a magic number: foreach (var fileName in files)              {                  var fileInfo = new FileInfo(fileName);                  string newFilename = fileInfo.Name;                    if (!newFilename.Equals("boot.ks"' StringComparison.OrdinalIgnoreCase))                  {                      newFilename = newFilename.Substring(4);                      if (newFilename.StartsWith("_"))                      {                          newFilename = newFilename.Substring(1);                      }                  }                  newFilename = Path.Combine(destDirectory' newFilename);                  if (backup)                      File.Copy(fileName' newFilename);                  else                      File.Move(fileName' newFilename);              }
Magic Number,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,MigrateSettings,The following statement contains a magic number: if (preventFuture)              {                  config.SetValue("InstructionsPerUpdate"' -2); // using -2 so it's different from the default value used above                  config.SetValue("PreventFutureMigrationComment"' "The user selected to prevent future migration notices when loading or creating save files.  Change the IPU value to a positive value to re-enable migrations.");              }
Magic Number,kOS.Module,kOSCustomParameters,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSCustomParameters.cs,DontMigrateAndPrevent,The following statement contains a magic number: config.SetValue("InstructionsPerUpdate"' -2);
Magic Number,kOS.Module,kOSLightModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSLightModule.cs,processElectricity,The following statement contains a magic number: if (dt > 0)              {                  double request = (red + green + blue) / 3 * resourceAmount * dt;                  lastResource = (float)request;                  double received = part.RequestResource("ElectricCharge"' request);                  if (received / request > 0.5)                  {                      powerStarved = false;                  }                  else                  {                      powerStarved = true;                  }              }
Magic Number,kOS.Module,kOSLightModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSLightModule.cs,processElectricity,The following statement contains a magic number: if (dt > 0)              {                  double request = (red + green + blue) / 3 * resourceAmount * dt;                  lastResource = (float)request;                  double received = part.RequestResource("ElectricCharge"' request);                  if (received / request > 0.5)                  {                      powerStarved = false;                  }                  else                  {                      powerStarved = true;                  }              }
Magic Number,kOS.Module,KOSNameTag,C:\repos\KSP-KOS_KOS\src\kOS\Module\KOSNameTag.cs,PopupNameTagChanger,The following statement contains a magic number: if (HighLogic.LoadedSceneIsEditor)              {                  EditorFacility whichEditor = EditorLogic.fetch.ship.shipFacility;                  if (!(Career.CanTagInEditor(whichEditor)))                  {                      var formattedString = string.Format("The {0} requires an upgrade to assign name tags"' whichEditor);                      ScreenMessages.PostScreenMessage(formattedString' 6' ScreenMessageStyle.UPPER_CENTER);                      return;                  }              }
Magic Number,kOS.Module,kOSVesselModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSVesselModule.cs,OnAwake,The following statement contains a magic number: autopilotRehookCounter = autopilotRehookPeriod - 2;
Magic Number,kOS.Module,kOSVesselModule,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSVesselModule.cs,CheckRehookAutopilot,The following statement contains a magic number: if (ConnectivityManager.NeedAutopilotResubscribe)              {                  if (++autopilotRehookCounter > autopilotRehookPeriod)                  {                      ConnectivityManager.AddAutopilotHook(Vessel' UpdateAutopilot);                  }              }              else              {                  autopilotRehookCounter = autopilotRehookPeriod - 2;              }
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,GetInfo,The following statement contains a magic number: int defaultAvgInstructions = 200;
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,UpdateCostAndMass,The following statement contains a magic number: additionalMassGui = AdditionalMass * 1000;
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: if (bootFilePath != null && !bootFiles.Contains(bootFilePath))              {                  // if the path is not null ("None"' null' or empty) and if it isn't in list of files                  var archive = new Archive(SafeHouse.ArchiveFolder);                  var file = archive.Open(bootFilePath) as VolumeFile;  // try to open the file as saved                  if (file == null)                  {                      // check the same file name' but in the boot directory.                      var path = VolumePath.FromString(BootDirectoryName).Combine(bootFilePath.Name);                      file = archive.Open(path) as VolumeFile; // try to open the new path                      if (file == null)                      {                          // try the file name without "boot" prefix                          var name = bootFilePath.Name;                          if (name.StartsWith("boot"' StringComparison.OrdinalIgnoreCase) && name.Length > 4)                          {                              // strip the boot prefix and try that file name                              name = name.Substring(4);                              path = VolumePath.FromString(BootDirectoryName).Combine(name);                              file = name.StartsWith(".") ? null : archive.Open(path) as VolumeFile;  // try to open the new path                              if (file == null)                              {                                  // try the file name without "boot_" prefix                                  if (name.StartsWith("_"' StringComparison.OrdinalIgnoreCase) && name.Length > 1)                                  {                                      // only need to strip "_" here                                      name = name.Substring(1);                                      path = VolumePath.FromString(BootDirectoryName).Combine(name);                                      file = name.StartsWith(".") ? null : archive.Open(path) as VolumeFile;  // try to open the new path                                  }                              }                          }                      }                  }                    // now' if we have a file object' use its values.                  if (file != null)                  {                      // store the boot file information                      bootFile = file.Path.ToString();                      if (!bootFiles.Contains(file.Path))                      {                          availableOptions.Insert(1' bootFile);                          availableDisplays.Insert(1' "*" + file.Path.Name); // "*" is indication the file is not normally available                      }                  }              }
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: if (bootFilePath != null && !bootFiles.Contains(bootFilePath))              {                  // if the path is not null ("None"' null' or empty) and if it isn't in list of files                  var archive = new Archive(SafeHouse.ArchiveFolder);                  var file = archive.Open(bootFilePath) as VolumeFile;  // try to open the file as saved                  if (file == null)                  {                      // check the same file name' but in the boot directory.                      var path = VolumePath.FromString(BootDirectoryName).Combine(bootFilePath.Name);                      file = archive.Open(path) as VolumeFile; // try to open the new path                      if (file == null)                      {                          // try the file name without "boot" prefix                          var name = bootFilePath.Name;                          if (name.StartsWith("boot"' StringComparison.OrdinalIgnoreCase) && name.Length > 4)                          {                              // strip the boot prefix and try that file name                              name = name.Substring(4);                              path = VolumePath.FromString(BootDirectoryName).Combine(name);                              file = name.StartsWith(".") ? null : archive.Open(path) as VolumeFile;  // try to open the new path                              if (file == null)                              {                                  // try the file name without "boot_" prefix                                  if (name.StartsWith("_"' StringComparison.OrdinalIgnoreCase) && name.Length > 1)                                  {                                      // only need to strip "_" here                                      name = name.Substring(1);                                      path = VolumePath.FromString(BootDirectoryName).Combine(name);                                      file = name.StartsWith(".") ? null : archive.Open(path) as VolumeFile;  // try to open the new path                                  }                              }                          }                      }                  }                    // now' if we have a file object' use its values.                  if (file != null)                  {                      // store the boot file information                      bootFile = file.Path.ToString();                      if (!bootFiles.Contains(file.Path))                      {                          availableOptions.Insert(1' bootFile);                          availableDisplays.Insert(1' "*" + file.Path.Name); // "*" is indication the file is not normally available                      }                  }              }
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: var sizeOptions = new string[3];
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: sizeOptions[1] = (baseDiskSpace * 2).ToString();
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: sizeOptions[2] = (baseDiskSpace * 4).ToString();
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,InitUI,The following statement contains a magic number: sizeOptions[2] = (baseDiskSpace * 4).ToString();
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,ProcessElectricity,The following statement contains a magic number: if (ProcessorMode == ProcessorModes.STARVED)              {                  // If the processor is STARVED' check to see if there is enough EC to turn it back on.                  var request = averagePower.Mean;  // use the average power draw as a baseline of the power needed to restart.                  if (request > 0)                  {                      var available = partObj.RequestResource("ElectricCharge"' request);                      if (available / request > 0.5)                      {                          SetMode(ProcessorModes.READY);                      }                      // Since we're just checking to see if there is enough power to restart' return                      // the consumed EC.  The actual demand value will be drawn on the next update after                      // the cpu boots.  This should give the ship a chance to collect a little more EC                      // before the cpu actually boots.                      partObj.RequestResource("ElectricCharge"' -available);                  }                  else                  {                      // If there is no historical power request' simply turn the processor back on.  This                      // should not be possible' since it means that some how the processor got set to                      // the STARVED mode' even though no power was requested.                      SetMode(ProcessorModes.READY);                  }                  RequiredPower = (float)request; // Make sure RequiredPower matches the average.              }              else              {                  // Because the processor is not STARVED' evaluate the power requirement based on actual operation.                  // For EC drain purposes' always pretend atleast 1 instruction happened' so idle drain isn't quite zero:                  int instructions = System.Math.Max(shared.Cpu.InstructionsThisUpdate' 1);                  var request = volumePower * time + instructions * ECPerInstruction;                  if (request > 0)                  {                      // only check the available EC if the request is greater than 0EC.  If the request value                      // is zero' then available will always be zero and it appears that mono/.net treat                      // "0 / 0" as equaling "0"' which prevents us from checking the ratio.  Since getting                      // "0" available of "0" requested is a valid state' the processor mode is only evaluated                      // if request is greater than zero.                      var available = partObj.RequestResource("ElectricCharge"' request);                      if (available / request < 0.5)                      {                          // 0.5 is an arbitrary ratio for triggering the STARVED mode.  It allows for some                          // fluctuation away from the exact requested EC' ando adds some fuzzy math to how                          // we deal with the descreet physics frames.  Essentially if there was enough power                          // to run for half of a physics frame' the processor stays on.                          SetMode(ProcessorModes.STARVED);                      }                  }                  // Set RequiredPower to the average requested power.  This should help "de-bounce" the value                  // so that it doesn't fluctuate wildly (between 0.2 and 0.000001 in a single frame for example)                  RequiredPower = (float)averagePower.Update(request) / TimeWarp.fixedDeltaTime;              }
Magic Number,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,ProcessElectricity,The following statement contains a magic number: if (ProcessorMode == ProcessorModes.STARVED)              {                  // If the processor is STARVED' check to see if there is enough EC to turn it back on.                  var request = averagePower.Mean;  // use the average power draw as a baseline of the power needed to restart.                  if (request > 0)                  {                      var available = partObj.RequestResource("ElectricCharge"' request);                      if (available / request > 0.5)                      {                          SetMode(ProcessorModes.READY);                      }                      // Since we're just checking to see if there is enough power to restart' return                      // the consumed EC.  The actual demand value will be drawn on the next update after                      // the cpu boots.  This should give the ship a chance to collect a little more EC                      // before the cpu actually boots.                      partObj.RequestResource("ElectricCharge"' -available);                  }                  else                  {                      // If there is no historical power request' simply turn the processor back on.  This                      // should not be possible' since it means that some how the processor got set to                      // the STARVED mode' even though no power was requested.                      SetMode(ProcessorModes.READY);                  }                  RequiredPower = (float)request; // Make sure RequiredPower matches the average.              }              else              {                  // Because the processor is not STARVED' evaluate the power requirement based on actual operation.                  // For EC drain purposes' always pretend atleast 1 instruction happened' so idle drain isn't quite zero:                  int instructions = System.Math.Max(shared.Cpu.InstructionsThisUpdate' 1);                  var request = volumePower * time + instructions * ECPerInstruction;                  if (request > 0)                  {                      // only check the available EC if the request is greater than 0EC.  If the request value                      // is zero' then available will always be zero and it appears that mono/.net treat                      // "0 / 0" as equaling "0"' which prevents us from checking the ratio.  Since getting                      // "0" available of "0" requested is a valid state' the processor mode is only evaluated                      // if request is greater than zero.                      var available = partObj.RequestResource("ElectricCharge"' request);                      if (available / request < 0.5)                      {                          // 0.5 is an arbitrary ratio for triggering the STARVED mode.  It allows for some                          // fluctuation away from the exact requested EC' ando adds some fuzzy math to how                          // we deal with the descreet physics frames.  Essentially if there was enough power                          // to run for half of a physics frame' the processor stays on.                          SetMode(ProcessorModes.STARVED);                      }                  }                  // Set RequiredPower to the average requested power.  This should help "de-bounce" the value                  // so that it doesn't fluctuate wildly (between 0.2 and 0.000001 in a single frame for example)                  RequiredPower = (float)averagePower.Update(request) / TimeWarp.fixedDeltaTime;              }
Magic Number,kOS.Module,AssetManager,C:\repos\KSP-KOS_KOS\src\kOS\Module\AssetManager.cs,UpdateSystemFontLists,The following statement contains a magic number: foreach (string fontName in Font.GetOSInstalledFontNames())              {                  if (!FontNames.Contains(fontName))                  {                      // Only add those fonts which pass the monospace test:                      if (GetSystemFontByNameAndSize(fontName' 13' true' false' false) != null)                          FontNames.Add(fontName);                  }                  namesThatNoLongerExist.Remove(fontName);              }
Magic Number,kOS.Module,AssetManager,C:\repos\KSP-KOS_KOS\src\kOS\Module\AssetManager.cs,GetSystemFontByNameAndSize,The following statement contains a magic number: if (checkMono && !(IsFontMonospaced(potentialReturn)))              {                  if (doErrorMessage)                  {                      string msg = string.Format("{0} is proportional width.\nA monospaced font is required."' name);                      ScreenMessages.PostScreenMessage(                          string.Format("<color=#ff9900><size=20>{0}</size></color>"' msg)' 8' ScreenMessageStyle.UPPER_CENTER);                  }                  // Must destroy the font right now' else Unity keeps the font data temporarily alive for                  // too long a window of time' and it ends up failing when there's too many of                  // them loaded at once.  Relying on the cleanup that automatically happens when you                  // orphan the Font takes too long to avoid this bug.  As long as it *temporarily* had                  // too much font data in memory' it breaks some of the other fonts that were loaded but                  // hadn't be excercised yet.  (i.e nothing drawn in Arial with default GUI.skin can be                  // seen anymore).                  // This is a bug that during our user community testing didn't seem to happen to everybody'                  // but it happened to some users depending on kinds of fonts they had on their OS and kinds                  // of graphics cards (it seems to be related to the texture size of the texture being sent to                  // the graphics card).  At any rate' explicitly doing this instead of waiting for the                  // cleanup that is epxected to "magically" happen later on its own seems to cure the problem:                  DestroyImmediate(potentialReturn);                  Fonts.Remove(key);                    return null;              }
Magic Number,kOS.Persistence,PersistenceExtensions,C:\repos\KSP-KOS_KOS\src\kOS\Persistence\PersistenceExtensions.cs,ToHardDisk,The following statement contains a magic number: var capacity = 10000;
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,Awake,The following statement contains a magic number: commDelayStyle.fontSize = 10;
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The following statement contains a magic number: if (delayedActions.Count > 0) {                  var c = GUI.color;                  GUI.color = new Color(1'1'1' Mathf.PingPong(Time.realtimeSinceStartup * 0.9f' 0.2f)+0.4f);                  var delay = delayedActions[0].time - shared.UpdateHandler.CurrentTime;                  var textHeight = 30;                  var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height);                  GUI.DrawTexture(rect' commDelayedTexture);                  rect.y += commDelayedTexture.height;                  rect.x -= 10;                  rect.width += 20;                  rect.height = textHeight;                  GUI.Label(rect' string.Format("{1}\n{0:0.0} seconds"' delay'delayedActions[0].reason)' commDelayStyle);                  GUI.color = c;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The following statement contains a magic number: if (delayedActions.Count > 0) {                  var c = GUI.color;                  GUI.color = new Color(1'1'1' Mathf.PingPong(Time.realtimeSinceStartup * 0.9f' 0.2f)+0.4f);                  var delay = delayedActions[0].time - shared.UpdateHandler.CurrentTime;                  var textHeight = 30;                  var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height);                  GUI.DrawTexture(rect' commDelayedTexture);                  rect.y += commDelayedTexture.height;                  rect.x -= 10;                  rect.width += 20;                  rect.height = textHeight;                  GUI.Label(rect' string.Format("{1}\n{0:0.0} seconds"' delay'delayedActions[0].reason)' commDelayStyle);                  GUI.color = c;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The following statement contains a magic number: if (delayedActions.Count > 0) {                  var c = GUI.color;                  GUI.color = new Color(1'1'1' Mathf.PingPong(Time.realtimeSinceStartup * 0.9f' 0.2f)+0.4f);                  var delay = delayedActions[0].time - shared.UpdateHandler.CurrentTime;                  var textHeight = 30;                  var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height);                  GUI.DrawTexture(rect' commDelayedTexture);                  rect.y += commDelayedTexture.height;                  rect.x -= 10;                  rect.width += 20;                  rect.height = textHeight;                  GUI.Label(rect' string.Format("{1}\n{0:0.0} seconds"' delay'delayedActions[0].reason)' commDelayStyle);                  GUI.color = c;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The following statement contains a magic number: if (delayedActions.Count > 0) {                  var c = GUI.color;                  GUI.color = new Color(1'1'1' Mathf.PingPong(Time.realtimeSinceStartup * 0.9f' 0.2f)+0.4f);                  var delay = delayedActions[0].time - shared.UpdateHandler.CurrentTime;                  var textHeight = 30;                  var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height);                  GUI.DrawTexture(rect' commDelayedTexture);                  rect.y += commDelayedTexture.height;                  rect.x -= 10;                  rect.width += 20;                  rect.height = textHeight;                  GUI.Label(rect' string.Format("{1}\n{0:0.0} seconds"' delay'delayedActions[0].reason)' commDelayStyle);                  GUI.color = c;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,WidgetGui,The following statement contains a magic number: if (delayedActions.Count > 0) {                  var c = GUI.color;                  GUI.color = new Color(1'1'1' Mathf.PingPong(Time.realtimeSinceStartup * 0.9f' 0.2f)+0.4f);                  var delay = delayedActions[0].time - shared.UpdateHandler.CurrentTime;                  var textHeight = 30;                  var rect = new Rect((WindowRect.width-commDelayedTexture.width) / 2' (WindowRect.height-commDelayedTexture.height- textHeight) / 2' commDelayedTexture.width' commDelayedTexture.height);                  GUI.DrawTexture(rect' commDelayedTexture);                  rect.y += commDelayedTexture.height;                  rect.x -= 10;                  rect.width += 20;                  rect.height = textHeight;                  GUI.Label(rect' string.Format("{1}\n{0:0.0} seconds"' delay'delayedActions[0].reason)' commDelayStyle);                  GUI.color = c;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,CheckConnectivity,The following statement contains a magic number: if (!ConnectivityManager.HasConnectionToControl(shared.Vessel)) {                  GUI.color = noControlColor;                  GUI.enabled = false;              } else {                  var mdelay = ConnectivityManager.GetDelayToControl(shared.Vessel) + extraDelay;                  if (mdelay > 0.1)                      GUI.color = slowControlColor;              }
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,AttachTo,The following statement contains a magic number: WindowRect = new Rect((UnityEngine.Screen.width-width)/2' (UnityEngine.Screen.height-height)/2' width' height);
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,AttachTo,The following statement contains a magic number: WindowRect = new Rect((UnityEngine.Screen.width-width)/2' (UnityEngine.Screen.height-height)/2' width' height);
Magic Number,kOS.Screen,GUIWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\GUIWindow.cs,Communicate,The following statement contains a magic number: if (ConnectivityManager.HasConnectionToControl(shared.Vessel)) {                  var mdelay = ConnectivityManager.GetDelayToControl(shared.Vessel) + extraDelay;                  if (mdelay > 0.1 || extraDelay > 0) {                      var newat = new ActionTime(w' reason' a' shared.UpdateHandler.CurrentTime + mdelay);                      // Linear insert because almost always it will be added at the end                      // Only if FTL travel or if new pathways come online will it not.                      int index = delayedActions.Count;                      while (index-1 >= 0 && delayedActions[index - 1].time > newat.time)                          index--;                      delayedActions.Insert(index'newat);                  } else {                      a();                  }              }
Magic Number,kOS.Screen,ConnectivityInterpreter,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ConnectivityInterpreter.cs,CreateProgressBarSubBuffer,The following statement contains a magic number: progressBarSubBuffer.SetSize(3' ColumnCount);
Magic Number,kOS.Screen,ConnectivityInterpreter,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ConnectivityInterpreter.cs,StartDeployment,The following statement contains a magic number: progressBarSubBuffer.Enabled = (waitTotal > 0.5);
Magic Number,kOS.Screen,ConnectivityInterpreter,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ConnectivityInterpreter.cs,DrawProgressBar,The following statement contains a magic number: if (progressBarSubBuffer.Enabled)              {                  var bars = Math.Max((int)((ColumnCount) * elapsed / total)' 0);                  var time = new DateTime(TimeSpan.FromSeconds(total - elapsed + 0.5).Ticks).ToString("H:mm:ss");                  string statusText = deploymentMessage + new string(' '' ColumnCount - time.Length - deploymentMessage.Length) + time;                  var barsText = new string('|'' bars);                  DrawStatus(statusText);                  DrawBars(barsText);              }
Magic Number,kOS.Screen,ConnectivityInterpreter,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ConnectivityInterpreter.cs,DrawBars,The following statement contains a magic number: progressBarSubBuffer.Buffer[2].ArrayCopyFrom(bars.ToCharArray()' 0' 0);
Magic Number,kOS.Screen,DelegateDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\DelegateDialog.cs,OnGUI,The following statement contains a magic number: if (invoked)              {                  float guessWidth = GUI.skin.label.CalcSize( new GUIContent(message) ).x;                  GUILayout.Window( parent.GetUniqueId()+1' new Rect( parent.GetRect().xMin+200'                                                   parent.GetRect().yMin+10'                                                   guessWidth'                                                   0) ' DrawConfirm' "Confirm"' GUILayout.ExpandWidth(true) );              }
Magic Number,kOS.Screen,DelegateDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\DelegateDialog.cs,OnGUI,The following statement contains a magic number: if (invoked)              {                  float guessWidth = GUI.skin.label.CalcSize( new GUIContent(message) ).x;                  GUILayout.Window( parent.GetUniqueId()+1' new Rect( parent.GetRect().xMin+200'                                                   parent.GetRect().yMin+10'                                                   guessWidth'                                                   0) ' DrawConfirm' "Confirm"' GUILayout.ExpandWidth(true) );              }
Magic Number,kOS.Screen,KOSManagedWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSManagedWindow.cs,KOSManagedWindow,The following statement contains a magic number: uniqueId = termWindowIDRange + (windowsMadeSoFar * 50);
Magic Number,kOS.Screen,KOSNameTagWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSNameTagWindow.cs,Invoke,The following statement contains a magic number: const float WINDOW_WIDTH = 200;
Magic Number,kOS.Screen,KOSNameTagWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSNameTagWindow.cs,Invoke,The following statement contains a magic number: windowRect = new Rect(xPixelPoint' yPixelPoint' WINDOW_WIDTH' 130);
Magic Number,kOS.Screen,KOSNameTagWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSNameTagWindow.cs,OnGUI,The following statement contains a magic number: if (numberOfRepaints >= 2 && ! wasFocusedOnce)              {                  GUI.FocusControl("NameTagField");                  wasFocusedOnce = true;              }
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,KOSTextEditPopup,The following statement contains a magic number: UniqueId = 100;
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,Awake,The following statement contains a magic number: WindowRect = new Rect(0' 0' 470' 280);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,Awake,The following statement contains a magic number: WindowRect = new Rect(0' 0' 470' 280);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,GetConfigFontSize,The following statement contains a magic number: return (term != null ) ? term.GetFontSize() : 8;
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,AttachTo,The following statement contains a magic number: WindowRect = new Rect(0' 0' 470' 280);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,AttachTo,The following statement contains a magic number: WindowRect = new Rect(0' 0' 470' 280);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CheckResizeDrag,The following statement contains a magic number: if (Input.GetMouseButton(0))              {                  if (resizeMouseDown)                  {                      var mousePos = new Vector2(Event.current.mousePosition.x' Event.current.mousePosition.y);                      Vector2 dragDelta = mousePos - MouseButtonDownPosRelative;                      WindowRect = new Rect(WindowRect.xMin'                                              WindowRect.yMin'                                              Math.Max(resizeOldSize.x + dragDelta.x' 100)'                                              Math.Max(resizeOldSize.y + dragDelta.y' 30));                      CalcInnerCoords();                      Event.current.Use();                  }              }
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CheckResizeDrag,The following statement contains a magic number: if (Input.GetMouseButton(0))              {                  if (resizeMouseDown)                  {                      var mousePos = new Vector2(Event.current.mousePosition.x' Event.current.mousePosition.y);                      Vector2 dragDelta = mousePos - MouseButtonDownPosRelative;                      WindowRect = new Rect(WindowRect.xMin'                                              WindowRect.yMin'                                              Math.Max(resizeOldSize.x + dragDelta.x' 100)'                                              Math.Max(resizeOldSize.y + dragDelta.y' 30));                      CalcInnerCoords();                      Event.current.Use();                  }              }
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: innerCoords = new Rect(FRAME_THICKNESS'                                      FRAME_THICKNESS + 1.5f * fontHeight'                                      WindowRect.width - 2 * FRAME_THICKNESS'                                      WindowRect.height - 2 * FRAME_THICKNESS - 2 * fontHeight);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: innerCoords = new Rect(FRAME_THICKNESS'                                      FRAME_THICKNESS + 1.5f * fontHeight'                                      WindowRect.width - 2 * FRAME_THICKNESS'                                      WindowRect.height - 2 * FRAME_THICKNESS - 2 * fontHeight);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: innerCoords = new Rect(FRAME_THICKNESS'                                      FRAME_THICKNESS + 1.5f * fontHeight'                                      WindowRect.width - 2 * FRAME_THICKNESS'                                      WindowRect.height - 2 * FRAME_THICKNESS - 2 * fontHeight);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: exitSize = new Vector2(exitSize.x + 4' exitSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: exitSize = new Vector2(exitSize.x + 4' exitSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: saveSize = new Vector2(saveSize.x + 4' saveSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: saveSize = new Vector2(saveSize.x + 4' saveSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: reloadSize = new Vector2(reloadSize.x + 4' reloadSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: reloadSize = new Vector2(reloadSize.x + 4' reloadSize.y + 4);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: labelCoords = new Rect(5' 1' labSize.x' labSize.y);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: buttonXCounter -= (exitSize.x + 5);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: buttonXCounter -= (saveSize.x + 2);
Magic Number,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CalcInnerCoords,The following statement contains a magic number: buttonXCounter -= (reloadSize.x + 2);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,Open,The following statement contains a magic number: float launcherScreenX = launcherScreenCenteredPos.x + UnityEngine.Screen.width / 2;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,Open,The following statement contains a magic number: float launcherScreenY = launcherScreenCenteredPos.y + UnityEngine.Screen.height / 2;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The following statement contains a magic number: CountBeginVertical(""' 150);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The following statement contains a magic number: foreach (ConfigKey key in SafeHouse.Config.GetConfigKeys())              {                  bool isFontField = false;                  if (key.StringKey.Equals("TerminalFontName"))                      isFontField = true;                  bool isIPAddrField = false;                  if (key.StringKey.Equals("TelnetIPAddrString"))                      isIPAddrField = true;                    if (isFontField)                  {                      CountBeginVertical();                      GUILayout.Label("_____"' panelSkin.label);                  }                  else                      CountBeginHorizontal();                    string labelText = key.Alias;                  string toolTipText = key.Name;                    if (isFontField)                  {                      toolTipText += " is: " + key.Value;                      labelText = "     ^ " + labelText;                      DrawFontField(key);                  }                  else if (isIPAddrField)                  {                      toolTipText += " is: " + key.Value;                      DrawIPAddrField(key);                  }                  else if (key.Value is bool)                  {                      key.Value = GUILayout.Toggle((bool)key.Value' new GUIContent(""' toolTipText)' panelSkin.toggle);                  }                  else if (key.Value is int)                  {                      key.Value = DrawConfigIntField((int)(key.Value)' whichInt++);                  }                  else if (key.Value is float || key.Value is double) // if double' the UI will only handle it to float precisions' by the way.                  {                      CountBeginVertical();                      float floatValue = Convert.ToSingle(key.Value);                      float floatMin = Convert.ToSingle(key.MinValue);                      float floatMax = Convert.ToSingle(key.MaxValue);                      //Mathf doesn't have a Round to hundreths place' so this is how I'm faking it:                      GUILayout.Label(new GUIContent((Mathf.Round(floatValue*100f)/100f).ToString())' panelSkin.label);                      floatValue = GUILayout.HorizontalSlider(floatValue' floatMin' floatMax'                          GUILayout.MinWidth(50)' GUILayout.MaxHeight(4));                      if (key.Value is double)                          key.Value = (double)floatValue;                      else                          key.Value = floatValue;                      CountEndVertical();                  }                  else                  {                      GUILayout.Label(key.Alias + " is a new type this dialog doesn't support.  Contact kOS devs.");                  }                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(true));                  GUILayout.Label(new GUIContent(labelText' toolTipText)' panelSkin.label);                  GUILayout.EndHorizontal();                    if (isFontField || isIPAddrField)                      CountEndVertical();                  else                      CountEndHorizontal();              }
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawWindow,The following statement contains a magic number: foreach (ConfigKey key in SafeHouse.Config.GetConfigKeys())              {                  bool isFontField = false;                  if (key.StringKey.Equals("TerminalFontName"))                      isFontField = true;                  bool isIPAddrField = false;                  if (key.StringKey.Equals("TelnetIPAddrString"))                      isIPAddrField = true;                    if (isFontField)                  {                      CountBeginVertical();                      GUILayout.Label("_____"' panelSkin.label);                  }                  else                      CountBeginHorizontal();                    string labelText = key.Alias;                  string toolTipText = key.Name;                    if (isFontField)                  {                      toolTipText += " is: " + key.Value;                      labelText = "     ^ " + labelText;                      DrawFontField(key);                  }                  else if (isIPAddrField)                  {                      toolTipText += " is: " + key.Value;                      DrawIPAddrField(key);                  }                  else if (key.Value is bool)                  {                      key.Value = GUILayout.Toggle((bool)key.Value' new GUIContent(""' toolTipText)' panelSkin.toggle);                  }                  else if (key.Value is int)                  {                      key.Value = DrawConfigIntField((int)(key.Value)' whichInt++);                  }                  else if (key.Value is float || key.Value is double) // if double' the UI will only handle it to float precisions' by the way.                  {                      CountBeginVertical();                      float floatValue = Convert.ToSingle(key.Value);                      float floatMin = Convert.ToSingle(key.MinValue);                      float floatMax = Convert.ToSingle(key.MaxValue);                      //Mathf doesn't have a Round to hundreths place' so this is how I'm faking it:                      GUILayout.Label(new GUIContent((Mathf.Round(floatValue*100f)/100f).ToString())' panelSkin.label);                      floatValue = GUILayout.HorizontalSlider(floatValue' floatMin' floatMax'                          GUILayout.MinWidth(50)' GUILayout.MaxHeight(4));                      if (key.Value is double)                          key.Value = (double)floatValue;                      else                          key.Value = floatValue;                      CountEndVertical();                  }                  else                  {                      GUILayout.Label(key.Alias + " is a new type this dialog doesn't support.  Contact kOS devs.");                  }                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(true));                  GUILayout.Label(new GUIContent(labelText' toolTipText)' panelSkin.label);                  GUILayout.EndHorizontal();                    if (isFontField || isIPAddrField)                      CountEndVertical();                  else                      CountEndHorizontal();              }
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawFontField,The following statement contains a magic number: if (clicked)              {                  // Make a new picker if it's closed' or close it if it's already open.                  if (fontPicker == null)                  {                      fontPicker = this.gameObject.AddComponent<ListPickerDialog>();                      kOS.Screen.ListPickerDialog.ChangeAction onChange = delegate(String s)                          {                              // If the font is monospaced' we'll accept it' else we'll deny the attempt                              // and not commit the change to the config fields:                              bool ok = AssetManager.Instance.GetSystemFontByNameAndSize(s' 13' true) != null;                              if (ok)                                  key.Value = s;                              return ok;                          };                        kOS.Screen.ListPickerDialog.CloseAction onClose = delegate() { fontPicker = null; };                        fontPicker.Summon(windowRect.x' windowRect.y + windowRect.height' 300'                          key.Name' "(Only fonts detected as monospaced are shown.)"'                          key.Value.ToString()' AssetManager.Instance.GetSystemFontNames()' onChange' onClose                          );                  }                  else                  {                      fontPicker.Close();                      Destroy(fontPicker);                      fontPicker = null;                  }              }
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawFontField,The following statement contains a magic number: if (clicked)              {                  // Make a new picker if it's closed' or close it if it's already open.                  if (fontPicker == null)                  {                      fontPicker = this.gameObject.AddComponent<ListPickerDialog>();                      kOS.Screen.ListPickerDialog.ChangeAction onChange = delegate(String s)                          {                              // If the font is monospaced' we'll accept it' else we'll deny the attempt                              // and not commit the change to the config fields:                              bool ok = AssetManager.Instance.GetSystemFontByNameAndSize(s' 13' true) != null;                              if (ok)                                  key.Value = s;                              return ok;                          };                        kOS.Screen.ListPickerDialog.CloseAction onClose = delegate() { fontPicker = null; };                        fontPicker.Summon(windowRect.x' windowRect.y + windowRect.height' 300'                          key.Name' "(Only fonts detected as monospaced are shown.)"'                          key.Value.ToString()' AssetManager.Instance.GetSystemFontNames()' onChange' onClose                          );                  }                  else                  {                      fontPicker.Close();                      Destroy(fontPicker);                      fontPicker = null;                  }              }
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawIPAddrField,The following statement contains a magic number: if (clicked)              {                  // Make a new picker if it's closed' or close it if it's already open.                  if (ipAddrPicker == null)                  {                      ipAddrPicker = this.gameObject.AddComponent<ListPickerDialog>();                      kOS.Screen.ListPickerDialog.ChangeAction onChange = delegate(String s)                      {                          bool ok = TelnetMainServer.Instance.SetBindAddrFromString(s);                          if (ok)                              key.Value = s;                          return ok;                      };                        kOS.Screen.ListPickerDialog.CloseAction onClose = delegate() { ipAddrPicker = null; };                        ipAddrPicker.Summon(windowRect.x' windowRect.y + windowRect.height' 300'                          "Telnet address (restart telnet to take effect)\n"' null'                           "current: " + key.Value.ToString()' TelnetMainServer.GetAllAddresses()' onChange' onClose                      );                  }                  else                  {                      ipAddrPicker.Close();                      ipAddrPicker = null;                  }              }
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The following statement contains a magic number: fieldValue = GUILayout.TextField(fieldValue' 6' panelSkin.textField' GUILayout.MinWidth(60));
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The following statement contains a magic number: fieldValue = GUILayout.TextField(fieldValue' 6' panelSkin.textField' GUILayout.MinWidth(60));
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawConfigIntField,The following statement contains a magic number: int newInt = -99;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawActiveCPUsOnPanel,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos' panelSkin.scrollView' GUILayout.MinWidth(260)' GUILayout.Height(windowRect.height - 60));
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,DrawActiveCPUsOnPanel,The following statement contains a magic number: scrollPos = GUILayout.BeginScrollView(scrollPos' panelSkin.scrollView' GUILayout.MinWidth(260)' GUILayout.Height(windowRect.height - 60));
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.box.fontSize = 11;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.box.padding = new RectOffset(5' 3' 3' 5);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.box.padding = new RectOffset(5' 3' 3' 5);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.box.padding = new RectOffset(5' 3' 3' 5);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.box.padding = new RectOffset(5' 3' 3' 5);
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.label.fontSize = 11;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.textField.fontSize = 11;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.textArea.fontSize = 11;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.toggle.fontSize = 10;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.button.fontSize = 11;
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: headingLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 13'                  padding = new RectOffset(2' 2' 2' 2)              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: headingLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 13'                  padding = new RectOffset(2' 2' 2' 2)              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: headingLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 13'                  padding = new RectOffset(2' 2' 2' 2)              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: headingLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 13'                  padding = new RectOffset(2' 2' 2' 2)              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: headingLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 13'                  padding = new RectOffset(2' 2' 2' 2)              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: vesselNameStyle = new GUIStyle(theSkin.box)              {                  fontSize = 12'                  normal = { textColor = Color.white }              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: tooltipLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 11'                  padding = new RectOffset(0' 2' 0' 2)'                  normal = { textColor = Color.white }              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: tooltipLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 11'                  padding = new RectOffset(0' 2' 0' 2)'                  normal = { textColor = Color.white }              };
Magic Number,kOS.Screen,KOSToolbarWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSToolbarWindow.cs,BuildPanelSkin,The following statement contains a magic number: tooltipLabelStyle = new GUIStyle(theSkin.label)              {                  fontSize = 11'                  padding = new RectOffset(0' 2' 0' 2)'                  normal = { textColor = Color.white }              };
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TermWindow,The following statement contains a magic number: WindowRect = new Rect(50' 60' 0' 0);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TermWindow,The following statement contains a magic number: WindowRect = new Rect(50' 60' 0' 0);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Awake,The following statement contains a magic number: tinyToggleStyle = new GUIStyle(HighLogic.Skin.toggle)              {                  fontSize = 10              };
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Awake,The following statement contains a magic number: popupEditor.SetUniqueId(UniqueId + 5);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Create9SliceStyle,The following statement contains a magic number: style.border = new RectOffset(10' 10' 10' 10);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Create9SliceStyle,The following statement contains a magic number: style.border = new RectOffset(10' 10' 10' 10);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Create9SliceStyle,The following statement contains a magic number: style.border = new RectOffset(10' 10' 10' 10);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,Create9SliceStyle,The following statement contains a magic number: style.border = new RectOffset(10' 10' 10' 10);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TelnetOutputUpdate,The following statement contains a magic number: if (newTime > lastTelnetIncrementalRepaint + TimeSpan.FromMilliseconds(50)) // = 1/20th second.              {                  lastTelnetIncrementalRepaint = newTime;                  foreach (TelnetSingletonServer telnet in telnets)                  {                      RepaintTelnet(telnet' false); // try the incremental differ update.                  }                  telnetsGotRepainted = true;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ProcessOneInputChar,The following statement contains a magic number: if (! IsSpecial(ch))              {                   Type(ch' doQueuing);              }              else              {                  switch(ch)                  {                      // A few conversions from UnicodeCommand into those parts of ASCII that it                       // maps directly into nicely' otherwise just pass it through to SpecialKey():                        case (char)UnicodeCommand.DELETELEFT:                      case (char)8:                          Type((char)8' doQueuing);                          break;                      case (char)UnicodeCommand.STARTNEXTLINE:                      case '\r':                          Type('\r'' doQueuing);                          break;                      case '\t':                          Type('\t'' doQueuing);                          break;                      case (char)UnicodeCommand.RESIZESCREEN:                          inputExpected = ExpectNextChar.RESIZEWIDTH;                          break; // next expected char is the width.                                                // Finish session:  If GUI' then close window.  If Telnet' then detatch from the session:                                            case (char)0x0004/*control-D*/: // How users of unix shells are used to doing this.                      case (char)0x0018/*control-X*/: // How kOS did it in the past in the GUI window.                          if (shared.Interpreter.IsAtStartOfCommand())                          {                              if (whichTelnet == null)                                  Close();                              else                                  DetachTelnet(whichTelnet);                          }                          break;                                                // User asking for redraw (Unity already requires that we continually redraw the GUI Terminal' so this is only meaningful for telnet):                                            case (char)UnicodeCommand.REQUESTREPAINT:                          if (whichTelnet != null)                          {                              ResizeAndRepaintTelnet(whichTelnet' shared.Screen.ColumnCount' shared.Screen.RowCount' true);                          }                          break;                                                // Typical case is to just let SpecialKey do the work:                                            default:                          SpecialKey(ch' doQueuing);                          break;                  }              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,ProcessOneInputChar,The following statement contains a magic number: if (! IsSpecial(ch))              {                   Type(ch' doQueuing);              }              else              {                  switch(ch)                  {                      // A few conversions from UnicodeCommand into those parts of ASCII that it                       // maps directly into nicely' otherwise just pass it through to SpecialKey():                        case (char)UnicodeCommand.DELETELEFT:                      case (char)8:                          Type((char)8' doQueuing);                          break;                      case (char)UnicodeCommand.STARTNEXTLINE:                      case '\r':                          Type('\r'' doQueuing);                          break;                      case '\t':                          Type('\t'' doQueuing);                          break;                      case (char)UnicodeCommand.RESIZESCREEN:                          inputExpected = ExpectNextChar.RESIZEWIDTH;                          break; // next expected char is the width.                                                // Finish session:  If GUI' then close window.  If Telnet' then detatch from the session:                                            case (char)0x0004/*control-D*/: // How users of unix shells are used to doing this.                      case (char)0x0018/*control-X*/: // How kOS did it in the past in the GUI window.                          if (shared.Interpreter.IsAtStartOfCommand())                          {                              if (whichTelnet == null)                                  Close();                              else                                  DetachTelnet(whichTelnet);                          }                          break;                                                // User asking for redraw (Unity already requires that we continually redraw the GUI Terminal' so this is only meaningful for telnet):                                            case (char)UnicodeCommand.REQUESTREPAINT:                          if (whichTelnet != null)                          {                              ResizeAndRepaintTelnet(whichTelnet' shared.Screen.ColumnCount' shared.Screen.RowCount' true);                          }                          break;                                                // Typical case is to just let SpecialKey do the work:                                            default:                          SpecialKey(ch' doQueuing);                          break;                  }              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,GetNewestBuffer,The following statement contains a magic number: if (newTime > lastBufferGet + TimeSpan.FromMilliseconds(50)) // = 1/20th second.              {                  mostRecentScreen = new ScreenSnapShot(shared.Screen);                  lastBufferGet = newTime;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (!allTexturesFound)              {                  GUI.Label(new Rect(15' 15' 450' 300)' "Error: Some or all kOS textures were not found. Please " +                             "go to the following folder: \n\n<Your KSP Folder>\\GameData\\kOS\\GFX\\ \n\nand ensure that the png texture files are there.");                    closeButtonRect = new Rect(WindowRect.width - 75' WindowRect.height - 30' 50' 25);                  if (GUI.Button(closeButtonRect' "Close"))                  {                      Close();                      Event.current.Use();                  }                  return;              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalImageStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalImageStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalImageStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalImageStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: closeButtonRect = new Rect(WindowRect.width-75' WindowRect.height-30' 50' 25);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: closeButtonRect = new Rect(WindowRect.width-75' WindowRect.height-30' 50' 25);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: closeButtonRect = new Rect(WindowRect.width-75' WindowRect.height-30' 50' 25);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: closeButtonRect = new Rect(WindowRect.width-75' WindowRect.height-30' 50' 25);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect reverseButtonRect = new Rect(WindowRect.width-180' WindowRect.height-42' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect reverseButtonRect = new Rect(WindowRect.width-180' WindowRect.height-42' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect reverseButtonRect = new Rect(WindowRect.width-180' WindowRect.height-42' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect reverseButtonRect = new Rect(WindowRect.width-180' WindowRect.height-42' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect visualBeepButtonRect = new Rect(WindowRect.width-180' WindowRect.height-22' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect visualBeepButtonRect = new Rect(WindowRect.width-180' WindowRect.height-22' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect visualBeepButtonRect = new Rect(WindowRect.width-180' WindowRect.height-22' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect visualBeepButtonRect = new Rect(WindowRect.width-180' WindowRect.height-22' 100' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect keyClickButtonRect = new Rect(10' WindowRect.height - 22' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect keyClickButtonRect = new Rect(10' WindowRect.height - 22' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect keyClickButtonRect = new Rect(10' WindowRect.height - 22' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect keyClickButtonRect = new Rect(10' WindowRect.height - 22' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect rasterBarsButtonRect = new Rect(10' WindowRect.height - 42' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect rasterBarsButtonRect = new Rect(10' WindowRect.height - 42' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect rasterBarsButtonRect = new Rect(10' WindowRect.height - 42' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect rasterBarsButtonRect = new Rect(10' WindowRect.height - 42' 85' 18);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect brightnessRect = new Rect(3' WindowRect.height - 100' 8' 50);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect brightnessRect = new Rect(3' WindowRect.height - 100' 8' 50);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect brightnessRect = new Rect(3' WindowRect.height - 100' 8' 50);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect brightnessRect = new Rect(3' WindowRect.height - 100' 8' 50);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect brightnessButtonRect = new Rect(1' WindowRect.height - 48' brightnessButtonImage.width' brightnessButtonImage.height);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightButtonRect = new Rect(30' WindowRect.height-33' fontHeightButtonImage.width' fontHeightButtonImage.height);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightButtonRect = new Rect(30' WindowRect.height-33' fontHeightButtonImage.width' fontHeightButtonImage.height);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLabelRect = new Rect(45' WindowRect.height-33' 20' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLabelRect = new Rect(45' WindowRect.height-33' 20' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLabelRect = new Rect(45' WindowRect.height-33' 20' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLabelRect = new Rect(45' WindowRect.height-33' 20' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLessButtonRect = new Rect(75' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLessButtonRect = new Rect(75' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLessButtonRect = new Rect(75' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightLessButtonRect = new Rect(75' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightMoreButtonRect = new Rect(100' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightMoreButtonRect = new Rect(100' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightMoreButtonRect = new Rect(100' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: Rect fontHeightMoreButtonRect = new Rect(100' WindowRect.height-37' 12' 13);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (GUI.Button(fontHeightLessButtonRect' "-"' customSkin.button))                  postponedCharPixelHeight = Math.Max(4' charHeight - 2);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (GUI.Button(fontHeightLessButtonRect' "-"' customSkin.button))                  postponedCharPixelHeight = Math.Max(4' charHeight - 2);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (GUI.Button(fontHeightMoreButtonRect' "+"' customSkin.button))                  postponedCharPixelHeight = Math.Min(24' charHeight + 2);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (GUI.Button(fontHeightMoreButtonRect' "+"' customSkin.button))                  postponedCharPixelHeight = Math.Min(24' charHeight + 2);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (reversingScreen)              {   // In reverse screen mode' draw a big rectangle in foreground color across the whole active screen area:                  GUI.color = AdjustColor(textColor' screen.Brightness);                  GUI.DrawTexture(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' Texture2D.whiteTexture' ScaleMode.ScaleAndCrop );              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (reversingScreen)              {   // In reverse screen mode' draw a big rectangle in foreground color across the whole active screen area:                  GUI.color = AdjustColor(textColor' screen.Brightness);                  GUI.DrawTexture(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' Texture2D.whiteTexture' ScaleMode.ScaleAndCrop );              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (reversingScreen)              {   // In reverse screen mode' draw a big rectangle in foreground color across the whole active screen area:                  GUI.color = AdjustColor(textColor' screen.Brightness);                  GUI.DrawTexture(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' Texture2D.whiteTexture' ScaleMode.ScaleAndCrop );              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (reversingScreen)              {   // In reverse screen mode' draw a big rectangle in foreground color across the whole active screen area:                  GUI.color = AdjustColor(textColor' screen.Brightness);                  GUI.DrawTexture(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' Texture2D.whiteTexture' ScaleMode.ScaleAndCrop );              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.BeginGroup(new Rect(28' 38' screen.ColumnCount * charWidth + 2' screen.RowCount * charHeight + 2));
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.BeginGroup(new Rect(28' 38' screen.ColumnCount * charWidth + 2' screen.RowCount * charHeight + 2));
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.BeginGroup(new Rect(28' 38' screen.ColumnCount * charWidth + 2' screen.RowCount * charHeight + 2));
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.BeginGroup(new Rect(28' 38' screen.ColumnCount * charWidth + 2' screen.RowCount * charHeight + 2));
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (mostRecentScreen != null)              {                  List<IScreenBufferLine> buffer = mostRecentScreen.Buffer; // just to keep the name shorter below:                    // Sometimes the buffer is shorter than the terminal height if the resize JUST happened in the last Update():                  int rowsToPaint = Math.Min(screen.RowCount' buffer.Count);                    for (int row = 0; row < rowsToPaint; row++)                  {                      // At first the screen is filled with null chars.  So if you do something like                      // PRINT "AAA" AT (4'0) you can get a row of the screen like so "\0\0\0\0AAA".                      // When the font renderer prints null chars' they don't advance the cursor                      // even in a monospoaced font (so "\0\0\0\0AAA" looks just like "AAA" instead                      // of looking like "    AAA" when printed).  The reason for the "cooking" of                      // the string below is to fix this problem:                      string lineString = buffer[row].ToString().Replace( '\0'' ' ');                        GUI.Label(new Rect(0' (row * charHeight)' WindowRect.width - 10' charHeight)' lineString' terminalLetterSkin.label);                  }                    bool blinkOn = cursorBlinkTime < 0.5f &&                                 screen.CursorRowShow < screen.RowCount &&                                 IsPowered &&                                 ShowCursor;                    if (blinkOn)                  {                      char ch = buffer[screen.CursorRowShow][screen.CursorColumnShow];                      DrawCursorAt(ch' screen.CursorColumnShow' screen.CursorRowShow' reversingScreen'                                           charWidth' charHeight' screen.Brightness);                  }              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: if (isLocked)                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameActiveStyle);              else                  GUI.Label(new Rect(15' 20' WindowRect.width-30' WindowRect.height-55)' ""' terminalFrameStyle);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,TerminalGui,The following statement contains a magic number: GUI.Label(new Rect(WindowRect.width/2-40' WindowRect.height-12'100'10)' screen.ColumnCount+"x"+screen.RowCount' customSkin.label);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' WindowRect.height - 25' 25' 25)' networkZigZagImage);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' WindowRect.height - 25' 25' 25)' networkZigZagImage);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' WindowRect.height - 25' 25' 25)' networkZigZagImage);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.DrawTexture(new Rect(10' WindowRect.height - 25' 25' 25)' networkZigZagImage);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.Label(new Rect(40' WindowRect.height - 25' 160' 20)' message);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.Label(new Rect(40' WindowRect.height - 25' 160' 20)' message);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.Label(new Rect(40' WindowRect.height - 25' 160' 20)' message);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawTelnetStatus,The following statement contains a magic number: GUI.Label(new Rect(40' WindowRect.height - 25' 160' 20)' message);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,CheckResizeDrag,The following statement contains a magic number: if (Input.GetMouseButton(0) && !fontGotResized ) // mouse button is maybe dragging the frame              {                  if (resizeMouseDown) // and it's in the midst of a drag.                  {                      Vector2 dragDelta = MousePosAbsolute - MouseButtonDownPosAbsolute;                      WindowRect = new Rect(WindowRect.xMin'                                            WindowRect.yMin'                                            Math.Max(resizeOldSize.x + dragDelta.x' 200)'                                            Math.Max(resizeOldSize.y + dragDelta.y' 200));                  }              }              else // mouse button is up              {                  if (resizeMouseDown) // and it had been dragging a resize before.                  {                      resizeMouseDown = false;                      // Resize by integer character cells' not by actual x/y pixels:                      // Note I wanted to call this dynamically as it's resizing' but there's some weird issue                      // with the timing of it' where the windowRect is temporarily set to a bogus value during the                      // time it was trying to run this' and thus it created exception-throwing code unless it waits                      // until the drag is done before trying to calculate this.                      // The effect the user sees is that the text can float in space past the edge of the window (when                      // shrinking the size) until the resize drag is done' and then it redraws itself.                      shared.Screen.SetSize(HowManyRowsFit()' HowManyColumnsFit());                  }              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,CheckResizeDrag,The following statement contains a magic number: if (Input.GetMouseButton(0) && !fontGotResized ) // mouse button is maybe dragging the frame              {                  if (resizeMouseDown) // and it's in the midst of a drag.                  {                      Vector2 dragDelta = MousePosAbsolute - MouseButtonDownPosAbsolute;                      WindowRect = new Rect(WindowRect.xMin'                                            WindowRect.yMin'                                            Math.Max(resizeOldSize.x + dragDelta.x' 200)'                                            Math.Max(resizeOldSize.y + dragDelta.y' 200));                  }              }              else // mouse button is up              {                  if (resizeMouseDown) // and it had been dragging a resize before.                  {                      resizeMouseDown = false;                      // Resize by integer character cells' not by actual x/y pixels:                      // Note I wanted to call this dynamically as it's resizing' but there's some weird issue                      // with the timing of it' where the windowRect is temporarily set to a bogus value during the                      // time it was trying to run this' and thus it created exception-throwing code unless it waits                      // until the drag is done before trying to calculate this.                      // The effect the user sees is that the text can float in space past the edge of the window (when                      // shrinking the size) until the resize drag is done' and then it redraws itself.                      shared.Screen.SetSize(HowManyRowsFit()' HowManyColumnsFit());                  }              }
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,DrawCursorAt,The following statement contains a magic number: GUI.color = AdjustColor(reversingScreen ? currentTextColor : bgColor'                  2*brightness /*it seems to need slightly higher alpha values to show up atop the solid block*/ );
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,AttachTo,The following statement contains a magic number: shared.Screen.CharacterPixelWidth = 8;
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,NotifyOfScreenResize,The following statement contains a magic number: WindowRect = new Rect(WindowRect.xMin' WindowRect.yMin' sb.ColumnCount*sb.CharacterPixelWidth + 65' sb.RowCount*sb.CharacterPixelHeight + 100);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,NotifyOfScreenResize,The following statement contains a magic number: WindowRect = new Rect(WindowRect.xMin' WindowRect.yMin' sb.ColumnCount*sb.CharacterPixelWidth + 65' sb.RowCount*sb.CharacterPixelHeight + 100);
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,HowManyRowsFit,The following statement contains a magic number: return (int)(WindowRect.height - 100) / shared.Screen.CharacterPixelHeight;
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,HowManyColumnsFit,The following statement contains a magic number: return (int)(WindowRect.width - 65) / shared.Screen.CharacterPixelWidth;
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.label.fontSize = 10;
Magic Number,kOS.Screen,TermWindow,C:\repos\KSP-KOS_KOS\src\kOS\Screen\TermWindow.cs,BuildPanelSkin,The following statement contains a magic number: theSkin.button.fontSize = 10;
Magic Number,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,OnGUI,The following statement contains a magic number: outerWindowRect.x = Mathf.Min(outerWindowRect.x' UnityEngine.Screen.width - outerWindowRect.width - 60);
Magic Number,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,OnGUI,The following statement contains a magic number: outerWindowRect = GUILayout.Window(                  title.GetHashCode()'                  outerWindowRect'                  DrawInnards'                  title'                  HighLogic.Skin.window'                  GUILayout.MinWidth(minWidth + 50)'                  GUILayout.MinHeight(300)'                  GUILayout.MaxHeight(UnityEngine.Screen.height - outerWindowRect.y - 15)              );
Magic Number,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,OnGUI,The following statement contains a magic number: outerWindowRect = GUILayout.Window(                  title.GetHashCode()'                  outerWindowRect'                  DrawInnards'                  title'                  HighLogic.Skin.window'                  GUILayout.MinWidth(minWidth + 50)'                  GUILayout.MinHeight(300)'                  GUILayout.MaxHeight(UnityEngine.Screen.height - outerWindowRect.y - 15)              );
Magic Number,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,OnGUI,The following statement contains a magic number: outerWindowRect = GUILayout.Window(                  title.GetHashCode()'                  outerWindowRect'                  DrawInnards'                  title'                  HighLogic.Skin.window'                  GUILayout.MinWidth(minWidth + 50)'                  GUILayout.MinHeight(300)'                  GUILayout.MaxHeight(UnityEngine.Screen.height - outerWindowRect.y - 15)              );
Magic Number,kOS.Screen,ListPickerDialog,C:\repos\KSP-KOS_KOS\src\kOS\Screen\ListPickerDialog.cs,GUIScrollPick,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.MaxHeight(220));
Magic Number,kOS.Sound,NoiseSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoiseSoundWave.cs,InitSettings,The following statement contains a magic number: halfSamplePeriod = SampleRange/2;
Magic Number,kOS.Sound,NoiseSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoiseSoundWave.cs,SampleFunction,The following statement contains a magic number: return (float)(2*rand.NextDouble()-1);
Magic Number,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,LetterToHertz,The following statement contains a magic number: if (len < 2 || len > 3)                  return 0f;
Magic Number,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,LetterToHertz,The following statement contains a magic number: if (len < 2 || len > 3)                  return 0f;
Magic Number,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,LetterToHertz,The following statement contains a magic number: if (octave4Lookup.TryGetValue(octaveLessNote' out referenceHz))              {                  int octaveDiff = octave - 4;                  return (float)(referenceHz * Math.Pow(2.0' (double)octaveDiff));              }
Magic Number,kOS.Sound,NoteValue,C:\repos\KSP-KOS_KOS\src\kOS\Sound\NoteValue.cs,LetterToHertz,The following statement contains a magic number: if (octave4Lookup.TryGetValue(octaveLessNote' out referenceHz))              {                  int octaveDiff = octave - 4;                  return (float)(referenceHz * Math.Pow(2.0' (double)octaveDiff));              }
Magic Number,kOS.Sound,ProceduralSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\ProceduralSoundWave.cs,InitSettings,The following statement contains a magic number: Periods = 1000;
Magic Number,kOS.Sound,SawtoothSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\SawtoothSoundWave.cs,SampleFunction,The following statement contains a magic number: return 1 - 2*t;
Magic Number,kOS.Sound,SineSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\SineSoundWave.cs,InitSettings,The following statement contains a magic number: SampleRange = 2*Mathf.PI;
Magic Number,kOS.Sound,TriangleSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\TriangleSoundWave.cs,SampleFunction,The following statement contains a magic number: if (t < 0.5)                  return 1 - 2*t;              else                  return -1 + 2*(t-0.5f);
Magic Number,kOS.Sound,TriangleSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\TriangleSoundWave.cs,SampleFunction,The following statement contains a magic number: if (t < 0.5)                  return 1 - 2*t;              else                  return -1 + 2*(t-0.5f);
Magic Number,kOS.Sound,TriangleSoundWave,C:\repos\KSP-KOS_KOS\src\kOS\Sound\TriangleSoundWave.cs,SampleFunction,The following statement contains a magic number: if (t < 0.5)                  return 1 - 2*t;              else                  return -1 + 2*(t-0.5f);
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "H"' "HUE" }' new ClampSetSuffix<ScalarValue>(() => hue' value => { hue = value; ReconcileHsvToRgb(); }' 0' 255));
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "S"' "SATURATION" }' new ClampSetSuffix<ScalarValue>(() => saturation' value => { saturation = value; ReconcileHsvToRgb(); }' 0' 255));
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "V"' "VALUE" }' new ClampSetSuffix<ScalarValue>(() => hsvValue' value => { hsvValue = value; ReconcileHsvToRgb(); }' 0' 255));
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileRgbToHsv,The following statement contains a magic number: if (s == 0)                  h = 0.0f;              else              {                  if (Red == v)                      h = (Green - Blue) / delta;                  else if (Green == v)                      h = 2 + (Blue - Red) / delta;                  else if (Blue == v)                      h = 4 + (Red - Green) / delta;                    h *= 60;                  if (h < 0.0)                      h = h + 360;              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileRgbToHsv,The following statement contains a magic number: if (s == 0)                  h = 0.0f;              else              {                  if (Red == v)                      h = (Green - Blue) / delta;                  else if (Green == v)                      h = 2 + (Blue - Red) / delta;                  else if (Blue == v)                      h = 4 + (Red - Green) / delta;                    h *= 60;                  if (h < 0.0)                      h = h + 360;              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileRgbToHsv,The following statement contains a magic number: if (s == 0)                  h = 0.0f;              else              {                  if (Red == v)                      h = (Green - Blue) / delta;                  else if (Green == v)                      h = 2 + (Blue - Red) / delta;                  else if (Blue == v)                      h = 4 + (Red - Green) / delta;                    h *= 60;                  if (h < 0.0)                      h = h + 360;              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileRgbToHsv,The following statement contains a magic number: if (s == 0)                  h = 0.0f;              else              {                  if (Red == v)                      h = (Green - Blue) / delta;                  else if (Green == v)                      h = 2 + (Blue - Red) / delta;                  else if (Blue == v)                      h = 4 + (Red - Green) / delta;                    h *= 60;                  if (h < 0.0)                      h = h + 360;              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileRgbToHsv,The following statement contains a magic number: hsvValue = (float)v / 255;
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileHsvToRgb,The following statement contains a magic number: if (saturation == 0)              {                  r = hsvValue;                  g = hsvValue;                  b = hsvValue;              }              else              {                  if (hue == 360)                      hue = 0;                  else                      hue = hue / 60;                    var i = (int)(hue);                  double f = hue - i;                    double p = hsvValue * (1.0 - saturation);                  double q = hsvValue * (1.0 - (saturation * f));                  double t = hsvValue * (1.0 - (saturation * (1.0f - f)));                    switch (i)                  {                      case 0:                          r = hsvValue;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = hsvValue;                          b = p;                          break;                        case 2:                          r = p;                          g = hsvValue;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = hsvValue;                          break;                        case 4:                          r = t;                          g = p;                          b = hsvValue;                          break;                        default:                          r = hsvValue;                          g = p;                          b = q;                          break;                  }              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileHsvToRgb,The following statement contains a magic number: if (saturation == 0)              {                  r = hsvValue;                  g = hsvValue;                  b = hsvValue;              }              else              {                  if (hue == 360)                      hue = 0;                  else                      hue = hue / 60;                    var i = (int)(hue);                  double f = hue - i;                    double p = hsvValue * (1.0 - saturation);                  double q = hsvValue * (1.0 - (saturation * f));                  double t = hsvValue * (1.0 - (saturation * (1.0f - f)));                    switch (i)                  {                      case 0:                          r = hsvValue;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = hsvValue;                          b = p;                          break;                        case 2:                          r = p;                          g = hsvValue;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = hsvValue;                          break;                        case 4:                          r = t;                          g = p;                          b = hsvValue;                          break;                        default:                          r = hsvValue;                          g = p;                          b = q;                          break;                  }              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileHsvToRgb,The following statement contains a magic number: if (saturation == 0)              {                  r = hsvValue;                  g = hsvValue;                  b = hsvValue;              }              else              {                  if (hue == 360)                      hue = 0;                  else                      hue = hue / 60;                    var i = (int)(hue);                  double f = hue - i;                    double p = hsvValue * (1.0 - saturation);                  double q = hsvValue * (1.0 - (saturation * f));                  double t = hsvValue * (1.0 - (saturation * (1.0f - f)));                    switch (i)                  {                      case 0:                          r = hsvValue;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = hsvValue;                          b = p;                          break;                        case 2:                          r = p;                          g = hsvValue;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = hsvValue;                          break;                        case 4:                          r = t;                          g = p;                          b = hsvValue;                          break;                        default:                          r = hsvValue;                          g = p;                          b = q;                          break;                  }              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileHsvToRgb,The following statement contains a magic number: if (saturation == 0)              {                  r = hsvValue;                  g = hsvValue;                  b = hsvValue;              }              else              {                  if (hue == 360)                      hue = 0;                  else                      hue = hue / 60;                    var i = (int)(hue);                  double f = hue - i;                    double p = hsvValue * (1.0 - saturation);                  double q = hsvValue * (1.0 - (saturation * f));                  double t = hsvValue * (1.0 - (saturation * (1.0f - f)));                    switch (i)                  {                      case 0:                          r = hsvValue;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = hsvValue;                          b = p;                          break;                        case 2:                          r = p;                          g = hsvValue;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = hsvValue;                          break;                        case 4:                          r = t;                          g = p;                          b = hsvValue;                          break;                        default:                          r = hsvValue;                          g = p;                          b = q;                          break;                  }              }
Magic Number,kOS.Suffixed,HsvColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\HsvColor.cs,ReconcileHsvToRgb,The following statement contains a magic number: if (saturation == 0)              {                  r = hsvValue;                  g = hsvValue;                  b = hsvValue;              }              else              {                  if (hue == 360)                      hue = 0;                  else                      hue = hue / 60;                    var i = (int)(hue);                  double f = hue - i;                    double p = hsvValue * (1.0 - saturation);                  double q = hsvValue * (1.0 - (saturation * f));                  double t = hsvValue * (1.0 - (saturation * (1.0f - f)));                    switch (i)                  {                      case 0:                          r = hsvValue;                          g = t;                          b = p;                          break;                        case 1:                          r = q;                          g = hsvValue;                          b = p;                          break;                        case 2:                          r = p;                          g = hsvValue;                          b = t;                          break;                        case 3:                          r = p;                          g = q;                          b = hsvValue;                          break;                        case 4:                          r = t;                          g = p;                          b = hsvValue;                          break;                        default:                          r = hsvValue;                          g = p;                          b = q;                          break;                  }              }
Magic Number,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,QuickSaveTo,The following statement contains a magic number: if (name.EndsWith(".sfs"))              {                  name = name.Substring(0' name.Length - 4);              }
Magic Number,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LoadGame,The following statement contains a magic number: if (name.EndsWith(".sfs"))              {                  name = name.Substring(0' name.Length - 4);              }
Magic Number,kOS.Suffixed,KUniverseValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\KUniverseValue.cs,LoadGame,The following statement contains a magic number: if (HighLogic.CurrentGame.Parameters.Flight.CanQuickLoad)              {                  string filename = name + ".sfs";                  string path = KSPUtil.GetOrCreatePath("saves/" + HighLogic.SaveFolder);                  if (!File.Exists(Path.Combine(path' filename)))                  {                      throw new KOSException("Error loading the quicksave file' the save file does not exist.");                  }                  shared.Cpu.GetCurrentOpcode().AbortProgram = true;                  try                  {                      SaveGame("kos-backup-quicksave");                      var game = GamePersistence.LoadGame(name' HighLogic.SaveFolder' true' false);                      if (game.flightState != null)                      {                          if (game.compatible)                          {                              GamePersistence.UpdateScenarioModules(game);                              if (game.startScene != GameScenes.FLIGHT)                              {                                  if (KSPUtil.CheckVersion(game.file_version_major' game.file_version_minor' game.file_version_revision' 0' 24' 0) != VersionCompareResult.INCOMPATIBLE_TOO_EARLY)                                  {                                      GamePersistence.SaveGame(game' name' HighLogic.SaveFolder' SaveMode.OVERWRITE);                                      HighLogic.LoadScene(GameScenes.SPACECENTER);                                      return;                                  }                              }                              FlightDriver.StartAndFocusVessel(game' game.flightState.activeVesselIdx);                          }                      }                  }                  catch (Exception ex)                  {                      SafeHouse.Logger.Log(ex.Message);                      throw new KOSException("Error loading the quicksave file");                  }              }              else throw new KOSException("KSP prevents using quickload currently.");
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,PutResources,The following statement contains a magic number: while (remaining > 0.0001)              {                  if (retries > 10)                  {                      MarkFailed("Error in putting resource with " + remaining + " remaining.");                      break;                  }                  foreach (var part in parts)                  {                      var resource = part.Resources.Get(resourceInfo.id);                      if (resource == null) continue;                        var transferAmount = Math.Min(remaining' evenShare);                        remaining += part.TransferResource(resource.info.id' transferAmount);                  }                  retries++;              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,PutResources,The following statement contains a magic number: while (remaining > 0.0001)              {                  if (retries > 10)                  {                      MarkFailed("Error in putting resource with " + remaining + " remaining.");                      break;                  }                  foreach (var part in parts)                  {                      var resource = part.Resources.Get(resourceInfo.id);                      if (resource == null) continue;                        var transferAmount = Math.Min(remaining' evenShare);                        remaining += part.TransferResource(resource.info.id' transferAmount);                  }                  retries++;              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,PullResources,The following statement contains a magic number: foreach (var part in parts)              {                  var resource = part.Resources.Get(resourceInfo.id);                  if (resource == null) continue;                    var thisPartsPercentage = resource.amount/availableResources;                    // Throttle the transfer                  var thisPartsShare = transferGoal*thisPartsPercentage;                  var thisPartsRate = resource.maxAmount*RESOURCE_SHARE_PER_UPDATE*deltaTime/0.02;                                    // The amount you pull must be negative                   thisPartsShare = -Math.Min(thisPartsShare' thisPartsRate);                  // the amount is subject to floating point lameness' if we round it here it is not material to the request but should make the numbers work out nicer.                  thisPartsShare = Math.Round(thisPartsShare' 5);                    toReturn += part.TransferResource(resourceInfo.id' thisPartsShare);              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,PullResources,The following statement contains a magic number: foreach (var part in parts)              {                  var resource = part.Resources.Get(resourceInfo.id);                  if (resource == null) continue;                    var thisPartsPercentage = resource.amount/availableResources;                    // Throttle the transfer                  var thisPartsShare = transferGoal*thisPartsPercentage;                  var thisPartsRate = resource.maxAmount*RESOURCE_SHARE_PER_UPDATE*deltaTime/0.02;                                    // The amount you pull must be negative                   thisPartsShare = -Math.Min(thisPartsShare' thisPartsRate);                  // the amount is subject to floating point lameness' if we round it here it is not material to the request but should make the numbers work out nicer.                  thisPartsShare = Math.Round(thisPartsShare' 5);                    toReturn += part.TransferResource(resourceInfo.id' thisPartsShare);              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,CanTransfer,The following statement contains a magic number: if (amount.HasValue)              {                  if (Math.Abs(amount.Value - transferredAmount) < 0.00001)                  {                      MarkFinished();                                     return false;                  }              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,SourceReady,The following statement contains a magic number: if (Math.Abs(sourceAvailable) < 0.0001)              {                  // Nothing to transfer                  if (!amount.HasValue)                  {                      MarkFinished();                  }                  else                  {                      MarkFailed("Source is out of " + resourceInfo.name);                  }                  return false;              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,DestinationReady,The following statement contains a magic number: if (Math.Abs(destinationAvailableCapacity) < 0.0001)              {                  // No room at the inn                  if (!amount.HasValue)                  {                      MarkFinished();                  }                  else                  {                      MarkFailed("Destination is out of space");                  }                  return false;              }
Magic Number,kOS.Suffixed,ResourceTransferValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\ResourceTransferValue.cs,MarkFinished,The following statement contains a magic number: transferredAmount = Math.Round(transferredAmount' 5);
Magic Number,kOS.Suffixed,Orbitable,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Orbitable.cs,PositionToLatitude,The following statement contains a magic number: return Utils.DegreeFix(parent.GetLatitude(unityWorldPos)'-180);
Magic Number,kOS.Suffixed,Orbitable,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Orbitable.cs,PositionToLongitude,The following statement contains a magic number: return Utils.DegreeFix( parent.GetLongitude(unityWorldPos)' -180.0 );
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,RgbaColor,The following statement contains a magic number: Red = KOSMath.Clamp(red' 0' 255);
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,RgbaColor,The following statement contains a magic number: Green = KOSMath.Clamp(green' 0' 255);
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,RgbaColor,The following statement contains a magic number: Blue = KOSMath.Clamp(blue' 0' 255);
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,RgbaColor,The following statement contains a magic number: Alpha = KOSMath.Clamp(alpha' 0' 255);
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "R"' "RED" }' new ClampSetSuffix<ScalarValue>(() => Red' value => { Red = value; Recalculate(); }' 0' 255));
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "G"' "GREEN" }' new ClampSetSuffix<ScalarValue>(() => Green' value => { Green = value; Recalculate(); }' 0' 255));
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,InitializeSuffixColor,The following statement contains a magic number: AddSuffix(new[] { "B"' "BLUE" }' new ClampSetSuffix<ScalarValue>(() => Blue' value => { Blue = value; Recalculate(); }' 0' 255));
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,ToHexNotation,The following statement contains a magic number: var redByte = (byte)Mathf.Min(255' (int)(Red * 255f));
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,ToHexNotation,The following statement contains a magic number: var greenByte = (byte)Mathf.Min(255' (int)(Green * 255f));
Magic Number,kOS.Suffixed,RgbaColor,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\RgbaColor.cs,ToHexNotation,The following statement contains a magic number: var blueByte = (byte)Mathf.Min(255' (int)(Blue * 255f));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TelnetPort' new ConfigKey("TelnetPort"' "TPORT"' "Telnet port number (must restart telnet to take effect)"' 5410' 1024' 65535' typeof(int)));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TelnetPort' new ConfigKey("TelnetPort"' "TPORT"' "Telnet port number (must restart telnet to take effect)"' 5410' 1024' 65535' typeof(int)));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TelnetPort' new ConfigKey("TelnetPort"' "TPORT"' "Telnet port number (must restart telnet to take effect)"' 5410' 1024' 65535' typeof(int)));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TerminalFontDefaultSize' new ConfigKey("TerminalFontDefaultSize"' "DEFAULTFONTSIZE"' "Initial Terminal:CHARHEIGHT when a terminal is first opened"' 12' 6' 20' typeof(int)));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TerminalFontDefaultSize' new ConfigKey("TerminalFontDefaultSize"' "DEFAULTFONTSIZE"' "Initial Terminal:CHARHEIGHT when a terminal is first opened"' 12' 6' 20' typeof(int)));
Magic Number,kOS.Suffixed,Config,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Config.cs,BuildValuesDictionary,The following statement contains a magic number: AddConfigKey(PropId.TerminalFontDefaultSize' new ConfigKey("TerminalFontDefaultSize"' "DEFAULTFONTSIZE"' "Initial Terminal:CHARHEIGHT when a terminal is first opened"' 12' 6' 20' typeof(int)));
Magic Number,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GetTerrainAltitude,The following statement contains a magic number: if (bodyPQS != null) // The sun has no terrain.  Everything else has a PQScontroller.              {                  // The PQS controller gives the theoretical ideal smooth surface curve terrain.                  // The actual ground that exists in-game that you land on' however' is the terrain                  // polygon mesh which is built dynamically from the PQS controller's altitude values'                  // and it only approximates the PQS controller.  The discrepancy between the two                  // can be as high as 20 meters on relatively mild rolling terrain and is probably worse                  // in mountainous terrain with steeper slopes.  It also varies with the user terrain detail                  // graphics setting.                    // Therefore the algorithm here is this:  Get the PQS ideal terrain altitude first.                  // Then try using RayCast to get the actual terrain altitude' which will only work                  // if the LAT/LONG is near the active vessel so the relevant terrain polygons are                  // loaded.  If the RayCast hit works' it overrides the PQS altitude.                                                    // PQS controller ideal altitude value:                  // -------------------------------------                    // The vector the pqs GetSurfaceHeight method expects is a vector in the following                  // reference frame:                  //     Origin = body center.                  //     X axis = LATLNG(0'0)' Y axis = LATLNG(90'0)(north pole)' Z axis = LATLNG(0'-90).                  // Using that reference frame' you tell GetSurfaceHeight what the "up" vector is pointing through                  // the spot on the surface you're querying for.                  var bodyUpVector = new Vector3d(1'0'0);                  bodyUpVector = QuaternionD.AngleAxis(Latitude' Vector3d.forward/*around Z axis*/) * bodyUpVector;                  bodyUpVector = QuaternionD.AngleAxis(Longitude' Vector3d.down/*around -Y axis*/) * bodyUpVector;                    alt = bodyPQS.GetSurfaceHeight( bodyUpVector ) - bodyPQS.radius ;                    // Terrain polygon raycasting:                  // ---------------------------                  const double HIGH_AGL = 1000.0;                  const double POINT_AGL = 800.0;                  // a point hopefully above the terrain:                  Vector3d worldRayCastStart = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+HIGH_AGL );                  // a point a bit below it' to aim down to the terrain:                  Vector3d worldRayCastStop = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+POINT_AGL );                  RaycastHit hit;                  if (Physics.Raycast(worldRayCastStart' (worldRayCastStop - worldRayCastStart)' out hit' float.MaxValue' 1<<TERRAIN_MASK_BIT ))                  {                      // Ensure hit is on the topside of planet' near the worldRayCastStart' not on the far side.                      if (Mathf.Abs(hit.distance) < 3000)                      {                          // Okay a hit was found' use it instead of PQS alt:                          alt = ((alt+HIGH_AGL) - hit.distance);                      }                  }              }
Magic Number,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GetTerrainAltitude,The following statement contains a magic number: if (bodyPQS != null) // The sun has no terrain.  Everything else has a PQScontroller.              {                  // The PQS controller gives the theoretical ideal smooth surface curve terrain.                  // The actual ground that exists in-game that you land on' however' is the terrain                  // polygon mesh which is built dynamically from the PQS controller's altitude values'                  // and it only approximates the PQS controller.  The discrepancy between the two                  // can be as high as 20 meters on relatively mild rolling terrain and is probably worse                  // in mountainous terrain with steeper slopes.  It also varies with the user terrain detail                  // graphics setting.                    // Therefore the algorithm here is this:  Get the PQS ideal terrain altitude first.                  // Then try using RayCast to get the actual terrain altitude' which will only work                  // if the LAT/LONG is near the active vessel so the relevant terrain polygons are                  // loaded.  If the RayCast hit works' it overrides the PQS altitude.                                                    // PQS controller ideal altitude value:                  // -------------------------------------                    // The vector the pqs GetSurfaceHeight method expects is a vector in the following                  // reference frame:                  //     Origin = body center.                  //     X axis = LATLNG(0'0)' Y axis = LATLNG(90'0)(north pole)' Z axis = LATLNG(0'-90).                  // Using that reference frame' you tell GetSurfaceHeight what the "up" vector is pointing through                  // the spot on the surface you're querying for.                  var bodyUpVector = new Vector3d(1'0'0);                  bodyUpVector = QuaternionD.AngleAxis(Latitude' Vector3d.forward/*around Z axis*/) * bodyUpVector;                  bodyUpVector = QuaternionD.AngleAxis(Longitude' Vector3d.down/*around -Y axis*/) * bodyUpVector;                    alt = bodyPQS.GetSurfaceHeight( bodyUpVector ) - bodyPQS.radius ;                    // Terrain polygon raycasting:                  // ---------------------------                  const double HIGH_AGL = 1000.0;                  const double POINT_AGL = 800.0;                  // a point hopefully above the terrain:                  Vector3d worldRayCastStart = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+HIGH_AGL );                  // a point a bit below it' to aim down to the terrain:                  Vector3d worldRayCastStop = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+POINT_AGL );                  RaycastHit hit;                  if (Physics.Raycast(worldRayCastStart' (worldRayCastStop - worldRayCastStart)' out hit' float.MaxValue' 1<<TERRAIN_MASK_BIT ))                  {                      // Ensure hit is on the topside of planet' near the worldRayCastStart' not on the far side.                      if (Mathf.Abs(hit.distance) < 3000)                      {                          // Okay a hit was found' use it instead of PQS alt:                          alt = ((alt+HIGH_AGL) - hit.distance);                      }                  }              }
Magic Number,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GetTerrainAltitude,The following statement contains a magic number: if (bodyPQS != null) // The sun has no terrain.  Everything else has a PQScontroller.              {                  // The PQS controller gives the theoretical ideal smooth surface curve terrain.                  // The actual ground that exists in-game that you land on' however' is the terrain                  // polygon mesh which is built dynamically from the PQS controller's altitude values'                  // and it only approximates the PQS controller.  The discrepancy between the two                  // can be as high as 20 meters on relatively mild rolling terrain and is probably worse                  // in mountainous terrain with steeper slopes.  It also varies with the user terrain detail                  // graphics setting.                    // Therefore the algorithm here is this:  Get the PQS ideal terrain altitude first.                  // Then try using RayCast to get the actual terrain altitude' which will only work                  // if the LAT/LONG is near the active vessel so the relevant terrain polygons are                  // loaded.  If the RayCast hit works' it overrides the PQS altitude.                                                    // PQS controller ideal altitude value:                  // -------------------------------------                    // The vector the pqs GetSurfaceHeight method expects is a vector in the following                  // reference frame:                  //     Origin = body center.                  //     X axis = LATLNG(0'0)' Y axis = LATLNG(90'0)(north pole)' Z axis = LATLNG(0'-90).                  // Using that reference frame' you tell GetSurfaceHeight what the "up" vector is pointing through                  // the spot on the surface you're querying for.                  var bodyUpVector = new Vector3d(1'0'0);                  bodyUpVector = QuaternionD.AngleAxis(Latitude' Vector3d.forward/*around Z axis*/) * bodyUpVector;                  bodyUpVector = QuaternionD.AngleAxis(Longitude' Vector3d.down/*around -Y axis*/) * bodyUpVector;                    alt = bodyPQS.GetSurfaceHeight( bodyUpVector ) - bodyPQS.radius ;                    // Terrain polygon raycasting:                  // ---------------------------                  const double HIGH_AGL = 1000.0;                  const double POINT_AGL = 800.0;                  // a point hopefully above the terrain:                  Vector3d worldRayCastStart = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+HIGH_AGL );                  // a point a bit below it' to aim down to the terrain:                  Vector3d worldRayCastStop = Body.GetWorldSurfacePosition( Latitude' Longitude' alt+POINT_AGL );                  RaycastHit hit;                  if (Physics.Raycast(worldRayCastStart' (worldRayCastStop - worldRayCastStart)' out hit' float.MaxValue' 1<<TERRAIN_MASK_BIT ))                  {                      // Ensure hit is on the topside of planet' near the worldRayCastStart' not on the far side.                      if (Mathf.Abs(hit.distance) < 3000)                      {                          // Okay a hit was found' use it instead of PQS alt:                          alt = ((alt+HIGH_AGL) - hit.distance);                      }                  }              }
Magic Number,kOS.Suffixed,GeoCoordinates,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\GeoCoordinates.cs,GetHeadingFrom,The following statement contains a magic number: var headingQ =                  Quaternion.Inverse(Quaternion.Euler(90' 0' 0)*Quaternion.Inverse(Quaternion.LookRotation(vector' up))*                                     Quaternion.LookRotation(north' up));
Magic Number,kOS.Suffixed,StageValues,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\StageValues.cs,CreatePartSet,The following statement contains a magic number: int vstgComp = shared.Vessel.currentStage - 2;
Magic Number,kOS.Suffixed,TimeWarpValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\TimeWarpValue.cs,IsWarpSettled,The following statement contains a magic number: if (Mathf.Abs(expectedRate - TimeWarp.CurrentRate) < 0.05)                  return true;              else                  return false;
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderPointCoords,The following statement contains a magic number: if (line != null && hat != null)              {                  double mapLengthMult = 1.0; // for scaling when on map view.                  double mapWidthMult = 1.0; // for scaling when on map view.                  float useWidth;                    if (isOnMap)                  {                      mapLengthMult = ScaledSpace.InverseScaleFactor;                      mapWidthMult = Math.Max(camLookVec.magnitude' 100.0f) / 100.0f;                  }                    Vector3d point1 = mapLengthMult * Start;                  Vector3d point2 = mapLengthMult * (Start + (Scale * 0.95 * Vector));                  Vector3d point3 = mapLengthMult * (Start + (Scale * Vector));                    label.fontSize = (int)(12.0 * (Width / 0.2) * Scale);                    useWidth = (float)(Width * Scale * mapWidthMult);                    // Position the arrow line:                  line.SetVertexCount(2);                  line.SetWidth(useWidth' useWidth);                  line.SetPosition(0' point1);                  line.SetPosition(1' point2);                    // Position the arrow hat:                  hat.SetVertexCount(2);                  hat.SetWidth(useWidth * 3.5f' 0.0F);                  hat.SetPosition(0' point2);                  hat.SetPosition(1' point3);                    // Put the label at the midpoint of the arrow:                  labelLocation = (point1 + point3) / 2;                    PutAtShipRelativeCoords();              }
Magic Number,kOS.Suffixed,VectorRenderer,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VectorRenderer.cs,RenderColor,The following statement contains a magic number: c1.a = c1.a * (float)0.25;
Magic Number,kOS.Suffixed,WaypointValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\WaypointValue.cs,InitializeGreekMap,The following statement contains a magic number: for (int i = 0 ; i < 20 ; ++i)                  greekMap.Add(FinePrint.Utilities.StringUtilities.IntegerToGreek(i).ToLower()' i);
Magic Number,kOS.Suffixed,Vector,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Vector.cs,GetHashCode,The following statement contains a magic number: return ~23;
Magic Number,kOS.Suffixed,Direction,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS.Suffixed,Direction,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS.Suffixed,Direction,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Direction.cs,ToString,The following statement contains a magic number: return "R(" + Math.Round(euler.x' 3) + "'" + Math.Round(euler.y' 3) + "'" + Math.Round(euler.z' 3) + ")";
Magic Number,kOS.Suffixed.Part,EngineValue,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Part\EngineValue.cs,EngineValue,The following statement contains a magic number: if (moduleEngines.Count == 2)              {                  var modEngine1 = moduleEngines.Where(e => e.engineID == MMengine.primaryEngineID).FirstOrDefault();                  if (modEngine1 != null)                      engine1 = new ModuleEngineAdapter(modEngine1);                  else                      throw new KOSException("Attempted to build a MultiModeEngine with no engine matching Primary ID");                  var modEngine2 = moduleEngines.Where(e => e.engineID == MMengine.secondaryEngineID).FirstOrDefault();                  if (modEngine2 != null)                      engine2 = new ModuleEngineAdapter(modEngine2);                  else                      throw new KOSException("Attempted to build a MultiModeEngine with no engine matching Secondary ID");              }              else              {                  throw new KOSException(string.Format("Attempted to build a MultiModeEngine with {0} engine modules defined instead of 2"' moduleEngines.Count));              }
Magic Number,kOS.Suffixed.Widget,Label,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Label.cs,ToString,The following statement contains a magic number: return "LABEL(" + content.text.Ellipsis(10) + ")";
Magic Number,kOS.Suffixed.Widget,TextField,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\TextField.cs,ToString,The following statement contains a magic number: return "TEXTFIELD(" + StoredText().Ellipsis(10) + ")";
Magic Number,kOS.Suffixed.Widget,Button,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\Button.cs,ToString,The following statement contains a magic number: return "BUTTON(" + VisibleText().Ellipsis(10) + ")";
Magic Number,kOS.Suffixed.Widget,PopupMenu,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\PopupMenu.cs,ToString,The following statement contains a magic number: return "POPUP(" + StoredText().Ellipsis(10) + ")";
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.overflow = new RectOffset(8' -45' 10' -1);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.overflow = new RectOffset(8' -45' 10' -1);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.overflow = new RectOffset(8' -45' 10' -1);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.padding = new RectOffset(27' 0' 3' 0);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.padding = new RectOffset(27' 0' 3' 0);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.margin = new RectOffset(4' 4' 4' 4);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.margin = new RectOffset(4' 4' 4' 4);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.margin = new RectOffset(4' 4' 4' 4);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.margin = new RectOffset(4' 4' 4' 4);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.border = new RectOffset(40' 0' 40' 0);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.toggle.border = new RectOffset(40' 0' 40' 0);
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.horizontalSlider.margin.top = 8;
Magic Number,kOS.Suffixed.Widget,GUIWidgets,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\Widget\GUIWidgets.cs,GUIWidgets,The following statement contains a magic number: gskin.horizontalSlider.margin.bottom = 8;
Magic Number,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,OnGUI,The following statement contains a magic number: if (activeOptInDialog)                  optInRect = GUILayout.Window(401123' // any made up number unlikely to clash is okay here                                               optInRect' OptInOnGui' "kOS Telnet Opt-In Permisssion");
Magic Number,kOS.UserIO,TelnetMainServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetMainServer.cs,OnGUI,The following statement contains a magic number: if (activeRealIPDialog)                  realIPRect = GUILayout.Window(401124' // any made up number unlikely to clash is okay here                                                realIPRect' RealIPOnGui' "kOS Telnet Non-Loopback Permisssion");
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetSingletonServer,The following statement contains a magic number: ClientWidth = 80;
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetSingletonServer,The following statement contains a magic number: ClientHeight = 24;
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DoInThread,The following statement contains a magic number: byte[] rawReadBuffer = new byte[4096];
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DoOutThread,The following statement contains a magic number: const int SLEEP_TIME_INC = 20;
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,DoOutThread,The following statement contains a magic number: const int SLEEP_TIME_MAX = 200;
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The following statement contains a magic number: if (remainingBuff.Length < (index + offset + 3))              {                  SafeHouse.Logger.Log("Telnet client is trying to send me a window resize (RFC1073) command without actual width/height fields.  WTF?");                  handled = false;                  return offset;              }
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The following statement contains a magic number: int width = (widthHighByte<<8) + widthLowByte;
Magic Number,kOS.UserIO,TelnetSingletonServer,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetSingletonServer.cs,TelnetConsumeNAWS,The following statement contains a magic number: int height = (heightHighByte<<8) + heightLowByte;
Magic Number,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,Update,The following statement contains a magic number: if (DateTime.Now > lastMenuQueryTime + TimeSpan.FromMilliseconds(1000))              {                  if (forceMenuReprint)                      telnetServer.Write((char)UnicodeCommand.CLEARSCREEN); // if we HAVE to reprint - do so on a clear screen.                  bool listChanged = CPUListChanged();                  if (!firstTime && listChanged)                      telnetServer.Write("--(List of CPU's has Changed)--" + (char)UnicodeCommand.STARTNEXTLINE);                  firstTime = false;                  if (listChanged || forceMenuReprint )                      PrintCPUMenu();              }
Magic Number,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,PrintCPUMenu,The following statement contains a magic number: longestLength = displayChoices[2].Length;
Magic Number,kOS.UserIO,TelnetWelcomeMenu,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TelnetWelcomeMenu.cs,CenterPadded,The following statement contains a magic number: int halfPadWidth = (width - msg.Length)/2;
Magic Number,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,GuessTypeId,The following statement contains a magic number: if (typeString.Substring(0'5).Equals("xterm"' StringComparison.CurrentCultureIgnoreCase))                  return TerminalType.XTERM;
Magic Number,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,GuessTypeId,The following statement contains a magic number: if (typeString.Substring(0'4).Equals("vt100"' StringComparison.CurrentCultureIgnoreCase))                  return TerminalType.XTERM;                    //                  // The following condition isn't implemented yet:                  //                  // else if (typeString.Substring(0'4).Equals("ansi"' StringComparison.CurrentCultureIgnoreCase))                  //     return TerminalType.XTERM;                                // Add more cases here if more subclasses of this class are created later.                else                  return TerminalType.UNKNOWN;
Magic Number,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,StripUnicodeCommands,The following statement contains a magic number: for (int i = 0 ; i < sb.Length ; ++i)              {                  if (sb[i] >= (char)0xE000 && sb[i] <= (char)0xF8FF) // Unicode "Private Use" range.                  {                      int charsToStrip = 1;                      switch (sb[i])                      {                          // TODO: come up with a better way?  Maybe have the UnicodeCommands "know" their size                          // instead of having to hardcode these cases here?                          case (char)UnicodeCommand.TELEPORTCURSOR:                          case (char)UnicodeCommand.RESIZESCREEN:                              charsToStrip = 2;                              break;                          case (char)UnicodeCommand.TITLEBEGIN:                              for (int j = i ; j < sb.Length ; ++j)                                  if (sb[j] == (char)UnicodeCommand.TITLEEND)                                      charsToStrip = 1 + j - i;                              break;                      }                      sb.Remove(i' charsToStrip);                      --i; // Start the scan from the current position next iteration.  Don't advance the index.                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,InputConvert,The following statement contains a magic number: for (int index = 0; index < inChars.Length; ++index)              {                  switch (inChars[index])                  {                      case ESCAPE_CHARACTER:                          if (index + 1 < inChars.Length && inChars[index + 1] == '[')                              // ESC followed by '[' is called the CSI (Control Sequence Initiator) and it's how most VT100 codes start.                          {                              int numConsumed;                              char ch = ConvertVT100InputCSI(inChars' index + 2' out numConsumed);                              if (numConsumed > 0)                              {                                  outChars.Add(ch);                                  index += (1 + numConsumed); // 1+ is for the '[' char.                              }                          }                          else                              outChars.Add(inChars[index]); // dummy passthrough.  Send ESC as-is.                          break;                        case DELETE_CHARACTER:                           outChars.Add((char)UnicodeCommand.DELETELEFT); // Map to the same as backspace' because Vt100 sends it for the backspace key' annoyingly.                          break;                        case BELL_CHAR:                          outChars.Add((char)UnicodeCommand.BEEP);                          break;                        default:                          outChars.Add(inChars[index]); // dummy passthrough                          break;                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,ConvertVT100InputCSI,The following statement contains a magic number: if (offset + 1 < inChars.Length && inChars[offset + 1] == '~')              {                  switch (inChars[offset])                  {                      case '1': returnChar = (char)UnicodeCommand.HOMECURSOR;     numConsumed = 2; break;                      case '3': returnChar = (char)UnicodeCommand.DELETERIGHT;    numConsumed = 2; break;                      case '4': returnChar = (char)UnicodeCommand.ENDCURSOR;      numConsumed = 2; break;                      case '5': returnChar = (char)UnicodeCommand.PAGEUPCURSOR;   numConsumed = 2; break;                      case '6': returnChar = (char)UnicodeCommand.PAGEDOWNCURSOR; numConsumed = 2; break;                      default: numConsumed = 0; break; // Do nothing if it's not a recognized sequence.  Leave the chars to be read normally.                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,ConvertVT100InputCSI,The following statement contains a magic number: if (offset + 1 < inChars.Length && inChars[offset + 1] == '~')              {                  switch (inChars[offset])                  {                      case '1': returnChar = (char)UnicodeCommand.HOMECURSOR;     numConsumed = 2; break;                      case '3': returnChar = (char)UnicodeCommand.DELETERIGHT;    numConsumed = 2; break;                      case '4': returnChar = (char)UnicodeCommand.ENDCURSOR;      numConsumed = 2; break;                      case '5': returnChar = (char)UnicodeCommand.PAGEUPCURSOR;   numConsumed = 2; break;                      case '6': returnChar = (char)UnicodeCommand.PAGEDOWNCURSOR; numConsumed = 2; break;                      default: numConsumed = 0; break; // Do nothing if it's not a recognized sequence.  Leave the chars to be read normally.                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,ConvertVT100InputCSI,The following statement contains a magic number: if (offset + 1 < inChars.Length && inChars[offset + 1] == '~')              {                  switch (inChars[offset])                  {                      case '1': returnChar = (char)UnicodeCommand.HOMECURSOR;     numConsumed = 2; break;                      case '3': returnChar = (char)UnicodeCommand.DELETERIGHT;    numConsumed = 2; break;                      case '4': returnChar = (char)UnicodeCommand.ENDCURSOR;      numConsumed = 2; break;                      case '5': returnChar = (char)UnicodeCommand.PAGEUPCURSOR;   numConsumed = 2; break;                      case '6': returnChar = (char)UnicodeCommand.PAGEDOWNCURSOR; numConsumed = 2; break;                      default: numConsumed = 0; break; // Do nothing if it's not a recognized sequence.  Leave the chars to be read normally.                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,ConvertVT100InputCSI,The following statement contains a magic number: if (offset + 1 < inChars.Length && inChars[offset + 1] == '~')              {                  switch (inChars[offset])                  {                      case '1': returnChar = (char)UnicodeCommand.HOMECURSOR;     numConsumed = 2; break;                      case '3': returnChar = (char)UnicodeCommand.DELETERIGHT;    numConsumed = 2; break;                      case '4': returnChar = (char)UnicodeCommand.ENDCURSOR;      numConsumed = 2; break;                      case '5': returnChar = (char)UnicodeCommand.PAGEUPCURSOR;   numConsumed = 2; break;                      case '6': returnChar = (char)UnicodeCommand.PAGEDOWNCURSOR; numConsumed = 2; break;                      default: numConsumed = 0; break; // Do nothing if it's not a recognized sequence.  Leave the chars to be read normally.                  }              }
Magic Number,kOS.UserIO,TerminalVT100Mapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalVT100Mapper.cs,ConvertVT100InputCSI,The following statement contains a magic number: if (offset + 1 < inChars.Length && inChars[offset + 1] == '~')              {                  switch (inChars[offset])                  {                      case '1': returnChar = (char)UnicodeCommand.HOMECURSOR;     numConsumed = 2; break;                      case '3': returnChar = (char)UnicodeCommand.DELETERIGHT;    numConsumed = 2; break;                      case '4': returnChar = (char)UnicodeCommand.ENDCURSOR;      numConsumed = 2; break;                      case '5': returnChar = (char)UnicodeCommand.PAGEUPCURSOR;   numConsumed = 2; break;                      case '6': returnChar = (char)UnicodeCommand.PAGEDOWNCURSOR; numConsumed = 2; break;                      default: numConsumed = 0; break; // Do nothing if it's not a recognized sequence.  Leave the chars to be read normally.                  }              }
Magic Number,kOS.Utilities,Utils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\Utils.cs,DegreesToRadians,The following statement contains a magic number: return degrees * Math.PI / 180;
Magic Number,kOS.Utilities,Utils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\Utils.cs,RadiansToDegrees,The following statement contains a magic number: return radians * 180 / Math.PI;
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,AngleDelta,The following statement contains a magic number: return (float)Utils.DegreeFix(delta' -180.0);
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetHeading,The following statement contains a magic number: var headingQ =                  Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vessel.GetTransform().rotation) *                                     Quaternion.LookRotation(north' up));
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetTargetHeading,The following statement contains a magic number: var headingQ =                  Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(Quaternion.LookRotation(vector' up)) *                                     Quaternion.LookRotation(north' up));
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetVesselLatitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetVesselLatitude,The following statement contains a magic number: if (retVal > 90) return 90;
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetVesselLatitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetVesselLatitude,The following statement contains a magic number: if (retVal < -90) return -90;
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetVesselLongitude,The following statement contains a magic number: return (float)Utils.DegreeFix(retVal' -180.0);
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetFacing,The following statement contains a magic number: Quaternion vesselFacing = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(vesselRotation) * Quaternion.identity);
Magic Number,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,GetFacing,The following statement contains a magic number: Quaternion bodyFacing = Quaternion.Inverse(Quaternion.Euler(90' 0' 0) * Quaternion.Inverse(bodyRotation) * Quaternion.identity);
Magic Number,kOS.AddOns.KerbalAlarmClock,KACWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACWrapper.cs,InitKACWrapper,The following statement contains a magic number: if (KACType.Assembly.GetName().Version.CompareTo(new System.Version(3' 0' 0' 5)) < 0)              {                  //No TimeEntry or alarmchoice options = need a newer version                  NeedUpgrade = true;              }
Magic Number,kOS.AddOns.KerbalAlarmClock,KACWrapper,C:\repos\KSP-KOS_KOS\src\kOS\AddOns\KerbalAlarmClock\KACWrapper.cs,InitKACWrapper,The following statement contains a magic number: if (KACType.Assembly.GetName().Version.CompareTo(new System.Version(3' 0' 0' 5)) < 0)              {                  //No TimeEntry or alarmchoice options = need a newer version                  NeedUpgrade = true;              }
Missing Default,kOS.Module,kOSProcessor,C:\repos\KSP-KOS_KOS\src\kOS\Module\kOSProcessor.cs,ProcessorModeChanged,The following switch statement is missing a default case: switch (ProcessorMode)              {                  case ProcessorModes.READY:                      if (SafeHouse.Config.StartOnArchive)                      {                          shared.VolumeMgr.SwitchTo(Archive);                      }                      else                      {                          shared.VolumeMgr.SwitchTo(HardDisk);                      }                      firstUpdate = true; // handle booting the cpu on the next FixedUpdate                      if (shared.Interpreter != null) shared.Interpreter.SetInputLock(false);                      if (shared.Window != null) shared.Window.IsPowered = true;                      foreach (var w in shared.ManagedWindows) w.IsPowered = true;                      break;                    case ProcessorModes.OFF:                  case ProcessorModes.STARVED:                      if (shared.Cpu != null) shared.Cpu.BreakExecution(true);                      if (shared.Interpreter != null) shared.Interpreter.SetInputLock(true);                      if (shared.Window != null) shared.Window.IsPowered = false;                      if (shared.SoundMaker != null) shared.SoundMaker.StopAllVoices();                      foreach (var w in shared.ManagedWindows) w.IsPowered = false;                      break;              }
Missing Default,kOS.Screen,KOSTextEditPopup,C:\repos\KSP-KOS_KOS\src\kOS\Screen\KOSTextEditPopup.cs,CheckKeyboard,The following switch statement is missing a default case: switch (Event.current.keyCode)                  {                      case KeyCode.PageUp:                          DoPageUp();                          Event.current.Use();                          break;                        case KeyCode.PageDown:                          DoPageDown();                          Event.current.Use();                          break;                        case KeyCode.E:                          if (Event.current.control)                              ExitEditor();                          Event.current.Use();                          break;                        case KeyCode.S:                          if (Event.current.control)                              SaveContents();                          Event.current.Use();                          break;                        case KeyCode.R:                          if (Event.current.control)                              ReloadContents();                          Event.current.Use();                          break;                  }
Missing Default,kOS.Suffixed,VesselSensors,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselSensors.cs,GetSensorVectorValue,The following switch statement is missing a default case: switch (moduleSensorType)                          {                              case "ACC":                                  return new Vector(vessel.acceleration);                              case "GRAV":                                  return new Vector(FlightGlobals.getGeeForceAtPosition(part.transform.position));                                                            }
Missing Default,kOS.Suffixed,VesselSensors,C:\repos\KSP-KOS_KOS\src\kOS\Suffixed\VesselSensors.cs,GetSensorDoubleValue,The following switch statement is missing a default case: switch (moduleSensorType)                          {                                                           case "PRES":                                  return vessel.staticPressurekPa;                              case "TEMP":                                  return part.temperature;                                                                                          }
Missing Default,kOS.UserIO,TerminalUnicodeMapper,C:\repos\KSP-KOS_KOS\src\kOS\UserIO\TerminalUnicodeMapper.cs,StripUnicodeCommands,The following switch statement is missing a default case: switch (sb[i])                      {                          // TODO: come up with a better way?  Maybe have the UnicodeCommands "know" their size                          // instead of having to hardcode these cases here?                          case (char)UnicodeCommand.TELEPORTCURSOR:                          case (char)UnicodeCommand.RESIZESCREEN:                              charsToStrip = 2;                              break;                          case (char)UnicodeCommand.TITLEBEGIN:                              for (int j = i ; j < sb.Length ; ++j)                                  if (sb[j] == (char)UnicodeCommand.TITLEEND)                                      charsToStrip = 1 + j - i;                              break;                      }
Missing Default,kOS.Utilities,VesselUtils,C:\repos\KSP-KOS_KOS\src\kOS\Utilities\VesselUtils.cs,PartList,The following switch statement is missing a default case: switch (partType.ToUpper())              {                  case "RESOURCES":                      list = AggregateResourceValue.PartsToList(partList' sharedObj);                      break;                    case "PARTS":                      list = PartValueFactory.Construct(partList' sharedObj);                      break;                    case "ENGINES":                      list = EngineValue.PartsToList(partList' sharedObj);                      break;                    case "SENSORS":                      list = SensorValue.PartsToList(partList' sharedObj);                      break;                    case "ELEMENTS":                      list = ElementValue.PartsToList(partList' sharedObj);                      break;                    case "DOCKINGPORTS":                      list = DockingPortValue.PartsToList(partList' sharedObj);                      break;              }
