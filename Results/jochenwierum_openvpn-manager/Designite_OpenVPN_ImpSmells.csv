Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenVPNUtils,ServiceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,Cyclomatic complexity of the method is 9
Long Parameter List,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,UserSpaceConnection,The method has 5 parameters. Parameters: bin' config' earlyLogEvent' earlyLogLevel' smartCardSupport
Long Parameter List,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,Init,The method has 5 parameters. Parameters: host' port' earlyLogEvent' earlyLogLevel' receiveOldLogs
Long Parameter List,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ManagementLogic,The method has 5 parameters. Parameters: ovpn' host' port' logs' receiveOldLogs
Long Parameter List,OpenVPNUtils,UserSpaceService,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,UserSpaceService,The method has 8 parameters. Parameters: binfile' configfile' dir' logs' host' port' logfile' smartCardSupport
Complex Conditional,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventPassword,The conditional expression  "username != null && pwType.Length > 0 &&                              password != null && password.Length > 0"  is complex.
Complex Conditional,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The conditional expression  "s.StartsWith("SUCCESS: "' StringComparison.OrdinalIgnoreCase)                  || s.StartsWith("ERROR: "' StringComparison.OrdinalIgnoreCase)                  || s.StartsWith(">"' StringComparison.OrdinalIgnoreCase) ||                   s.EndsWith("END" + Environment.NewLine' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,m_ovpnService_serviceExited,The method has an empty catch block.
Magic Number,OpenVPNUtils,ServiceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: if(args.GetUpperBound(0) != 2)                  throw new ArgumentException("The directive 'management'"                              + " is invalid in '" + config + "'");
Magic Number,OpenVPNUtils,ServiceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: if(!int.TryParse(args[2]' out port))                  throw new ArgumentException("The port '" + args[2]                          + "' is invalid in '" + config + "'");
Magic Number,OpenVPNUtils,ServiceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: if(!int.TryParse(args[2]' out port))                  throw new ArgumentException("The port '" + args[2]                          + "' is invalid in '" + config + "'");
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,UserSpaceConnection,The following statement contains a magic number: this.Init("127.0.0.1"' 11195 + obj_count++' earlyLogEvent' earlyLogLevel' true);
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,Connect,The following statement contains a magic number: m_connectState = 2;
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: try              {                  Monitor.Enter(lockvar);                  ss = State.CreateSnapshot();                  callback = (UtilsHelper.Function<bool>)result.AsyncState;                  abort = m_abort;                  connectionState = m_connectState;                    if (callback.EndInvoke(result))                      m_connectState = 3;              }              finally              {                  Monitor.Exit(lockvar);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: if (abort && ss.ConnectionState == VPNConnectionState.Stopping)              {                  m_abort = false;                  Logs.logDebugLine(2' "Connection is marked as aborded");                  switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }                  State.ChangeState(VPNConnectionState.Stopped);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,Disconnect,The following statement contains a magic number: try              {                  Monitor.Enter(lockvar);                  if (State.ConnectionState == VPNConnectionState.Stopped) return;                    if (State.ConnectionState == VPNConnectionState.Error)                  {                      State.ChangeState(VPNConnectionState.Stopped);                      return;                  }                    ss = State.ChangeState(VPNConnectionState.Stopping);                  m_abort = true;                      if (ss.ConnectionState == VPNConnectionState.Running ||                      (ss.ConnectionState == VPNConnectionState.Initializing &&                      m_connectState == 3))                  {                      Logic.sendQuit();                      Thread t = new Thread(new ThreadStart(killtimer));                      t.Name = "async disconnect thread";                      t.Start();                      m_abort = false;                  }              }              finally              {                  Monitor.Exit(lockvar);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: while (Logic.isConnected())                  Thread.Sleep(100);
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: for (int i = 0; i < 60; ++i)              {                  if (!m_ovpnService.isRunning)                      break;                  Thread.Sleep(500);              }
Magic Number,OpenVPNUtils,UserSpaceConnection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: for (int i = 0; i < 60; ++i)              {                  if (!m_ovpnService.isRunning)                      break;                  Thread.Sleep(500);              }
Magic Number,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: for(int i = 0; i < 8; ++i) {                  try                  {                      System.Threading.Thread.Sleep(500);                      m_ovpnMLogic.connect();                                            return true;                  }                  catch (System.Net.Sockets.SocketException ex)                  {                      m_logs.logDebugLine(1' "Could not establish connection " +                          "to management interface:" + ex.Message);                        if(m_state.ConnectionState != VPNConnectionState.Initializing)                          return false;                        if (i != 8)                      {                          m_logs.logDebugLine(1' "Trying again in a second");                          System.Threading.Thread.Sleep(500);                      }                  }              }
Magic Number,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: for(int i = 0; i < 8; ++i) {                  try                  {                      System.Threading.Thread.Sleep(500);                      m_ovpnMLogic.connect();                                            return true;                  }                  catch (System.Net.Sockets.SocketException ex)                  {                      m_logs.logDebugLine(1' "Could not establish connection " +                          "to management interface:" + ex.Message);                        if(m_state.ConnectionState != VPNConnectionState.Initializing)                          return false;                        if (i != 8)                      {                          m_logs.logDebugLine(1' "Trying again in a second");                          System.Threading.Thread.Sleep(500);                      }                  }              }
Magic Number,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: for(int i = 0; i < 8; ++i) {                  try                  {                      System.Threading.Thread.Sleep(500);                      m_ovpnMLogic.connect();                                            return true;                  }                  catch (System.Net.Sockets.SocketException ex)                  {                      m_logs.logDebugLine(1' "Could not establish connection " +                          "to management interface:" + ex.Message);                        if(m_state.ConnectionState != VPNConnectionState.Initializing)                          return false;                        if (i != 8)                      {                          m_logs.logDebugLine(1' "Trying again in a second");                          System.Threading.Thread.Sleep(500);                      }                  }              }
Magic Number,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: for(int i = 0; i < 8; ++i) {                  try                  {                      System.Threading.Thread.Sleep(500);                      m_ovpnMLogic.connect();                                            return true;                  }                  catch (System.Net.Sockets.SocketException ex)                  {                      m_logs.logDebugLine(1' "Could not establish connection " +                          "to management interface:" + ex.Message);                        if(m_state.ConnectionState != VPNConnectionState.Initializing)                          return false;                        if (i != 8)                      {                          m_logs.logDebugLine(1' "Trying again in a second");                          System.Threading.Thread.Sleep(500);                      }                  }              }
Magic Number,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: while (m_state.ConnectionState != VPNConnectionState.Stopped)                  Thread.Sleep(200);
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,processManagementConnectionLine,The following statement contains a magic number: m_logs.logDebugLine(5' "Got: \"" + line + "\"");
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,readerThread,The following statement contains a magic number: try              {                  // read until...                  while (true)                  {                      processManagementConnectionLine();                  }              }                // thread was aborted (this happens on disconnection)              catch (ThreadAbortException)              {                  m_logs.logDebugLine(2' "readerThread died: ThreadAbortException");              }                // ioexception (this can happen on disconnection' too)              catch (IOException e)              {                  m_logs.logDebugLine(2' "readerThread died: IOException: " + e.Message);              }
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,readerThread,The following statement contains a magic number: try              {                  // read until...                  while (true)                  {                      processManagementConnectionLine();                  }              }                // thread was aborted (this happens on disconnection)              catch (ThreadAbortException)              {                  m_logs.logDebugLine(2' "readerThread died: ThreadAbortException");              }                // ioexception (this can happen on disconnection' too)              catch (IOException e)              {                  m_logs.logDebugLine(2' "readerThread died: IOException: " + e.Message);              }
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,send,The following statement contains a magic number: if(m_connected)              {                  lock (m_swrite)                  {                      m_logs.logDebugLine(5' "Sending \"" + s + "\"");                        try                      {                          m_swrite.WriteLine(s);                          m_swrite.Flush();                          ret = true;                      }                      catch (IOException)                      {                          m_logs.logDebugLine(3' "Could not send: IOException. Connection closed?");                      }                  }              }                else                  m_logs.logDebugLine(3' "Trying to send' but disconnected or null: \"" + s + "\"");
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,send,The following statement contains a magic number: if(m_connected)              {                  lock (m_swrite)                  {                      m_logs.logDebugLine(5' "Sending \"" + s + "\"");                        try                      {                          m_swrite.WriteLine(s);                          m_swrite.Flush();                          ret = true;                      }                      catch (IOException)                      {                          m_logs.logDebugLine(3' "Could not send: IOException. Connection closed?");                      }                  }              }                else                  m_logs.logDebugLine(3' "Trying to send' but disconnected or null: \"" + s + "\"");
Magic Number,OpenVPNUtils,Communicator,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,send,The following statement contains a magic number: if(m_connected)              {                  lock (m_swrite)                  {                      m_logs.logDebugLine(5' "Sending \"" + s + "\"");                        try                      {                          m_swrite.WriteLine(s);                          m_swrite.Flush();                          ret = true;                      }                      catch (IOException)                      {                          m_logs.logDebugLine(3' "Could not send: IOException. Connection closed?");                      }                  }              }                else                  m_logs.logDebugLine(3' "Trying to send' but disconnected or null: \"" + s + "\"");
Magic Number,OpenVPNUtils,LogEventArgs,C:\repos\jochenwierum_openvpn-manager\OpenVPN\LogEventArgs.cs,LogEventArgs,The following statement contains a magic number: if(time == 0)                  m_time = (new DateTime(1070' 1' 1' 0' 0' 0)).AddSeconds(time);              else                  m_time = DateTime.Now;
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendQuit,The following statement contains a magic number: if (isConnected())              {                  setLock(WaitState.SIGNAL);                  m_releaselock = false;                  m_logs.logLine(LogType.Management' "Sending signal to quit");                  m_ovpnComm.send("signal SIGTERM");                  while (m_state == WaitState.SIGNAL && m_ovpnComm.isConnected())                  {                      Thread.Sleep(100);                      m_ovpnComm.send("signal SIGTERM"); // HACK: <- this is crazy. TODO: find out' why this is needed.                      Thread.Sleep(100);                  }              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendQuit,The following statement contains a magic number: if (isConnected())              {                  setLock(WaitState.SIGNAL);                  m_releaselock = false;                  m_logs.logLine(LogType.Management' "Sending signal to quit");                  m_ovpnComm.send("signal SIGTERM");                  while (m_state == WaitState.SIGNAL && m_ovpnComm.isConnected())                  {                      Thread.Sleep(100);                      m_ovpnComm.send("signal SIGTERM"); // HACK: <- this is crazy. TODO: find out' why this is needed.                      Thread.Sleep(100);                  }              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendRestart,The following statement contains a magic number: if (isConnected())              {                  setLock(WaitState.SIGNAL);                  m_releaselock = false;                  m_logs.logLine(LogType.Management' "Sending signal to restart");                  m_ovpnComm.send("signal SIGHUP");                  while (m_state == WaitState.SIGNAL)                  {                      Thread.Sleep(100);                      /*                       * HACK: If I got it correctly' there is a problem with some                       * OpenVPN versions which throw away the second message if they                       * got two messages in a small time window.                       */                      if (!m_ovpnComm.send("signal SIGHUP")) break;                      Thread.Sleep(100);                  }              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendRestart,The following statement contains a magic number: if (isConnected())              {                  setLock(WaitState.SIGNAL);                  m_releaselock = false;                  m_logs.logLine(LogType.Management' "Sending signal to restart");                  m_ovpnComm.send("signal SIGHUP");                  while (m_state == WaitState.SIGNAL)                  {                      Thread.Sleep(100);                      /*                       * HACK: If I got it correctly' there is a problem with some                       * OpenVPN versions which throw away the second message if they                       * got two messages in a small time window.                       */                      if (!m_ovpnComm.send("signal SIGHUP")) break;                      Thread.Sleep(100);                  }              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendDisconnect,The following statement contains a magic number: while (isConnected())              {                  Thread.Sleep(100);                  /*                   * HACK: If I got it correctly' there is a problem with some                   * OpenVPN versions which throw away the second message if they                   * got two messages in a small time window.                   */                  if (!m_ovpnComm.send("exit")) break;                  Thread.Sleep(100);              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendDisconnect,The following statement contains a magic number: while (isConnected())              {                  Thread.Sleep(100);                  /*                   * HACK: If I got it correctly' there is a problem with some                   * OpenVPN versions which throw away the second message if they                   * got two messages in a small time window.                   */                  if (!m_ovpnComm.send("exit")) break;                  Thread.Sleep(100);              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,reset,The following statement contains a magic number: m_logs.logDebugLine(5' "resetting logic");
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,setLock,The following statement contains a magic number: while (true)              {                  try                  {                      Monitor.Enter(m_todo);                      if (m_state == WaitState.NULL)                      {                          m_state = newState;                          return;                      }                  }                  finally                  {                      Monitor.Exit(m_todo);                  }                    Thread.Sleep(100);              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,got_asyncEvent,The following statement contains a magic number: m_logs.logDebugLine(4' "Extracted async event: " +                  aeDetail.eventType.ToString() + ": " + aeDetail.message);
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventNeedStr,The following statement contains a magic number: switch (aeDetail.getInfos()[0])              {                  // A SmartCard ID is requested                  case "pkcs11-id-request":                      m_logs.logDebugLine(3' "Got Request for pkcs11-id");                        setLock(WaitState.PKCS11_GET_COUNT);                      m_ovpnComm.send("pkcs11-id-count");                      break;              }
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventPassword,The following statement contains a magic number: string pwMsg = aeDetail.getInfos()[2];
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,addLog,The following statement contains a magic number: string[] parts = message.Split(new char[] { ''' }' 3);
Magic Number,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,addLog,The following statement contains a magic number: m_logs.logLine(LogType.Log'                  parts[2]' time);
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following statement contains a magic number: if (s.StartsWith(">"' StringComparison.OrdinalIgnoreCase))              {                  string type = s.Substring(1' s.IndexOf(":"'                       StringComparison.OrdinalIgnoreCase) - 1);                  string msg = s.Substring(type.Length + 2);                    string[] infos = null;                  AsyncEventDetail.EventType et = AsyncEventDetail.EventType.UNKNOWN;                    switch (type)                  {                      case "ECHO": et = AsyncEventDetail.EventType.ECHO; break;                      case "FATAL": et = AsyncEventDetail.EventType.FATAL; break;                      case "HOLD": et = AsyncEventDetail.EventType.HOLD; break;                      case "INFO": et = AsyncEventDetail.EventType.INFO; break;                      case "LOG": et = AsyncEventDetail.EventType.LOG; break;                        case "NEED-STR":                          et = AsyncEventDetail.EventType.NEEDSTR;                            string tmp = msg.Substring(msg.IndexOf('\'') + 1);                          infos = new string[] {tmp.Substring(0'tmp.IndexOf('\''))};                          break;                        case "STATE":                          et = AsyncEventDetail.EventType.STATE;                          infos = msg.Split(new char[] { ''' });                          break;                        case "PASSWORD":                           et = AsyncEventDetail.EventType.PASSWORD;                          // Several messages format are possible                          // * first is a request for a passwd                          //   >PASSWORD:Need 'Auth' username/password                          // or                          //   >PASSWORD:Need 'Private Key' password                          //                          // * second is a notification                          //   >PASSWORD:Verification Failed: 'Auth'                          // or                          //   >PASSWORD:Verification Failed: 'Private Key'                                                                    // Let's first determine the PASSWORD message type and thus format                          // "Need" or "Verification"                          if(msg.StartsWith("Need"'                               StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              string loginInfo = tmp2.Substring(tmp2.IndexOf('\'') + 2); // "password" or "username/password"                              infos = new string[] { loginProfile' loginInfo' "Need" };                          }                          // "Verification Failed"                          else if(msg.StartsWith("Verification Failed:"'                                   StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              infos = new string[] { loginProfile' null' "Verification" };                          }                          break;                  }                    if (et != AsyncEventDetail.EventType.UNKNOWN)                  {                      m_logic.got_asyncEvent(new AsyncEventDetail(et' msg' infos));                      return;                  }              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following statement contains a magic number: if (s.StartsWith(">"' StringComparison.OrdinalIgnoreCase))              {                  string type = s.Substring(1' s.IndexOf(":"'                       StringComparison.OrdinalIgnoreCase) - 1);                  string msg = s.Substring(type.Length + 2);                    string[] infos = null;                  AsyncEventDetail.EventType et = AsyncEventDetail.EventType.UNKNOWN;                    switch (type)                  {                      case "ECHO": et = AsyncEventDetail.EventType.ECHO; break;                      case "FATAL": et = AsyncEventDetail.EventType.FATAL; break;                      case "HOLD": et = AsyncEventDetail.EventType.HOLD; break;                      case "INFO": et = AsyncEventDetail.EventType.INFO; break;                      case "LOG": et = AsyncEventDetail.EventType.LOG; break;                        case "NEED-STR":                          et = AsyncEventDetail.EventType.NEEDSTR;                            string tmp = msg.Substring(msg.IndexOf('\'') + 1);                          infos = new string[] {tmp.Substring(0'tmp.IndexOf('\''))};                          break;                        case "STATE":                          et = AsyncEventDetail.EventType.STATE;                          infos = msg.Split(new char[] { ''' });                          break;                        case "PASSWORD":                           et = AsyncEventDetail.EventType.PASSWORD;                          // Several messages format are possible                          // * first is a request for a passwd                          //   >PASSWORD:Need 'Auth' username/password                          // or                          //   >PASSWORD:Need 'Private Key' password                          //                          // * second is a notification                          //   >PASSWORD:Verification Failed: 'Auth'                          // or                          //   >PASSWORD:Verification Failed: 'Private Key'                                                                    // Let's first determine the PASSWORD message type and thus format                          // "Need" or "Verification"                          if(msg.StartsWith("Need"'                               StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              string loginInfo = tmp2.Substring(tmp2.IndexOf('\'') + 2); // "password" or "username/password"                              infos = new string[] { loginProfile' loginInfo' "Need" };                          }                          // "Verification Failed"                          else if(msg.StartsWith("Verification Failed:"'                                   StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              infos = new string[] { loginProfile' null' "Verification" };                          }                          break;                  }                    if (et != AsyncEventDetail.EventType.UNKNOWN)                  {                      m_logic.got_asyncEvent(new AsyncEventDetail(et' msg' infos));                      return;                  }              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11IDCount,The following statement contains a magic number: if (s.StartsWith(">PKCS11ID-COUNT:"' StringComparison.OrdinalIgnoreCase))              {                  s = s.Substring(16);                  return int.Parse(s' CultureInfo.InvariantCulture.NumberFormat);              }              else              {                  return -1;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: try              {                  if (parts[0].StartsWith(">PKCS11ID-ENTRY:'"'                       StringComparison.OrdinalIgnoreCase))                      nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);                  else                      return null;                    if (parts[1].StartsWith(" ID:'"'                       StringComparison.OrdinalIgnoreCase))                      id = parts[1].Substring(5' parts[1].Length - 6);                  else                      return null;                    if (parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase))                      blob = parts[2].Substring(7' parts[2].Length - 10);                  else                      return null;                    // return the extracted data                  return new PKCS11Detail(nr' id' blob);              }              catch (FormatException)              {                  // the format had a problem;                  return null;              }
Magic Number,OpenVPNUtils,UserSpaceService,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,UserSpaceService,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6)                  m_psi.Verb = "runas";
Magic Number,OpenVPNUtils,UserSpaceService,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,kill,The following statement contains a magic number: m_logs.logDebugLine(2' "Forcing OpenVPN to terminate");
Magic Number,OpenVPNUtils,UserSpaceService,C:\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,exited_event,The following statement contains a magic number: m_logs.logDebugLine(2' "OpenVPN stopped");
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: while (tmp.Length > 0)              {                  // start of a string like \x20                  // this is a hex-encoded ascii-char                  if(tmp.StartsWith("\\x"' StringComparison.OrdinalIgnoreCase))                  {                      // remove \x                      tmp = tmp.Remove(0' 2);                                            // get the number (e.g. "20")                      Char[] c = new Char[2];                      tmp.CopyTo(0' c' 0' 2);                        // convert the number into a char                      // Utf32 should be no problem here'                      // because the first 265 codepoints are the same                      ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));                        // remove the number (e.g. "20")                      tmp = tmp.Remove(0' 2);                  }                  else                  {                      // append the char                      ret.Append(tmp[0]);                      tmp = tmp.Remove(0' 1);                  }              }
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: while (tmp.Length > 0)              {                  // start of a string like \x20                  // this is a hex-encoded ascii-char                  if(tmp.StartsWith("\\x"' StringComparison.OrdinalIgnoreCase))                  {                      // remove \x                      tmp = tmp.Remove(0' 2);                                            // get the number (e.g. "20")                      Char[] c = new Char[2];                      tmp.CopyTo(0' c' 0' 2);                        // convert the number into a char                      // Utf32 should be no problem here'                      // because the first 265 codepoints are the same                      ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));                        // remove the number (e.g. "20")                      tmp = tmp.Remove(0' 2);                  }                  else                  {                      // append the char                      ret.Append(tmp[0]);                      tmp = tmp.Remove(0' 1);                  }              }
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: while (tmp.Length > 0)              {                  // start of a string like \x20                  // this is a hex-encoded ascii-char                  if(tmp.StartsWith("\\x"' StringComparison.OrdinalIgnoreCase))                  {                      // remove \x                      tmp = tmp.Remove(0' 2);                                            // get the number (e.g. "20")                      Char[] c = new Char[2];                      tmp.CopyTo(0' c' 0' 2);                        // convert the number into a char                      // Utf32 should be no problem here'                      // because the first 265 codepoints are the same                      ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));                        // remove the number (e.g. "20")                      tmp = tmp.Remove(0' 2);                  }                  else                  {                      // append the char                      ret.Append(tmp[0]);                      tmp = tmp.Remove(0' 1);                  }              }
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: while (tmp.Length > 0)              {                  // start of a string like \x20                  // this is a hex-encoded ascii-char                  if(tmp.StartsWith("\\x"' StringComparison.OrdinalIgnoreCase))                  {                      // remove \x                      tmp = tmp.Remove(0' 2);                                            // get the number (e.g. "20")                      Char[] c = new Char[2];                      tmp.CopyTo(0' c' 0' 2);                        // convert the number into a char                      // Utf32 should be no problem here'                      // because the first 265 codepoints are the same                      ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));                        // remove the number (e.g. "20")                      tmp = tmp.Remove(0' 2);                  }                  else                  {                      // append the char                      ret.Append(tmp[0]);                      tmp = tmp.Remove(0' 1);                  }              }
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: while (tmp.Length > 0)              {                  // start of a string like \x20                  // this is a hex-encoded ascii-char                  if(tmp.StartsWith("\\x"' StringComparison.OrdinalIgnoreCase))                  {                      // remove \x                      tmp = tmp.Remove(0' 2);                                            // get the number (e.g. "20")                      Char[] c = new Char[2];                      tmp.CopyTo(0' c' 0' 2);                        // convert the number into a char                      // Utf32 should be no problem here'                      // because the first 265 codepoints are the same                      ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));                        // remove the number (e.g. "20")                      tmp = tmp.Remove(0' 2);                  }                  else                  {                      // append the char                      ret.Append(tmp[0]);                      tmp = tmp.Remove(0' 1);                  }              }
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,PKCS11Detail,The following statement contains a magic number: m_nicename = decode(m_parts[3]) + " [" + decode(m_parts[4]) + "]";
Magic Number,OpenVPNUtils,PKCS11Detail,C:\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,PKCS11Detail,The following statement contains a magic number: m_nicename = decode(m_parts[3]) + " [" + decode(m_parts[4]) + "]";
Magic Number,OpenVPNUtils.States,State,C:\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: lock (this)              {                  Array.Copy(p' m_vpnstate' 4);                    if (p[1].Equals("CONNECTED"'StringComparison.OrdinalIgnoreCase) ||                       p[1].Equals("ASSIGN_IP"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = p[3];                        if (p[1].Equals("CONNECTED"' StringComparison.OrdinalIgnoreCase))                          ConnectionState = VPNConnectionState.Running;                  }                  else if (p[1].Equals("RECONNECTING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                      if(p[2].ToUpperInvariant() != "SIGHUP" &&                          p[2].ToUpperInvariant() != "INIT_INSTANCE")                          ConnectionState = VPNConnectionState.Initializing;                  }                  else if (p[1].Equals("EXITING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                  }                  res = createSnapshotNoLock();              }
Magic Number,OpenVPNUtils.States,State,C:\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: lock (this)              {                  Array.Copy(p' m_vpnstate' 4);                    if (p[1].Equals("CONNECTED"'StringComparison.OrdinalIgnoreCase) ||                       p[1].Equals("ASSIGN_IP"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = p[3];                        if (p[1].Equals("CONNECTED"' StringComparison.OrdinalIgnoreCase))                          ConnectionState = VPNConnectionState.Running;                  }                  else if (p[1].Equals("RECONNECTING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                      if(p[2].ToUpperInvariant() != "SIGHUP" &&                          p[2].ToUpperInvariant() != "INIT_INSTANCE")                          ConnectionState = VPNConnectionState.Initializing;                  }                  else if (p[1].Equals("EXITING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                  }                  res = createSnapshotNoLock();              }
Magic Number,OpenVPNUtils.States,State,C:\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: lock (this)              {                  Array.Copy(p' m_vpnstate' 4);                    if (p[1].Equals("CONNECTED"'StringComparison.OrdinalIgnoreCase) ||                       p[1].Equals("ASSIGN_IP"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = p[3];                        if (p[1].Equals("CONNECTED"' StringComparison.OrdinalIgnoreCase))                          ConnectionState = VPNConnectionState.Running;                  }                  else if (p[1].Equals("RECONNECTING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                      if(p[2].ToUpperInvariant() != "SIGHUP" &&                          p[2].ToUpperInvariant() != "INIT_INSTANCE")                          ConnectionState = VPNConnectionState.Initializing;                  }                  else if (p[1].Equals("EXITING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                  }                  res = createSnapshotNoLock();              }
Magic Number,OpenVPNUtils.States,State,C:\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: lock (this)              {                  Array.Copy(p' m_vpnstate' 4);                    if (p[1].Equals("CONNECTED"'StringComparison.OrdinalIgnoreCase) ||                       p[1].Equals("ASSIGN_IP"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = p[3];                        if (p[1].Equals("CONNECTED"' StringComparison.OrdinalIgnoreCase))                          ConnectionState = VPNConnectionState.Running;                  }                  else if (p[1].Equals("RECONNECTING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                      if(p[2].ToUpperInvariant() != "SIGHUP" &&                          p[2].ToUpperInvariant() != "INIT_INSTANCE")                          ConnectionState = VPNConnectionState.Initializing;                  }                  else if (p[1].Equals("EXITING"' StringComparison.OrdinalIgnoreCase))                  {                      m_connection.IP = null;                  }                  res = createSnapshotNoLock();              }
Missing Default,OpenVPNUtils,Connection,C:\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,CheckState,The following switch statement is missing a default case: switch (newState)              {                  case VPNConnectionState.Initializing:                      if (m_state.ConnectionState != VPNConnectionState.Stopped &&                          m_state.ConnectionState != VPNConnectionState.Error)                          throw new InvalidOperationException("Already connected");                        break;              }
Missing Default,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,executeAsyncEvent,The following switch statement is missing a default case: switch (aeDetail.eventType)              {                  case AsyncEventDetail.EventType.NEEDSTR:                      ProcessAsyncEventNeedStr(aeDetail);                      break;                    // a password is requested                  case AsyncEventDetail.EventType.PASSWORD:                      ProcessAsyncEventPassword(aeDetail);                      break;                    // a hold state is signalized                  case AsyncEventDetail.EventType.HOLD:                      ProcessAsyncEventHold(aeDetail);                      break;                    case AsyncEventDetail.EventType.INFO:                      break;                    // the internal state changed                  case AsyncEventDetail.EventType.STATE:                      ProcessAsyncEventState(aeDetail);                      break;                    // we got a "log"                  case AsyncEventDetail.EventType.LOG:                      ProcessAsyncEventLog(aeDetail);                      break;              }
Missing Default,OpenVPNUtils,ManagementLogic,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventNeedStr,The following switch statement is missing a default case: switch (aeDetail.getInfos()[0])              {                  // A SmartCard ID is requested                  case "pkcs11-id-request":                      m_logs.logDebugLine(3' "Got Request for pkcs11-id");                        setLock(WaitState.PKCS11_GET_COUNT);                      m_ovpnComm.send("pkcs11-id-count");                      break;              }
Missing Default,OpenVPNUtils,ManagementParser,C:\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following switch statement is missing a default case: switch (type)                  {                      case "ECHO": et = AsyncEventDetail.EventType.ECHO; break;                      case "FATAL": et = AsyncEventDetail.EventType.FATAL; break;                      case "HOLD": et = AsyncEventDetail.EventType.HOLD; break;                      case "INFO": et = AsyncEventDetail.EventType.INFO; break;                      case "LOG": et = AsyncEventDetail.EventType.LOG; break;                        case "NEED-STR":                          et = AsyncEventDetail.EventType.NEEDSTR;                            string tmp = msg.Substring(msg.IndexOf('\'') + 1);                          infos = new string[] {tmp.Substring(0'tmp.IndexOf('\''))};                          break;                        case "STATE":                          et = AsyncEventDetail.EventType.STATE;                          infos = msg.Split(new char[] { ''' });                          break;                        case "PASSWORD":                           et = AsyncEventDetail.EventType.PASSWORD;                          // Several messages format are possible                          // * first is a request for a passwd                          //   >PASSWORD:Need 'Auth' username/password                          // or                          //   >PASSWORD:Need 'Private Key' password                          //                          // * second is a notification                          //   >PASSWORD:Verification Failed: 'Auth'                          // or                          //   >PASSWORD:Verification Failed: 'Private Key'                                                                    // Let's first determine the PASSWORD message type and thus format                          // "Need" or "Verification"                          if(msg.StartsWith("Need"'                               StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              string loginInfo = tmp2.Substring(tmp2.IndexOf('\'') + 2); // "password" or "username/password"                              infos = new string[] { loginProfile' loginInfo' "Need" };                          }                          // "Verification Failed"                          else if(msg.StartsWith("Verification Failed:"'                                   StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              infos = new string[] { loginProfile' null' "Verification" };                          }                          break;                  }
