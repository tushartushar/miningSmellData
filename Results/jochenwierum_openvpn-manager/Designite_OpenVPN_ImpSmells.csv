Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenVPNUtils,ServiceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,Cyclomatic complexity of the method is 9
Complex Method,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,cb_syncEvent,Cyclomatic complexity of the method is 8
Complex Method,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventPassword,Cyclomatic complexity of the method is 9
Complex Method,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,Cyclomatic complexity of the method is 13
Long Parameter List,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,UserSpaceConnection,The method has 5 parameters. Parameters: bin' config' earlyLogEvent' earlyLogLevel' smartCardSupport
Long Parameter List,OpenVPNUtils,Connection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,Init,The method has 5 parameters. Parameters: host' port' earlyLogEvent' earlyLogLevel' receiveOldLogs
Long Parameter List,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ManagementLogic,The method has 5 parameters. Parameters: ovpn' host' port' logs' receiveOldLogs
Long Parameter List,OpenVPNUtils,UserSpaceService,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,UserSpaceService,The method has 8 parameters. Parameters: binfile' configfile' dir' logs' host' port' logfile' smartCardSupport
Complex Conditional,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventPassword,The conditional expression  "username != null && pwType.Length > 0 &&                              password != null && password.Length > 0"  is complex.
Complex Conditional,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The conditional expression  "s.StartsWith("SUCCESS: "' StringComparison.OrdinalIgnoreCase)                  || s.StartsWith("ERROR: "' StringComparison.OrdinalIgnoreCase)                  || s.StartsWith(">"' StringComparison.OrdinalIgnoreCase) ||                   s.EndsWith("END" + Environment.NewLine' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,m_ovpnService_serviceExited,The method has an empty catch block.
Magic Number,OpenVPNUtils,ServiceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: args.GetUpperBound(0) != 2
Magic Number,OpenVPNUtils,ServiceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: throw new ArgumentException("The port '" + args[2]                          + "' is invalid in '" + config + "'");
Magic Number,OpenVPNUtils,ServiceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ServiceConnection.cs,ServiceConnection,The following statement contains a magic number: !int.TryParse(args[2]' out port)
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,UserSpaceConnection,The following statement contains a magic number: this.Init("127.0.0.1"' 11195 + obj_count++' earlyLogEvent' earlyLogLevel' true);
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,Connect,The following statement contains a magic number: m_connectState = 2;
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: m_connectState = 3;
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: Logs.logDebugLine(2' "Connection is marked as aborded");
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,connectComplete,The following statement contains a magic number: switch (connectionState)                  {                      case 1: // service not startet                          Logs.logDebugLine(2' "No action required");                          break;                      case 2: // service startet' not connected via tcp                          Logs.logDebugLine(2' "Killing serivce");                          m_ovpnService.kill();                          break;                      case 3: // service startet and connected via tcp                          Logs.logDebugLine(2' "Calling disconnect");                          Disconnect();                          break;                      default:                          Logs.logDebugLine(1' "Connection state is invalid (" +                              connectionState + "). Ignoring disconnect event.");                          break;                  }
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,Disconnect,The following statement contains a magic number: ss.ConnectionState == VPNConnectionState.Running ||                      (ss.ConnectionState == VPNConnectionState.Initializing &&                      m_connectState == 3)
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,OpenVPNUtils,UserSpaceConnection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceConnection.cs,killtimer,The following statement contains a magic number: i < 60
Magic Number,OpenVPNUtils,Connection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: System.Threading.Thread.Sleep(500);
Magic Number,OpenVPNUtils,Connection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: i < 8
Magic Number,OpenVPNUtils,Connection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,ConnectLogic,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,OpenVPNUtils,Communicator,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,processManagementConnectionLine,The following statement contains a magic number: m_logs.logDebugLine(5' "Got: \"" + line + "\"");
Magic Number,OpenVPNUtils,Communicator,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Communicator.cs,send,The following statement contains a magic number: m_logs.logDebugLine(5' "Sending \"" + s + "\"");
Magic Number,OpenVPNUtils,LogEventArgs,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\LogEventArgs.cs,LogEventArgs,The following statement contains a magic number: m_time = (new DateTime(1070' 1' 1' 0' 0' 0)).AddSeconds(time);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendQuit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendQuit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendRestart,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendDisconnect,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,sendDisconnect,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,reset,The following statement contains a magic number: m_logs.logDebugLine(5' "resetting logic");
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,setLock,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,got_asyncEvent,The following statement contains a magic number: m_logs.logDebugLine(4' "Extracted async event: " +                  aeDetail.eventType.ToString() + ": " + aeDetail.message);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventNeedStr,The following statement contains a magic number: switch (aeDetail.getInfos()[0])              {                  // A SmartCard ID is requested                  case "pkcs11-id-request":                      m_logs.logDebugLine(3' "Got Request for pkcs11-id");                        setLock(WaitState.PKCS11_GET_COUNT);                      m_ovpnComm.send("pkcs11-id-count");                      break;              }
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventPassword,The following statement contains a magic number: string pwMsg = aeDetail.getInfos()[2];
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,addLog,The following statement contains a magic number: string[] parts = message.Split(new char[] { ''' }' 3);
Magic Number,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,addLog,The following statement contains a magic number: m_logs.logLine(LogType.Log'                  parts[2]' time);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following statement contains a magic number: string msg = s.Substring(type.Length + 2);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following statement contains a magic number: switch (type)                  {                      case "ECHO": et = AsyncEventDetail.EventType.ECHO; break;                      case "FATAL": et = AsyncEventDetail.EventType.FATAL; break;                      case "HOLD": et = AsyncEventDetail.EventType.HOLD; break;                      case "INFO": et = AsyncEventDetail.EventType.INFO; break;                      case "LOG": et = AsyncEventDetail.EventType.LOG; break;                        case "NEED-STR":                          et = AsyncEventDetail.EventType.NEEDSTR;                            string tmp = msg.Substring(msg.IndexOf('\'') + 1);                          infos = new string[] {tmp.Substring(0'tmp.IndexOf('\''))};                          break;                        case "STATE":                          et = AsyncEventDetail.EventType.STATE;                          infos = msg.Split(new char[] { ''' });                          break;                        case "PASSWORD":                           et = AsyncEventDetail.EventType.PASSWORD;                          // Several messages format are possible                          // * first is a request for a passwd                          //   >PASSWORD:Need 'Auth' username/password                          // or                          //   >PASSWORD:Need 'Private Key' password                          //                          // * second is a notification                          //   >PASSWORD:Verification Failed: 'Auth'                          // or                          //   >PASSWORD:Verification Failed: 'Private Key'                                                                    // Let's first determine the PASSWORD message type and thus format                          // "Need" or "Verification"                          if(msg.StartsWith("Need"'                               StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              string loginInfo = tmp2.Substring(tmp2.IndexOf('\'') + 2); // "password" or "username/password"                              infos = new string[] { loginProfile' loginInfo' "Need" };                          }                          // "Verification Failed"                          else if(msg.StartsWith("Verification Failed:"'                                   StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              infos = new string[] { loginProfile' null' "Verification" };                          }                          break;                  }
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11IDCount,The following statement contains a magic number: s = s.Substring(16);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: nr = int.Parse(parts[0].Substring(17' parts[0].Length - 18)'                          CultureInfo.InvariantCulture.NumberFormat);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: id = parts[1].Substring(5' parts[1].Length - 6);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: id = parts[1].Substring(5' parts[1].Length - 6);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: blob = parts[2].Substring(7' parts[2].Length - 10);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: blob = parts[2].Substring(7' parts[2].Length - 10);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: blob = parts[2].Substring(7' parts[2].Length - 10);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: blob = parts[2].Substring(7' parts[2].Length - 10);
Magic Number,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,getPKCS11ID,The following statement contains a magic number: parts[2].StartsWith(" BLOB:'"'                       StringComparison.OrdinalIgnoreCase)
Magic Number,OpenVPNUtils,UserSpaceService,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,UserSpaceService,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,OpenVPNUtils,UserSpaceService,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,kill,The following statement contains a magic number: m_logs.logDebugLine(2' "Forcing OpenVPN to terminate");
Magic Number,OpenVPNUtils,UserSpaceService,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\UserSpaceService.cs,exited_event,The following statement contains a magic number: m_logs.logDebugLine(2' "OpenVPN stopped");
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: tmp = tmp.Remove(0' 2);
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: Char[] c = new Char[2];
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: tmp.CopyTo(0' c' 0' 2);
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: ret.Append(                          Char.ConvertFromUtf32(                          Int16.Parse(tmp.Substring(0' 2)'                           NumberStyles.HexNumber'                          CultureInfo.InvariantCulture.NumberFormat)                          ));
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,decode,The following statement contains a magic number: tmp = tmp.Remove(0' 2);
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,PKCS11Detail,The following statement contains a magic number: m_nicename = decode(m_parts[3]) + " [" + decode(m_parts[4]) + "]";
Magic Number,OpenVPNUtils,PKCS11Detail,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\PKCS11Detail.cs,PKCS11Detail,The following statement contains a magic number: m_nicename = decode(m_parts[3]) + " [" + decode(m_parts[4]) + "]";
Magic Number,OpenVPNUtils.States,State,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: Array.Copy(p' m_vpnstate' 4);
Magic Number,OpenVPNUtils.States,State,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\States\State.cs,ChangeVPNState,The following statement contains a magic number: m_connection.IP = p[3];
Missing Default,OpenVPNUtils,Connection,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\Connection.cs,CheckState,The following switch statement is missing a default case: switch (newState)              {                  case VPNConnectionState.Initializing:                      if (m_state.ConnectionState != VPNConnectionState.Stopped &&                          m_state.ConnectionState != VPNConnectionState.Error)                          throw new InvalidOperationException("Already connected");                        break;              }
Missing Default,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,executeAsyncEvent,The following switch statement is missing a default case: switch (aeDetail.eventType)              {                  case AsyncEventDetail.EventType.NEEDSTR:                      ProcessAsyncEventNeedStr(aeDetail);                      break;                    // a password is requested                  case AsyncEventDetail.EventType.PASSWORD:                      ProcessAsyncEventPassword(aeDetail);                      break;                    // a hold state is signalized                  case AsyncEventDetail.EventType.HOLD:                      ProcessAsyncEventHold(aeDetail);                      break;                    case AsyncEventDetail.EventType.INFO:                      break;                    // the internal state changed                  case AsyncEventDetail.EventType.STATE:                      ProcessAsyncEventState(aeDetail);                      break;                    // we got a "log"                  case AsyncEventDetail.EventType.LOG:                      ProcessAsyncEventLog(aeDetail);                      break;              }
Missing Default,OpenVPNUtils,ManagementLogic,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementLogic.cs,ProcessAsyncEventNeedStr,The following switch statement is missing a default case: switch (aeDetail.getInfos()[0])              {                  // A SmartCard ID is requested                  case "pkcs11-id-request":                      m_logs.logDebugLine(3' "Got Request for pkcs11-id");                        setLock(WaitState.PKCS11_GET_COUNT);                      m_ovpnComm.send("pkcs11-id-count");                      break;              }
Missing Default,OpenVPNUtils,ManagementParser,D:\research\architectureSmells\repos\jochenwierum_openvpn-manager\OpenVPN\ManagementParser.cs,oc_gotLine,The following switch statement is missing a default case: switch (type)                  {                      case "ECHO": et = AsyncEventDetail.EventType.ECHO; break;                      case "FATAL": et = AsyncEventDetail.EventType.FATAL; break;                      case "HOLD": et = AsyncEventDetail.EventType.HOLD; break;                      case "INFO": et = AsyncEventDetail.EventType.INFO; break;                      case "LOG": et = AsyncEventDetail.EventType.LOG; break;                        case "NEED-STR":                          et = AsyncEventDetail.EventType.NEEDSTR;                            string tmp = msg.Substring(msg.IndexOf('\'') + 1);                          infos = new string[] {tmp.Substring(0'tmp.IndexOf('\''))};                          break;                        case "STATE":                          et = AsyncEventDetail.EventType.STATE;                          infos = msg.Split(new char[] { ''' });                          break;                        case "PASSWORD":                           et = AsyncEventDetail.EventType.PASSWORD;                          // Several messages format are possible                          // * first is a request for a passwd                          //   >PASSWORD:Need 'Auth' username/password                          // or                          //   >PASSWORD:Need 'Private Key' password                          //                          // * second is a notification                          //   >PASSWORD:Verification Failed: 'Auth'                          // or                          //   >PASSWORD:Verification Failed: 'Private Key'                                                                    // Let's first determine the PASSWORD message type and thus format                          // "Need" or "Verification"                          if(msg.StartsWith("Need"'                               StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              string loginInfo = tmp2.Substring(tmp2.IndexOf('\'') + 2); // "password" or "username/password"                              infos = new string[] { loginProfile' loginInfo' "Need" };                          }                          // "Verification Failed"                          else if(msg.StartsWith("Verification Failed:"'                                   StringComparison.OrdinalIgnoreCase))                          {                              string tmp2 = msg.Substring(msg.IndexOf('\'') + 1);                              string loginProfile = tmp2.Substring(0' tmp2.IndexOf('\'')); // 'Auth' or 'Private Key' or ...                              infos = new string[] { loginProfile' null' "Verification" };                          }                          break;                  }
