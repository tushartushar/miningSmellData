Implementation smell,Namespace,Class,File,Method,Description
Long Method,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,The method has 119 lines of code.
Complex Method,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,Cyclomatic complexity of the method is 14
Complex Method,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,Cyclomatic complexity of the method is 36
Complex Method,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,LoadDescription,Cyclomatic complexity of the method is 9
Complex Method,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,DeindentCode,Cyclomatic complexity of the method is 11
Complex Method,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ParseSee,Cyclomatic complexity of the method is 8
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The length of the statement  "				if (!m.HasDescription && m.DeclaringType != null && m.DeclaringType != t.FullName && typeCache.TryGetValue (m.DeclaringType' out dt) && dt.Methods != null) { " is 157.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The length of the statement  "				if (!p.HasDescription && p.DeclaringType != null && p.DeclaringType != t.FullName && typeCache.TryGetValue (p.DeclaringType' out dt) && dt.Properties != null) { " is 160.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The length of the statement  "				if (!f.HasDescription && f.DeclaringType != null && f.DeclaringType != t.FullName && typeCache.TryGetValue (f.DeclaringType' out dt) && dt.Fields != null) { " is 156.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,The length of the statement  "				foreach (var c in type.GetConstructors (BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic)) " is 132.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,The length of the statement  "						if (method.IsConstructor || !(method.IsSpecialName && (method.Name.StartsWith ("get_") || method.Name.StartsWith ("set_")))) { " is 126.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,GetMethodRefId,The length of the statement  "	sb.Append (string.Join ("'"' parameters.Select (a => a.ParameterType.IsGenericParameter ? (a.ParameterType.DeclaringMethod != null ? "``" : "`") + a.ParameterType.GenericParameterPosition : GetReadableTypeName (a.ParameterType)).ToArray ())); " is 242.
Long Statement,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,GetPropertyRefId,The length of the statement  "		sb.Append (string.Join ("'"' parameters.Select (a => a.ParameterType.IsGenericParameter ? (a.ParameterType.DeclaringMethod != null ? "``" : "`") + a.ParameterType.GenericParameterPosition : GetReadableTypeName (a.ParameterType)).ToArray ())); " is 242.
Long Statement,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,DeindentCode,The length of the statement  "	var lines = code.Split ('\n').Select (a => a.TrimEnd ('\r'' ' ')).SkipWhile (a => a.Trim () == String.Empty).ToArray (); " is 120.
Complex Conditional,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The conditional expression  "!m.HasDescription && m.DeclaringType != null && m.DeclaringType != t.FullName && typeCache.TryGetValue (m.DeclaringType' out dt) && dt.Methods != null"  is complex.
Complex Conditional,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The conditional expression  "!p.HasDescription && p.DeclaringType != null && p.DeclaringType != t.FullName && typeCache.TryGetValue (p.DeclaringType' out dt) && dt.Properties != null"  is complex.
Complex Conditional,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,UpdateInheritedMemberDescriptions,The conditional expression  "!f.HasDescription && f.DeclaringType != null && f.DeclaringType != t.FullName && typeCache.TryGetValue (f.DeclaringType' out dt) && dt.Fields != null"  is complex.
Complex Conditional,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,The conditional expression  "!type.IsSpecialName && !type.Name.StartsWith ("<") && (type.IsPublic || type.IsNestedPublic)"  is complex.
Complex Conditional,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssembly,The conditional expression  "method.IsConstructor || !(method.IsSpecialName && (method.Name.StartsWith ("get_") || method.Name.StartsWith ("set_")))"  is complex.
Magic Number,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssemblyComments,The following statement contains a magic number: if (File.Exists (path))  	using (var fr = XmlReader.Create (path)) {  		XDocument xdoc = XDocument.Load (fr);  		foreach (var member in xdoc.Descendants ("member")) {  			var nameAtt = member.Attribute ("name");  			if (nameAtt != null && !String.IsNullOrEmpty (nameAtt.Value)) {  				var memberTypeCode = nameAtt.Value [0];  				var name = nameAtt.Value.Substring (2);  				switch (memberTypeCode) {  				case 'T':  					GetType (name).ParseSummary (member);  					break;  				case 'M':  					var m = GetMethod (name);  					m.ParseSummary (member);  					if (m.Parameters != null)  						foreach (var pdesc in member.Descendants ("param")) {  							var pname = pdesc.Attribute ("name").SafeGetValue ();  							if (pname != null) {  								var p = m.Parameters.Find (a => a.Name == pname);  								if (p != null)  									p.ParseDescription (pdesc);  							}  						}  					foreach (var rdesc in member.Descendants ("returns"))  						m.ReturnDescription = rdesc.Value;  					break;  				case 'F':  					GetField (name).ParseSummary (member);  					break;  				case 'P':  					var prop = GetProperty (name);  					prop.ParseSummary (member);  					if (prop.Parameters != null)  						foreach (var pdesc in member.Descendants ("param")) {  							var pname = pdesc.Attribute ("name").SafeGetValue ();  							if (pname != null) {  								var p = prop.Parameters.Find (a => a.Name == pname);  								if (p != null)  									p.ParseDescription (pdesc);  							}  						}  					break;  				case 'E':  					var ev = GetEvent (name);  					ev.ParseSummary (member);  					break;  				}  			}  		}  	}  
Magic Number,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssemblyComments,The following statement contains a magic number: using (var fr = XmlReader.Create (path)) {  	XDocument xdoc = XDocument.Load (fr);  	foreach (var member in xdoc.Descendants ("member")) {  		var nameAtt = member.Attribute ("name");  		if (nameAtt != null && !String.IsNullOrEmpty (nameAtt.Value)) {  			var memberTypeCode = nameAtt.Value [0];  			var name = nameAtt.Value.Substring (2);  			switch (memberTypeCode) {  			case 'T':  				GetType (name).ParseSummary (member);  				break;  			case 'M':  				var m = GetMethod (name);  				m.ParseSummary (member);  				if (m.Parameters != null)  					foreach (var pdesc in member.Descendants ("param")) {  						var pname = pdesc.Attribute ("name").SafeGetValue ();  						if (pname != null) {  							var p = m.Parameters.Find (a => a.Name == pname);  							if (p != null)  								p.ParseDescription (pdesc);  						}  					}  				foreach (var rdesc in member.Descendants ("returns"))  					m.ReturnDescription = rdesc.Value;  				break;  			case 'F':  				GetField (name).ParseSummary (member);  				break;  			case 'P':  				var prop = GetProperty (name);  				prop.ParseSummary (member);  				if (prop.Parameters != null)  					foreach (var pdesc in member.Descendants ("param")) {  						var pname = pdesc.Attribute ("name").SafeGetValue ();  						if (pname != null) {  							var p = prop.Parameters.Find (a => a.Name == pname);  							if (p != null)  								p.ParseDescription (pdesc);  						}  					}  				break;  			case 'E':  				var ev = GetEvent (name);  				ev.ParseSummary (member);  				break;  			}  		}  	}  }  
Magic Number,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssemblyComments,The following statement contains a magic number: foreach (var member in xdoc.Descendants ("member")) {  	var nameAtt = member.Attribute ("name");  	if (nameAtt != null && !String.IsNullOrEmpty (nameAtt.Value)) {  		var memberTypeCode = nameAtt.Value [0];  		var name = nameAtt.Value.Substring (2);  		switch (memberTypeCode) {  		case 'T':  			GetType (name).ParseSummary (member);  			break;  		case 'M':  			var m = GetMethod (name);  			m.ParseSummary (member);  			if (m.Parameters != null)  				foreach (var pdesc in member.Descendants ("param")) {  					var pname = pdesc.Attribute ("name").SafeGetValue ();  					if (pname != null) {  						var p = m.Parameters.Find (a => a.Name == pname);  						if (p != null)  							p.ParseDescription (pdesc);  					}  				}  			foreach (var rdesc in member.Descendants ("returns"))  				m.ReturnDescription = rdesc.Value;  			break;  		case 'F':  			GetField (name).ParseSummary (member);  			break;  		case 'P':  			var prop = GetProperty (name);  			prop.ParseSummary (member);  			if (prop.Parameters != null)  				foreach (var pdesc in member.Descendants ("param")) {  					var pname = pdesc.Attribute ("name").SafeGetValue ();  					if (pname != null) {  						var p = prop.Parameters.Find (a => a.Name == pname);  						if (p != null)  							p.ParseDescription (pdesc);  					}  				}  			break;  		case 'E':  			var ev = GetEvent (name);  			ev.ParseSummary (member);  			break;  		}  	}  }  
Magic Number,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssemblyComments,The following statement contains a magic number: if (nameAtt != null && !String.IsNullOrEmpty (nameAtt.Value)) {  	var memberTypeCode = nameAtt.Value [0];  	var name = nameAtt.Value.Substring (2);  	switch (memberTypeCode) {  	case 'T':  		GetType (name).ParseSummary (member);  		break;  	case 'M':  		var m = GetMethod (name);  		m.ParseSummary (member);  		if (m.Parameters != null)  			foreach (var pdesc in member.Descendants ("param")) {  				var pname = pdesc.Attribute ("name").SafeGetValue ();  				if (pname != null) {  					var p = m.Parameters.Find (a => a.Name == pname);  					if (p != null)  						p.ParseDescription (pdesc);  				}  			}  		foreach (var rdesc in member.Descendants ("returns"))  			m.ReturnDescription = rdesc.Value;  		break;  	case 'F':  		GetField (name).ParseSummary (member);  		break;  	case 'P':  		var prop = GetProperty (name);  		prop.ParseSummary (member);  		if (prop.Parameters != null)  			foreach (var pdesc in member.Descendants ("param")) {  				var pname = pdesc.Attribute ("name").SafeGetValue ();  				if (pname != null) {  					var p = prop.Parameters.Find (a => a.Name == pname);  					if (p != null)  						p.ParseDescription (pdesc);  				}  			}  		break;  	case 'E':  		var ev = GetEvent (name);  		ev.ParseSummary (member);  		break;  	}  }  
Magic Number,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ParseSee,The following statement contains a magic number: if (cref.Length > 2 && cref [1] == ':') {  	var res = cref.Substring (2);  	var refv = res;  	switch (cref [0]) {  	case 'P':  	case 'F':  	case 'M':  		var ld = res.LastIndexOf ('.');  		if (ld != -1)  			refv = res.Substring (0' ld) + "-" + res.Substring (ld + 1);  		return new DescriptionSegment {  			Type = type'  			Text = res'  			Ref = refv  		};  	case 'T':  		return new DescriptionSegment {  			Type = type'  			Text = res'  			Ref = refv  		};  	}  }  
Magic Number,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ParseSee,The following statement contains a magic number: if (cref.Length > 2 && cref [1] == ':') {  	var res = cref.Substring (2);  	var refv = res;  	switch (cref [0]) {  	case 'P':  	case 'F':  	case 'M':  		var ld = res.LastIndexOf ('.');  		if (ld != -1)  			refv = res.Substring (0' ld) + "-" + res.Substring (ld + 1);  		return new DescriptionSegment {  			Type = type'  			Text = res'  			Ref = refv  		};  	case 'T':  		return new DescriptionSegment {  			Type = type'  			Text = res'  			Ref = refv  		};  	}  }  
Missing Default,Codaxy.Dox.Providers,XmlCommentsDoxProviderImpl,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ProcessAssemblyComments,The following switch statement is missing a default case: switch (memberTypeCode) {  case 'T':  	GetType (name).ParseSummary (member);  	break;  case 'M':  	var m = GetMethod (name);  	m.ParseSummary (member);  	if (m.Parameters != null)  		foreach (var pdesc in member.Descendants ("param")) {  			var pname = pdesc.Attribute ("name").SafeGetValue ();  			if (pname != null) {  				var p = m.Parameters.Find (a => a.Name == pname);  				if (p != null)  					p.ParseDescription (pdesc);  			}  		}  	foreach (var rdesc in member.Descendants ("returns"))  		m.ReturnDescription = rdesc.Value;  	break;  case 'F':  	GetField (name).ParseSummary (member);  	break;  case 'P':  	var prop = GetProperty (name);  	prop.ParseSummary (member);  	if (prop.Parameters != null)  		foreach (var pdesc in member.Descendants ("param")) {  			var pname = pdesc.Attribute ("name").SafeGetValue ();  			if (pname != null) {  				var p = prop.Parameters.Find (a => a.Name == pname);  				if (p != null)  					p.ParseDescription (pdesc);  			}  		}  	break;  case 'E':  	var ev = GetEvent (name);  	ev.ParseSummary (member);  	break;  }  
Missing Default,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,LoadDescription,The following switch statement is missing a default case: switch (n.NodeType) {  case XmlNodeType.Element:  	var el = (XElement)n;  	switch (el.Name.LocalName) {  	case "para":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Paragraph'  			Children = el.LoadDescription ()  		});  		break;  	case "h1":  	case "h2":  	case "h3":  	case "h4":  	case "h5":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Header'  			Text = el.Value  		});  		break;  	case "b":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Bold'  			Text = el.Value  		});  		break;  	case "strong":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Strong'  			Children = el.LoadDescription ()'  		});  		break;  	case "i":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Italic'  			Text = el.Value  		});  		break;  	case "html":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Html'  			Text = el.Value  		});  		break;  	case "example":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Example'  			Children = el.LoadDescription ()  		});  		break;  	case "see":  		segments.Add (ParseSee (DescriptionSegmentType.See' el.Attribute ("cref").SafeGetValue ()));  		break;  	case "seealso":  		segments.Add (ParseSee (DescriptionSegmentType.SeeAlso' el.Attribute ("cref").SafeGetValue ()));  		break;  	case "code":  		segments.Add (new DescriptionSegment {  			Type = DescriptionSegmentType.Code'  			Text = DeindentCode (el.Value)  		});  		break;  	}  	break;  case XmlNodeType.Text:  	var xtext = (XText)n;  	segments.Add (new DescriptionSegment {  		Text = xtext.Value'  		Type = DescriptionSegmentType.Text  	});  	break;  }  
Missing Default,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,LoadDescription,The following switch statement is missing a default case: switch (el.Name.LocalName) {  case "para":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Paragraph'  		Children = el.LoadDescription ()  	});  	break;  case "h1":  case "h2":  case "h3":  case "h4":  case "h5":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Header'  		Text = el.Value  	});  	break;  case "b":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Bold'  		Text = el.Value  	});  	break;  case "strong":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Strong'  		Children = el.LoadDescription ()'  	});  	break;  case "i":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Italic'  		Text = el.Value  	});  	break;  case "html":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Html'  		Text = el.Value  	});  	break;  case "example":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Example'  		Children = el.LoadDescription ()  	});  	break;  case "see":  	segments.Add (ParseSee (DescriptionSegmentType.See' el.Attribute ("cref").SafeGetValue ()));  	break;  case "seealso":  	segments.Add (ParseSee (DescriptionSegmentType.SeeAlso' el.Attribute ("cref").SafeGetValue ()));  	break;  case "code":  	segments.Add (new DescriptionSegment {  		Type = DescriptionSegmentType.Code'  		Text = DeindentCode (el.Value)  	});  	break;  }  
Missing Default,Codaxy.Dox.Providers,Extensions,C:\repos\codaxy_dox\Libraries\Codaxy.Dox\Codaxy.Dox.Providers.XmlComments\XmlCommentsDoxProviderImpl.cs,ParseSee,The following switch statement is missing a default case: switch (cref [0]) {  case 'P':  case 'F':  case 'M':  	var ld = res.LastIndexOf ('.');  	if (ld != -1)  		refv = res.Substring (0' ld) + "-" + res.Substring (ld + 1);  	return new DescriptionSegment {  		Type = type'  		Text = res'  		Ref = refv  	};  case 'T':  	return new DescriptionSegment {  		Type = type'  		Text = res'  		Ref = refv  	};  }  
