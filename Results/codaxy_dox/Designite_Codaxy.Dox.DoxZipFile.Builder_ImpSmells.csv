Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,Cyclomatic complexity of the method is 19
Long Statement,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,ProcessDoxygenXml,The length of the statement  "	var provider = new Codaxy.Dox.Providers.DoxygenXMLProvider (pathToXmlFiles [0]' consoleLog.ChildLogger ("xml-comments")); " is 121.
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length == 0) {  		PrintUsage ();  		return;  	}  	Provider provider = Provider.Undefined;  	var sourceFiles = new List<string> ();  	foreach (var arg in args) {  		if (arg.StartsWith ("--p:"))  			provider = ParseProvider (arg);  		else if (arg.StartsWith ("--o:"))  			outputFile = arg.Substring (4);  		else if (arg.StartsWith ("--i:"))  			sourceFiles.Add (arg.Substring (4));  	}  	if (outputFile == null)  		throw new InvalidOperationException ("Output file not specified!");  	if (sourceFiles.Count == 0)  		throw new InvalidOperationException ("Sources not specified!");  	switch (provider) {  	case Provider.XmlComments:  		ProcessXmlComments (sourceFiles);  		break;  	case Provider.Doxygen:  		ProcessDoxygenXml (sourceFiles);  		break;  	case Provider.Sql:  		ProcessSqlDoc (""' "");  		break;  	default:  		throw new InvalidOperationException ("Provider not specified!");  	}  	Console.WriteLine ("Success!");  }  catch (Exception eX) {  	Console.Error.WriteLine ("Exception ocurred. Terminating!");  	Console.Error.WriteLine (eX.ToString ());  }  finally {  	// Console.ReadKey();  }  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length == 0) {  		PrintUsage ();  		return;  	}  	Provider provider = Provider.Undefined;  	var sourceFiles = new List<string> ();  	foreach (var arg in args) {  		if (arg.StartsWith ("--p:"))  			provider = ParseProvider (arg);  		else if (arg.StartsWith ("--o:"))  			outputFile = arg.Substring (4);  		else if (arg.StartsWith ("--i:"))  			sourceFiles.Add (arg.Substring (4));  	}  	if (outputFile == null)  		throw new InvalidOperationException ("Output file not specified!");  	if (sourceFiles.Count == 0)  		throw new InvalidOperationException ("Sources not specified!");  	switch (provider) {  	case Provider.XmlComments:  		ProcessXmlComments (sourceFiles);  		break;  	case Provider.Doxygen:  		ProcessDoxygenXml (sourceFiles);  		break;  	case Provider.Sql:  		ProcessSqlDoc (""' "");  		break;  	default:  		throw new InvalidOperationException ("Provider not specified!");  	}  	Console.WriteLine ("Success!");  }  catch (Exception eX) {  	Console.Error.WriteLine ("Exception ocurred. Terminating!");  	Console.Error.WriteLine (eX.ToString ());  }  finally {  	// Console.ReadKey();  }  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if (arg.StartsWith ("--p:"))  		provider = ParseProvider (arg);  	else if (arg.StartsWith ("--o:"))  		outputFile = arg.Substring (4);  	else if (arg.StartsWith ("--i:"))  		sourceFiles.Add (arg.Substring (4));  }  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: foreach (var arg in args) {  	if (arg.StartsWith ("--p:"))  		provider = ParseProvider (arg);  	else if (arg.StartsWith ("--o:"))  		outputFile = arg.Substring (4);  	else if (arg.StartsWith ("--i:"))  		sourceFiles.Add (arg.Substring (4));  }  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--p:"))  	provider = ParseProvider (arg);  else if (arg.StartsWith ("--o:"))  	outputFile = arg.Substring (4);  else if (arg.StartsWith ("--i:"))  	sourceFiles.Add (arg.Substring (4));  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--p:"))  	provider = ParseProvider (arg);  else if (arg.StartsWith ("--o:"))  	outputFile = arg.Substring (4);  else if (arg.StartsWith ("--i:"))  	sourceFiles.Add (arg.Substring (4));  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--o:"))  	outputFile = arg.Substring (4);  else if (arg.StartsWith ("--i:"))  	sourceFiles.Add (arg.Substring (4));  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--o:"))  	outputFile = arg.Substring (4);  else if (arg.StartsWith ("--i:"))  	sourceFiles.Add (arg.Substring (4));  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: outputFile = arg.Substring (4);  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--i:"))  	sourceFiles.Add (arg.Substring (4));  
Magic Number,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,Main,The following statement contains a magic number: sourceFiles.Add (arg.Substring (4));  
Missing Default,Codaxy.Dox.DoxZipFile.Builder,Program,C:\repos\codaxy_dox\Tools\Codaxy.Dox.DoxZipFile.Builder\Program.cs,ParseProvider,The following switch statement is missing a default case: switch (p) {  case "xml":  	return Provider.XmlComments;  case "doxygen":  	return Provider.Doxygen;  case "sql":  	return Provider.Sql;  }  
