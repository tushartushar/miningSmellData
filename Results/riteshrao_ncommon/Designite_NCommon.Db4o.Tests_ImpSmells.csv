Implementation smell,Namespace,Class,File,Method,Description
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Nested_UnitOfWork_With_Different_Transaction_Works,The following statement contains a magic number: var changedOrderDate = DateTime.Now.AddDays(2);
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_OrderBy_With_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_OrderBy_With_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_OrderBy_With_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_OrderBy_With_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: Assert.That(results.Count()' Is.EqualTo(2));
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: testData.Batch(actions =>                  {                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("PA"' 2));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("DE"' 5));                      actions.CreateOrdersForCustomers(actions.CreateCustomersInState("LA"' 3));                  });
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Query_Using_QueryMethod_Returns_Matched_Records_Only,The following statement contains a magic number: Assert.That(results.Count()' Is.EqualTo(5));
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Save_Does_Not_Save_New_Customer_When_UnitOfWork_Is_Aborted,The following statement contains a magic number: var newCustomer = new Customer              {                  FirstName = ("John_" + rnd.Next(60000' 80000))'                  LastName = ("Doe_" + rnd.Next(60000' 80000))'                  Address = newAddress              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Save_Does_Not_Save_New_Customer_When_UnitOfWork_Is_Aborted,The following statement contains a magic number: var newCustomer = new Customer              {                  FirstName = ("John_" + rnd.Next(60000' 80000))'                  LastName = ("Doe_" + rnd.Next(60000' 80000))'                  Address = newAddress              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Save_Does_Not_Save_New_Customer_When_UnitOfWork_Is_Aborted,The following statement contains a magic number: var newCustomer = new Customer              {                  FirstName = ("John_" + rnd.Next(60000' 80000))'                  LastName = ("Doe_" + rnd.Next(60000' 80000))'                  Address = newAddress              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oRepositoryTests,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oRepositoryTests.cs,Save_Does_Not_Save_New_Customer_When_UnitOfWork_Is_Aborted,The following statement contains a magic number: var newCustomer = new Customer              {                  FirstName = ("John_" + rnd.Next(60000' 80000))'                  LastName = ("Doe_" + rnd.Next(60000' 80000))'                  Address = newAddress              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oTestDataActions,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oTestDataActions.cs,CreateOrderForCustomer,The following statement contains a magic number: var order = new Order              {                  Customer = customer'                  OrderDate = DateTime.Now.AddDays(-5)'                  ShipDate = DateTime.Now.AddDays(5)              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oTestDataActions,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oTestDataActions.cs,CreateOrderForCustomer,The following statement contains a magic number: var order = new Order              {                  Customer = customer'                  OrderDate = DateTime.Now.AddDays(-5)'                  ShipDate = DateTime.Now.AddDays(5)              };
Magic Number,NCommon.Data.Db4o.Tests,Db4oTestDataActions,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Db4oTestDataActions.cs,CreateItem,The following statement contains a magic number: return new OrderItem              {                  Order = order'                  Price = 1'                  Product = product'                  Quantity = 3'                  Store = "Internet"              };
Magic Number,NCommon.Data.Db4o.Tests.Domain,Money,C:\research\architectureSmells\repos\riteshrao_ncommon\NCommon.Db4o\tests\Domain\Money.cs,GetHashCode,The following statement contains a magic number: return (this.Amount.GetHashCode() * 397) ^ (this.Currency != null ? this.Currency.GetHashCode() : 0);
