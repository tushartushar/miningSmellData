Implementation smell,Namespace,Class,File,Method,Description
Long Method,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,LogIn,The method has 101 lines of code.
Complex Method,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,LogIn,Cyclomatic complexity of the method is 12
Complex Method,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetQuotes,Cyclomatic complexity of the method is 22
Complex Method,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,Cyclomatic complexity of the method is 11
Complex Method,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,CreateWatchlist,Cyclomatic complexity of the method is 8
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,LogIn,The length of the statement  "	var response = await this.http.PostAsync ("/apps/300/LogIn?source=" + Uri.EscapeDataString (this.key) + "&version=" + Uri.EscapeDataString (this.version)' new FormUrlEncodedContent (new[] { " is 189.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,LogIn,The length of the statement  "		this.UserAuthorizations = node.Element ("authorizations").Elements ().ToDictionary (x => x.Name.LocalName' x => x.Value == "true"); " is 131.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetStreamerInfo,The length of the statement  "	var url = "/apps/100/StreamerInfo?source=" + Uri.EscapeDataString (this.key) + (accountID == null ? string.Empty : "&accountid=" + Uri.EscapeDataString (accountID)); " is 165.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetQuotes,The length of the statement  "	var url = "/apps/100/Quote?source=" + Uri.EscapeDataString (this.key) + "&symbol=" + string.Join ("'"' symbols.Select (x => Uri.EscapeDataString (x.Trim ()))); " is 159.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The length of the statement  "	var now = TimeZoneInfo.ConvertTimeFromUtc (DateTime.UtcNow' TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time")); " is 123.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The length of the statement  "	var url = "/apps/100/PriceHistory?source=" + Uri.EscapeDataString (this.key) + "&requestidentifiertype=SYMBOL" + "&requestvalue=" + Uri.EscapeDataString (string.Join ("'"' symbols)) + "&intervaltype=DAILY&intervalduration=1&startdate=" + fromDate.ToString ("yyyyMMdd") + "&enddate=" + toDate.ToString ("yyyyMMdd"); " is 314.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,FindSymbols,The length of the statement  "	var text = await this.http.GetStringAsync ("/apps/100/SymbolLookup?source=" + Uri.EscapeDataString (this.key) + "&matchstring=" + Uri.EscapeDataString (search)); " is 161.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,CancelOrder,The length of the statement  "	var url = "/apps/100/OrderCancel?source=" + Uri.EscapeDataString (this.key) + (string.IsNullOrWhiteSpace (accountID) ? string.Empty : "&accountid=" + accountID) + "&orderid=" + Uri.EscapeDataString (orderID); " is 208.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,CreateWatchlist,The length of the statement  "	var xml = await this.http.GetXmlAsync ("/apps/100/CreateWatchlist?source=" + Uri.EscapeDataString (this.key) + "&watchlistname=" + Uri.EscapeDataString (name) + "&symbollist=" + string.Join ("'"' items.Select (x => Uri.EscapeDataString (x.Symbol)))); " is 250.
Long Statement,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,DeleteWatchlists,The length of the statement  "	var url = "/apps/100/DeleteWatchlist?source=" + Uri.EscapeDataString (this.key) + "&listid=" + Uri.EscapeDataString (watchlistID) + (string.IsNullOrWhiteSpace (accountID) ? string.Empty : "&accountid=" + accountID); " is 215.
Long Statement,TDAmeritrade.Client.Utility,Settings,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\Utility\Settings.cs,Set,The length of the statement  "	Registry.CurrentUser.CreateSubKey ("Software\\KriaSoft\\TD Ameritrade Client Library for .NET").SetValue (name' value' RegistryValueKind.DWord); " is 144.
Long Statement,TDAmeritrade.Client.Utility,Settings,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\Utility\Settings.cs,SetProtected,The length of the statement  "	var encryptedData = ProtectedData.Protect (Encoding.Unicode.GetBytes (value)' entropy' DataProtectionScope.CurrentUser); " is 120.
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var stream = await this.http.GetStreamAsync (url))  	using (var reader = new BinaryReader (stream)) {  		var numSymbols = reader.ReadInt32BE ();  		for (var i = 0; i < numSymbols; i++) {  			var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			if (reader.ReadByte () == 1/* has error */) {  				var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  				// TODO: Handle error  				continue;  			}  			var numQuotes = reader.ReadInt32BE ();  			var quotes = new Quote[numQuotes];  			for (var j = numQuotes - 1; j > -1; j--) {  				quotes [j] = new Quote {  					Close = reader.ToSingleBE ()'  					High = reader.ToSingleBE ()'  					Low = reader.ToSingleBE ()'  					Open = reader.ToSingleBE ()'  					Volume = reader.ToSingleBE ()'  					Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  				};  			}  			result.Add (symbol' quotes);  			if (i < numSymbols - 1) {  				var termBytes = reader.ReadBytes (2);  				if (!termBytes.SequenceEqual (new byte[] {  					255'  					255  				})) {  					throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  				}  			}  		}  	}  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var stream = await this.http.GetStreamAsync (url))  	using (var reader = new BinaryReader (stream)) {  		var numSymbols = reader.ReadInt32BE ();  		for (var i = 0; i < numSymbols; i++) {  			var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			if (reader.ReadByte () == 1/* has error */) {  				var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  				// TODO: Handle error  				continue;  			}  			var numQuotes = reader.ReadInt32BE ();  			var quotes = new Quote[numQuotes];  			for (var j = numQuotes - 1; j > -1; j--) {  				quotes [j] = new Quote {  					Close = reader.ToSingleBE ()'  					High = reader.ToSingleBE ()'  					Low = reader.ToSingleBE ()'  					Open = reader.ToSingleBE ()'  					Volume = reader.ToSingleBE ()'  					Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  				};  			}  			result.Add (symbol' quotes);  			if (i < numSymbols - 1) {  				var termBytes = reader.ReadBytes (2);  				if (!termBytes.SequenceEqual (new byte[] {  					255'  					255  				})) {  					throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  				}  			}  		}  	}  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var stream = await this.http.GetStreamAsync (url))  	using (var reader = new BinaryReader (stream)) {  		var numSymbols = reader.ReadInt32BE ();  		for (var i = 0; i < numSymbols; i++) {  			var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			if (reader.ReadByte () == 1/* has error */) {  				var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  				// TODO: Handle error  				continue;  			}  			var numQuotes = reader.ReadInt32BE ();  			var quotes = new Quote[numQuotes];  			for (var j = numQuotes - 1; j > -1; j--) {  				quotes [j] = new Quote {  					Close = reader.ToSingleBE ()'  					High = reader.ToSingleBE ()'  					Low = reader.ToSingleBE ()'  					Open = reader.ToSingleBE ()'  					Volume = reader.ToSingleBE ()'  					Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  				};  			}  			result.Add (symbol' quotes);  			if (i < numSymbols - 1) {  				var termBytes = reader.ReadBytes (2);  				if (!termBytes.SequenceEqual (new byte[] {  					255'  					255  				})) {  					throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  				}  			}  		}  	}  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var stream = await this.http.GetStreamAsync (url))  	using (var reader = new BinaryReader (stream)) {  		var numSymbols = reader.ReadInt32BE ();  		for (var i = 0; i < numSymbols; i++) {  			var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			if (reader.ReadByte () == 1/* has error */) {  				var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  				// TODO: Handle error  				continue;  			}  			var numQuotes = reader.ReadInt32BE ();  			var quotes = new Quote[numQuotes];  			for (var j = numQuotes - 1; j > -1; j--) {  				quotes [j] = new Quote {  					Close = reader.ToSingleBE ()'  					High = reader.ToSingleBE ()'  					Low = reader.ToSingleBE ()'  					Open = reader.ToSingleBE ()'  					Volume = reader.ToSingleBE ()'  					Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  				};  			}  			result.Add (symbol' quotes);  			if (i < numSymbols - 1) {  				var termBytes = reader.ReadBytes (2);  				if (!termBytes.SequenceEqual (new byte[] {  					255'  					255  				})) {  					throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  				}  			}  		}  	}  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var stream = await this.http.GetStreamAsync (url))  	using (var reader = new BinaryReader (stream)) {  		var numSymbols = reader.ReadInt32BE ();  		for (var i = 0; i < numSymbols; i++) {  			var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			if (reader.ReadByte () == 1/* has error */) {  				var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  				// TODO: Handle error  				continue;  			}  			var numQuotes = reader.ReadInt32BE ();  			var quotes = new Quote[numQuotes];  			for (var j = numQuotes - 1; j > -1; j--) {  				quotes [j] = new Quote {  					Close = reader.ToSingleBE ()'  					High = reader.ToSingleBE ()'  					Low = reader.ToSingleBE ()'  					Open = reader.ToSingleBE ()'  					Volume = reader.ToSingleBE ()'  					Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  				};  			}  			result.Add (symbol' quotes);  			if (i < numSymbols - 1) {  				var termBytes = reader.ReadBytes (2);  				if (!termBytes.SequenceEqual (new byte[] {  					255'  					255  				})) {  					throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  				}  			}  		}  	}  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var numSymbols = reader.ReadInt32BE ();  	for (var i = 0; i < numSymbols; i++) {  		var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		if (reader.ReadByte () == 1/* has error */) {  			var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			// TODO: Handle error  			continue;  		}  		var numQuotes = reader.ReadInt32BE ();  		var quotes = new Quote[numQuotes];  		for (var j = numQuotes - 1; j > -1; j--) {  			quotes [j] = new Quote {  				Close = reader.ToSingleBE ()'  				High = reader.ToSingleBE ()'  				Low = reader.ToSingleBE ()'  				Open = reader.ToSingleBE ()'  				Volume = reader.ToSingleBE ()'  				Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  			};  		}  		result.Add (symbol' quotes);  		if (i < numSymbols - 1) {  			var termBytes = reader.ReadBytes (2);  			if (!termBytes.SequenceEqual (new byte[] {  				255'  				255  			})) {  				throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  			}  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var numSymbols = reader.ReadInt32BE ();  	for (var i = 0; i < numSymbols; i++) {  		var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		if (reader.ReadByte () == 1/* has error */) {  			var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			// TODO: Handle error  			continue;  		}  		var numQuotes = reader.ReadInt32BE ();  		var quotes = new Quote[numQuotes];  		for (var j = numQuotes - 1; j > -1; j--) {  			quotes [j] = new Quote {  				Close = reader.ToSingleBE ()'  				High = reader.ToSingleBE ()'  				Low = reader.ToSingleBE ()'  				Open = reader.ToSingleBE ()'  				Volume = reader.ToSingleBE ()'  				Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  			};  		}  		result.Add (symbol' quotes);  		if (i < numSymbols - 1) {  			var termBytes = reader.ReadBytes (2);  			if (!termBytes.SequenceEqual (new byte[] {  				255'  				255  			})) {  				throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  			}  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var numSymbols = reader.ReadInt32BE ();  	for (var i = 0; i < numSymbols; i++) {  		var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		if (reader.ReadByte () == 1/* has error */) {  			var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			// TODO: Handle error  			continue;  		}  		var numQuotes = reader.ReadInt32BE ();  		var quotes = new Quote[numQuotes];  		for (var j = numQuotes - 1; j > -1; j--) {  			quotes [j] = new Quote {  				Close = reader.ToSingleBE ()'  				High = reader.ToSingleBE ()'  				Low = reader.ToSingleBE ()'  				Open = reader.ToSingleBE ()'  				Volume = reader.ToSingleBE ()'  				Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  			};  		}  		result.Add (symbol' quotes);  		if (i < numSymbols - 1) {  			var termBytes = reader.ReadBytes (2);  			if (!termBytes.SequenceEqual (new byte[] {  				255'  				255  			})) {  				throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  			}  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var numSymbols = reader.ReadInt32BE ();  	for (var i = 0; i < numSymbols; i++) {  		var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		if (reader.ReadByte () == 1/* has error */) {  			var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			// TODO: Handle error  			continue;  		}  		var numQuotes = reader.ReadInt32BE ();  		var quotes = new Quote[numQuotes];  		for (var j = numQuotes - 1; j > -1; j--) {  			quotes [j] = new Quote {  				Close = reader.ToSingleBE ()'  				High = reader.ToSingleBE ()'  				Low = reader.ToSingleBE ()'  				Open = reader.ToSingleBE ()'  				Volume = reader.ToSingleBE ()'  				Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  			};  		}  		result.Add (symbol' quotes);  		if (i < numSymbols - 1) {  			var termBytes = reader.ReadBytes (2);  			if (!termBytes.SequenceEqual (new byte[] {  				255'  				255  			})) {  				throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  			}  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var numSymbols = reader.ReadInt32BE ();  	for (var i = 0; i < numSymbols; i++) {  		var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		if (reader.ReadByte () == 1/* has error */) {  			var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  			// TODO: Handle error  			continue;  		}  		var numQuotes = reader.ReadInt32BE ();  		var quotes = new Quote[numQuotes];  		for (var j = numQuotes - 1; j > -1; j--) {  			quotes [j] = new Quote {  				Close = reader.ToSingleBE ()'  				High = reader.ToSingleBE ()'  				Low = reader.ToSingleBE ()'  				Open = reader.ToSingleBE ()'  				Volume = reader.ToSingleBE ()'  				Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  			};  		}  		result.Add (symbol' quotes);  		if (i < numSymbols - 1) {  			var termBytes = reader.ReadBytes (2);  			if (!termBytes.SequenceEqual (new byte[] {  				255'  				255  			})) {  				throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  			}  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var i = 0; i < numSymbols; i++) {  	var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  	if (reader.ReadByte () == 1/* has error */) {  		var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		// TODO: Handle error  		continue;  	}  	var numQuotes = reader.ReadInt32BE ();  	var quotes = new Quote[numQuotes];  	for (var j = numQuotes - 1; j > -1; j--) {  		quotes [j] = new Quote {  			Close = reader.ToSingleBE ()'  			High = reader.ToSingleBE ()'  			Low = reader.ToSingleBE ()'  			Open = reader.ToSingleBE ()'  			Volume = reader.ToSingleBE ()'  			Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  		};  	}  	result.Add (symbol' quotes);  	if (i < numSymbols - 1) {  		var termBytes = reader.ReadBytes (2);  		if (!termBytes.SequenceEqual (new byte[] {  			255'  			255  		})) {  			throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var i = 0; i < numSymbols; i++) {  	var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  	if (reader.ReadByte () == 1/* has error */) {  		var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		// TODO: Handle error  		continue;  	}  	var numQuotes = reader.ReadInt32BE ();  	var quotes = new Quote[numQuotes];  	for (var j = numQuotes - 1; j > -1; j--) {  		quotes [j] = new Quote {  			Close = reader.ToSingleBE ()'  			High = reader.ToSingleBE ()'  			Low = reader.ToSingleBE ()'  			Open = reader.ToSingleBE ()'  			Volume = reader.ToSingleBE ()'  			Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  		};  	}  	result.Add (symbol' quotes);  	if (i < numSymbols - 1) {  		var termBytes = reader.ReadBytes (2);  		if (!termBytes.SequenceEqual (new byte[] {  			255'  			255  		})) {  			throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var i = 0; i < numSymbols; i++) {  	var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  	if (reader.ReadByte () == 1/* has error */) {  		var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		// TODO: Handle error  		continue;  	}  	var numQuotes = reader.ReadInt32BE ();  	var quotes = new Quote[numQuotes];  	for (var j = numQuotes - 1; j > -1; j--) {  		quotes [j] = new Quote {  			Close = reader.ToSingleBE ()'  			High = reader.ToSingleBE ()'  			Low = reader.ToSingleBE ()'  			Open = reader.ToSingleBE ()'  			Volume = reader.ToSingleBE ()'  			Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  		};  	}  	result.Add (symbol' quotes);  	if (i < numSymbols - 1) {  		var termBytes = reader.ReadBytes (2);  		if (!termBytes.SequenceEqual (new byte[] {  			255'  			255  		})) {  			throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var i = 0; i < numSymbols; i++) {  	var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  	if (reader.ReadByte () == 1/* has error */) {  		var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		// TODO: Handle error  		continue;  	}  	var numQuotes = reader.ReadInt32BE ();  	var quotes = new Quote[numQuotes];  	for (var j = numQuotes - 1; j > -1; j--) {  		quotes [j] = new Quote {  			Close = reader.ToSingleBE ()'  			High = reader.ToSingleBE ()'  			Low = reader.ToSingleBE ()'  			Open = reader.ToSingleBE ()'  			Volume = reader.ToSingleBE ()'  			Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  		};  	}  	result.Add (symbol' quotes);  	if (i < numSymbols - 1) {  		var termBytes = reader.ReadBytes (2);  		if (!termBytes.SequenceEqual (new byte[] {  			255'  			255  		})) {  			throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var i = 0; i < numSymbols; i++) {  	var symbol = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  	if (reader.ReadByte () == 1/* has error */) {  		var error = Encoding.ASCII.GetString (reader.ReadBytes (reader.ReadInt16BE ()));  		// TODO: Handle error  		continue;  	}  	var numQuotes = reader.ReadInt32BE ();  	var quotes = new Quote[numQuotes];  	for (var j = numQuotes - 1; j > -1; j--) {  		quotes [j] = new Quote {  			Close = reader.ToSingleBE ()'  			High = reader.ToSingleBE ()'  			Low = reader.ToSingleBE ()'  			Open = reader.ToSingleBE ()'  			Volume = reader.ToSingleBE ()'  			Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  		};  	}  	result.Add (symbol' quotes);  	if (i < numSymbols - 1) {  		var termBytes = reader.ReadBytes (2);  		if (!termBytes.SequenceEqual (new byte[] {  			255'  			255  		})) {  			throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  		}  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var j = numQuotes - 1; j > -1; j--) {  	quotes [j] = new Quote {  		Close = reader.ToSingleBE ()'  		High = reader.ToSingleBE ()'  		Low = reader.ToSingleBE ()'  		Open = reader.ToSingleBE ()'  		Volume = reader.ToSingleBE ()'  		Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  	};  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: for (var j = numQuotes - 1; j > -1; j--) {  	quotes [j] = new Quote {  		Close = reader.ToSingleBE ()'  		High = reader.ToSingleBE ()'  		Low = reader.ToSingleBE ()'  		Open = reader.ToSingleBE ()'  		Volume = reader.ToSingleBE ()'  		Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  	};  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: quotes [j] = new Quote {  	Close = reader.ToSingleBE ()'  	High = reader.ToSingleBE ()'  	Low = reader.ToSingleBE ()'  	Open = reader.ToSingleBE ()'  	Volume = reader.ToSingleBE ()'  	Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  };  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: quotes [j] = new Quote {  	Close = reader.ToSingleBE ()'  	High = reader.ToSingleBE ()'  	Low = reader.ToSingleBE ()'  	Open = reader.ToSingleBE ()'  	Volume = reader.ToSingleBE ()'  	Date = new DateTime (1970' 1' 1).AddSeconds (reader.ReadInt64BE () / 1000)  };  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: if (i < numSymbols - 1) {  	var termBytes = reader.ReadBytes (2);  	if (!termBytes.SequenceEqual (new byte[] {  		255'  		255  	})) {  		throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: if (i < numSymbols - 1) {  	var termBytes = reader.ReadBytes (2);  	if (!termBytes.SequenceEqual (new byte[] {  		255'  		255  	})) {  		throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: if (i < numSymbols - 1) {  	var termBytes = reader.ReadBytes (2);  	if (!termBytes.SequenceEqual (new byte[] {  		255'  		255  	})) {  		throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  	}  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: if (!termBytes.SequenceEqual (new byte[] {  	255'  	255  })) {  	throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  }  
Magic Number,TDAmeritrade.Client,AmeritradeClient,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\AmeritradeClient.cs,GetHistoricalPrices,The following statement contains a magic number: if (!termBytes.SequenceEqual (new byte[] {  	255'  	255  })) {  	throw new ApplicationException (Errors.UnexpectedEnfOfPriceData);  }  
Magic Number,TDAmeritrade.Client.Utility,Settings,F:\newReposMay17\kriasoft_tdameritrade\TDAmeritrade.Client\Utility\Settings.cs,GetEntropy,The following statement contains a magic number: return Get ("Entropy"' defaultValue: () => {  	var val = new byte[20];  	using (var rng = new RNGCryptoServiceProvider ()) {  		rng.GetBytes (val);  	}  	return val;  });  
