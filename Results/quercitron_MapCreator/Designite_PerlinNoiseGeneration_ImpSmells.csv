Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,Cyclomatic complexity of the method is 9
Long Parameter List,PerlinNoiseGeneration,INoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\INoiseGenerator.cs,GenerateNoise,The method has 5 parameters.
Long Parameter List,PerlinNoiseGeneration,NoiseDecorator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\NoiseDecoration\NoiseDecorator.cs,GenerateNoise,The method has 5 parameters.
Long Parameter List,PerlinNoiseGeneration,NormNoiseDecorator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\NoiseDecoration\NormNoiseDecorator.cs,GenerateNoise,The method has 5 parameters.
Long Parameter List,PerlinNoiseGeneration,SlowedHeightIncreaseNoiseDecorator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\NoiseDecoration\SlowedHeightIncreaseNoiseDecorator.cs,GenerateNoise,The method has 5 parameters.
Long Parameter List,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The method has 5 parameters.
Long Parameter List,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,GenerateNoise,The method has 5 parameters.
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: foreach (var component in noiseComponents) {  	var freqX = 2.0 * width / (width + height) * component.Frequency;  	var freqY = 2.0 * height / (width + height) * component.Frequency;  	int n = (int)Math.Ceiling (freqX);  	int m = (int)Math.Ceiling (freqY);  	var abc = new double[n + 1' m + 1];  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			abc [i' j] = randomGenerator.NextDouble () * component.Amplitude;  		}  	}  	for (int i = 0; i < n + 1; i++) {  		for (int j = 0; j < m + 1; j++) {  			if (i % 2 == 0 && j % 2 == 0) {  				abc [i' j] = .999;  			}  			else {  				abc [i' j] = .001;  			}  		}  	}  	for (int x = 0; x < width; x++) {  		for (int y = 0; y < height; y++) {  			var aX = x * freqX / width;  			var i = (int)aX;  			var shiftX = aX - i;  			var aY = y * freqY / height;  			var j = (int)aY;  			var shiftY = aY - j;  			var val1 = InterpolateCos (abc [i' j]' abc [i + 1' j]' shiftX);  			var val2 = InterpolateCos (abc [i' j + 1]' abc [i + 1' j + 1]' shiftX);  			var val = InterpolateCos (val1' val2' shiftY);  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i' j]                                   + shiftX * (1 - shiftY) * abc[i + 1' j]                                   + (1 - shiftX) * shiftY * abc[i' j + 1]                                   + shiftX * shiftY * abc[i + 1' j + 1];*/// reflected' very funny  			/*var val = (1 - shiftX) * (1 - shiftY) * abc[i + 1' j + 1]                                   + shiftX * (1 - shiftY) * abc[i' j + 1]                                   + (1 - shiftX) * shiftY * abc[i + 1' j]                                   + shiftX * shiftY * abc[i' j];*/result [x' y] += val;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	for (int j = 0; j < m + 1; j++) {  		if (i % 2 == 0 && j % 2 == 0) {  			abc [i' j] = .999;  		}  		else {  			abc [i' j] = .001;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	for (int j = 0; j < m + 1; j++) {  		if (i % 2 == 0 && j % 2 == 0) {  			abc [i' j] = .999;  		}  		else {  			abc [i' j] = .001;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	for (int j = 0; j < m + 1; j++) {  		if (i % 2 == 0 && j % 2 == 0) {  			abc [i' j] = .999;  		}  		else {  			abc [i' j] = .001;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int i = 0; i < n + 1; i++) {  	for (int j = 0; j < m + 1; j++) {  		if (i % 2 == 0 && j % 2 == 0) {  			abc [i' j] = .999;  		}  		else {  			abc [i' j] = .001;  		}  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int j = 0; j < m + 1; j++) {  	if (i % 2 == 0 && j % 2 == 0) {  		abc [i' j] = .999;  	}  	else {  		abc [i' j] = .001;  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int j = 0; j < m + 1; j++) {  	if (i % 2 == 0 && j % 2 == 0) {  		abc [i' j] = .999;  	}  	else {  		abc [i' j] = .001;  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int j = 0; j < m + 1; j++) {  	if (i % 2 == 0 && j % 2 == 0) {  		abc [i' j] = .999;  	}  	else {  		abc [i' j] = .001;  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: for (int j = 0; j < m + 1; j++) {  	if (i % 2 == 0 && j % 2 == 0) {  		abc [i' j] = .999;  	}  	else {  		abc [i' j] = .001;  	}  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: if (i % 2 == 0 && j % 2 == 0) {  	abc [i' j] = .999;  }  else {  	abc [i' j] = .001;  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: if (i % 2 == 0 && j % 2 == 0) {  	abc [i' j] = .999;  }  else {  	abc [i' j] = .001;  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: if (i % 2 == 0 && j % 2 == 0) {  	abc [i' j] = .999;  }  else {  	abc [i' j] = .001;  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: if (i % 2 == 0 && j % 2 == 0) {  	abc [i' j] = .999;  }  else {  	abc [i' j] = .001;  }  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: abc [i' j] = .999;  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGenerator.cs,GenerateNoise,The following statement contains a magic number: abc [i' j] = .001;  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2D,The following statement contains a magic number: n = (n << 13) ^ n;  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);  
Magic Number,PerlinNoiseGeneration,PerlinNoiseGeneratorOld,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\PerlinNoiseGeneratorOld.cs,Noise2DByRandomClass,The following statement contains a magic number: return new Random (x + 10000 * y).NextDouble ();  
Magic Number,PerlinNoiseGeneration,StandardComponentGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\StandardComponentGenerator.cs,GetComponents,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	yield return new NoiseComponent (amplitude' frequency);  	amplitude /= 2;  	frequency *= 2;  }  
Magic Number,PerlinNoiseGeneration,StandardComponentGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\StandardComponentGenerator.cs,GetComponents,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	yield return new NoiseComponent (amplitude' frequency);  	amplitude /= 2;  	frequency *= 2;  }  
Magic Number,PerlinNoiseGeneration,StandardComponentGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\StandardComponentGenerator.cs,GetComponents,The following statement contains a magic number: amplitude /= 2;  
Magic Number,PerlinNoiseGeneration,StandardComponentGenerator,C:\repos\quercitron_MapCreator\PerlinNoiseGenerator\StandardComponentGenerator.cs,GetComponents,The following statement contains a magic number: frequency *= 2;  
