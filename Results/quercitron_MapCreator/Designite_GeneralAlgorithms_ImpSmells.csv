Implementation smell,Namespace,Class,File,Method,Description
Long Statement,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The length of the statement  "	while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) { " is 194.
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Up,The following statement contains a magic number: while (index > 1 && m_Comparison.Invoke (m_List [index - 1]' m_List [index / 2 - 1]) > 0) {  	Swap (index - 1' index / 2 - 1);  	index = index / 2;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Up,The following statement contains a magic number: while (index > 1 && m_Comparison.Invoke (m_List [index - 1]' m_List [index / 2 - 1]) > 0) {  	Swap (index - 1' index / 2 - 1);  	index = index / 2;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Up,The following statement contains a magic number: while (index > 1 && m_Comparison.Invoke (m_List [index - 1]' m_List [index / 2 - 1]) > 0) {  	Swap (index - 1' index / 2 - 1);  	index = index / 2;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Up,The following statement contains a magic number: Swap (index - 1' index / 2 - 1);  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Up,The following statement contains a magic number: index = index / 2;  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: while (2 * index <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index - 1]) < 0 || 2 * index + 1 <= Count && m_Comparison.Invoke (m_List [index - 1]' m_List [2 * index]) < 0) {  	if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  		Swap (index - 1' 2 * index - 1);  		index = 2 * index;  	}  	else {  		Swap (index - 1' 2 * index);  		index = 2 * index + 1;  	}  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: if (2 * index + 1 > Count || m_Comparison.Invoke (m_List [2 * index - 1]' m_List [2 * index]) > 0) {  	Swap (index - 1' 2 * index - 1);  	index = 2 * index;  }  else {  	Swap (index - 1' 2 * index);  	index = 2 * index + 1;  }  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: Swap (index - 1' 2 * index - 1);  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: index = 2 * index;  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: Swap (index - 1' 2 * index);  
Magic Number,GeneralAlgorithms.PriorityQueue,PriorityQueue,C:\repos\quercitron_MapCreator\GeneralAlgorithms\PriorityQueue\PriorityQueue.cs,Down,The following statement contains a magic number: index = 2 * index + 1;  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,NextBytes,The following statement contains a magic number: for (Int32 idx = 0; idx < bufLen; ++idx) {  	buffer [idx] = (Byte)Next (256);  }  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,NextBytes,The following statement contains a magic number: buffer [idx] = (Byte)Next (256);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,NextDoublePositive,The following statement contains a magic number: return compute53BitRandom (0.5' Inverse53BitsOf1s);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,temperingShiftU,The following statement contains a magic number: return (y >> 11);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,temperingShiftS,The following statement contains a magic number: return (y << 7);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,temperingShiftT,The following statement contains a magic number: return (y << 15);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,temperingShiftL,The following statement contains a magic number: return (y >> 18);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: for (_mti = 1; _mti < N; _mti++) {  	_mt [_mti] = (uint)(1812433253U * (_mt [_mti - 1] ^ (_mt [_mti - 1] >> 30)) + _mti);  	// See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier.   	// In the previous versions' MSBs of the seed affect     	// only MSBs of the array _mt[].                          	// 2002/01/09 modified by Makoto Matsumoto               	_mt [_mti] &= 0xffffffffU;  	// for >32 bit machines  }  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: _mt [_mti] = (uint)(1812433253U * (_mt [_mti - 1] ^ (_mt [_mti - 1] >> 30)) + _mti);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: for (; k > 0; k--) {  	_mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1664525U)) + key [j] + j);  	/* non linear */_mt [i] &= 0xffffffffU;  	// for WORDSIZE > 32 machines  	i++;  	j++;  	if (i >= N) {  		_mt [0] = _mt [N - 1];  		i = 1;  	}  	if (j >= keyLength)  		j = 0;  }  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: _mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1664525U)) + key [j] + j);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: for (k = N - 1; k > 0; k--) {  	_mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1566083941U)) - i);  	/* non linear */_mt [i] &= 0xffffffffU;  	// for WORDSIZE > 32 machines  	i++;  	if (i < N) {  		continue;  	}  	_mt [0] = _mt [N - 1];  	i = 1;  }  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,init,The following statement contains a magic number: _mt [i] = (uint)((_mt [i] ^ ((_mt [i - 1] ^ (_mt [i - 1] >> 30)) * 1566083941U)) - i);  
Magic Number,NPack,MersenneTwister,C:\repos\quercitron_MapCreator\GeneralAlgorithms\RandomGenerator\MersenneTwisterGenerator\MersenneTwister.cs,compute53BitRandom,The following statement contains a magic number: return ((a * 67108864.0 + b) + translate) * scale;  
