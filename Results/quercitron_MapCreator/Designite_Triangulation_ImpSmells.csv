Implementation smell,Namespace,Class,File,Method,Description
Long Method,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The method has 101 lines of code.
Long Method,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The method has 120 lines of code.
Long Method,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The method has 212 lines of code.
Complex Method,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,Cyclomatic complexity of the method is 11
Complex Method,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,Cyclomatic complexity of the method is 19
Complex Method,Triangulation.MapBuilding.LandGenerators,ImprovedPerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\ImprovedPerlinNoiseLandGenerator.cs,Build,Cyclomatic complexity of the method is 9
Complex Method,Triangulation.MapBuilding.LandGenerators,PerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\PerlinNoiseLandGenerator.cs,Build,Cyclomatic complexity of the method is 8
Complex Method,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,AddIsland,Cyclomatic complexity of the method is 8
Complex Method,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,Cyclomatic complexity of the method is 9
Complex Method,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,Build,Cyclomatic complexity of the method is 9
Complex Method,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,Cyclomatic complexity of the method is 19
Complex Method,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,Cyclomatic complexity of the method is 11
Complex Method,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,Cyclomatic complexity of the method is 17
Complex Method,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,Cyclomatic complexity of the method is 67
Complex Method,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,Cyclomatic complexity of the method is 27
Complex Method,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,Cyclomatic complexity of the method is 51
Long Parameter List,Triangulation,INoiseLineGenerator,C:\repos\quercitron_MapCreator\Triangulation\INoiseLineGenerator.cs,Generate,The method has 6 parameters.
Long Parameter List,Triangulation,NoiseLineGenerator,C:\repos\quercitron_MapCreator\Triangulation\NoiseLineGenerator.cs,Generate,The method has 6 parameters.
Long Parameter List,Triangulation,NoiseLineGenerator,C:\repos\quercitron_MapCreator\Triangulation\NoiseLineGenerator.cs,Subdivide,The method has 6 parameters.
Long Parameter List,Triangulation.MapBuilding,DefineOcean,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\DefineOcean.cs,Build,The method has 5 parameters.
Long Parameter List,Triangulation.MapBuilding.Elevation,BaseElevationGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\BaseElevationGenerator.cs,NormalizeCornerElevation,The method has 5 parameters.
Long Parameter List,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The method has 8 parameters.
Long Parameter List,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The method has 6 parameters.
Long Parameter List,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,Build,The method has 5 parameters.
Long Parameter List,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The method has 7 parameters.
Long Parameter List,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The method has 8 parameters.
Long Parameter List,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The method has 16 parameters.
Long Identifier,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The length of the parameter minStreamHeightForRandomRivers is 30.
Long Statement,Triangulation,MapCreatorModel,C:\repos\quercitron_MapCreator\Triangulation\MapCreatorModel.cs,UpdateMap,The length of the statement  "	var thread = new Thread (() => m_Map = m_MapFactory.CreateMap (m_Structure' Seed' m_DefaultSettings)' 1024 * 1024 * 100); " is 121.
Long Statement,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The length of the statement  "            }*/var noise = new NormNoiseDecorator (m_NoiseGenerator).GenerateNoise ((int)map.Width' (int)map.Height' m_Random.Next ()' 4); " is 126.
Long Statement,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The length of the statement  "	//var noise = new NormNoiseDecorator(m_NoiseGenerator).GenerateNoise((int)map.Width' (int)map.Height' new Random().Next()' 10); " is 127.
Long Statement,Triangulation.MapBuilding.LandGenerators,PerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\PerlinNoiseLandGenerator.cs,Build,The length of the statement  "			/*polygon.IsLand = noise[(int) center.X' (int) center.Y] * (map.Width / (4 * dist + map.Width)) > 0.25;*/polygon.IsLand = noiseValue > (this.BaseK + (dist > l ? (1 - this.BaseK) * (dist / l - 1) : 0)); " is 201.
Long Statement,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The length of the statement  "			var borderPoints = m_NoiseLineGenerator.Generate (border.Corners [0]' border.Polygons [0].BasePoint' border.Corners [1]' border.Polygons [1].BasePoint' 2' true); " is 161.
Long Statement,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The length of the statement  "			/*var points = new List<Point2D> { border.Corners[0]' border.Corners[1] };*//*border.Polygons[0].CornersToDraw.AddRange(points);" is 128.
Long Statement,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The length of the statement  "					if (nextCorner == null || Geometry.Cos (direction' nextCorner - riverSource) < Geometry.Cos (direction' newCorner - riverSource)) { " is 131.
Long Statement,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The length of the statement  "						Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor); " is 136.
Long Statement,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The length of the statement  "						Color color = (Color)(-polygon.Elevation / maxDistFromWater * deepWaterLandColor + (1 + polygon.Elevation / maxDistFromWater) * shallowWaterColor); " is 147.
Long Statement,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The length of the statement  "							Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor); " is 136.
Long Statement,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The length of the statement  "                graphics.DrawString(polygon.DistanceFromEdge.ToString(CultureInfo.InvariantCulture)' new Font("Thaoma"' 10)' Brushes.Black' (PointF)polygon.Center);" is 148.
Complex Conditional,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The conditional expression  "riverSource.IsLake && newCorner.IsLake && border.Polygons [0].IsLand && border.Polygons [1].IsLand"  is complex.
Complex Conditional,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The conditional expression  "riverSource.IsLake && newCorner.IsLake && border.Polygons [0].IsLand && border.Polygons [1].IsLand"  is complex.
Magic Number,Triangulation,MapCreatorModel,C:\repos\quercitron_MapCreator\Triangulation\MapCreatorModel.cs,MapCreatorModel,The following statement contains a magic number: m_DefaultSettings = new MapSettings {  	LandPart = 0.4  };  
Magic Number,Triangulation,MapCreatorModel,C:\repos\quercitron_MapCreator\Triangulation\MapCreatorModel.cs,Redraw,The following statement contains a magic number: AddRangeOfPoints (currentCount - 4);  
Magic Number,Triangulation,NoiseLineGenerator,C:\repos\quercitron_MapCreator\Triangulation\NoiseLineGenerator.cs,Generate,The following statement contains a magic number: if (makeSmooth) {  	var middle = (a + c) / 2;  	var smoothMultiplier = Math.Min (1' Geometry.Dist (a' c) / Geometry.Dist (b' middle)) * SmoothnessFactor;  	left = middle + (b - middle) * smoothMultiplier;  	smoothMultiplier = Math.Min (1' Geometry.Dist (a' c) / Geometry.Dist (d' middle)) * SmoothnessFactor;  	right = middle + (d - middle) * smoothMultiplier;  }  else {  	left = b;  	right = d;  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: foreach (var border in map.Borders) {  	if (border.Polygons [0].IsLand != border.Polygons [1].IsLand) {  		if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  			border.IsOceanCoast = true;  			for (int i = 0; i < 2; i++) {  				border.Corners [i].IsOceanCoast = true;  				border.Polygons [i].IsOceanCoast = true;  			}  		}  		else {  			border.IsLakeCoast = true;  			for (int i = 0; i < 2; i++) {  				border.Corners [i].IsLakeCoast = true;  				border.Polygons [i].IsLakeCoast = true;  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: foreach (var border in map.Borders) {  	if (border.Polygons [0].IsLand != border.Polygons [1].IsLand) {  		if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  			border.IsOceanCoast = true;  			for (int i = 0; i < 2; i++) {  				border.Corners [i].IsOceanCoast = true;  				border.Polygons [i].IsOceanCoast = true;  			}  		}  		else {  			border.IsLakeCoast = true;  			for (int i = 0; i < 2; i++) {  				border.Corners [i].IsLakeCoast = true;  				border.Polygons [i].IsLakeCoast = true;  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: if (border.Polygons [0].IsLand != border.Polygons [1].IsLand) {  	if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  		border.IsOceanCoast = true;  		for (int i = 0; i < 2; i++) {  			border.Corners [i].IsOceanCoast = true;  			border.Polygons [i].IsOceanCoast = true;  		}  	}  	else {  		border.IsLakeCoast = true;  		for (int i = 0; i < 2; i++) {  			border.Corners [i].IsLakeCoast = true;  			border.Polygons [i].IsLakeCoast = true;  		}  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: if (border.Polygons [0].IsLand != border.Polygons [1].IsLand) {  	if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  		border.IsOceanCoast = true;  		for (int i = 0; i < 2; i++) {  			border.Corners [i].IsOceanCoast = true;  			border.Polygons [i].IsOceanCoast = true;  		}  	}  	else {  		border.IsLakeCoast = true;  		for (int i = 0; i < 2; i++) {  			border.Corners [i].IsLakeCoast = true;  			border.Polygons [i].IsLakeCoast = true;  		}  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  	border.IsOceanCoast = true;  	for (int i = 0; i < 2; i++) {  		border.Corners [i].IsOceanCoast = true;  		border.Polygons [i].IsOceanCoast = true;  	}  }  else {  	border.IsLakeCoast = true;  	for (int i = 0; i < 2; i++) {  		border.Corners [i].IsLakeCoast = true;  		border.Polygons [i].IsLakeCoast = true;  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: if (border.Polygons [0].IsOcean || border.Polygons [1].IsOcean) {  	border.IsOceanCoast = true;  	for (int i = 0; i < 2; i++) {  		border.Corners [i].IsOceanCoast = true;  		border.Polygons [i].IsOceanCoast = true;  	}  }  else {  	border.IsLakeCoast = true;  	for (int i = 0; i < 2; i++) {  		border.Corners [i].IsLakeCoast = true;  		border.Polygons [i].IsLakeCoast = true;  	}  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	border.Corners [i].IsOceanCoast = true;  	border.Polygons [i].IsOceanCoast = true;  }  
Magic Number,Triangulation.MapBuilding,AssignCoastBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\AssignCoastBuilderComponent.cs,Build,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	border.Corners [i].IsLakeCoast = true;  	border.Polygons [i].IsLakeCoast = true;  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: foreach (var corner in map.Corners) {  	if (!corner.IsOcean || corner.IsOceanCoast) {  		if (corner.IsOceanCoast) {  			corner.Elevation = 0;  			queue.Enqueue (corner);  		}  		else {  			corner.Elevation = 1e10;  		}  	}  	else {  		corner.Elevation = 0;  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: if (!corner.IsOcean || corner.IsOceanCoast) {  	if (corner.IsOceanCoast) {  		corner.Elevation = 0;  		queue.Enqueue (corner);  	}  	else {  		corner.Elevation = 1e10;  	}  }  else {  	corner.Elevation = 0;  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: if (corner.IsOceanCoast) {  	corner.Elevation = 0;  	queue.Enqueue (corner);  }  else {  	corner.Elevation = 1e10;  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: corner.Elevation = 1e10;  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: while (queue.Count > 0) {  	var current = queue.Dequeue ();  	foreach (var corner in current.Corners.Where (map.ContainsPointInside)) {  		var midPoint = (current + corner) / 2;  		var newDist = current.Elevation + Geometry.Dist (current' corner) * noise [(int)midPoint.X' (int)midPoint.Y];  		if (corner.Elevation > newDist) {  			corner.Elevation = newDist;  			queue.Enqueue (corner);  			if (corner.IsLake) {  				double bigStep = 2 * map.Corners.Count * this.SmallStep;  				var lakeQueue = new Queue<Corner> ();  				lakeQueue.Enqueue (corner);  				while (lakeQueue.Count > 0) {  					var lakeCorner = lakeQueue.Dequeue ();  					foreach (var c in lakeCorner.Corners) {  						if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  							c.Elevation = lakeCorner.Elevation + this.SmallStep;  							lakeQueue.Enqueue (c);  							queue.Enqueue (c);  						}  					}  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: while (queue.Count > 0) {  	var current = queue.Dequeue ();  	foreach (var corner in current.Corners.Where (map.ContainsPointInside)) {  		var midPoint = (current + corner) / 2;  		var newDist = current.Elevation + Geometry.Dist (current' corner) * noise [(int)midPoint.X' (int)midPoint.Y];  		if (corner.Elevation > newDist) {  			corner.Elevation = newDist;  			queue.Enqueue (corner);  			if (corner.IsLake) {  				double bigStep = 2 * map.Corners.Count * this.SmallStep;  				var lakeQueue = new Queue<Corner> ();  				lakeQueue.Enqueue (corner);  				while (lakeQueue.Count > 0) {  					var lakeCorner = lakeQueue.Dequeue ();  					foreach (var c in lakeCorner.Corners) {  						if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  							c.Elevation = lakeCorner.Elevation + this.SmallStep;  							lakeQueue.Enqueue (c);  							queue.Enqueue (c);  						}  					}  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: foreach (var corner in current.Corners.Where (map.ContainsPointInside)) {  	var midPoint = (current + corner) / 2;  	var newDist = current.Elevation + Geometry.Dist (current' corner) * noise [(int)midPoint.X' (int)midPoint.Y];  	if (corner.Elevation > newDist) {  		corner.Elevation = newDist;  		queue.Enqueue (corner);  		if (corner.IsLake) {  			double bigStep = 2 * map.Corners.Count * this.SmallStep;  			var lakeQueue = new Queue<Corner> ();  			lakeQueue.Enqueue (corner);  			while (lakeQueue.Count > 0) {  				var lakeCorner = lakeQueue.Dequeue ();  				foreach (var c in lakeCorner.Corners) {  					if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  						c.Elevation = lakeCorner.Elevation + this.SmallStep;  						lakeQueue.Enqueue (c);  						queue.Enqueue (c);  					}  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: foreach (var corner in current.Corners.Where (map.ContainsPointInside)) {  	var midPoint = (current + corner) / 2;  	var newDist = current.Elevation + Geometry.Dist (current' corner) * noise [(int)midPoint.X' (int)midPoint.Y];  	if (corner.Elevation > newDist) {  		corner.Elevation = newDist;  		queue.Enqueue (corner);  		if (corner.IsLake) {  			double bigStep = 2 * map.Corners.Count * this.SmallStep;  			var lakeQueue = new Queue<Corner> ();  			lakeQueue.Enqueue (corner);  			while (lakeQueue.Count > 0) {  				var lakeCorner = lakeQueue.Dequeue ();  				foreach (var c in lakeCorner.Corners) {  					if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  						c.Elevation = lakeCorner.Elevation + this.SmallStep;  						lakeQueue.Enqueue (c);  						queue.Enqueue (c);  					}  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: if (corner.Elevation > newDist) {  	corner.Elevation = newDist;  	queue.Enqueue (corner);  	if (corner.IsLake) {  		double bigStep = 2 * map.Corners.Count * this.SmallStep;  		var lakeQueue = new Queue<Corner> ();  		lakeQueue.Enqueue (corner);  		while (lakeQueue.Count > 0) {  			var lakeCorner = lakeQueue.Dequeue ();  			foreach (var c in lakeCorner.Corners) {  				if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  					c.Elevation = lakeCorner.Elevation + this.SmallStep;  					lakeQueue.Enqueue (c);  					queue.Enqueue (c);  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,DistanceFromWaterElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\DistanceFromWaterElevation.cs,Build,The following statement contains a magic number: if (corner.IsLake) {  	double bigStep = 2 * map.Corners.Count * this.SmallStep;  	var lakeQueue = new Queue<Corner> ();  	lakeQueue.Enqueue (corner);  	while (lakeQueue.Count > 0) {  		var lakeCorner = lakeQueue.Dequeue ();  		foreach (var c in lakeCorner.Corners) {  			if (c.IsLake && c.Elevation > lakeCorner.Elevation + bigStep) {  				c.Elevation = lakeCorner.Elevation + this.SmallStep;  				lakeQueue.Enqueue (c);  				queue.Enqueue (c);  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: foreach (var corner in map.Corners) {  	if (corner.IsOceanCoast) {  		corner.DistanceFromCoast = 0;  		queue.Enqueue (corner);  	}  	else {  		corner.DistanceFromCoast = 1e9;  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: if (corner.IsOceanCoast) {  	corner.DistanceFromCoast = 0;  	queue.Enqueue (corner);  }  else {  	corner.DistanceFromCoast = 1e9;  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: corner.DistanceFromCoast = 1e9;  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: while (queue.Count > 0) {  	var current = queue.Dequeue ();  	foreach (var corner in current.Corners.Where (c => c != null)) {  		var dist = current.Dist (corner);  		if (corner.DistanceFromCoast > current.DistanceFromCoast + dist) {  			corner.DistanceFromCoast = current.DistanceFromCoast + dist;  			queue.Enqueue (corner);  			if (corner.IsLake) {  				double minNoise = noise [(int)corner.X' (int)corner.Y];  				var lakeCorners = new List<Corner> {  					corner  				};  				double bigStep = 2 * map.Corners.Count * this.SmallStep;  				var lakeQueue = new Queue<Corner> ();  				lakeQueue.Enqueue (corner);  				while (lakeQueue.Count > 0) {  					var lakeCorner = lakeQueue.Dequeue ();  					foreach (var c in lakeCorner.Corners) {  						if (c.IsLake && c.DistanceFromCoast > lakeCorner.DistanceFromCoast + bigStep) {  							c.DistanceFromCoast = lakeCorner.DistanceFromCoast + this.SmallStep * Geometry.Dist (lakeCorner' c) / map.Diagonal;  							lakeQueue.Enqueue (c);  							queue.Enqueue (c);  							minNoise = Math.Min (minNoise' noise [(int)c.X' (int)c.Y]);  							lakeCorners.Add (c);  						}  					}  				}  				foreach (var lakeCorner in lakeCorners) {  					noise [(int)lakeCorner.X' (int)lakeCorner.Y] = minNoise;  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: foreach (var corner in current.Corners.Where (c => c != null)) {  	var dist = current.Dist (corner);  	if (corner.DistanceFromCoast > current.DistanceFromCoast + dist) {  		corner.DistanceFromCoast = current.DistanceFromCoast + dist;  		queue.Enqueue (corner);  		if (corner.IsLake) {  			double minNoise = noise [(int)corner.X' (int)corner.Y];  			var lakeCorners = new List<Corner> {  				corner  			};  			double bigStep = 2 * map.Corners.Count * this.SmallStep;  			var lakeQueue = new Queue<Corner> ();  			lakeQueue.Enqueue (corner);  			while (lakeQueue.Count > 0) {  				var lakeCorner = lakeQueue.Dequeue ();  				foreach (var c in lakeCorner.Corners) {  					if (c.IsLake && c.DistanceFromCoast > lakeCorner.DistanceFromCoast + bigStep) {  						c.DistanceFromCoast = lakeCorner.DistanceFromCoast + this.SmallStep * Geometry.Dist (lakeCorner' c) / map.Diagonal;  						lakeQueue.Enqueue (c);  						queue.Enqueue (c);  						minNoise = Math.Min (minNoise' noise [(int)c.X' (int)c.Y]);  						lakeCorners.Add (c);  					}  				}  			}  			foreach (var lakeCorner in lakeCorners) {  				noise [(int)lakeCorner.X' (int)lakeCorner.Y] = minNoise;  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: if (corner.DistanceFromCoast > current.DistanceFromCoast + dist) {  	corner.DistanceFromCoast = current.DistanceFromCoast + dist;  	queue.Enqueue (corner);  	if (corner.IsLake) {  		double minNoise = noise [(int)corner.X' (int)corner.Y];  		var lakeCorners = new List<Corner> {  			corner  		};  		double bigStep = 2 * map.Corners.Count * this.SmallStep;  		var lakeQueue = new Queue<Corner> ();  		lakeQueue.Enqueue (corner);  		while (lakeQueue.Count > 0) {  			var lakeCorner = lakeQueue.Dequeue ();  			foreach (var c in lakeCorner.Corners) {  				if (c.IsLake && c.DistanceFromCoast > lakeCorner.DistanceFromCoast + bigStep) {  					c.DistanceFromCoast = lakeCorner.DistanceFromCoast + this.SmallStep * Geometry.Dist (lakeCorner' c) / map.Diagonal;  					lakeQueue.Enqueue (c);  					queue.Enqueue (c);  					minNoise = Math.Min (minNoise' noise [(int)c.X' (int)c.Y]);  					lakeCorners.Add (c);  				}  			}  		}  		foreach (var lakeCorner in lakeCorners) {  			noise [(int)lakeCorner.X' (int)lakeCorner.Y] = minNoise;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: if (corner.IsLake) {  	double minNoise = noise [(int)corner.X' (int)corner.Y];  	var lakeCorners = new List<Corner> {  		corner  	};  	double bigStep = 2 * map.Corners.Count * this.SmallStep;  	var lakeQueue = new Queue<Corner> ();  	lakeQueue.Enqueue (corner);  	while (lakeQueue.Count > 0) {  		var lakeCorner = lakeQueue.Dequeue ();  		foreach (var c in lakeCorner.Corners) {  			if (c.IsLake && c.DistanceFromCoast > lakeCorner.DistanceFromCoast + bigStep) {  				c.DistanceFromCoast = lakeCorner.DistanceFromCoast + this.SmallStep * Geometry.Dist (lakeCorner' c) / map.Diagonal;  				lakeQueue.Enqueue (c);  				queue.Enqueue (c);  				minNoise = Math.Min (minNoise' noise [(int)c.X' (int)c.Y]);  				lakeCorners.Add (c);  			}  		}  	}  	foreach (var lakeCorner in lakeCorners) {  		noise [(int)lakeCorner.X' (int)lakeCorner.Y] = minNoise;  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: if (map.Corners.Any (c => c.IsLand)) {  	var maxDistance = map.Corners.Where (c => c.IsLand).Max (c => c.DistanceFromCoast);  	foreach (var corner in map.Corners) {  		double noiseInCorner;  		if (map.ContainsPointInside (corner)) {  			noiseInCorner = noise [(int)corner.X' (int)corner.Y];  		}  		else {  			var point = new Point2D (corner);  			if (point.X < 0) {  				point.X = 0;  			}  			if (point.X >= map.Width - 1) {  				point.X = map.Width - 1;  			}  			if (point.Y < 0) {  				point.Y = 0;  			}  			if (point.Y >= map.Height - 1) {  				point.Y = map.Height - 1;  			}  			noiseInCorner = noise [(int)point.X' (int)point.Y];  		}  		var distanceConstraint = 2 * corner.DistanceFromCoast / maxDistance;  		if (corner.IsOcean) {  			corner.Elevation = -Math.Min (distanceConstraint' noiseInCorner);  		}  		else {  			corner.Elevation = Math.Min (distanceConstraint' noiseInCorner);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Elevation,PerlinNoiseElevation,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Elevation\PerlinNoiseElevation.cs,Build,The following statement contains a magic number: foreach (var corner in map.Corners) {  	double noiseInCorner;  	if (map.ContainsPointInside (corner)) {  		noiseInCorner = noise [(int)corner.X' (int)corner.Y];  	}  	else {  		var point = new Point2D (corner);  		if (point.X < 0) {  			point.X = 0;  		}  		if (point.X >= map.Width - 1) {  			point.X = map.Width - 1;  		}  		if (point.Y < 0) {  			point.Y = 0;  		}  		if (point.Y >= map.Height - 1) {  			point.Y = map.Height - 1;  		}  		noiseInCorner = noise [(int)point.X' (int)point.Y];  	}  	var distanceConstraint = 2 * corner.DistanceFromCoast / maxDistance;  	if (corner.IsOcean) {  		corner.Elevation = -Math.Min (distanceConstraint' noiseInCorner);  	}  	else {  		corner.Elevation = Math.Min (distanceConstraint' noiseInCorner);  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,ImprovedPerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\ImprovedPerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: while (r - l > 1e-8) {  	var m = (l + r) / 2;  	int land = 0;  	int total = 0;  	foreach (var polygon in map.Polygons) {  		var center = polygon.Center;  		if (polygon.IsInside && map.ContainsPointInside (center)) {  			total++;  			var noiseValue = noise [(int)center.X' (int)center.Y];  			if (noiseValue > m) {  				land++;  			}  		}  	}  	if (land > 0.4 * total) {  		l = m;  	}  	else {  		r = m;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,ImprovedPerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\ImprovedPerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: while (r - l > 1e-8) {  	var m = (l + r) / 2;  	int land = 0;  	int total = 0;  	foreach (var polygon in map.Polygons) {  		var center = polygon.Center;  		if (polygon.IsInside && map.ContainsPointInside (center)) {  			total++;  			var noiseValue = noise [(int)center.X' (int)center.Y];  			if (noiseValue > m) {  				land++;  			}  		}  	}  	if (land > 0.4 * total) {  		l = m;  	}  	else {  		r = m;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,ImprovedPerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\ImprovedPerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: while (r - l > 1e-8) {  	var m = (l + r) / 2;  	int land = 0;  	int total = 0;  	foreach (var polygon in map.Polygons) {  		var center = polygon.Center;  		if (polygon.IsInside && map.ContainsPointInside (center)) {  			total++;  			var noiseValue = noise [(int)center.X' (int)center.Y];  			if (noiseValue > m) {  				land++;  			}  		}  	}  	if (land > 0.4 * total) {  		l = m;  	}  	else {  		r = m;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,ImprovedPerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\ImprovedPerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: if (land > 0.4 * total) {  	l = m;  }  else {  	r = m;  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,PerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\PerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: while (r - l > 1e-8) {  	double m = (l + r) / 2;  	int count = 0;  	foreach (var polygon in map.Polygons) {  		var center = polygon.Center;  		var dist = Geometry.SpecificDist (mapCenter' center' map.Width' map.Height);  		if (polygon.IsInside && map.ContainsPointInside (center)) {  			var noiseValue = noise [(int)center.X' (int)center.Y];  			if (noiseValue > (this.BaseK + (dist > m ? (1 - this.BaseK) * (dist / m - 1) : 0))) {  				count++;  			}  		}  	}  	if (count > K * map.Polygons.Count) {  		r = m;  	}  	else {  		l = m;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,PerlinNoiseLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\PerlinNoiseLandGenerator.cs,Build,The following statement contains a magic number: while (r - l > 1e-8) {  	double m = (l + r) / 2;  	int count = 0;  	foreach (var polygon in map.Polygons) {  		var center = polygon.Center;  		var dist = Geometry.SpecificDist (mapCenter' center' map.Width' map.Height);  		if (polygon.IsInside && map.ContainsPointInside (center)) {  			var noiseValue = noise [(int)center.X' (int)center.Y];  			if (noiseValue > (this.BaseK + (dist > m ? (1 - this.BaseK) * (dist / m - 1) : 0))) {  				count++;  			}  		}  	}  	if (count > K * map.Polygons.Count) {  		r = m;  	}  	else {  		l = m;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,AddIsland,The following statement contains a magic number: if (map.Polygons.Any (p => p.IsInside && p.DistanceFromEdge >= width)) {  	Queue<Polygon> queue = new Queue<Polygon> ();  	var direction = Geometry.GetRandomUnitVector ();  	Polygon current;  	do {  		current = map.GetRandomPolygon ();  	}  	while (!(current.IsInside && current.DistanceFromEdge >= width));  	CreateSkeleton (width' direction' current' totalLength' queue' m_Random.Next (2) == 0);  	while (queue.Count > 0) {  		current = queue.Dequeue ();  		if (current.DistanceFromSkeleton < width) {  			foreach (var polygon in current.Polygons) {  				if (polygon.IsInside && !polygon.InSkeleton && polygon.DistanceFromEdge > 0) {  					polygon.InSkeleton = true;  					polygon.IsLand = true;  					polygon.DistanceFromSkeleton = current.DistanceFromSkeleton + 1;  					queue.Enqueue (polygon);  				}  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,AddIsland,The following statement contains a magic number: CreateSkeleton (width' direction' current' totalLength' queue' m_Random.Next (2) == 0);  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: for (int i = 0; i < totalLength - 1; i++) {  	Polygon nextPolygon = null;  	double cos = 0;  	foreach (var polygon in current.Polygons) {  		if (polygon.IsInside && !polygon.InSkeleton && polygon.DistanceFromEdge > width) {  			var newCos = Geometry.Cos (direction' polygon.Center - current.Center);  			if (nextPolygon == null || cos < newCos) {  				nextPolygon = polygon;  				cos = newCos;  			}  		}  	}  	if (nextPolygon != null) {  		nextPolygon.InSkeleton = true;  		nextPolygon.DistanceFromSkeleton = 0;  		nextPolygon.IsLand = true;  		queue.Enqueue (nextPolygon);  		direction = nextPolygon.Center - current.Center;  		current = nextPolygon;  		if (i == totalLength / 2) {  			middlePolygon = current;  			newBaseDirection = new Point2D (direction.Y' -direction.X);  			if (m_Random.Next (2) == 0) {  				newBaseDirection = -newBaseDirection;  			}  		}  	}  	else {  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: for (int i = 0; i < totalLength - 1; i++) {  	Polygon nextPolygon = null;  	double cos = 0;  	foreach (var polygon in current.Polygons) {  		if (polygon.IsInside && !polygon.InSkeleton && polygon.DistanceFromEdge > width) {  			var newCos = Geometry.Cos (direction' polygon.Center - current.Center);  			if (nextPolygon == null || cos < newCos) {  				nextPolygon = polygon;  				cos = newCos;  			}  		}  	}  	if (nextPolygon != null) {  		nextPolygon.InSkeleton = true;  		nextPolygon.DistanceFromSkeleton = 0;  		nextPolygon.IsLand = true;  		queue.Enqueue (nextPolygon);  		direction = nextPolygon.Center - current.Center;  		current = nextPolygon;  		if (i == totalLength / 2) {  			middlePolygon = current;  			newBaseDirection = new Point2D (direction.Y' -direction.X);  			if (m_Random.Next (2) == 0) {  				newBaseDirection = -newBaseDirection;  			}  		}  	}  	else {  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (nextPolygon != null) {  	nextPolygon.InSkeleton = true;  	nextPolygon.DistanceFromSkeleton = 0;  	nextPolygon.IsLand = true;  	queue.Enqueue (nextPolygon);  	direction = nextPolygon.Center - current.Center;  	current = nextPolygon;  	if (i == totalLength / 2) {  		middlePolygon = current;  		newBaseDirection = new Point2D (direction.Y' -direction.X);  		if (m_Random.Next (2) == 0) {  			newBaseDirection = -newBaseDirection;  		}  	}  }  else {  	break;  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (nextPolygon != null) {  	nextPolygon.InSkeleton = true;  	nextPolygon.DistanceFromSkeleton = 0;  	nextPolygon.IsLand = true;  	queue.Enqueue (nextPolygon);  	direction = nextPolygon.Center - current.Center;  	current = nextPolygon;  	if (i == totalLength / 2) {  		middlePolygon = current;  		newBaseDirection = new Point2D (direction.Y' -direction.X);  		if (m_Random.Next (2) == 0) {  			newBaseDirection = -newBaseDirection;  		}  	}  }  else {  	break;  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (i == totalLength / 2) {  	middlePolygon = current;  	newBaseDirection = new Point2D (direction.Y' -direction.X);  	if (m_Random.Next (2) == 0) {  		newBaseDirection = -newBaseDirection;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (i == totalLength / 2) {  	middlePolygon = current;  	newBaseDirection = new Point2D (direction.Y' -direction.X);  	if (m_Random.Next (2) == 0) {  		newBaseDirection = -newBaseDirection;  	}  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (m_Random.Next (2) == 0) {  	newBaseDirection = -newBaseDirection;  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (addAtMiddle && middlePolygon != null) {  	CreateSkeleton (width' newBaseDirection' middlePolygon' totalLength / 2' queue' m_Random.Next (2) == 0);  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: if (addAtMiddle && middlePolygon != null) {  	CreateSkeleton (width' newBaseDirection' middlePolygon' totalLength / 2' queue' m_Random.Next (2) == 0);  }  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: CreateSkeleton (width' newBaseDirection' middlePolygon' totalLength / 2' queue' m_Random.Next (2) == 0);  
Magic Number,Triangulation.MapBuilding.LandGenerators,SkeletonLandGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\LandGenerators\SkeletonLandGenerator.cs,CreateSkeleton,The following statement contains a magic number: CreateSkeleton (width' newBaseDirection' middlePolygon' totalLength / 2' queue' m_Random.Next (2) == 0);  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,Build,The following statement contains a magic number: while (queue.Count > 0) {  	var current = queue.Dequeue ();  	foreach (var corner in current.Corners) {  		// TODO: Chack how can it be  		if (corner != null) {  			// TODO: improve mechanic  			double k = corner.Elevation > current.Elevation ? 3 : 1;  			var newDist = current.DistanceForMoisture + Geometry.Dist (current' corner) * k;  			if (corner.DistanceForMoisture > newDist) {  				corner.DistanceForMoisture = newDist;  				queue.Enqueue (corner);  			}  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,Build,The following statement contains a magic number: foreach (var corner in current.Corners) {  	// TODO: Chack how can it be  	if (corner != null) {  		// TODO: improve mechanic  		double k = corner.Elevation > current.Elevation ? 3 : 1;  		var newDist = current.DistanceForMoisture + Geometry.Dist (current' corner) * k;  		if (corner.DistanceForMoisture > newDist) {  			corner.DistanceForMoisture = newDist;  			queue.Enqueue (corner);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,Build,The following statement contains a magic number: if (corner != null) {  	// TODO: improve mechanic  	double k = corner.Elevation > current.Elevation ? 3 : 1;  	var newDist = current.DistanceForMoisture + Geometry.Dist (current' corner) * k;  	if (corner.DistanceForMoisture > newDist) {  		corner.DistanceForMoisture = newDist;  		queue.Enqueue (corner);  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: if (landCorners.Count > 0) {  	var avgDistance = landCorners.Average (c => c.DistanceForMoisture);  	foreach (var corner in map.Corners) {  		if (corner.IsLand) {  			if (corner.IsOcean) {  				// TODO: think about moisture on water  				corner.Moisture = 0;  			}  			else {  				if (corner.DistanceForMoisture < m_MaxDist) {  					corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  				}  				else {  					corner.Moisture = 0;  				}  			}  		}  		else {  			// TODO: think about moisture on water  			corner.Moisture = 0;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: foreach (var corner in map.Corners) {  	if (corner.IsLand) {  		if (corner.IsOcean) {  			// TODO: think about moisture on water  			corner.Moisture = 0;  		}  		else {  			if (corner.DistanceForMoisture < m_MaxDist) {  				corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  			}  			else {  				corner.Moisture = 0;  			}  		}  	}  	else {  		// TODO: think about moisture on water  		corner.Moisture = 0;  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: if (corner.IsLand) {  	if (corner.IsOcean) {  		// TODO: think about moisture on water  		corner.Moisture = 0;  	}  	else {  		if (corner.DistanceForMoisture < m_MaxDist) {  			corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  		}  		else {  			corner.Moisture = 0;  		}  	}  }  else {  	// TODO: think about moisture on water  	corner.Moisture = 0;  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: if (corner.IsOcean) {  	// TODO: think about moisture on water  	corner.Moisture = 0;  }  else {  	if (corner.DistanceForMoisture < m_MaxDist) {  		corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  	}  	else {  		corner.Moisture = 0;  	}  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: if (corner.DistanceForMoisture < m_MaxDist) {  	corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  }  else {  	corner.Moisture = 0;  }  
Magic Number,Triangulation.MapBuilding.Moisture,MoistureGenerator,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Moisture\MoistureGenerator.cs,SetAndNormalizeMoisture,The following statement contains a magic number: corner.Moisture = Math.Max (0' 1 - 0.3 * corner.DistanceForMoisture / avgDistance);  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: foreach (var triangle in m_Structure.Triangles) {  	var mapTriangle = trianglesDict [triangle];  	for (int i = 0; i < 3; i++) {  		var point = triangle.Points [i];  		if (point != null) {  			mapTriangle.Points [i] = pointsDict [point];  		}  		var neighborTriangle = triangle.Triangles [i];  		if (neighborTriangle != null) {  			mapTriangle.Triangles [i] = trianglesDict [neighborTriangle];  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var point = triangle.Points [i];  	if (point != null) {  		mapTriangle.Points [i] = pointsDict [point];  	}  	var neighborTriangle = triangle.Triangles [i];  	if (neighborTriangle != null) {  		mapTriangle.Triangles [i] = trianglesDict [neighborTriangle];  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: foreach (var triangle in triangles) {  	for (int i = 0; i < 3; i++) {  		triangle.Corner.Polygons [i] = triangle.Points [i].Polygon;  		triangle.Points [i].Polygon.Corners.Add (triangle.Corner);  	}  	for (int i = 0; i < 3; i++) {  		var edge = triangle.Edge (i);  		var current = triangle.Triangles [i];  		if (current != null) {  			triangle.Corner.Corners [i] = current.Corner;  			// TODO: Remove check  			if (triangle.Id == current.Id) {  				throw new InvalidDataException ("Ids are equal");  			}  			if (triangle.Id < current.Id) {  				var border = new Border ();  				border.Corners [0] = current.Corner;  				border.Corners [1] = triangle.Corner;  				border.Polygons [0] = edge.First.Polygon;  				border.Polygons [1] = edge.Second.Polygon;  				border.BasePolygon = edge.Second.Polygon;  				map.Borders.Add (border);  				triangle.Corner.Borders.Add (border);  				current.Corner.Borders.Add (border);  				edge.First.Polygon.Borders.Add (border);  				edge.Second.Polygon.Borders.Add (border);  				edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  				edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  			}  		}  		else {  			edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  			edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: foreach (var triangle in triangles) {  	for (int i = 0; i < 3; i++) {  		triangle.Corner.Polygons [i] = triangle.Points [i].Polygon;  		triangle.Points [i].Polygon.Corners.Add (triangle.Corner);  	}  	for (int i = 0; i < 3; i++) {  		var edge = triangle.Edge (i);  		var current = triangle.Triangles [i];  		if (current != null) {  			triangle.Corner.Corners [i] = current.Corner;  			// TODO: Remove check  			if (triangle.Id == current.Id) {  				throw new InvalidDataException ("Ids are equal");  			}  			if (triangle.Id < current.Id) {  				var border = new Border ();  				border.Corners [0] = current.Corner;  				border.Corners [1] = triangle.Corner;  				border.Polygons [0] = edge.First.Polygon;  				border.Polygons [1] = edge.Second.Polygon;  				border.BasePolygon = edge.Second.Polygon;  				map.Borders.Add (border);  				triangle.Corner.Borders.Add (border);  				current.Corner.Borders.Add (border);  				edge.First.Polygon.Borders.Add (border);  				edge.Second.Polygon.Borders.Add (border);  				edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  				edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  			}  		}  		else {  			edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  			edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	triangle.Corner.Polygons [i] = triangle.Points [i].Polygon;  	triangle.Points [i].Polygon.Corners.Add (triangle.Corner);  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	var edge = triangle.Edge (i);  	var current = triangle.Triangles [i];  	if (current != null) {  		triangle.Corner.Corners [i] = current.Corner;  		// TODO: Remove check  		if (triangle.Id == current.Id) {  			throw new InvalidDataException ("Ids are equal");  		}  		if (triangle.Id < current.Id) {  			var border = new Border ();  			border.Corners [0] = current.Corner;  			border.Corners [1] = triangle.Corner;  			border.Polygons [0] = edge.First.Polygon;  			border.Polygons [1] = edge.Second.Polygon;  			border.BasePolygon = edge.Second.Polygon;  			map.Borders.Add (border);  			triangle.Corner.Borders.Add (border);  			current.Corner.Borders.Add (border);  			edge.First.Polygon.Borders.Add (border);  			edge.Second.Polygon.Borders.Add (border);  			edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  			edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  		}  	}  	else {  		edge.First.Polygon.Polygons.Add (edge.Second.Polygon);  		edge.Second.Polygon.Polygons.Add (edge.First.Polygon);  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	foreach (var border in polygon.Borders.Where (b => !b.BorderToDrawCreated)) {  		var borderPoints = m_NoiseLineGenerator.Generate (border.Corners [0]' border.Polygons [0].BasePoint' border.Corners [1]' border.Polygons [1].BasePoint' 2' true);  		/*var points = new List<Point2D> { border.Corners[0]' border.Corners[1] };*//*border.Polygons[0].CornersToDraw.AddRange(points);                     border.Polygons[1].CornersToDraw.AddRange(points);*/border.BorderToDraw = borderPoints;  		border.BorderToDrawCreated = true;  	}  }  
Magic Number,Triangulation.MapBuilding.Polygons,FormPolygons,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\FormPolygons.cs,Build,The following statement contains a magic number: foreach (var border in polygon.Borders.Where (b => !b.BorderToDrawCreated)) {  	var borderPoints = m_NoiseLineGenerator.Generate (border.Corners [0]' border.Polygons [0].BasePoint' border.Corners [1]' border.Polygons [1].BasePoint' 2' true);  	/*var points = new List<Point2D> { border.Corners[0]' border.Corners[1] };*//*border.Polygons[0].CornersToDraw.AddRange(points);                     border.Polygons[1].CornersToDraw.AddRange(points);*/border.BorderToDraw = borderPoints;  	border.BorderToDrawCreated = true;  }  
Magic Number,Triangulation.MapBuilding.Polygons,MapTriangle,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\MapTriangle.cs,MapTriangle,The following statement contains a magic number: Points = new MapPoint[3];  
Magic Number,Triangulation.MapBuilding.Polygons,MapTriangle,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\MapTriangle.cs,MapTriangle,The following statement contains a magic number: Triangles = new MapTriangle[3];  
Magic Number,Triangulation.MapBuilding.Polygons,MapTriangle,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\MapTriangle.cs,Edge,The following statement contains a magic number: return new MapEdge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,Triangulation.MapBuilding.Polygons,MapTriangle,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\MapTriangle.cs,Edge,The following statement contains a magic number: return new MapEdge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,Triangulation.MapBuilding.Polygons,MapTriangle,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Polygons\MapTriangle.cs,Edge,The following statement contains a magic number: return new MapEdge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: if (map.Corners.Any (c => c.IsLand)) {  	var minStreamHeightForBigRivers = GetMinStreamHeight (map' this.BigRiversAreaPart);  	var minStreamHeightForRandomRivers = GetMinStreamHeight (map' this.SmallRiversAreaPart);  	List<Corner> riverSources = null;  	for (int k = 0; k < 500; k++) {  		List<Corner> newSources = new List<Corner> ();  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  		}  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  		}  		if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  			riverSources = newSources;  		}  		// TODO: maybe remove this strange thing  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' true);  		}  	}  	if (riverSources != null) {  		// TODO: set parameter?  		for (int k = 0; k < 20; k++) {  			foreach (var source in riverSources) {  				m_AddRiverStrategy.AddRiver (source' true);  			}  		}  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' false);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: if (map.Corners.Any (c => c.IsLand)) {  	var minStreamHeightForBigRivers = GetMinStreamHeight (map' this.BigRiversAreaPart);  	var minStreamHeightForRandomRivers = GetMinStreamHeight (map' this.SmallRiversAreaPart);  	List<Corner> riverSources = null;  	for (int k = 0; k < 500; k++) {  		List<Corner> newSources = new List<Corner> ();  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  		}  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  		}  		if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  			riverSources = newSources;  		}  		// TODO: maybe remove this strange thing  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' true);  		}  	}  	if (riverSources != null) {  		// TODO: set parameter?  		for (int k = 0; k < 20; k++) {  			foreach (var source in riverSources) {  				m_AddRiverStrategy.AddRiver (source' true);  			}  		}  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' false);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: if (map.Corners.Any (c => c.IsLand)) {  	var minStreamHeightForBigRivers = GetMinStreamHeight (map' this.BigRiversAreaPart);  	var minStreamHeightForRandomRivers = GetMinStreamHeight (map' this.SmallRiversAreaPart);  	List<Corner> riverSources = null;  	for (int k = 0; k < 500; k++) {  		List<Corner> newSources = new List<Corner> ();  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  		}  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  		}  		if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  			riverSources = newSources;  		}  		// TODO: maybe remove this strange thing  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' true);  		}  	}  	if (riverSources != null) {  		// TODO: set parameter?  		for (int k = 0; k < 20; k++) {  			foreach (var source in riverSources) {  				m_AddRiverStrategy.AddRiver (source' true);  			}  		}  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' false);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: if (map.Corners.Any (c => c.IsLand)) {  	var minStreamHeightForBigRivers = GetMinStreamHeight (map' this.BigRiversAreaPart);  	var minStreamHeightForRandomRivers = GetMinStreamHeight (map' this.SmallRiversAreaPart);  	List<Corner> riverSources = null;  	for (int k = 0; k < 500; k++) {  		List<Corner> newSources = new List<Corner> ();  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  		}  		for (int i = 0; i < 20; i++) {  			newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  		}  		if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  			riverSources = newSources;  		}  		// TODO: maybe remove this strange thing  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' true);  		}  	}  	if (riverSources != null) {  		// TODO: set parameter?  		for (int k = 0; k < 20; k++) {  			foreach (var source in riverSources) {  				m_AddRiverStrategy.AddRiver (source' true);  			}  		}  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' false);  		}  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int k = 0; k < 500; k++) {  	List<Corner> newSources = new List<Corner> ();  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  	}  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  	}  	if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  		riverSources = newSources;  	}  	// TODO: maybe remove this strange thing  	foreach (var source in riverSources) {  		m_AddRiverStrategy.AddRiver (source' true);  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int k = 0; k < 500; k++) {  	List<Corner> newSources = new List<Corner> ();  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  	}  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  	}  	if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  		riverSources = newSources;  	}  	// TODO: maybe remove this strange thing  	foreach (var source in riverSources) {  		m_AddRiverStrategy.AddRiver (source' true);  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int k = 0; k < 500; k++) {  	List<Corner> newSources = new List<Corner> ();  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  	}  	for (int i = 0; i < 20; i++) {  		newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  	}  	if (riverSources == null || this.EstimateCorners (map' newSources) < this.EstimateCorners (map' riverSources)) {  		riverSources = newSources;  	}  	// TODO: maybe remove this strange thing  	foreach (var source in riverSources) {  		m_AddRiverStrategy.AddRiver (source' true);  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForBigRivers));  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	newSources.Add (this.GetRandomLandCornerAboveTheHeight (map' minStreamHeightForRandomRivers));  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: if (riverSources != null) {  	// TODO: set parameter?  	for (int k = 0; k < 20; k++) {  		foreach (var source in riverSources) {  			m_AddRiverStrategy.AddRiver (source' true);  		}  	}  	foreach (var source in riverSources) {  		m_AddRiverStrategy.AddRiver (source' false);  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,AddRiversBuilderComponent,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\AddRiversBuilderComponent.cs,Build,The following statement contains a magic number: for (int k = 0; k < 20; k++) {  	foreach (var source in riverSources) {  		m_AddRiverStrategy.AddRiver (source' true);  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,BaseRivers,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\BaseRivers.cs,GetMinStreamHeight,The following statement contains a magic number: while (r - l > 1e-7) {  	double m = (l + r) / 2;  	if (areaPart * map.Corners.Count > map.Corners.Count (c => c.IsLand && c.Elevation >= m)) {  		r = m;  	}  	else {  		l = m;  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,BaseRivers,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\BaseRivers.cs,GetMinStreamHeight,The following statement contains a magic number: while (r - l > 1e-7) {  	double m = (l + r) / 2;  	if (areaPart * map.Corners.Count > map.Corners.Count (c => c.IsLand && c.Elevation >= m)) {  		r = m;  	}  	else {  		l = m;  	}  }  
Magic Number,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The following statement contains a magic number: while (!riverSource.IsOcean) {  	Border nextEdge = null;  	Corner nextCorner = null;  	foreach (var border in riverSource.Borders) {  		var newCorner = border.OtherEnd (riverSource);  		if (!visited.Contains (newCorner)) {  			if (riverSource.IsLake && newCorner.IsLake && border.Polygons [0].IsLand && border.Polygons [1].IsLand) {  				continue;  			}  			if (nextCorner == null || newCorner.Elevation < nextCorner.Elevation) {  				nextEdge = border;  				nextCorner = newCorner;  			}  		}  	}  	if (nextEdge == null) {  		return;  	}  	if (nextCorner.Elevation > riverSource.Elevation) {  		nextEdge = null;  		nextCorner = null;  		Point2D direction;  		if (previous != null) {  			direction = riverSource - previous;  		}  		else {  			direction = Geometry.GetRandomUnitVector ();  		}  		foreach (var border in riverSource.Borders) {  			var newCorner = border.OtherEnd (riverSource);  			if (!visited.Contains (newCorner)) {  				if (riverSource.IsLake && newCorner.IsLake && border.Polygons [0].IsLand && border.Polygons [1].IsLand) {  					continue;  				}  				if (nextCorner == null || Geometry.Cos (direction' nextCorner - riverSource) < Geometry.Cos (direction' newCorner - riverSource)) {  					nextEdge = border;  					nextCorner = newCorner;  				}  			}  		}  		if (nextCorner == null) {  			return;  		}  		nextCorner.Elevation = riverSource.Elevation - SmallStep;  	}  	if (!onlyErosion) {  		// TODO: fix eps  		if (nextEdge.RiverCapacity < 1e-7) {  			flow += 1;  		}  		nextEdge.RiverCapacity += flow;  		nextCorner.IsRiver = true;  	}  	previous = riverSource;  	riverSource = nextCorner;  	visited.Add (riverSource);  }  
Magic Number,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The following statement contains a magic number: if (!onlyErosion) {  	// TODO: fix eps  	if (nextEdge.RiverCapacity < 1e-7) {  		flow += 1;  	}  	nextEdge.RiverCapacity += flow;  	nextCorner.IsRiver = true;  }  
Magic Number,Triangulation.MapBuilding.Rivers,CommonAddRiverStrategy,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\Rivers\CommonAddRiverStrategy.cs,AddRiver,The following statement contains a magic number: if (nextEdge.RiverCapacity < 1e-7) {  	flow += 1;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (moistures.Length > 0 && elevation.Length > 0) {  	for (int i = 0; i < N; i++) {  		moistureLevels [i] = (double)i / N;  		//moistures[(i * moistures.Length) / N];  	}  	for (int i = 0; i < M; i++) {  		elevationLevels [i] = (double)i / M;  		//elevation[(i * elevation.Length) / M];  	}  	foreach (var polygon in map.Polygons) {  		TerrainType terranType = TerrainType.Grassland;  		if (polygon.IsLand) {  			int ml = 0;  			for (int i = 0; i < N; i++) {  				if (polygon.Moisture > moistureLevels [i]) {  					ml = i;  				}  			}  			int el = 0;  			for (int i = 0; i < M; i++) {  				if (polygon.Elevation > elevationLevels [i]) {  					el = i;  				}  			}  			if (el == 0) {  				switch (ml) {  				case 0:  					terranType = TerrainType.SubtropicalDesert;  					break;  				case 1:  					terranType = TerrainType.Grassland;  					break;  				case 2:  				case 3:  					terranType = TerrainType.TropicalSeasonalForest;  					break;  				case 4:  				case 5:  					terranType = TerrainType.TropicalRainForest;  					break;  				}  			}  			if (el == 1) {  				switch (ml) {  				case 0:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 1:  				case 2:  					terranType = TerrainType.Grassland;  					break;  				case 3:  				case 4:  					terranType = TerrainType.TemperatureDeciduousForest;  					break;  				case 5:  					terranType = TerrainType.TemperateRainForest;  					break;  				}  			}  			if (el == 2) {  				switch (ml) {  				case 0:  				case 1:  					terranType = TerrainType.TemperatureDesert;  					break;  				case 2:  				case 3:  					terranType = TerrainType.Shrubland;  					break;  				case 4:  				case 5:  					terranType = TerrainType.Taiga;  					break;  				}  			}  			if (el == 3) {  				switch (ml) {  				case 0:  					terranType = TerrainType.Scorched;  					break;  				case 1:  					terranType = TerrainType.Bare;  					break;  				case 2:  					terranType = TerrainType.Tundra;  					break;  				case 3:  				case 4:  				case 5:  					terranType = TerrainType.Snow;  					break;  				}  			}  		}  		else {  			if (polygon.IsLake) {  				terranType = TerrainType.Lake;  			}  			if (polygon.IsOcean) {  				// TODO: think about certan numbers  				if (polygon.Elevation > -0.2) {  					terranType = TerrainType.ShallowOcean;  				}  				else {  					terranType = TerrainType.DeepOcean;  				}  			}  		}  		polygon.Type = terranType;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: foreach (var polygon in map.Polygons) {  	TerrainType terranType = TerrainType.Grassland;  	if (polygon.IsLand) {  		int ml = 0;  		for (int i = 0; i < N; i++) {  			if (polygon.Moisture > moistureLevels [i]) {  				ml = i;  			}  		}  		int el = 0;  		for (int i = 0; i < M; i++) {  			if (polygon.Elevation > elevationLevels [i]) {  				el = i;  			}  		}  		if (el == 0) {  			switch (ml) {  			case 0:  				terranType = TerrainType.SubtropicalDesert;  				break;  			case 1:  				terranType = TerrainType.Grassland;  				break;  			case 2:  			case 3:  				terranType = TerrainType.TropicalSeasonalForest;  				break;  			case 4:  			case 5:  				terranType = TerrainType.TropicalRainForest;  				break;  			}  		}  		if (el == 1) {  			switch (ml) {  			case 0:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 1:  			case 2:  				terranType = TerrainType.Grassland;  				break;  			case 3:  			case 4:  				terranType = TerrainType.TemperatureDeciduousForest;  				break;  			case 5:  				terranType = TerrainType.TemperateRainForest;  				break;  			}  		}  		if (el == 2) {  			switch (ml) {  			case 0:  			case 1:  				terranType = TerrainType.TemperatureDesert;  				break;  			case 2:  			case 3:  				terranType = TerrainType.Shrubland;  				break;  			case 4:  			case 5:  				terranType = TerrainType.Taiga;  				break;  			}  		}  		if (el == 3) {  			switch (ml) {  			case 0:  				terranType = TerrainType.Scorched;  				break;  			case 1:  				terranType = TerrainType.Bare;  				break;  			case 2:  				terranType = TerrainType.Tundra;  				break;  			case 3:  			case 4:  			case 5:  				terranType = TerrainType.Snow;  				break;  			}  		}  	}  	else {  		if (polygon.IsLake) {  			terranType = TerrainType.Lake;  		}  		if (polygon.IsOcean) {  			// TODO: think about certan numbers  			if (polygon.Elevation > -0.2) {  				terranType = TerrainType.ShallowOcean;  			}  			else {  				terranType = TerrainType.DeepOcean;  			}  		}  	}  	polygon.Type = terranType;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsLand) {  	int ml = 0;  	for (int i = 0; i < N; i++) {  		if (polygon.Moisture > moistureLevels [i]) {  			ml = i;  		}  	}  	int el = 0;  	for (int i = 0; i < M; i++) {  		if (polygon.Elevation > elevationLevels [i]) {  			el = i;  		}  	}  	if (el == 0) {  		switch (ml) {  		case 0:  			terranType = TerrainType.SubtropicalDesert;  			break;  		case 1:  			terranType = TerrainType.Grassland;  			break;  		case 2:  		case 3:  			terranType = TerrainType.TropicalSeasonalForest;  			break;  		case 4:  		case 5:  			terranType = TerrainType.TropicalRainForest;  			break;  		}  	}  	if (el == 1) {  		switch (ml) {  		case 0:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 1:  		case 2:  			terranType = TerrainType.Grassland;  			break;  		case 3:  		case 4:  			terranType = TerrainType.TemperatureDeciduousForest;  			break;  		case 5:  			terranType = TerrainType.TemperateRainForest;  			break;  		}  	}  	if (el == 2) {  		switch (ml) {  		case 0:  		case 1:  			terranType = TerrainType.TemperatureDesert;  			break;  		case 2:  		case 3:  			terranType = TerrainType.Shrubland;  			break;  		case 4:  		case 5:  			terranType = TerrainType.Taiga;  			break;  		}  	}  	if (el == 3) {  		switch (ml) {  		case 0:  			terranType = TerrainType.Scorched;  			break;  		case 1:  			terranType = TerrainType.Bare;  			break;  		case 2:  			terranType = TerrainType.Tundra;  			break;  		case 3:  		case 4:  		case 5:  			terranType = TerrainType.Snow;  			break;  		}  	}  }  else {  	if (polygon.IsLake) {  		terranType = TerrainType.Lake;  	}  	if (polygon.IsOcean) {  		// TODO: think about certan numbers  		if (polygon.Elevation > -0.2) {  			terranType = TerrainType.ShallowOcean;  		}  		else {  			terranType = TerrainType.DeepOcean;  		}  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 0) {  	switch (ml) {  	case 0:  		terranType = TerrainType.SubtropicalDesert;  		break;  	case 1:  		terranType = TerrainType.Grassland;  		break;  	case 2:  	case 3:  		terranType = TerrainType.TropicalSeasonalForest;  		break;  	case 4:  	case 5:  		terranType = TerrainType.TropicalRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 0) {  	switch (ml) {  	case 0:  		terranType = TerrainType.SubtropicalDesert;  		break;  	case 1:  		terranType = TerrainType.Grassland;  		break;  	case 2:  	case 3:  		terranType = TerrainType.TropicalSeasonalForest;  		break;  	case 4:  	case 5:  		terranType = TerrainType.TropicalRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 0) {  	switch (ml) {  	case 0:  		terranType = TerrainType.SubtropicalDesert;  		break;  	case 1:  		terranType = TerrainType.Grassland;  		break;  	case 2:  	case 3:  		terranType = TerrainType.TropicalSeasonalForest;  		break;  	case 4:  	case 5:  		terranType = TerrainType.TropicalRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 0) {  	switch (ml) {  	case 0:  		terranType = TerrainType.SubtropicalDesert;  		break;  	case 1:  		terranType = TerrainType.Grassland;  		break;  	case 2:  	case 3:  		terranType = TerrainType.TropicalSeasonalForest;  		break;  	case 4:  	case 5:  		terranType = TerrainType.TropicalRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.SubtropicalDesert;  	break;  case 1:  	terranType = TerrainType.Grassland;  	break;  case 2:  case 3:  	terranType = TerrainType.TropicalSeasonalForest;  	break;  case 4:  case 5:  	terranType = TerrainType.TropicalRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.SubtropicalDesert;  	break;  case 1:  	terranType = TerrainType.Grassland;  	break;  case 2:  case 3:  	terranType = TerrainType.TropicalSeasonalForest;  	break;  case 4:  case 5:  	terranType = TerrainType.TropicalRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.SubtropicalDesert;  	break;  case 1:  	terranType = TerrainType.Grassland;  	break;  case 2:  case 3:  	terranType = TerrainType.TropicalSeasonalForest;  	break;  case 4:  case 5:  	terranType = TerrainType.TropicalRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.SubtropicalDesert;  	break;  case 1:  	terranType = TerrainType.Grassland;  	break;  case 2:  case 3:  	terranType = TerrainType.TropicalSeasonalForest;  	break;  case 4:  case 5:  	terranType = TerrainType.TropicalRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 1) {  	switch (ml) {  	case 0:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 1:  	case 2:  		terranType = TerrainType.Grassland;  		break;  	case 3:  	case 4:  		terranType = TerrainType.TemperatureDeciduousForest;  		break;  	case 5:  		terranType = TerrainType.TemperateRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 1) {  	switch (ml) {  	case 0:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 1:  	case 2:  		terranType = TerrainType.Grassland;  		break;  	case 3:  	case 4:  		terranType = TerrainType.TemperatureDeciduousForest;  		break;  	case 5:  		terranType = TerrainType.TemperateRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 1) {  	switch (ml) {  	case 0:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 1:  	case 2:  		terranType = TerrainType.Grassland;  		break;  	case 3:  	case 4:  		terranType = TerrainType.TemperatureDeciduousForest;  		break;  	case 5:  		terranType = TerrainType.TemperateRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 1) {  	switch (ml) {  	case 0:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 1:  	case 2:  		terranType = TerrainType.Grassland;  		break;  	case 3:  	case 4:  		terranType = TerrainType.TemperatureDeciduousForest;  		break;  	case 5:  		terranType = TerrainType.TemperateRainForest;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.TemperatureDesert;  	break;  case 1:  case 2:  	terranType = TerrainType.Grassland;  	break;  case 3:  case 4:  	terranType = TerrainType.TemperatureDeciduousForest;  	break;  case 5:  	terranType = TerrainType.TemperateRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.TemperatureDesert;  	break;  case 1:  case 2:  	terranType = TerrainType.Grassland;  	break;  case 3:  case 4:  	terranType = TerrainType.TemperatureDeciduousForest;  	break;  case 5:  	terranType = TerrainType.TemperateRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.TemperatureDesert;  	break;  case 1:  case 2:  	terranType = TerrainType.Grassland;  	break;  case 3:  case 4:  	terranType = TerrainType.TemperatureDeciduousForest;  	break;  case 5:  	terranType = TerrainType.TemperateRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.TemperatureDesert;  	break;  case 1:  case 2:  	terranType = TerrainType.Grassland;  	break;  case 3:  case 4:  	terranType = TerrainType.TemperatureDeciduousForest;  	break;  case 5:  	terranType = TerrainType.TemperateRainForest;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 2) {  	switch (ml) {  	case 0:  	case 1:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 2:  	case 3:  		terranType = TerrainType.Shrubland;  		break;  	case 4:  	case 5:  		terranType = TerrainType.Taiga;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 2) {  	switch (ml) {  	case 0:  	case 1:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 2:  	case 3:  		terranType = TerrainType.Shrubland;  		break;  	case 4:  	case 5:  		terranType = TerrainType.Taiga;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 2) {  	switch (ml) {  	case 0:  	case 1:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 2:  	case 3:  		terranType = TerrainType.Shrubland;  		break;  	case 4:  	case 5:  		terranType = TerrainType.Taiga;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 2) {  	switch (ml) {  	case 0:  	case 1:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 2:  	case 3:  		terranType = TerrainType.Shrubland;  		break;  	case 4:  	case 5:  		terranType = TerrainType.Taiga;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 2) {  	switch (ml) {  	case 0:  	case 1:  		terranType = TerrainType.TemperatureDesert;  		break;  	case 2:  	case 3:  		terranType = TerrainType.Shrubland;  		break;  	case 4:  	case 5:  		terranType = TerrainType.Taiga;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  case 1:  	terranType = TerrainType.TemperatureDesert;  	break;  case 2:  case 3:  	terranType = TerrainType.Shrubland;  	break;  case 4:  case 5:  	terranType = TerrainType.Taiga;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  case 1:  	terranType = TerrainType.TemperatureDesert;  	break;  case 2:  case 3:  	terranType = TerrainType.Shrubland;  	break;  case 4:  case 5:  	terranType = TerrainType.Taiga;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  case 1:  	terranType = TerrainType.TemperatureDesert;  	break;  case 2:  case 3:  	terranType = TerrainType.Shrubland;  	break;  case 4:  case 5:  	terranType = TerrainType.Taiga;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  case 1:  	terranType = TerrainType.TemperatureDesert;  	break;  case 2:  case 3:  	terranType = TerrainType.Shrubland;  	break;  case 4:  case 5:  	terranType = TerrainType.Taiga;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 3) {  	switch (ml) {  	case 0:  		terranType = TerrainType.Scorched;  		break;  	case 1:  		terranType = TerrainType.Bare;  		break;  	case 2:  		terranType = TerrainType.Tundra;  		break;  	case 3:  	case 4:  	case 5:  		terranType = TerrainType.Snow;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 3) {  	switch (ml) {  	case 0:  		terranType = TerrainType.Scorched;  		break;  	case 1:  		terranType = TerrainType.Bare;  		break;  	case 2:  		terranType = TerrainType.Tundra;  		break;  	case 3:  	case 4:  	case 5:  		terranType = TerrainType.Snow;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 3) {  	switch (ml) {  	case 0:  		terranType = TerrainType.Scorched;  		break;  	case 1:  		terranType = TerrainType.Bare;  		break;  	case 2:  		terranType = TerrainType.Tundra;  		break;  	case 3:  	case 4:  	case 5:  		terranType = TerrainType.Snow;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 3) {  	switch (ml) {  	case 0:  		terranType = TerrainType.Scorched;  		break;  	case 1:  		terranType = TerrainType.Bare;  		break;  	case 2:  		terranType = TerrainType.Tundra;  		break;  	case 3:  	case 4:  	case 5:  		terranType = TerrainType.Snow;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (el == 3) {  	switch (ml) {  	case 0:  		terranType = TerrainType.Scorched;  		break;  	case 1:  		terranType = TerrainType.Bare;  		break;  	case 2:  		terranType = TerrainType.Tundra;  		break;  	case 3:  	case 4:  	case 5:  		terranType = TerrainType.Snow;  		break;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.Scorched;  	break;  case 1:  	terranType = TerrainType.Bare;  	break;  case 2:  	terranType = TerrainType.Tundra;  	break;  case 3:  case 4:  case 5:  	terranType = TerrainType.Snow;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.Scorched;  	break;  case 1:  	terranType = TerrainType.Bare;  	break;  case 2:  	terranType = TerrainType.Tundra;  	break;  case 3:  case 4:  case 5:  	terranType = TerrainType.Snow;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.Scorched;  	break;  case 1:  	terranType = TerrainType.Bare;  	break;  case 2:  	terranType = TerrainType.Tundra;  	break;  case 3:  case 4:  case 5:  	terranType = TerrainType.Snow;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: switch (ml) {  case 0:  	terranType = TerrainType.Scorched;  	break;  case 1:  	terranType = TerrainType.Bare;  	break;  case 2:  	terranType = TerrainType.Tundra;  	break;  case 3:  case 4:  case 5:  	terranType = TerrainType.Snow;  	break;  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.IsOcean) {  	// TODO: think about certan numbers  	if (polygon.Elevation > -0.2) {  		terranType = TerrainType.ShallowOcean;  	}  	else {  		terranType = TerrainType.DeepOcean;  	}  }  
Magic Number,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following statement contains a magic number: if (polygon.Elevation > -0.2) {  	terranType = TerrainType.ShallowOcean;  }  else {  	terranType = TerrainType.DeepOcean;  }  
Magic Number,Triangulation.MapObjects,Corner,C:\repos\quercitron_MapCreator\Triangulation\MapObjects\Corner.cs,Init,The following statement contains a magic number: Polygons = new Polygon[3];  
Magic Number,Triangulation.MapObjects,Corner,C:\repos\quercitron_MapCreator\Triangulation\MapObjects\Corner.cs,Init,The following statement contains a magic number: Borders = new List<Border> (3);  
Magic Number,Triangulation.MapObjects,Corner,C:\repos\quercitron_MapCreator\Triangulation\MapObjects\Corner.cs,Init,The following statement contains a magic number: Corners = new Corner[3];  
Magic Number,Triangulation.MapObjects,Border,C:\repos\quercitron_MapCreator\Triangulation\MapObjects\Border.cs,Init,The following statement contains a magic number: Polygons = new Polygon[2];  
Magic Number,Triangulation.MapObjects,Border,C:\repos\quercitron_MapCreator\Triangulation\MapObjects\Border.cs,Init,The following statement contains a magic number: Corners = new Corner[2];  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayPolygons) {  	foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  		if (polygon.IsLand) {  			if (polygon.IsOceanCoast && settings.DisplayCoast) {  				graphics.FillPolygon (coastBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				//graphics.FillPolygon(coastBrush' polygon.CornersToDraw.Select(p => (PointF)p).Reverse().ToArray());  			}  			else {  				if (settings.DisplayElevation) {  					var lowLandColor = new MyColor (Color.Green);  					var highLandColor = new MyColor (Color.Red);  					Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor);  					graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  				else {  					if (settings.DisplayMoisture) {  						var dryLandColor = new MyColor (Color.White);  						var wetLandColor = new MyColor (Color.Blue);  						Color color = (Color)(polygon.Moisture * wetLandColor + (1 - polygon.Moisture) * dryLandColor);  						graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  					}  					else {  						var brush = new SolidBrush (m_Palette.GetPolygonColor (polygon));  						graphics.FillPolygon (brush' polygon.CornersToDraw.Select (p => (PointF)p).Reverse ().ToArray ());  						//graphics.FillPolygon(landBrush' polygon.CornersToDraw.Select(p => (PointF)p).ToArray());  					}  				}  			}  		}  		else {  			if (polygon.IsOcean) {  				if (settings.DisplayElevation) {  					var shallowWaterColor = new MyColor (Color.LightBlue);  					var deepWaterLandColor = new MyColor (Color.DarkBlue);  					Color color = (Color)(-polygon.Elevation / maxDistFromWater * deepWaterLandColor + (1 + polygon.Elevation / maxDistFromWater) * shallowWaterColor);  					graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  				else {  					var newOceanBrush = new SolidBrush (m_Palette.GetPolygonColor (polygon));  					graphics.FillPolygon (newOceanBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  			}  			if (polygon.IsLake) {  				if (settings.DisplayLakes) {  					graphics.FillPolygon (lakeBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  				else {  					if (settings.DisplayElevation) {  						var lowLandColor = new MyColor (Color.Green);  						var highLandColor = new MyColor (Color.Red);  						Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor);  						graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  					}  				}  			}  		}  		/*graphics.FillEllipse(new SolidBrush(Color.Red)' (float) polygon.Center.X' (float) polygon.Center.Y' 5' 5);                      for (int i = 0; i < polygon.Borders.Count - 2; i++)                     {                         graphics.DrawLine(new Pen(Color.Green)' (PointF) polygon.Borders[i].Center' (PointF) polygon.Borders[i + 1].Center);                     }*/}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  	if (polygon.IsLand) {  		if (polygon.IsOceanCoast && settings.DisplayCoast) {  			graphics.FillPolygon (coastBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  			//graphics.FillPolygon(coastBrush' polygon.CornersToDraw.Select(p => (PointF)p).Reverse().ToArray());  		}  		else {  			if (settings.DisplayElevation) {  				var lowLandColor = new MyColor (Color.Green);  				var highLandColor = new MyColor (Color.Red);  				Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor);  				graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  			}  			else {  				if (settings.DisplayMoisture) {  					var dryLandColor = new MyColor (Color.White);  					var wetLandColor = new MyColor (Color.Blue);  					Color color = (Color)(polygon.Moisture * wetLandColor + (1 - polygon.Moisture) * dryLandColor);  					graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  				else {  					var brush = new SolidBrush (m_Palette.GetPolygonColor (polygon));  					graphics.FillPolygon (brush' polygon.CornersToDraw.Select (p => (PointF)p).Reverse ().ToArray ());  					//graphics.FillPolygon(landBrush' polygon.CornersToDraw.Select(p => (PointF)p).ToArray());  				}  			}  		}  	}  	else {  		if (polygon.IsOcean) {  			if (settings.DisplayElevation) {  				var shallowWaterColor = new MyColor (Color.LightBlue);  				var deepWaterLandColor = new MyColor (Color.DarkBlue);  				Color color = (Color)(-polygon.Elevation / maxDistFromWater * deepWaterLandColor + (1 + polygon.Elevation / maxDistFromWater) * shallowWaterColor);  				graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  			}  			else {  				var newOceanBrush = new SolidBrush (m_Palette.GetPolygonColor (polygon));  				graphics.FillPolygon (newOceanBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  			}  		}  		if (polygon.IsLake) {  			if (settings.DisplayLakes) {  				graphics.FillPolygon (lakeBrush' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  			}  			else {  				if (settings.DisplayElevation) {  					var lowLandColor = new MyColor (Color.Green);  					var highLandColor = new MyColor (Color.Red);  					Color color = (Color)(polygon.Elevation / maxDistFromWater * highLandColor + (1 - polygon.Elevation / maxDistFromWater) * lowLandColor);  					graphics.FillPolygon (new SolidBrush (color)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  				}  			}  		}  	}  	/*graphics.FillEllipse(new SolidBrush(Color.Red)' (float) polygon.Center.X' (float) polygon.Center.Y' 5' 5);                      for (int i = 0; i < polygon.Borders.Count - 2; i++)                     {                         graphics.DrawLine(new Pen(Color.Green)' (PointF) polygon.Borders[i].Center' (PointF) polygon.Borders[i + 1].Center);                     }*/}  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayRivers) {  	foreach (var border in map.Borders) {  		if (border.RiverCapacity > 0 && (!border.IsLake || !settings.DisplayLakes)) {  			var riverPenWidth = (float)Math.Sqrt (30 * border.RiverCapacity / Math.Sqrt (map.Polygons.Count));  			riverPen.Width = riverPenWidth;  			graphics.DrawLines (riverPen' border.BorderToDraw.Select (p => (PointF)p).ToArray ());  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var border in map.Borders) {  	if (border.RiverCapacity > 0 && (!border.IsLake || !settings.DisplayLakes)) {  		var riverPenWidth = (float)Math.Sqrt (30 * border.RiverCapacity / Math.Sqrt (map.Polygons.Count));  		riverPen.Width = riverPenWidth;  		graphics.DrawLines (riverPen' border.BorderToDraw.Select (p => (PointF)p).ToArray ());  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (border.RiverCapacity > 0 && (!border.IsLake || !settings.DisplayLakes)) {  	var riverPenWidth = (float)Math.Sqrt (30 * border.RiverCapacity / Math.Sqrt (map.Polygons.Count));  	riverPen.Width = riverPenWidth;  	graphics.DrawLines (riverPen' border.BorderToDraw.Select (p => (PointF)p).ToArray ());  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayLinealBorders) {  	foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  		graphics.DrawPolygon (blackPen' polygon.Corners.Select (p => (PointF)p).ToArray ());  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  	graphics.DrawPolygon (blackPen' polygon.Corners.Select (p => (PointF)p).ToArray ());  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayNoiseBorders) {  	foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  		graphics.DrawPolygon (new Pen (Color.Black)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var polygon in map.Polygons.Where (p => p.Corners.Count > 2)) {  	graphics.DrawPolygon (new Pen (Color.Black)' polygon.CornersToDraw.Select (p => (PointF)p).ToArray ());  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.ApplyNoise) {  	//var noise = this.m_PerlinNoiseGenerator.GenerateNoise(width' height' this.m_Random.Next()' Math.Max(width' height));  	var noise = this.m_PerlinNoiseGenerator.GenerateNoise (width' height' this.m_Random.Next ()' 100);  	for (int i = 0; i < width; i++) {  		for (int j = 0; j < height; j++) {  			bitmap.SetPixel (i' j' Color.FromArgb ((int)(BaseAlfa + (256 - BaseAlfa) * noise [i' j])' bitmap.GetPixel (i' j)));  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.ApplyNoise) {  	//var noise = this.m_PerlinNoiseGenerator.GenerateNoise(width' height' this.m_Random.Next()' Math.Max(width' height));  	var noise = this.m_PerlinNoiseGenerator.GenerateNoise (width' height' this.m_Random.Next ()' 100);  	for (int i = 0; i < width; i++) {  		for (int j = 0; j < height; j++) {  			bitmap.SetPixel (i' j' Color.FromArgb ((int)(BaseAlfa + (256 - BaseAlfa) * noise [i' j])' bitmap.GetPixel (i' j)));  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	for (int j = 0; j < height; j++) {  		bitmap.SetPixel (i' j' Color.FromArgb ((int)(BaseAlfa + (256 - BaseAlfa) * noise [i' j])' bitmap.GetPixel (i' j)));  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	bitmap.SetPixel (i' j' Color.FromArgb ((int)(BaseAlfa + (256 - BaseAlfa) * noise [i' j])' bitmap.GetPixel (i' j)));  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: bitmap.SetPixel (i' j' Color.FromArgb ((int)(BaseAlfa + (256 - BaseAlfa) * noise [i' j])' bitmap.GetPixel (i' j)));  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayCoastline) {  	foreach (var border in map.Borders) {  		if (border.IsCoast) {  			Pen pen;  			if (border.IsOceanCoast) {  				pen = new Pen (Color.Brown' 3);  			}  			else {  				pen = new Pen (Color.RoyalBlue' 2);  			}  			for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  				graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  			}  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (settings.DisplayCoastline) {  	foreach (var border in map.Borders) {  		if (border.IsCoast) {  			Pen pen;  			if (border.IsOceanCoast) {  				pen = new Pen (Color.Brown' 3);  			}  			else {  				pen = new Pen (Color.RoyalBlue' 2);  			}  			for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  				graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  			}  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var border in map.Borders) {  	if (border.IsCoast) {  		Pen pen;  		if (border.IsOceanCoast) {  			pen = new Pen (Color.Brown' 3);  		}  		else {  			pen = new Pen (Color.RoyalBlue' 2);  		}  		for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  			graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: foreach (var border in map.Borders) {  	if (border.IsCoast) {  		Pen pen;  		if (border.IsOceanCoast) {  			pen = new Pen (Color.Brown' 3);  		}  		else {  			pen = new Pen (Color.RoyalBlue' 2);  		}  		for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  			graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  		}  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (border.IsCoast) {  	Pen pen;  	if (border.IsOceanCoast) {  		pen = new Pen (Color.Brown' 3);  	}  	else {  		pen = new Pen (Color.RoyalBlue' 2);  	}  	for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  		graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (border.IsCoast) {  	Pen pen;  	if (border.IsOceanCoast) {  		pen = new Pen (Color.Brown' 3);  	}  	else {  		pen = new Pen (Color.RoyalBlue' 2);  	}  	for (int i = 0; i < border.BorderToDraw.Count - 1; i++) {  		graphics.DrawLine (pen' (PointF)border.BorderToDraw [i]' (PointF)border.BorderToDraw [i + 1]);  	}  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (border.IsOceanCoast) {  	pen = new Pen (Color.Brown' 3);  }  else {  	pen = new Pen (Color.RoyalBlue' 2);  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: if (border.IsOceanCoast) {  	pen = new Pen (Color.Brown' 3);  }  else {  	pen = new Pen (Color.RoyalBlue' 2);  }  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: pen = new Pen (Color.Brown' 3);  
Magic Number,Triangulation.MapPainter,CommonMapPainter,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\CommonMapPainter.cs,DrawMap,The following statement contains a magic number: pen = new Pen (Color.RoyalBlue' 2);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: switch (polygon.Type) {  case TerrainType.Grassland:  	result = Color.FromArgb (196' 212' 170);  	break;  case TerrainType.Bare:  	result = Color.FromArgb (187' 187' 187);  	break;  case TerrainType.Lake:  	result = Color.CornflowerBlue;  	break;  case TerrainType.ShallowOcean:  	result = Color.RoyalBlue;  	//Color.CornflowerBlue;  	break;  case TerrainType.DeepOcean:  	result = Color.RoyalBlue;  	break;  case TerrainType.Scorched:  	result = Color.FromArgb (153' 153' 153);  	break;  case TerrainType.Shrubland:  	result = Color.FromArgb (196' 204' 187);  	break;  case TerrainType.Snow:  	result = Color.White;  	// Color.FromArgb(248' 248' 248);  	break;  case TerrainType.SubtropicalDesert:  	result = Color.FromArgb (233' 221' 199);  	break;  case TerrainType.Tundra:  	result = Color.FromArgb (221' 221' 187);  	break;  case TerrainType.Taiga:  	result = Color.FromArgb (204' 212' 187);  	break;  case TerrainType.TemperatureDesert:  	result = Color.FromArgb (228' 232' 202);  	break;  case TerrainType.TemperateRainForest:  	result = Color.FromArgb (164' 196' 168);  	break;  case TerrainType.TemperatureDeciduousForest:  	result = Color.FromArgb (180' 201' 169);  	break;  case TerrainType.TropicalRainForest:  	result = Color.FromArgb (156' 187' 169);  	break;  case TerrainType.TropicalSeasonalForest:  	result = Color.FromArgb (169' 204' 164);  	break;  default:  	result = Color.Red;  	break;  }  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 212' 170);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 212' 170);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 212' 170);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (187' 187' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (187' 187' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (187' 187' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (153' 153' 153);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (153' 153' 153);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (153' 153' 153);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 204' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 204' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (196' 204' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (233' 221' 199);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (233' 221' 199);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (233' 221' 199);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (221' 221' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (221' 221' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (221' 221' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (204' 212' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (204' 212' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (204' 212' 187);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (228' 232' 202);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (228' 232' 202);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (228' 232' 202);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (164' 196' 168);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (164' 196' 168);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (164' 196' 168);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (180' 201' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (180' 201' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (180' 201' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (156' 187' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (156' 187' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (156' 187' 169);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (169' 204' 164);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (169' 204' 164);  
Magic Number,Triangulation.MapPainter,Palette,C:\repos\quercitron_MapCreator\Triangulation\MapPainter\Palette.cs,GetPolygonColor,The following statement contains a magic number: result = Color.FromArgb (169' 204' 164);  
Missing Default,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following switch statement is missing a default case: switch (ml) {  case 0:  	terranType = TerrainType.SubtropicalDesert;  	break;  case 1:  	terranType = TerrainType.Grassland;  	break;  case 2:  case 3:  	terranType = TerrainType.TropicalSeasonalForest;  	break;  case 4:  case 5:  	terranType = TerrainType.TropicalRainForest;  	break;  }  
Missing Default,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following switch statement is missing a default case: switch (ml) {  case 0:  	terranType = TerrainType.TemperatureDesert;  	break;  case 1:  case 2:  	terranType = TerrainType.Grassland;  	break;  case 3:  case 4:  	terranType = TerrainType.TemperatureDeciduousForest;  	break;  case 5:  	terranType = TerrainType.TemperateRainForest;  	break;  }  
Missing Default,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following switch statement is missing a default case: switch (ml) {  case 0:  case 1:  	terranType = TerrainType.TemperatureDesert;  	break;  case 2:  case 3:  	terranType = TerrainType.Shrubland;  	break;  case 4:  case 5:  	terranType = TerrainType.Taiga;  	break;  }  
Missing Default,Triangulation.MapBuilding.TerranType,SetTerranTypeFromSite,C:\repos\quercitron_MapCreator\Triangulation\MapBuilding\TerranType\SetTerranTypeFromSite.cs,Build,The following switch statement is missing a default case: switch (ml) {  case 0:  	terranType = TerrainType.Scorched;  	break;  case 1:  	terranType = TerrainType.Bare;  	break;  case 2:  	terranType = TerrainType.Tundra;  	break;  case 3:  case 4:  case 5:  	terranType = TerrainType.Snow;  	break;  }  
