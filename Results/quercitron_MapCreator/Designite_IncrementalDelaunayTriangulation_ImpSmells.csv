Implementation smell,Namespace,Class,File,Method,Description
Complex Conditional,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,GetCoordinate,The conditional expression  "x < 0 || x >= m_Size || y < 0 || y >= m_Size"  is complex.
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	newTriangles [i] = new Triangle ();  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: newTriangles [2] = triangle;  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Edge edge = triangle.Edge (i);  	newTriangles [i].Points = new[] {  		edge.First'  		edge.Second'  		point  	};  	newTriangles [i].Triangles = new[] {  		newTriangles [(i + 1) % 3]'  		newTriangles [(i + 2) % 3]'  		triangle.Triangles [i]  	};  	if (triangle.Triangles [i] != null) {  		for (int j = 0; j < 3; j++) {  			if (triangle.Triangles [i].Triangles [j] == triangle) {  				triangle.Triangles [i].Triangles [j] = newTriangles [i];  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Edge edge = triangle.Edge (i);  	newTriangles [i].Points = new[] {  		edge.First'  		edge.Second'  		point  	};  	newTriangles [i].Triangles = new[] {  		newTriangles [(i + 1) % 3]'  		newTriangles [(i + 2) % 3]'  		triangle.Triangles [i]  	};  	if (triangle.Triangles [i] != null) {  		for (int j = 0; j < 3; j++) {  			if (triangle.Triangles [i].Triangles [j] == triangle) {  				triangle.Triangles [i].Triangles [j] = newTriangles [i];  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Edge edge = triangle.Edge (i);  	newTriangles [i].Points = new[] {  		edge.First'  		edge.Second'  		point  	};  	newTriangles [i].Triangles = new[] {  		newTriangles [(i + 1) % 3]'  		newTriangles [(i + 2) % 3]'  		triangle.Triangles [i]  	};  	if (triangle.Triangles [i] != null) {  		for (int j = 0; j < 3; j++) {  			if (triangle.Triangles [i].Triangles [j] == triangle) {  				triangle.Triangles [i].Triangles [j] = newTriangles [i];  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Edge edge = triangle.Edge (i);  	newTriangles [i].Points = new[] {  		edge.First'  		edge.Second'  		point  	};  	newTriangles [i].Triangles = new[] {  		newTriangles [(i + 1) % 3]'  		newTriangles [(i + 2) % 3]'  		triangle.Triangles [i]  	};  	if (triangle.Triangles [i] != null) {  		for (int j = 0; j < 3; j++) {  			if (triangle.Triangles [i].Triangles [j] == triangle) {  				triangle.Triangles [i].Triangles [j] = newTriangles [i];  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Edge edge = triangle.Edge (i);  	newTriangles [i].Points = new[] {  		edge.First'  		edge.Second'  		point  	};  	newTriangles [i].Triangles = new[] {  		newTriangles [(i + 1) % 3]'  		newTriangles [(i + 2) % 3]'  		triangle.Triangles [i]  	};  	if (triangle.Triangles [i] != null) {  		for (int j = 0; j < 3; j++) {  			if (triangle.Triangles [i].Triangles [j] == triangle) {  				triangle.Triangles [i].Triangles [j] = newTriangles [i];  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: newTriangles [i].Triangles = new[] {  	newTriangles [(i + 1) % 3]'  	newTriangles [(i + 2) % 3]'  	triangle.Triangles [i]  };  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: newTriangles [i].Triangles = new[] {  	newTriangles [(i + 1) % 3]'  	newTriangles [(i + 2) % 3]'  	triangle.Triangles [i]  };  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: newTriangles [i].Triangles = new[] {  	newTriangles [(i + 1) % 3]'  	newTriangles [(i + 2) % 3]'  	triangle.Triangles [i]  };  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: if (triangle.Triangles [i] != null) {  	for (int j = 0; j < 3; j++) {  		if (triangle.Triangles [i].Triangles [j] == triangle) {  			triangle.Triangles [i].Triangles [j] = newTriangles [i];  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	if (triangle.Triangles [i].Triangles [j] == triangle) {  		triangle.Triangles [i].Triangles [j] = newTriangles [i];  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	AddTriangle (newTriangles [i]);  	m_TrianglesToCheck.Enqueue (newTriangles [i]);  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,AddNewPoint,The following statement contains a magic number: m_TrianglesToCheck.Enqueue (newTriangles [2]);  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: while (m_TrianglesToCheck.Count > 0) {  	Triangle current = m_TrianglesToCheck.Dequeue ();  	for (int i = 0; i < 3; i++) {  		Triangle neighbor = current.Triangles [i];  		if (neighbor != null) {  			StructurePoint opPoint = null;  			int opId = 0;  			for (int j = 0; j < 3; j++) {  				if (neighbor.Triangles [j] == current) {  					opPoint = neighbor.Points [j];  					opId = j;  					break;  				}  			}  			if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  				Triangle tempTriangle = current.Triangles [(i + 2) % 3];  				current.Points [(i + 1) % 3] = opPoint;  				neighbor.Points [(opId + 1) % 3] = current.Points [i];  				current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  				current.SetNeighbor ((i + 2) % 3' neighbor);  				neighbor.SetNeighbor (opId' tempTriangle);  				m_TrianglesToCheck.Enqueue (current);  				m_TrianglesToCheck.Enqueue (neighbor);  				break;  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Triangle neighbor = current.Triangles [i];  	if (neighbor != null) {  		StructurePoint opPoint = null;  		int opId = 0;  		for (int j = 0; j < 3; j++) {  			if (neighbor.Triangles [j] == current) {  				opPoint = neighbor.Points [j];  				opId = j;  				break;  			}  		}  		if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  			Triangle tempTriangle = current.Triangles [(i + 2) % 3];  			current.Points [(i + 1) % 3] = opPoint;  			neighbor.Points [(opId + 1) % 3] = current.Points [i];  			current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  			current.SetNeighbor ((i + 2) % 3' neighbor);  			neighbor.SetNeighbor (opId' tempTriangle);  			m_TrianglesToCheck.Enqueue (current);  			m_TrianglesToCheck.Enqueue (neighbor);  			break;  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (neighbor != null) {  	StructurePoint opPoint = null;  	int opId = 0;  	for (int j = 0; j < 3; j++) {  		if (neighbor.Triangles [j] == current) {  			opPoint = neighbor.Points [j];  			opId = j;  			break;  		}  	}  	if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  		Triangle tempTriangle = current.Triangles [(i + 2) % 3];  		current.Points [(i + 1) % 3] = opPoint;  		neighbor.Points [(opId + 1) % 3] = current.Points [i];  		current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  		current.SetNeighbor ((i + 2) % 3' neighbor);  		neighbor.SetNeighbor (opId' tempTriangle);  		m_TrianglesToCheck.Enqueue (current);  		m_TrianglesToCheck.Enqueue (neighbor);  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	if (neighbor.Triangles [j] == current) {  		opPoint = neighbor.Points [j];  		opId = j;  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: if (!Ok (current.Points [i]' current.Points [(i + 1) % 3]' opPoint' current.Points [(i + 2) % 3])) {  	Triangle tempTriangle = current.Triangles [(i + 2) % 3];  	current.Points [(i + 1) % 3] = opPoint;  	neighbor.Points [(opId + 1) % 3] = current.Points [i];  	current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  	current.SetNeighbor ((i + 2) % 3' neighbor);  	neighbor.SetNeighbor (opId' tempTriangle);  	m_TrianglesToCheck.Enqueue (current);  	m_TrianglesToCheck.Enqueue (neighbor);  	break;  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: current.Points [(i + 1) % 3] = opPoint;  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: neighbor.Points [(opId + 1) % 3] = current.Points [i];  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: current.SetNeighbor (i' neighbor.Triangles [(opId + 2) % 3]);  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: current.SetNeighbor ((i + 2) % 3' neighbor);  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,CheckTriangles,The following statement contains a magic number: current.SetNeighbor ((i + 2) % 3' neighbor);  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,GetNext,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (triangle.Triangles [i] != null) {  		Edge edge = triangle.Edge (i);  		if (Vect (edge' triangle.Points [i]) * Vect (edge' target) <= 0) {  			return triangle.Triangles [i];  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,Structure,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Structure.cs,InitializeBoard,The following statement contains a magic number: m_Hash = new TriangleHash (maxX' maxY' top' 2);  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,Edge,The following statement contains a magic number: return new Edge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,Edge,The following statement contains a magic number: return new Edge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,Edge,The following statement contains a magic number: return new Edge (Points [(i + 1) % 3]' Points [(i + 2) % 3]);  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,ContainsPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vects [i] = Geometry.Vect (Points [i]' Points [(i + 1) % 3]' point);  }  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,ContainsPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	vects [i] = Geometry.Vect (Points [i]' Points [(i + 1) % 3]' point);  }  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,ContainsPoint,The following statement contains a magic number: vects [i] = Geometry.Vect (Points [i]' Points [(i + 1) % 3]' point);  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,SetNeighbor,The following statement contains a magic number: if (newTriangle != null) {  	int last = 0;  	Edge edge = this.Edge (index);  	for (int i = 0; i < 3; i++) {  		if (edge.First != newTriangle.Points [i] && edge.Second != newTriangle.Points [i]) {  			last = i;  			break;  		}  	}  	newTriangle.Triangles [last] = this;  }  
Magic Number,IncrementalDelaunayTriangulation,Triangle,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\Triangle.cs,SetNeighbor,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (edge.First != newTriangle.Points [i] && edge.Second != newTriangle.Points [i]) {  		last = i;  		break;  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,TriangleHash,The following statement contains a magic number: m_Size = 2;  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,TriangleHash,The following statement contains a magic number: m_Hash = new Triangle[2' 2];  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,TriangleHash,The following statement contains a magic number: m_Hash = new Triangle[2' 2];  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int i = 0; i < m_Size; i++) {  	for (int j = 0; j < m_Size; j++) {  		for (int ii = 0; ii < 2; ii++) {  			for (int ji = 0; ji < 2; ji++) {  				newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int i = 0; i < m_Size; i++) {  	for (int j = 0; j < m_Size; j++) {  		for (int ii = 0; ii < 2; ii++) {  			for (int ji = 0; ji < 2; ji++) {  				newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int i = 0; i < m_Size; i++) {  	for (int j = 0; j < m_Size; j++) {  		for (int ii = 0; ii < 2; ii++) {  			for (int ji = 0; ji < 2; ji++) {  				newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int i = 0; i < m_Size; i++) {  	for (int j = 0; j < m_Size; j++) {  		for (int ii = 0; ii < 2; ii++) {  			for (int ji = 0; ji < 2; ji++) {  				newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  			}  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int j = 0; j < m_Size; j++) {  	for (int ii = 0; ii < 2; ii++) {  		for (int ji = 0; ji < 2; ji++) {  			newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int j = 0; j < m_Size; j++) {  	for (int ii = 0; ii < 2; ii++) {  		for (int ji = 0; ji < 2; ji++) {  			newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int j = 0; j < m_Size; j++) {  	for (int ii = 0; ii < 2; ii++) {  		for (int ji = 0; ji < 2; ji++) {  			newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int j = 0; j < m_Size; j++) {  	for (int ii = 0; ii < 2; ii++) {  		for (int ji = 0; ji < 2; ji++) {  			newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  		}  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ii = 0; ii < 2; ii++) {  	for (int ji = 0; ji < 2; ji++) {  		newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ii = 0; ii < 2; ii++) {  	for (int ji = 0; ji < 2; ji++) {  		newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ii = 0; ii < 2; ii++) {  	for (int ji = 0; ji < 2; ji++) {  		newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ii = 0; ii < 2; ii++) {  	for (int ji = 0; ji < 2; ji++) {  		newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  	}  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ji = 0; ji < 2; ji++) {  	newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ji = 0; ji < 2; ji++) {  	newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: for (int ji = 0; ji < 2; ji++) {  	newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  }  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  
Magic Number,IncrementalDelaunayTriangulation,TriangleHash,C:\repos\quercitron_MapCreator\IncrementalDelaunayTriangulation\TriangleHash.cs,IncreaseSize,The following statement contains a magic number: newHash [2 * i + ii' 2 * j + ji] = m_Hash [i' j];  
