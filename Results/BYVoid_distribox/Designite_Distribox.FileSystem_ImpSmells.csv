Implementation smell,Namespace,Class,File,Method,Description
Long Method,Distribox.FileSystem,FileItem,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileItem.cs,Merge,The method has 119 lines of code.
Long Statement,Distribox.FileSystem,FileWatcher,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileWatcher.cs,TranslateEvent,The length of the statement  "                newEvent.OldFullPath = ((RenamedEventArgs)e).OldFullPath.Replace("\\"' Properties.PathSep).Replace("/"' Properties.PathSep); " is 124.
Duplicate Code,Distribox.FileSystem,FileItem,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileItem.cs,Merge,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 40)' (76' 97))
Missing Default,Distribox.FileSystem,FileWatcher,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileWatcher.cs,OnTimerEvent,The following switch statement is missing a default case: switch (args.ChangeType)                  {                      case WatcherChangeTypes.Changed:                          this.OnChangedEvent(null' args);                          break;                      case WatcherChangeTypes.Created:                          this.OnCreatedEvent(null' args);                          break;                      case WatcherChangeTypes.Deleted:                          this.OnDeletedEvent(null' args);                          break;                      case WatcherChangeTypes.Renamed:                          this.OnRenamedEvent(null' args as RenamedEventArgs);                          break;                  }
Missing Default,Distribox.FileSystem,FileItem,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileItem.cs,Merge,The following switch statement is missing a default case: switch (vs.Type)                      {                          case FileEventType.Created:                              GlobalFlag.AcceptFileEvent = false;                              Directory.CreateDirectory(Config.RootFolder.Enter(vs.Name));                                  GlobalFlag.AcceptFileEvent = true;                              break;                          case FileEventType.Changed:                              break;                          case FileEventType.Renamed:                              GlobalFlag.AcceptFileEvent = false;                              Directory.Move(Config.RootFolder.Enter(last.Name)' Config.RootFolder.Enter(vs.Name));                              GlobalFlag.AcceptFileEvent = true;                              break;                          case FileEventType.Deleted:                              GlobalFlag.AcceptFileEvent = false;                              Directory.Delete(Config.RootFolder.Enter(vs.Name));                              GlobalFlag.AcceptFileEvent = true;                              break;                      }
Missing Default,Distribox.FileSystem,FileItem,C:\repos\BYVoid_distribox\src\Distribox.FileSystem\FileItem.cs,Merge,The following switch statement is missing a default case: switch (vs.Type)                      {                          case FileEventType.Created:                              if (vs.SHA1 == null)                              {                                  GlobalFlag.AcceptFileEvent = false;                                  File.WriteAllText(Config.RootFolder.File(vs.Name)' string.Empty);                                  GlobalFlag.AcceptFileEvent = true;                              }                              else                              {                                  GlobalFlag.AcceptFileEvent = false;                                  File.Copy(Config.MetaFolderData.File(vs.SHA1)' Config.RootFolder.File(vs.Name)' true);                                  GlobalFlag.AcceptFileEvent = true;                              }                                break;                          case FileEventType.Changed:                              if (vs.SHA1 == null)                              {                                  GlobalFlag.AcceptFileEvent = false;                                  File.WriteAllText(Config.RootFolder.File(vs.Name)' string.Empty);                                  GlobalFlag.AcceptFileEvent = true;                              }                              else                              {                                  GlobalFlag.AcceptFileEvent = false;                                  File.Copy(Config.MetaFolderData.File(vs.SHA1)' Config.RootFolder.File(vs.Name)' true);                                  GlobalFlag.AcceptFileEvent = true;                              }                                break;                          case FileEventType.Renamed:                              GlobalFlag.AcceptFileEvent = false;                              File.Move(Config.RootFolder.File(last.Name)' Config.RootFolder.File(vs.Name));                              GlobalFlag.AcceptFileEvent = true;                              break;                          case FileEventType.Deleted:                              GlobalFlag.AcceptFileEvent = false;                              File.Delete(Config.RootFolder.File(vs.Name));                              GlobalFlag.AcceptFileEvent = true;                              break;                      }
