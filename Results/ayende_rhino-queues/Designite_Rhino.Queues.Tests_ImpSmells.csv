Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rhino.Queues.Tests.Protocol,FakeReciever,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\FakeReciever.cs,BeginAcceptTcpClientCallback,Cyclomatic complexity of the method is 9
Magic Number,Rhino.Queues.Tests,Errors,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Errors.cs,Errors,The following statement contains a magic number: sender = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23456)' "test.esent");
Magic Number,Rhino.Queues.Tests,Errors,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Errors.cs,Errors,The following statement contains a magic number: receiver = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23457)' "test2.esent");
Magic Number,Rhino.Queues.Tests,Errors,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Errors.cs,Will_get_notified_when_failed_to_send_to_endpoint,The following statement contains a magic number: Assert.Equal(2200' endPointWeFailedToSendTo.Port);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingToRhinoQueue,The following statement contains a magic number: sender = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23456)' "test.esent");
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingToRhinoQueue,The following statement contains a magic number: receiver = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23457)' "test2.esent");
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/h")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/h")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/h")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/I_dont_exists")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/I_dont_exists")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: sender.Send(  					new Uri("rhino.queues://localhost:23457/I_dont_exists")'  					 new MessagePayload  					 {  						 Data = new byte[] { 1' 2' 4' 5 }  					 });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: var message = receiver.Receive("h"' null' TimeSpan.FromSeconds(5));
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,SendingTwoMessages_OneOfWhichToUnknownQueue_WillStillWork,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendHeaders,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }'                           Headers =                               {                                   {"id"'"6"}'                                   {"date"'"2009-01-10"}                               }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendHeaders,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }'                           Headers =                               {                                   {"id"'"6"}'                                   {"date"'"2009-01-10"}                               }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendHeaders,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                       new MessagePayload                       {                           Data = new byte[] { 1' 2' 4' 5 }'                           Headers =                               {                                   {"id"'"6"}'                                   {"date"'"2009-01-10"}                               }                       });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: Assert.Equal(new byte[] {1' 2' 4' 5}' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: Assert.Equal(new byte[] {1' 2' 4' 5}' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtSentMessages,The following statement contains a magic number: Assert.Equal(new byte[] {1' 2' 4' 5}' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanLookAtMessagesCurrentlySending,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' messages[0].Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,WillNotSendIfTxIsNotCommitted,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,WillNotSendIfTxIsNotCommitted,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,WillNotSendIfTxIsNotCommitted,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendSeveralMessagesToQueue,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 1' 2' 4' 5 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/a")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/a")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/a")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/a")'                      new MessagePayload                      {                          Data = new byte[] { 4' 5' 6' 7 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: sender.Send(                      new Uri("rhino.queues://localhost:23457/h")'                      new MessagePayload                      {                          Data = new byte[] { 6' 7' 8' 9 }                      });
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 6' 7' 8' 9 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,SendingToRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\SendingToRhinoQueue.cs,CanSendMessagesToSeveralQueues,The following statement contains a magic number: Assert.Equal(new byte[] { 4' 5' 6' 7 }' message.Data);
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,ReceivingFromRhinoQueue,The following statement contains a magic number: queueManager = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23456)' "test.esent");
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,CanReceiveFromQueue,The following statement contains a magic number: new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Failure = exception => Assert.False(true)'                  Success = () => null'                  Messages = new[]                  {                      new Message                      {                          Id = MessageId.GenerateRandom()'                          Queue = "h"'                          Data = Encoding.Unicode.GetBytes("hello")'                          SentAt = DateTime.Now                      }'                  }              }.Send();
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,WhenSendingDuplicateMessageTwiceWillGetItOnlyOnce,The following statement contains a magic number: var sender = new Sender  				{  					Destination = new Endpoint("localhost"' 23456)'  					Failure = exception => Assert.False(true)'  					Success = () => null'  					Messages = new[] { msg' }'  				};
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,WhenSendingDuplicateMessageTwiceWillGetItOnlyOnce,The following statement contains a magic number: i < 2
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,WhenRevertingTransactionMessageGoesBackToQueue,The following statement contains a magic number: new Sender              {                    Destination = new Endpoint("localhost"' 23456)'                  Failure = exception => Assert.False(true)'                  Success = () => null'                  Messages = new[]                  {                      new Message                      {                          Id = MessageId.GenerateRandom()'                          Queue = "h"'                          Data = Encoding.Unicode.GetBytes("hello")'                          SentAt = DateTime.Now                      }'                  }              }.Send();
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,CanLookupProcessedMessages,The following statement contains a magic number: new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Failure = exception => Assert.False(true)'                  Success = () => null'                  Messages = new[]                  {                      new Message                      {                          Id = MessageId.GenerateRandom()'                          Queue = "h"'                          Data = Encoding.Unicode.GetBytes("hello")'                          SentAt = DateTime.Now                      }'                  }              }.Send();
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,CanLookupProcessedMessages,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Rhino.Queues.Tests,ReceivingFromRhinoQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\ReceivingFromRhinoQueue.cs,CanPeekExistingMessages,The following statement contains a magic number: new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Failure = exception => Assert.False(true)'                  Success = () => null'                  Messages = new[]                  {                      new Message                      {                          Id = MessageId.GenerateRandom()'                          Queue = "h"'                          Data = Encoding.Unicode.GetBytes("hello")'                          SentAt = DateTime.Now                      }'                  }              }.Send();
Magic Number,Rhino.Queues.Tests,UsingSubQueues,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\UsingSubQueues.cs,UsingSubQueues,The following statement contains a magic number: sender = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23456)' "test.esent");
Magic Number,Rhino.Queues.Tests,UsingSubQueues,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\UsingSubQueues.cs,UsingSubQueues,The following statement contains a magic number: receiver = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23457)' "test2.esent");
Magic Number,Rhino.Queues.Tests,UsingSubQueues,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\UsingSubQueues.cs,Can_get_number_of_messages,The following statement contains a magic number: Assert.Equal(4' receiver.GetNumberOfMessages("h"));
Magic Number,Rhino.Queues.Tests,UsingSubQueues,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\UsingSubQueues.cs,Can_get_number_of_messages,The following statement contains a magic number: Assert.Equal(4' receiver.GetNumberOfMessages("h"));
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,FromRene,The following statement contains a magic number: receiver = new QueueManager(new IPEndPoint(IPAddress.Loopback' 4545)' "receiver.esent");
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,Receiver,The following statement contains a magic number: msg = receiver.Receive("uno"' null' new TimeSpan(0' 0' 10));
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,ShouldOnlyGetTwoItems,The following statement contains a magic number: Sender(4);
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,ShouldOnlyGetTwoItems,The following statement contains a magic number: Sender(5);
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,ShouldOnlyGetTwoItems,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,ShouldOnlyGetTwoItems,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Rhino.Queues.Tests.FromUsers,FromRene,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\FromRene.cs,ShouldOnlyGetTwoItems,The following statement contains a magic number: Assert.Equal(2' msgs.Count);
Magic Number,Rhino.Queues.Tests.FromUsers,QueueIsAsync,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\QueueIsAsync.cs,QueueIsAsync,The following statement contains a magic number: queueManager = new QueueManager(new IPEndPoint(IPAddress.Loopback' 23456)' "test.esent");
Magic Number,Rhino.Queues.Tests.FromUsers,QueueIsAsync,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\QueueIsAsync.cs,CanReceiveFromQueue,The following statement contains a magic number: new Sender  				{  					Destination = new Endpoint("localhost"' 23456)'  					Failure = exception => Assert.False(true)'  					Success = () => null'  					Messages = new[]  					{  						new Message  						{  							Id = MessageId.GenerateRandom()'  							Queue = "h"'  							Data = Encoding.Unicode.GetBytes("hello-" + i)'  							SentAt = DateTime.Now  						}'  					}  				}.Send();
Magic Number,Rhino.Queues.Tests.FromUsers,QueueIsAsync,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\FromUsers\QueueIsAsync.cs,CanReceiveFromQueue,The following statement contains a magic number: i < 2
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: var endPoint = new Endpoint("localhost"' 23456);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: new Sender                  {                      Destination = endPoint'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: new Sender                  {                      Destination = endPoint'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: new Sender                  {                      Destination = endPoint'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: new Sender                  {                      Destination = endPoint'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: new Sender                  {                      Destination = endPoint'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5' 6 }' recievedMsgs[0].Data);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5' 6 }' recievedMsgs[0].Data);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5' 6 }' recievedMsgs[0].Data);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: Assert.Equal(new byte[] { 1' 2' 4' 5' 6 }' recievedMsgs[0].Data);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,OneMessage,The following statement contains a magic number: Assert.Equal(new DateTime(2001' 1' 1)' recievedMsgs[0].SentAt);
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInSeparateCalls,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: new Sender                  {                      Destination = new Endpoint("localhost"' 23456)'                      Messages = new[]                      {                          new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy"'                              Id = MessageId.GenerateRandom()                          }'                           new Message                          {                              Data = new byte[] {1' 2' 4' 5' 6}'                              SentAt = new DateTime(2001' 1' 1)'                              Queue = "hello doggy2"'                              Id = MessageId.GenerateRandom()                          }'                      }                  }.Send();
Magic Number,Rhino.Queues.Tests.Protocol,CanSendAndReceive,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\CanSendAndReceive.cs,TwoMessagesInOneCall,The following statement contains a magic number: Assert.Equal(2' recievedMsgs.Length);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingThreeBytesAndDisconnecting,The following statement contains a magic number: client.GetStream().Write(new byte[] { 1' 4' 6 }' 0' 3);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingThreeBytesAndDisconnecting,The following statement contains a magic number: client.GetStream().Write(new byte[] { 1' 4' 6 }' 0' 3);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingThreeBytesAndDisconnecting,The following statement contains a magic number: client.GetStream().Write(new byte[] { 1' 4' 6 }' 0' 3);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingNegativeNumberForLength,The following statement contains a magic number: client.GetStream().Write(BitConverter.GetBytes(-2)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingNegativeNumberForLength,The following statement contains a magic number: client.GetStream().Write(BitConverter.GetBytes(-2)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingBadLengthOfData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(16)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingBadLengthOfData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(16)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingBadLengthOfData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(5)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingBadLengthOfData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(5)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingUnseriliazableData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(16)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingUnseriliazableData,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(16)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,CanHandleClientSendingUnseriliazableData,The following statement contains a magic number: stream.Write(Guid.NewGuid().ToByteArray()' 0' 16);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillLetSenderKnowThatMessagesWereNotProcessed,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillLetSenderKnowThatMessagesWereSentToInvalidQueue,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillSendConfirmationForClient,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillCallAbortAcceptanceIfSenderDoesNotConfirm,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillCallAbortAcceptanceIfSenderSendNonConfirmation,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillCallCommitAcceptanceIfSenderSendConfirmation,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,RecieverFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\RecieverFailure.cs,WillTellSenderIfCommitFailed,The following statement contains a magic number: stream.Write(BitConverter.GetBytes(serialize.Length)' 0' 4);
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,SendingFailure,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\SendingFailure.cs,SendingFailure,The following statement contains a magic number: sender = new Sender              {                  Destination = new Endpoint("localhost"' 23456)'                  Messages = new[]                  {                      new Message                      {                          Data = new byte[] {1' 2' 4}'                          Id = MessageId.GenerateRandom()'                          Queue = "ag"'                          SentAt = new DateTime(2004' 4' 4)                      }'                  }'                  Failure = exception => failureReported = true'                  Success = () =>                  {                      wasSuccessful = true;                      return null;                  }'                  Revert = bookmarks => revertCalled = true              };
Magic Number,Rhino.Queues.Tests.Protocol,FakeReciever,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Protocol\FakeReciever.cs,BeginAcceptTcpClientCallback,The following statement contains a magic number: var buffer = new byte[4];
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanDeleteOldEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					for (int i = 0; i < 5; i++)  					{  						actions.MarkReceived(MessageId.GenerateRandom());  					}   					actions.MarkReceived(random);    					for (int i = 0; i < 5; i++)  					{  						actions.MarkReceived(MessageId.GenerateRandom());  					}    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanDeleteOldEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					for (int i = 0; i < 5; i++)  					{  						actions.MarkReceived(MessageId.GenerateRandom());  					}   					actions.MarkReceived(random);    					for (int i = 0; i < 5; i++)  					{  						actions.MarkReceived(MessageId.GenerateRandom());  					}    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanDeleteOldEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					actions.DeleteOldestReceivedMessages(6).ToArray();//consume & activate    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanDeleteOldEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					var array = actions.GetAlreadyReceivedMessageIds().ToArray();  					Assert.Equal(6' array.Length);  					Assert.Equal(random' array[0]);    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CallingDeleteOldEntriesIsSafeIfThereAreNotEnoughEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					for (int i = 0; i < 5; i++)  					{  						actions.MarkReceived(MessageId.GenerateRandom());  					}  					actions.MarkReceived(random);    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CallingDeleteOldEntriesIsSafeIfThereAreNotEnoughEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					actions.DeleteOldestReceivedMessages(10).ToArray();//consume & activate    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CallingDeleteOldEntriesIsSafeIfThereAreNotEnoughEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					var array = actions.GetAlreadyReceivedMessageIds().ToArray();  					Assert.Equal(6' array.Length);  					Assert.Equal(random' array[5]);    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CallingDeleteOldEntriesIsSafeIfThereAreNotEnoughEntries,The following statement contains a magic number: qf.Global(actions =>  				{  					var array = actions.GetAlreadyReceivedMessageIds().ToArray();  					Assert.Equal(6' array.Length);  					Assert.Equal(random' array[5]);    					actions.Commit();  				});
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                  	bookmark = actions.GetQueue("h").Enqueue(new Message                      {                          Queue = "h"'                          Data = new byte[] { 13' 12' 43' 5 }'                          SentAt = new DateTime(2004' 5' 5)'                          Id = new MessageId { SourceInstanceId = guid' MessageIdentifier = identifier }                      });                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,CanPutSingleMessageInQueue,The following statement contains a magic number: qf.Global(actions =>                  {                      var message = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 13' 12' 43' 5 }' message.Data);  					Assert.Equal(identifier' message.Id.MessageIdentifier);                      Assert.Equal(guid' message.Id.SourceInstanceId);                      Assert.Equal("h"' message.Queue);                      Assert.Equal(new DateTime(2004' 5' 5)' message.SentAt);                      actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillGetMessagesBackInOrder,The following statement contains a magic number: qf.Global(actions =>                  {                      var queue = actions.GetQueue("h");                        var bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 1 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 2 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 3 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillGetMessagesBackInOrder,The following statement contains a magic number: qf.Global(actions =>                  {                      var queue = actions.GetQueue("h");                        var bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 1 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 2 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 3 }'                      });                        queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillGetMessagesBackInOrder,The following statement contains a magic number: qf.Global(actions =>                  {                      var m1 = actions.GetQueue("h").Dequeue(null);                      var m2 = actions.GetQueue("h").Dequeue(null);                      var m3 = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 1 }' m1.Data);                      Assert.Equal(new byte[] { 2 }' m2.Data);                      Assert.Equal(new byte[] { 3 }' m3.Data);                        actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillGetMessagesBackInOrder,The following statement contains a magic number: qf.Global(actions =>                  {                      var m1 = actions.GetQueue("h").Dequeue(null);                      var m2 = actions.GetQueue("h").Dequeue(null);                      var m3 = actions.GetQueue("h").Dequeue(null);                        Assert.Equal(new byte[] { 1 }' m1.Data);                      Assert.Equal(new byte[] { 2 }' m2.Data);                      Assert.Equal(new byte[] { 3 }' m3.Data);                        actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillNotGiveMessageToTwoClient,The following statement contains a magic number: qf.Global(actions =>                  {                      var queue = actions.GetQueue("h");                      var bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 1 }'                      });                      queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        bookmark = queue.Enqueue(new Message                      {                          Queue = "h"'                          Id = MessageId.GenerateRandom()'                          Data = new byte[] { 2 }'                      });                      queue.SetMessageStatus(bookmark' MessageStatus.ReadyToDeliver);                        actions.Commit();                  });
Magic Number,Rhino.Queues.Tests.Storage,CanUseQueue,D:\research\architectureSmells\repos\ayende_rhino-queues\Rhino.Queues.Tests\Storage\CanUseQueue.cs,WillNotGiveMessageToTwoClient,The following statement contains a magic number: qf.Global(actions =>                  {                      var m1 = actions.GetQueue("h").Dequeue(null);                        qf.Global(queuesActions =>                      {                          var m2 = queuesActions.GetQueue("h").Dequeue(null);                                                    Assert.Equal(new byte[] { 2 }' m2.Data);                            queuesActions.Commit();                      });                       Assert.Equal(new byte[] { 1 }' m1.Data);                     actions.Commit();                  });
