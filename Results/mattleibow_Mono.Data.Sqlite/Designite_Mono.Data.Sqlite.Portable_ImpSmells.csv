Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,The method has 162 lines of code.
Complex Method,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,Cyclomatic complexity of the method is 8
Complex Method,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,Cyclomatic complexity of the method is 17
Complex Method,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,NextResult,Cyclomatic complexity of the method is 13
Complex Method,Mono.Data.Sqlite,SqliteParameterCollection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteParameterCollection.cs,MapParameters,Cyclomatic complexity of the method is 15
Complex Method,Mono.Data.Sqlite,SqliteTransaction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteTransaction.cs,IsValid,Cyclomatic complexity of the method is 9
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The method has 5 parameters. Parameters: cnn' strSql' previous' timeout' strRemain
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,ColumnMetaData,The method has 8 parameters. Parameters: dataBase' table' column' dataType' collateSequence' notNull' primaryKey' autoIncrement
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetBytes,The method has 6 parameters. Parameters: stmt' index' nDataOffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetChars,The method has 6 parameters. Parameters: stmt' index' nDataOffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,CreateFunction,The method has 6 parameters. Parameters: strFunction' nArgs' needCollSeq' func' funcstep' funcfinal
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetParamValueBytes,The method has 5 parameters. Parameters: p' nDataOffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetIndexColumnExtendedInfo,The method has 6 parameters. Parameters: database' index' column' sortMode' onError' collationSequence
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Prepare,The method has 5 parameters. Parameters: cnn' strSql' previous' timeout' strRemain
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,ColumnMetaData,The method has 8 parameters. Parameters: dataBase' table' column' dataType' collateSequence' notNull' primaryKey' autoIncrement
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetIndexColumnExtendedInfo,The method has 6 parameters. Parameters: database' index' column' sortMode' onError' collationSequence
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetBytes,The method has 6 parameters. Parameters: stmt' index' nDataoffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetChars,The method has 6 parameters. Parameters: stmt' index' nDataoffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,CreateFunction,The method has 6 parameters. Parameters: strFunction' nArgs' needCollSeq' func' funcstep' funcfinal
Long Parameter List,Mono.Data.Sqlite,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetParamValueBytes,The method has 5 parameters. Parameters: ptr' nDataOffset' bDest' nStart' nLength
Long Parameter List,Mono.Data.Sqlite,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_bind_blob,The method has 5 parameters. Parameters: statement' index' value' length' dummy
Long Parameter List,Mono.Data.Sqlite,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_bind_text,The method has 5 parameters. Parameters: statement' index' value' length' dummy
Long Parameter List,Mono.Data.Sqlite,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_prepare16,The method has 5 parameters. Parameters: db' query' length' statement' strRemain
Long Parameter List,Mono.Data.Sqlite,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_table_column_metadata,The method has 9 parameters. Parameters: db' dbName' tableName' columnName' dataType' collSeq' notNull' primaryKey' autoInc
Long Parameter List,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,UpdateCallback,The method has 5 parameters. Parameters: puser' type' database' table' rowid
Long Parameter List,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Mono.Data.Sqlite,SqliteFunction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteFunction.cs,CompareCallback,The method has 5 parameters. Parameters: ptr' len1' ptr1' len2' ptr2
Long Parameter List,Mono.Data.Sqlite,SqliteFunction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteFunction.cs,CompareCallback16,The method has 5 parameters. Parameters: ptr' len1' ptr1' len2' ptr2
Long Parameter List,Mono.Data.Sqlite,SqliteParameter,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteParameter.cs,SqliteParameter,The method has 5 parameters. Parameters: parameterName' parameterType' parameterSize' sourceColumn' rowVersion
Long Parameter List,Mono.Data.Sqlite,SqliteParameter,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteParameter.cs,SqliteParameter,The method has 10 parameters. Parameters: parameterName' parameterType' parameterSize' direction' isNullable' precision' scale' sourceColumn' rowVersion' value
Long Parameter List,Mono.Data.Sqlite,SqliteParameter,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteParameter.cs,SqliteParameter,The method has 10 parameters. Parameters: parameterName' parameterType' parameterSize' direction' precision' scale' sourceColumn' rowVersion' sourceColumnNullMapping' value
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Prepare,The method has 5 parameters. Parameters: cnn' strSql' previous' timeout' strRemain
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,ColumnMetaData,The method has 8 parameters. Parameters: dataBase' table' column' dataType' collateSequence' notNull' primaryKey' autoIncrement
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetIndexColumnExtendedInfo,The method has 6 parameters. Parameters: database' index' column' sortMode' onError' collationSequence
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetBytes,The method has 6 parameters. Parameters: stmt' index' nDataoffset' bDest' nStart' nLength
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetChars,The method has 6 parameters. Parameters: stmt' index' nDataoffset' bDest' nStart' nLength
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,CreateFunction,The method has 6 parameters. Parameters: strFunction' nArgs' needCollSeq' func' funcstep' funcfinal
Long Parameter List,MonoDataSqliteWrapper,SQLiteBase,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,GetParamValueBytes,The method has 5 parameters. Parameters: ptr' nDataOffset' bDest' nStart' nLength
Long Parameter List,MonoDataSqliteWrapper,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_bind_blob,The method has 5 parameters. Parameters: statement' index' value' length' dummy
Long Parameter List,MonoDataSqliteWrapper,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_bind_text,The method has 5 parameters. Parameters: statement' index' value' length' dummy
Long Parameter List,MonoDataSqliteWrapper,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_prepare16,The method has 5 parameters. Parameters: db' query' length' statement' strRemain
Long Parameter List,MonoDataSqliteWrapper,UnsafeNativeMethods,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,sqlite3_table_column_metadata,The method has 9 parameters. Parameters: db' dbName' tableName' columnName' dataType' collSeq' notNull' primaryKey' autoInc
Long Statement,Mono.Data.Sqlite,SqliteCommand,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommand.cs,BuildNextCommand,The length of the statement  "        stmt = _cnn._sql.Prepare(_cnn' _remainingText' (_statementList == null) ? null : _statementList[_statementList.Count - 1]' (uint)(_commandTimeout * 1000)' out _remainingText); " is 175.
Long Statement,Mono.Data.Sqlite,SqliteCommandBuilder,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommandBuilder.cs,UnquoteIdentifier,The length of the statement  "      return quotedIdentifier.Substring(QuotePrefix.Length' quotedIdentifier.Length - (QuotePrefix.Length + QuoteSuffix.Length)).Replace(QuoteSuffix + QuoteSuffix' QuoteSuffix); " is 171.
Long Statement,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,The length of the statement  "                //else if (String.Compare(temp' "julianday"' true' CultureInfo.InvariantCulture) == 0) dateFormat = SQLiteDateFormats.JulianDay; " is 128.
Long Statement,Mono.Data.Sqlite,SqliteConnectionPool,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnectionPool.cs,ClearAllPools,The length of the statement  "        // All pools are cleared and we have a new highest version number to force all old version active items to get discarded " is 120.
Long Statement,Mono.Data.Sqlite,SqliteConnectionStringBuilder,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnectionStringBuilder.cs,TryGetValue,The length of the statement  "        DefaultValueAttribute att = (DefaultValueAttribute)pd.GetCustomAttributes(typeof(DefaultValueAttribute)' true).FirstOrDefault(); " is 128.
Long Statement,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetEnumerator,The length of the statement  "      return new DbEnumerator(this' ((_commandBehavior & CommandBehavior.CloseConnection) == CommandBehavior.CloseConnection)); " is 121.
Long Statement,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetDecimal,The length of the statement  "      return Decimal.Parse(_activeStatement._sql.GetText(_activeStatement' i)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent  | NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture); " is 197.
Long Statement,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,NextResult,The length of the statement  "            _readingState = 1; // This command returned columns but no rows' so return true' but HasRows = false and Read() returns false " is 125.
Long Statement,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,Read,The length of the statement  "      if (_readingState == -1) // First step was already done at the NextResult() level' so don't step again' just return true. " is 121.
Long Statement,Mono.Data.Sqlite,SqliteStatement,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteStatement.cs,MapParameter,The length of the statement  "        if (String.Compare(_paramNames[n]' startAt' s' 0' Math.Max(_paramNames[n].Length - startAt' s.Length)' StringComparison.OrdinalIgnoreCase) == 0) " is 144.
Long Statement,Mono.Data.Sqlite,SqliteStatement,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteStatement.cs,SetTypes,The length of the statement  "      string[] types = typedefs.Substring(pos + 6).Replace(" "' "").Replace(";"' "").Replace("\""' "").Replace("["' "").Replace("]"' "").Replace("`"'"").Split('''' '\r'' '\n'' '\t'); " is 176.
Long Statement,Mono.Data.Sqlite,SqliteTransaction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteTransaction.cs,IsValid,The length of the statement  "        if (throwError == true) throw new SqliteException((int)SQLiteErrorCode.Misuse' "No transaction is active on this connection"); " is 126.
Long Statement,Mono.Data.Sqlite,SqliteTransaction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteTransaction.cs,IsValid,The length of the statement  "        if (throwError == true) throw new SqliteException((int)SQLiteErrorCode.Misuse' "The connection was closed and re-opened' changes were rolled back"); " is 148.
Complex Conditional,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The conditional expression  "(n == 17 || n == 6 || n == 5) && retries < 3"  is complex.
Virtual Method Call from Constructor,Mono.Data.Sqlite,SqliteStatement,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteStatement.cs,SqliteStatement,The constructor "SqliteStatement" calls a virtual method "Bind_ParamCount".
Virtual Method Call from Constructor,Mono.Data.Sqlite,SqliteStatement,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteStatement.cs,SqliteStatement,The constructor "SqliteStatement" calls a virtual method "Bind_ParamName".
Empty Catch Block,Mono.Data.Sqlite,Disposers,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Mono.Data.Sqlite,Disposers,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Mono.Data.Sqlite,SqliteCommand,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommand.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Mono.Data.Sqlite,SqliteCommand,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommand.cs,ClearCommands,The method has an empty catch block.
Empty Catch Block,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,Close,The method has an empty catch block.
Empty Catch Block,MonoDataSqliteWrapper,Disposers,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MonoDataSqliteWrapper,Disposers,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteBase.cs,Dispose,The method has an empty catch block.
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: var timeout = (uint)(stmt._command._commandTimeout * 1000);
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: while (true)              {                  int n = UnsafeNativeMethods.sqlite3_step(stmt._sqlite_stmt);                    if (n == 100)                  {                      return true;                  }                  if (n == 101)                  {                      return false;                  }                    if (n > 0)                  {                      // An error occurred' attempt to reset the statement.  If the reset worked because the                      // schema has changed' re-try the step again.  If it errored our because the database                      // is locked' then keep retrying until the command timeout occurs.                      int r = this.Reset(stmt);                        if (r == 0)                      {                          throw new SqliteException(n' SQLiteLastError());                      }                                            if ((r == 6 || r == 5) && stmt._command != null) // SQLITE_LOCKED || SQLITE_BUSY                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint)Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(r' SQLiteLastError());                          }                                                    // Otherwise sleep for a random amount of time up to 150ms                          Sleep(rnd.Next(1' 150));                      }                  }              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: while (true)              {                  int n = UnsafeNativeMethods.sqlite3_step(stmt._sqlite_stmt);                    if (n == 100)                  {                      return true;                  }                  if (n == 101)                  {                      return false;                  }                    if (n > 0)                  {                      // An error occurred' attempt to reset the statement.  If the reset worked because the                      // schema has changed' re-try the step again.  If it errored our because the database                      // is locked' then keep retrying until the command timeout occurs.                      int r = this.Reset(stmt);                        if (r == 0)                      {                          throw new SqliteException(n' SQLiteLastError());                      }                                            if ((r == 6 || r == 5) && stmt._command != null) // SQLITE_LOCKED || SQLITE_BUSY                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint)Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(r' SQLiteLastError());                          }                                                    // Otherwise sleep for a random amount of time up to 150ms                          Sleep(rnd.Next(1' 150));                      }                  }              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: while (true)              {                  int n = UnsafeNativeMethods.sqlite3_step(stmt._sqlite_stmt);                    if (n == 100)                  {                      return true;                  }                  if (n == 101)                  {                      return false;                  }                    if (n > 0)                  {                      // An error occurred' attempt to reset the statement.  If the reset worked because the                      // schema has changed' re-try the step again.  If it errored our because the database                      // is locked' then keep retrying until the command timeout occurs.                      int r = this.Reset(stmt);                        if (r == 0)                      {                          throw new SqliteException(n' SQLiteLastError());                      }                                            if ((r == 6 || r == 5) && stmt._command != null) // SQLITE_LOCKED || SQLITE_BUSY                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint)Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(r' SQLiteLastError());                          }                                                    // Otherwise sleep for a random amount of time up to 150ms                          Sleep(rnd.Next(1' 150));                      }                  }              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: while (true)              {                  int n = UnsafeNativeMethods.sqlite3_step(stmt._sqlite_stmt);                    if (n == 100)                  {                      return true;                  }                  if (n == 101)                  {                      return false;                  }                    if (n > 0)                  {                      // An error occurred' attempt to reset the statement.  If the reset worked because the                      // schema has changed' re-try the step again.  If it errored our because the database                      // is locked' then keep retrying until the command timeout occurs.                      int r = this.Reset(stmt);                        if (r == 0)                      {                          throw new SqliteException(n' SQLiteLastError());                      }                                            if ((r == 6 || r == 5) && stmt._command != null) // SQLITE_LOCKED || SQLITE_BUSY                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint)Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(r' SQLiteLastError());                          }                                                    // Otherwise sleep for a random amount of time up to 150ms                          Sleep(rnd.Next(1' 150));                      }                  }              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Step,The following statement contains a magic number: while (true)              {                  int n = UnsafeNativeMethods.sqlite3_step(stmt._sqlite_stmt);                    if (n == 100)                  {                      return true;                  }                  if (n == 101)                  {                      return false;                  }                    if (n > 0)                  {                      // An error occurred' attempt to reset the statement.  If the reset worked because the                      // schema has changed' re-try the step again.  If it errored our because the database                      // is locked' then keep retrying until the command timeout occurs.                      int r = this.Reset(stmt);                        if (r == 0)                      {                          throw new SqliteException(n' SQLiteLastError());                      }                                            if ((r == 6 || r == 5) && stmt._command != null) // SQLITE_LOCKED || SQLITE_BUSY                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint)Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(r' SQLiteLastError());                          }                                                    // Otherwise sleep for a random amount of time up to 150ms                          Sleep(rnd.Next(1' 150));                      }                  }              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 17) // SQLITE_SCHEMA              {                  // Recreate a dummy statement                  var timeout = (uint)(stmt._command._commandTimeout * 1000);                  string str;                  using (SqliteStatement tmp = Prepare(null' stmt._sqlStatement' null' timeout' out str))                  {                      // Finalize the existing statement                      stmt._sqlite_stmt.Dispose();                      // Reassign a new statement pointer to the old statement and clear the temporary one                      stmt._sqlite_stmt = tmp._sqlite_stmt;                      tmp._sqlite_stmt = null;                        // Reapply parameters                      stmt.BindParameters();                  }                    return -1; // Reset was OK' with schema change              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 17) // SQLITE_SCHEMA              {                  // Recreate a dummy statement                  var timeout = (uint)(stmt._command._commandTimeout * 1000);                  string str;                  using (SqliteStatement tmp = Prepare(null' stmt._sqlStatement' null' timeout' out str))                  {                      // Finalize the existing statement                      stmt._sqlite_stmt.Dispose();                      // Reassign a new statement pointer to the old statement and clear the temporary one                      stmt._sqlite_stmt = tmp._sqlite_stmt;                      tmp._sqlite_stmt = null;                        // Reapply parameters                      stmt.BindParameters();                  }                    return -1; // Reset was OK' with schema change              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 6 || n == 5) // SQLITE_LOCKED || SQLITE_BUSY              {                  return n;              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Reset,The following statement contains a magic number: if (n == 6 || n == 5) // SQLITE_LOCKED || SQLITE_BUSY              {                  return n;              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: int n = 17;
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,Prepare,The following statement contains a magic number: while ((n == 17 || n == 6 || n == 5) && retries < 3)                  {                      n = UnsafeNativeMethods.sqlite3_prepare16(_sql' strSql' strSql.Length' out stmt' out ptr);                      len = -1;                        if (n == 17)                      {                          retries++;                      }                      else if (n == 1)                      {                          if (String.Compare(SQLiteLastError()' "near \"TYPES\": syntax error"'                                             StringComparison.OrdinalIgnoreCase) == 0)                          {                              int pos = strSql.IndexOf(';');                              if (pos == -1)                              {                                  pos = strSql.Length - 1;                              }                                string typedefs = strSql.Substring(0' pos + 1);                              strSql = strSql.Substring(pos + 1);                                strRemain = "";                                while (cmd == null && strSql.Length > 0)                              {                                  cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                  strSql = strRemain;                              }                                if (cmd != null)                              {                                  cmd.SetTypes(typedefs);                              }                                return cmd;                          }                          else if (_buildingSchema == false &&                                   String.Compare(SQLiteLastError()' 0' "no such table: TEMP.SCHEMA"' 0' 26'                                                  StringComparison.OrdinalIgnoreCase) == 0)                          {                              strRemain = "";                              _buildingSchema = true;                              try                              {                                  while (cmd == null && strSql.Length > 0)                                  {                                      cmd = Prepare(cnn' strSql' previous' timeout' out strRemain);                                      strSql = strRemain;                                  }                                    return cmd;                              }                              finally                              {                                  _buildingSchema = false;                              }                          }                      }                      else if (n == 6 || n == 5) // Locked -- delay a small amount before retrying                      {                          // Keep trying' but if we've exceeded the command's timeout' give up and throw an error                          if ((uint) Environment.TickCount - starttick > timeout)                          {                              throw new SqliteException(n' SQLiteLastError());                          }                          else                          {                              // Otherwise sleep for a random amount of time up to 150ms                              Sleep(rnd.Next(1' 150));                          }                      }                  }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetValue,The following statement contains a magic number: switch (aff)              {                  case TypeAffinity.Blob:                      if (typ.Type == DbType.Guid && typ.Affinity == TypeAffinity.Text)                      {                          return new Guid(GetText(stmt' index));                      }                        var n = (int) GetBytes(stmt' index' 0' null' 0' 0);                      var b = new byte[n];                      GetBytes(stmt' index' 0' b' 0' n);                        if (typ.Type == DbType.Guid && n == 16)                      {                          return new Guid(b);                      }                        return b;                  case TypeAffinity.DateTime:                      return GetDateTime(stmt' index);                  case TypeAffinity.Double:                      if (t == null)                      {                          return GetDouble(stmt' index);                      }                      return Convert.ChangeType(GetDouble(stmt' index)' t' null);                  case TypeAffinity.Int64:                      if (t == null)                      {                          return GetInt64(stmt' index);                      }                      return Convert.ChangeType(GetInt64(stmt' index)' t' null);                  default:                      return GetText(stmt' index);              }
Magic Number,Mono.Data.Sqlite,SQLite3,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3.cs,GetIndexColumnExtendedInfo,The following statement contains a magic number: onError = 2;
Magic Number,Mono.Data.Sqlite,SQLite3_UTF16,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3_UTF16.cs,Bind_Text,The following statement contains a magic number: int n = UnsafeNativeMethods.sqlite3_bind_text16(stmt._sqlite_stmt' index' value' value.Length*2);
Magic Number,Mono.Data.Sqlite,SQLite3_UTF16,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3_UTF16.cs,ReturnError,The following statement contains a magic number: UnsafeNativeMethods.sqlite3_result_error16(context' value' value.Length*2);
Magic Number,Mono.Data.Sqlite,SQLite3_UTF16,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLite3_UTF16.cs,ReturnText,The following statement contains a magic number: UnsafeNativeMethods.sqlite3_result_text16(context' value' value.Length*2' null);
Magic Number,Mono.Data.Sqlite,SqliteCommand,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommand.cs,SqliteCommand,The following statement contains a magic number: _commandTimeout = 30;
Magic Number,Mono.Data.Sqlite,SqliteCommand,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteCommand.cs,BuildNextCommand,The following statement contains a magic number: try        {          if (_statementList == null)            _remainingText = _commandText;            stmt = _cnn._sql.Prepare(_cnn' _remainingText' (_statementList == null) ? null : _statementList[_statementList.Count - 1]' (uint)(_commandTimeout * 1000)' out _remainingText);          if (stmt != null)          {            stmt._command = this;            if (_statementList == null)              _statementList = new List<SqliteStatement>();              _statementList.Add(stmt);              _parameterCollection.MapParameters(stmt);            stmt.BindParameters();          }                  return stmt;        }        catch (Exception)        {          if (stmt != null)          {            if (_statementList.Contains(stmt))              _statementList.Remove(stmt);              stmt.Dispose();          }            // If we threw an error compiling the statement' we cannot continue on so set the remaining text to null.          _remainingText = null;            throw;        }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,MapUriPath,The following statement contains a magic number: if (path.StartsWith("file://"))              {                  return path.Substring(7);              }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,MapUriPath,The following statement contains a magic number: if (path.StartsWith("file:"))              {                  return path.Substring(5);              }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,ParseConnectionString,The following statement contains a magic number: for (n = 0; n < arParts.Length; n++)              {                  string[] arPiece = SqliteConvert.Split(arParts[n]' '=');                  if (arPiece.Length == 2)                  {                      MapMonoKeyword(arPiece' ls);                  }                  else                  {                      string message = String.Format(CultureInfo.CurrentCulture'                                                     "Invalid ConnectionString format for parameter \"{0}\""'                                                     arPiece.Length > 0 ? arPiece[0] : "null");                      throw new ArgumentException(message);                  }              }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,The following statement contains a magic number: if (Convert.ToInt32(FindKey(opts' "Version"' "3")' CultureInfo.InvariantCulture) != 3)              {                  throw new NotSupportedException("Only SQLite Version 3 is supported at this time");              }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,The following statement contains a magic number: try              {                  bool usePooling = SqliteConvert.ToBoolean(FindKey(opts' "Pooling"' Boolean.FalseString));                  bool bUTF16 = SqliteConvert.ToBoolean(FindKey(opts' "UseUTF16Encoding"' Boolean.FalseString));                  int maxPoolSize = Convert.ToInt32(FindKey(opts' "Max Pool Size"' "100"));                    _defaultTimeout = Convert.ToInt32(FindKey(opts' "Default Timeout"' "30")' CultureInfo.CurrentCulture);                    _defaultIsolation =                      (IsolationLevel)                      Enum.Parse(typeof (IsolationLevel)' FindKey(opts' "Default IsolationLevel"' "Serializable")' true);                  if (_defaultIsolation != IsolationLevel.Serializable &&                      _defaultIsolation != IsolationLevel.ReadCommitted)                  {                      throw new NotSupportedException("Invalid Default IsolationLevel specified");                  }                    var dateFormat =                      (SQLiteDateFormats)                      Enum.Parse(typeof(SQLiteDateFormats)' FindKey(opts' "DateTimeFormat"' "ISO8601")' true);                  //string temp = FindKey(opts' "DateTimeFormat"' "ISO8601");                  //if (String.Compare(temp' "ticks"' true' CultureInfo.InvariantCulture) == 0) dateFormat = SQLiteDateFormats.Ticks;                  //else if (String.Compare(temp' "julianday"' true' CultureInfo.InvariantCulture) == 0) dateFormat = SQLiteDateFormats.JulianDay;                    // SQLite automatically sets the encoding of the database to UTF16 if called from sqlite3_open16()                  this._sql = bUTF16 ? new SQLite3_UTF16(dateFormat) : new SQLite3(dateFormat);                    SQLiteOpenFlagsEnum flags = SQLiteOpenFlagsEnum.None;                  if (SqliteConvert.ToBoolean(FindKey(opts' "Read Only"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.ReadOnly;                  }                  else                  {                      flags |= SQLiteOpenFlagsEnum.ReadWrite;                      if (SqliteConvert.ToBoolean(FindKey(opts' "FailIfMissing"' Boolean.FalseString)) == false)                      {                          flags |= SQLiteOpenFlagsEnum.Create;                      }                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionComplete"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionComplete;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionCompleteUnlessOpen"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionCompleteUnlessOpen;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionCompleteUntilFirstUserAuthentication"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionCompleteUntilFirstUserAuthentication;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionNone"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionNone;                  }                    _sql.Open(fileName' flags' maxPoolSize' usePooling);                    _binaryGuid = SqliteConvert.ToBoolean(FindKey(opts' "BinaryGUID"' Boolean.TrueString));                    string password = FindKey(opts' "Password"' null);                  if (String.IsNullOrEmpty(password) == false)                  {                      _sql.SetPassword(password);                  }                  else if (_password != null)                  {                      _sql.SetPassword(_password);                  }                  _password = null;                    // TODO : _dataSource = Path.GetFileNameWithoutExtension(fileName);                  _dataSource = fileName;                    OnStateChange(ConnectionState.Open);                  _version++;                    using (SqliteCommand cmd = CreateCommand())                  {                      string defValue;                        if (fileName != ":memory:")                      {                          defValue = FindKey(opts' "Page Size"' "1024");                          if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 1024)                          {                              cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA page_size={0}"'                                                              defValue);                              cmd.ExecuteNonQuery();                          }                      }                        defValue = FindKey(opts' "Max Page Count"' "0");                      if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA max_page_count={0}"'                                                          defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Legacy Format"' Boolean.FalseString);                      cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA legacy_file_format={0}"'                                                      SqliteConvert.ToBoolean(defValue) ? "ON" : "OFF");                      cmd.ExecuteNonQuery();                        defValue = FindKey(opts' "Synchronous"' "Normal");                      if (String.Compare(defValue' "Full"' StringComparison.OrdinalIgnoreCase) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA synchronous={0}"' defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Cache Size"' "2000");                      if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 2000)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA cache_size={0}"' defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Journal Mode"' "Delete");                      if (String.Compare(defValue' "Default"' StringComparison.OrdinalIgnoreCase) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA journal_mode={0}"'                                                          defValue);                          cmd.ExecuteNonQuery();                      }                  }                    if (_commitHandler != null)                  {                      _sql.SetCommitHook(_commitCallback);                  }                    if (_updateHandler != null)                  {                      _sql.SetUpdateHook(_updateCallback);                  }                    if (_rollbackHandler != null)                  {                      _sql.SetRollbackHook(_rollbackCallback);                  }                    if (global::System.Transactions.Transaction.Current != null &&                       SqliteConvert.ToBoolean(FindKey(opts' "Enlist"' Boolean.TrueString)))                      EnlistTransaction(global::System.Transactions.Transaction.Current);              }              catch (SqliteException)              {                  Close();                    throw;              }
Magic Number,Mono.Data.Sqlite,SqliteConnection,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConnection.cs,Open,The following statement contains a magic number: try              {                  bool usePooling = SqliteConvert.ToBoolean(FindKey(opts' "Pooling"' Boolean.FalseString));                  bool bUTF16 = SqliteConvert.ToBoolean(FindKey(opts' "UseUTF16Encoding"' Boolean.FalseString));                  int maxPoolSize = Convert.ToInt32(FindKey(opts' "Max Pool Size"' "100"));                    _defaultTimeout = Convert.ToInt32(FindKey(opts' "Default Timeout"' "30")' CultureInfo.CurrentCulture);                    _defaultIsolation =                      (IsolationLevel)                      Enum.Parse(typeof (IsolationLevel)' FindKey(opts' "Default IsolationLevel"' "Serializable")' true);                  if (_defaultIsolation != IsolationLevel.Serializable &&                      _defaultIsolation != IsolationLevel.ReadCommitted)                  {                      throw new NotSupportedException("Invalid Default IsolationLevel specified");                  }                    var dateFormat =                      (SQLiteDateFormats)                      Enum.Parse(typeof(SQLiteDateFormats)' FindKey(opts' "DateTimeFormat"' "ISO8601")' true);                  //string temp = FindKey(opts' "DateTimeFormat"' "ISO8601");                  //if (String.Compare(temp' "ticks"' true' CultureInfo.InvariantCulture) == 0) dateFormat = SQLiteDateFormats.Ticks;                  //else if (String.Compare(temp' "julianday"' true' CultureInfo.InvariantCulture) == 0) dateFormat = SQLiteDateFormats.JulianDay;                    // SQLite automatically sets the encoding of the database to UTF16 if called from sqlite3_open16()                  this._sql = bUTF16 ? new SQLite3_UTF16(dateFormat) : new SQLite3(dateFormat);                    SQLiteOpenFlagsEnum flags = SQLiteOpenFlagsEnum.None;                  if (SqliteConvert.ToBoolean(FindKey(opts' "Read Only"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.ReadOnly;                  }                  else                  {                      flags |= SQLiteOpenFlagsEnum.ReadWrite;                      if (SqliteConvert.ToBoolean(FindKey(opts' "FailIfMissing"' Boolean.FalseString)) == false)                      {                          flags |= SQLiteOpenFlagsEnum.Create;                      }                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionComplete"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionComplete;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionCompleteUnlessOpen"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionCompleteUnlessOpen;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionCompleteUntilFirstUserAuthentication"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionCompleteUntilFirstUserAuthentication;                  }                  if (SqliteConvert.ToBoolean(FindKey(opts' "FileProtectionNone"' Boolean.FalseString)))                  {                      flags |= SQLiteOpenFlagsEnum.FileProtectionNone;                  }                    _sql.Open(fileName' flags' maxPoolSize' usePooling);                    _binaryGuid = SqliteConvert.ToBoolean(FindKey(opts' "BinaryGUID"' Boolean.TrueString));                    string password = FindKey(opts' "Password"' null);                  if (String.IsNullOrEmpty(password) == false)                  {                      _sql.SetPassword(password);                  }                  else if (_password != null)                  {                      _sql.SetPassword(_password);                  }                  _password = null;                    // TODO : _dataSource = Path.GetFileNameWithoutExtension(fileName);                  _dataSource = fileName;                    OnStateChange(ConnectionState.Open);                  _version++;                    using (SqliteCommand cmd = CreateCommand())                  {                      string defValue;                        if (fileName != ":memory:")                      {                          defValue = FindKey(opts' "Page Size"' "1024");                          if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 1024)                          {                              cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA page_size={0}"'                                                              defValue);                              cmd.ExecuteNonQuery();                          }                      }                        defValue = FindKey(opts' "Max Page Count"' "0");                      if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA max_page_count={0}"'                                                          defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Legacy Format"' Boolean.FalseString);                      cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA legacy_file_format={0}"'                                                      SqliteConvert.ToBoolean(defValue) ? "ON" : "OFF");                      cmd.ExecuteNonQuery();                        defValue = FindKey(opts' "Synchronous"' "Normal");                      if (String.Compare(defValue' "Full"' StringComparison.OrdinalIgnoreCase) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA synchronous={0}"' defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Cache Size"' "2000");                      if (Convert.ToInt32(defValue' CultureInfo.InvariantCulture) != 2000)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA cache_size={0}"' defValue);                          cmd.ExecuteNonQuery();                      }                        defValue = FindKey(opts' "Journal Mode"' "Delete");                      if (String.Compare(defValue' "Default"' StringComparison.OrdinalIgnoreCase) != 0)                      {                          cmd.CommandText = String.Format(CultureInfo.InvariantCulture' "PRAGMA journal_mode={0}"'                                                          defValue);                          cmd.ExecuteNonQuery();                      }                  }                    if (_commitHandler != null)                  {                      _sql.SetCommitHook(_commitCallback);                  }                    if (_updateHandler != null)                  {                      _sql.SetUpdateHook(_updateCallback);                  }                    if (_rollbackHandler != null)                  {                      _sql.SetRollbackHook(_rollbackCallback);                  }                    if (global::System.Transactions.Transaction.Current != null &&                       SqliteConvert.ToBoolean(FindKey(opts' "Enlist"' Boolean.TrueString)))                      EnlistTransaction(global::System.Transactions.Transaction.Current);              }              catch (SqliteException)              {                  Close();                    throw;              }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblZ = Math.Floor(julianDay + 0.5);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblW = Math.Floor((dblZ - 1867216.25) / 36524.25);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblW = Math.Floor((dblZ - 1867216.25) / 36524.25);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblX = Math.Floor(dblW / 4);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblB = dblA + 1524;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblC = Math.Floor((dblB - 122.1) / 365.25);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblC = Math.Floor((dblB - 122.1) / 365.25);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblD = Math.Floor(365.25 * dblC);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblE = Math.Floor((dblB - dblD) / 30.6001);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblF = Math.Floor(30.6001 * dblE);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: month = dblE > 13 ? Convert.ToInt32(dblE - 13) : Convert.ToInt32(dblE - 1);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: month = dblE > 13 ? Convert.ToInt32(dblE - 13) : Convert.ToInt32(dblE - 1);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (year < 1582)          {              isGregorianCal = 0;          }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (month < 3)          {              year = year - 1;              month = month + 12;          }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (month < 3)          {              year = year - 1;              month = month + 12;          }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var A = year / 100;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var B = (2 - A + (A / 4)) * isGregorianCal;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var B = (2 - A + (A / 4)) * isGregorianCal;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var D = 30.6001 * (month + 1);
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var JD = (int)B + (int)C + (int)D + 1720994.5 + fraction;
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToString,The following statement contains a magic number: switch (_datetimeFormat)        {          case SQLiteDateFormats.Ticks:            return dateValue.Ticks.ToString(CultureInfo.InvariantCulture);          case SQLiteDateFormats.JulianDay:            return ToJulianDay(dateValue).ToString(CultureInfo.InvariantCulture);          case SQLiteDateFormats.UnixEpoch:            return ((long)(dateValue.Subtract(UnixEpoch).Ticks / TimeSpan.TicksPerSecond)).ToString();          default:            return dateValue.ToString(_datetimeFormats[7]' CultureInfo.InvariantCulture);        }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: char[] toks = new char[2] { '\"'' separator };
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: while (source.Length > 0)        {          n = source.IndexOfAny(toks' n);          if (n == -1) break;          if (source[n] == toks[0])          {            //source = source.Remove(n' 1);            n = source.IndexOfAny(quot' n + 1);            if (n == -1)            {              //source = "\"" + source;              break;            }            n++;            //source = source.Remove(n' 1);          }          else          {            s = source.Substring(0' n).Trim();            if (s.Length > 1 && s[0] == quot[0] && s[s.Length - 1] == s[0])              s = s.Substring(1' s.Length - 2);              source = source.Substring(n + 1).Trim();            if (s.Length > 0) ls.Add(s);            n = 0;          }        }
Magic Number,Mono.Data.Sqlite,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: if (source.Length > 0)        {          s = source.Trim();          if (s.Length > 1 && s[0] == quot[0] && s[s.Length - 1] == s[0])            s = s.Substring(1' s.Length - 2);          ls.Add(s);        }
Magic Number,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetGuid,The following statement contains a magic number: if (affinity == TypeAffinity.Blob)        {          byte[] buffer = new byte[16];          _activeStatement._sql.GetBytes(_activeStatement' i' 0' buffer' 0' 16);          return new Guid(buffer);        }        else          return new Guid(_activeStatement._sql.GetText(_activeStatement' i));
Magic Number,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,GetGuid,The following statement contains a magic number: if (affinity == TypeAffinity.Blob)        {          byte[] buffer = new byte[16];          _activeStatement._sql.GetBytes(_activeStatement' i' 0' buffer' 0' 16);          return new Guid(buffer);        }        else          return new Guid(_activeStatement._sql.GetText(_activeStatement' i));
Magic Number,Mono.Data.Sqlite,SqliteStatement,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteStatement.cs,SetTypes,The following statement contains a magic number: string[] types = typedefs.Substring(pos + 6).Replace(" "' "").Replace(";"' "").Replace("\""' "").Replace("["' "").Replace("]"' "").Replace("`"'"").Split('''' '\r'' '\n'' '\t');
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblZ = Math.Floor(julianDay + 0.5);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblW = Math.Floor((dblZ - 1867216.25) / 36524.25);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblW = Math.Floor((dblZ - 1867216.25) / 36524.25);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblX = Math.Floor(dblW / 4);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblB = dblA + 1524;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblC = Math.Floor((dblB - 122.1) / 365.25);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblC = Math.Floor((dblB - 122.1) / 365.25);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblD = Math.Floor(365.25 * dblC);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblE = Math.Floor((dblB - dblD) / 30.6001);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: double dblF = Math.Floor(30.6001 * dblE);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: month = dblE > 13 ? Convert.ToInt32(dblE - 13) : Convert.ToInt32(dblE - 1);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: month = dblE > 13 ? Convert.ToInt32(dblE - 13) : Convert.ToInt32(dblE - 1);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToDateTime,The following statement contains a magic number: year = month == 1 || month == 2 ? Convert.ToInt32(dblC - 4715) : Convert.ToInt32(dblC - 4716);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: double fraction = day + ((hour + (minute / 60) + (second / 60 / 60)) / 24);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (year < 1582)          {              isGregorianCal = 0;          }
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (month < 3)          {              year = year - 1;              month = month + 12;          }
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: if (month < 3)          {              year = year - 1;              month = month + 12;          }
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var A = year / 100;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var B = (2 - A + (A / 4)) * isGregorianCal;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var B = (2 - A + (A / 4)) * isGregorianCal;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var C = year < 0 ? (365.25 * year) - 0.75 : 365.25 * year;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var D = 30.6001 * (month + 1);
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToJulianDay,The following statement contains a magic number: var JD = (int)B + (int)C + (int)D + 1720994.5 + fraction;
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,ToString,The following statement contains a magic number: switch (_datetimeFormat)        {          case SQLiteDateFormats.Ticks:            return dateValue.Ticks.ToString(CultureInfo.InvariantCulture);          case SQLiteDateFormats.JulianDay:            return ToJulianDay(dateValue).ToString(CultureInfo.InvariantCulture);          case SQLiteDateFormats.UnixEpoch:            return ((long)(dateValue.Subtract(UnixEpoch).Ticks / TimeSpan.TicksPerSecond)).ToString();          default:            return dateValue.ToString(_datetimeFormats[7]' CultureInfo.InvariantCulture);        }
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: char[] toks = new char[2] { '\"'' separator };
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: while (source.Length > 0)        {          n = source.IndexOfAny(toks' n);          if (n == -1) break;          if (source[n] == toks[0])          {            //source = source.Remove(n' 1);            n = source.IndexOfAny(quot' n + 1);            if (n == -1)            {              //source = "\"" + source;              break;            }            n++;            //source = source.Remove(n' 1);          }          else          {            s = source.Substring(0' n).Trim();            if (s.Length > 1 && s[0] == quot[0] && s[s.Length - 1] == s[0])              s = s.Substring(1' s.Length - 2);              source = source.Substring(n + 1).Trim();            if (s.Length > 0) ls.Add(s);            n = 0;          }        }
Magic Number,System.Runtime.InteropServices,SqliteConvert,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteConvert.cs,Split,The following statement contains a magic number: if (source.Length > 0)        {          s = source.Trim();          if (s.Length > 1 && s[0] == quot[0] && s[s.Length - 1] == s[0])            s = s.Substring(1' s.Length - 2);          ls.Add(s);        }
Missing Default,Mono.Data.Sqlite,SqliteDataReader,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteDataReader.cs,VerifyType,The following switch statement is missing a default case: switch (affinity)        {          case TypeAffinity.Int64:            if (typ == DbType.Int16) return affinity;            if (typ == DbType.Int32) return affinity;            if (typ == DbType.Int64) return affinity;            if (typ == DbType.Boolean) return affinity;            if (typ == DbType.Byte) return affinity;            if (typ == DbType.DateTime) return affinity;            if (typ == DbType.Single) return affinity;            if (typ == DbType.Double) return affinity;            if (typ == DbType.Decimal) return affinity;            break;          case TypeAffinity.Double:            if (typ == DbType.Single) return affinity;            if (typ == DbType.Double) return affinity;            if (typ == DbType.Decimal) return affinity;            if (typ == DbType.DateTime) return affinity;            break;          case TypeAffinity.Text:            if (typ == DbType.SByte) return affinity;            if (typ == DbType.String) return affinity;            if (typ == DbType.SByte) return affinity;            if (typ == DbType.Guid) return affinity;            if (typ == DbType.DateTime) return affinity;            if (typ == DbType.Decimal) return affinity;            break;          case TypeAffinity.Blob:            if (typ == DbType.Guid) return affinity;            if (typ == DbType.String) return affinity;            if (typ == DbType.Binary) return affinity;            break;        }
Missing Default,Mono.Data.Sqlite,SqliteFunction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteFunction.cs,ConvertParams,The following switch statement is missing a default case: switch (_base.GetParamValueType((SqliteValueHandle)argint[n]))          {            case TypeAffinity.Null:              parms[n] = DBNull.Value;              break;            case TypeAffinity.Int64:              parms[n] = _base.GetParamValueInt64((SqliteValueHandle)argint[n]);              break;            case TypeAffinity.Double:              parms[n] = _base.GetParamValueDouble((SqliteValueHandle)argint[n]);              break;            case TypeAffinity.Text:              parms[n] = _base.GetParamValueText((SqliteValueHandle)argint[n]);              break;            case TypeAffinity.Blob:              {                int x;                byte[] blob;                  x = (int)_base.GetParamValueBytes((SqliteValueHandle)argint[n]' 0' null' 0' 0);                blob = new byte[x];                _base.GetParamValueBytes((SqliteValueHandle)argint[n]' 0' blob' 0' x);                parms[n] = blob;              }              break;            case TypeAffinity.DateTime: // Never happens here but what the heck' maybe it will one day.              parms[n] = _base.ToDateTime(_base.GetParamValueText((SqliteValueHandle)argint[n]));              break;          }
Missing Default,Mono.Data.Sqlite,SqliteFunction,C:\repos\mattleibow_Mono.Data.Sqlite\Mono.Data.Sqlite\Store\SQLiteFunction.cs,SetReturnValue,The following switch statement is missing a default case: switch (SqliteConvert.TypeToAffinity(t))        {          case TypeAffinity.Null:            _base.ReturnNull(context);            return;          case TypeAffinity.Int64:            _base.ReturnInt64(context' Convert.ToInt64(returnValue' CultureInfo.CurrentCulture));            return;          case TypeAffinity.Double:            _base.ReturnDouble(context' Convert.ToDouble(returnValue' CultureInfo.CurrentCulture));            return;          case TypeAffinity.Text:            _base.ReturnText(context' returnValue.ToString());            return;          case TypeAffinity.Blob:            _base.ReturnBlob(context' (byte[])returnValue);            return;        }
