Implementation smell,Namespace,Class,File,Method,Description
Long Method,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The method has 162 lines of code.
Long Method,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The method has 275 lines of code.
Complex Method,NewRelic.Microsoft.SqlServer.Plugin,QueryContext,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryContext.cs,FormatMetricKey,Cyclomatic complexity of the method is 8
Complex Method,NewRelic.Microsoft.SqlServer.Plugin.Configuration,ConfigurationParser,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\ConfigurationParser.cs,AddSqlInstanceElements,Cyclomatic complexity of the method is 8
Complex Method,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,Cyclomatic complexity of the method is 21
Complex Method,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,Cyclomatic complexity of the method is 17
Complex Method,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,FindConstructor,Cyclomatic complexity of the method is 9
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,SqlServerEndpoint,The method has 5 parameters. Parameters: name' connectionString' includeSystemDatabases' includedDatabases' excludedDatabaseNames
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,MetricMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricMapper.cs,MetricMapper,The method has 5 parameters. Parameters: propertyInfo' metricSetter' metricName' metricUnits' metricTransform
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,MetricMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricMapper.cs,AddCountMetric,The method has 6 parameters. Parameters: queryContext' metricName' metricUnits' metricTransform' propertyInfo' result
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,MetricMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricMapper.cs,ConvertToCountMetric,The method has 6 parameters. Parameters: queryContext' metricName' metricUnits' metricTransform' propertyInfo' result
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,MetricMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricMapper.cs,AddValueMetric,The method has 6 parameters. Parameters: queryContext' metricName' metricUnits' metricTransform' propertyInfo' result
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin,MetricMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricMapper.cs,ConvertToValueMetric,The method has 6 parameters. Parameters: queryContext' metricName' metricUnits' metricTransform' propertyInfo' result
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Execute,The method has 5 parameters. Parameters: cnn' sql' param' transaction' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 5 parameters. Parameters: cnn' sql' param' transaction' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryMultiple,The method has 5 parameters. Parameters: cnn' sql' param' transaction' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Execute,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 5 parameters. Parameters: cnn' sql' param' transaction' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 7 parameters. Parameters: cnn' sql' param' transaction' buffered' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryMultiple,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryInternal,The method has 6 parameters. Parameters: cnn' sql' param' transaction' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMap,The method has 9 parameters. Parameters: cnn' sql' map' param' transaction' buffered' splitOn' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMapImpl,The method has 10 parameters. Parameters: cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' reader' identity
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,SetupCommand,The method has 7 parameters. Parameters: cnn' transaction' sql' paramReader' obj' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,ExecuteCommand,The method has 7 parameters. Parameters: cnn' transaction' sql' paramReader' obj' commandTimeout' commandType
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The method has 5 parameters. Parameters: type' reader' startBound' length' returnNullIfFirstMissing
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The method has 6 parameters. Parameters: sql' commandType' connection' type' parametersType' otherTypes
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The method has 7 parameters. Parameters: sql' commandType' connectionString' type' parametersType' otherTypes' gridIndex
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.Core,DynamicParameters,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Add,The method has 5 parameters. Parameters: name' value' dbType' direction' size
Long Parameter List,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseMetricBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseMetricBase.cs,ParameterizeQuery,The method has 5 parameters. Parameters: commandText' whereClauseToken' dbNameForWhereClause' includeDBs' excludeDBs
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,AzureSqlEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\AzureSqlEndpoint.cs,PerformThrottlingQuery,The length of the statement  "			var queries = new QueryLocator(new DapperWrapper()).PrepareQueries(new[] {typeof (AzureServiceInterruptionEvents)}' false).ToArray(); " is 133.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlEndpointBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlEndpointBase.cs,ToLog,The length of the statement  "            bool hasUserCreds = !string.IsNullOrEmpty(safeConnectionString.UserID) || !string.IsNullOrEmpty(safeConnectionString.Password); " is 127.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlEndpointBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlEndpointBase.cs,OnQueryExecuted,The length of the statement  "            // TODO: We should be able to remove the special casing of SqlDmlActivity here' but simply changing it to a delta counter doe " is 125.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlEndpointBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlEndpointBase.cs,CalculateSqlDmlActivityIncrease,The length of the statement  "                .GroupBy(a => string.Format("{0}:{1}:{2}:{3}"' BitConverter.ToString(a.PlanHandle)' BitConverter.ToString(a.SqlStatementHash)' a.CreationTime.Ticks' a.QueryType)) " is 162.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                        // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication. " is 138.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                        var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline); " is 135.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                        _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."' " is 126.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                    _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State); " is 131.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                    _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'"); " is 129.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The length of the statement  "                    _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request."); " is 161.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,ApplyDatabaseDisplayNames,The length of the statement  "            Dictionary<string' string> renameMap = includedDatabases.Where(d => !string.IsNullOrEmpty(d.DisplayName)).ToDictionary(d => d.Name.ToLower()' d => d.DisplayName); " is 162.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,ApplyDatabaseDisplayNames,The length of the statement  "            IDatabaseMetric[] databaseMetrics = results.OfType<IDatabaseMetric>().Where(d => !string.IsNullOrEmpty(d.DatabaseName)).ToArray(); " is 130.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,ToLog,The length of the statement  "                    _log.Info("        {0} {1} {2} ({3})"' serverDetails.SQLTitle' serverDetails.Edition' serverDetails.ProductLevel' serverDetails.ProductVersion); " is 144.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,ToLog,The length of the statement  "                    _log.Info("        Including DB: {0} [CompatibilityLevel={1};State={2}({3});CreateDate={4:yyyy-MM-dd};UserAccess={5}({6})]"' " is 124.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,SqlServerEndpoint,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlServerEndpoint.cs,GetMaxRecompileSummaryMetric,The length of the statement  "            var metricQuery = new MetricQuery(typeof (RecompileMaximums)' typeof (RecompileMaximums).Name' typeof (RecompileMaximums).Name); " is 128.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,Program,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Program.cs,Main,The length of the statement  "                    _log.Error("No sql endpoints found please' update the configuration file to monitor one or more sql server instances."); " is 120.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,QueryContext,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryContext.cs,FormatMetricKey,The length of the statement  "                    // Look for a similarly named property where maybe the case is mismatched. Performance is unimportant as this is a fatal error. " is 127.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,QueryContext,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryContext.cs,FormatMetricKey,The length of the statement  "                        throw new Exception(string.Format("MetricPattern '{0}' contains a placeholder '{1}' for '{2}'' however' it seems the placeholder has a case-mismatch." + " is 152.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,QueryContext,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryContext.cs,FormatMetricKey,The length of the statement  "                    throw new Exception(string.Format("MetricPattern '{0}' contains a placeholder '{1}' which was not found as a property on '{2}'. " + " is 131.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,QueryContext,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryContext.cs,FormatMetricKey,The length of the statement  "                    throw new Exception(string.Format("MetricPattern '{0}' contains a placeholder for the property '{1}' on '{2}'' however' it does not have a getter. " + " is 150.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin,MetricCollector,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\MetricCollector.cs,QueryEndpoints,The length of the statement  "                // This sends all components to the server in a single request' we may run into performance issues with one component delaying the others. " is 138.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Configuration,ConfigurationParser,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\ConfigurationParser.cs,GetSettingsFromConfigurationDirectory,The length of the statement  "            IDictionary<string' object> pluginConfigContents = JsonHelper.Deserialize(File.ReadAllText(pluginConfigPath)) as IDictionary<string' object>; " is 141.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Configuration,ConfigurationParser,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\ConfigurationParser.cs,AddSqlInstanceElements,The length of the statement  "                    throw new ConfigurationErrorsException("Error parsing type information from your 'plugin.json' file' ensure each JSON object in the 'agents' array has a 'type' property set to either 'sqlserver' or 'azure'"); " is 208.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Configuration,Settings,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\Settings.cs,FromConfigurationSection,The length of the statement  "                                                      (ISqlEndpoint) new SqlServerEndpoint(s.Name' s.ConnectionString' s.IncludeSystemDatabases' includedDatabaseNames' excludedDatabaseNames); " is 137.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Configuration,Settings,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\Settings.cs,GetWebProxy,The length of the statement  "                _log.Error("Unable to parse proxy port from '{0}'' skipping proxy. Expecting a number from 1-65535."' proxyElement.Port); " is 121.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Configuration,Settings,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\Settings.cs,GetWebProxy,The length of the statement  "                    _ProxyDetails = string.Format("Proxy Server: {0}\\{1}@{2}:{3}"' proxyElement.Domain' proxyElement.User' proxyElement.Host' port); " is 129.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,PollingThread,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\PollingThread.cs,Start,The length of the statement  "                ThreadSettings.Thread = new Thread(tStart) {Name = string.IsNullOrEmpty(ThreadSettings.Name) ? "PollingThread" : ThreadSettings.Name' IsBackground = true}; " is 155.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetBindByName,The length of the statement  "                var method = new DynamicMethod(commandType.Name + "_BindByName"' null' new Type[] { typeof(IDbCommand)' typeof(bool) }); " is 120.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,LookupDbType,The length of the statement  "            throw new NotSupportedException(string.Format("The member {0} of type {1} cannot be used as a parameter value"' name' type)); " is 125.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Execute,The length of the statement  "            return ExecuteCommand(cnn' transaction' sql' (object)param == null ? null : info.ParamReader' (object)param' commandTimeout' commandType); " is 138.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryMultiple,The length of the statement  "            Identity identity = new Identity(sql' commandType' cnn' typeof(GridReader)' (object)param == null ? null : ((object)param).GetType()' null); " is 140.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' DontMap' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 162.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' DontMap' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 161.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Query,The length of the statement  "            return MultiMap<TFirst' TSecond' TThird' TFourth' DontMap' TReturn>(cnn' sql' map' param as object' transaction' buffered' splitOn' commandTimeout' commandType); " is 161.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMap,The length of the statement  "            var results = MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>(cnn' sql' map' param' transaction' splitOn' commandTimeout' commandType' null' null); " is 163.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMapImpl,The length of the statement  "            identity = identity ?? new Identity(sql' commandType' cnn' typeof(TFirst)' (object)param == null ? null : ((object)param).GetType()' new[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth) }); " is 225.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMapImpl,The length of the statement  "                if ((deserializer = cinfo.Deserializer).Func == null || (otherDeserializers = cinfo.OtherDeserializers) == null || hash != deserializer.Hash) " is 141.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMapImpl,The length of the statement  "                    var deserializers = GenerateDeserializers(new Type[] { typeof(TFirst)' typeof(TSecond)' typeof(TThird)' typeof(TFourth)' typeof(TFifth) }' splitOn' reader); " is 156.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiMapImpl,The length of the statement  "                Func<IDataReader' TReturn> mapIt = GenerateMapper<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>(deserializer.Func' otherDeserializers' map); " is 145.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)); " is 152.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)); " is 196.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The length of the statement  "                    return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r)); " is 238.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetCacheInfo,The length of the statement  "                    else if (typeof(IEnumerable<KeyValuePair<string' object>>).IsAssignableFrom(identity.parametersType) && typeof(System.Dynamic.IDynamicMetaObjectProvider).IsAssignableFrom(identity.parametersType)) " is 196.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetDictionaryDeserializer,The length of the statement  "                throw new ArgumentException("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 140.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,PackListParameters,The length of the statement  "                        command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)"); " is 123.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,FilterParameters,The length of the statement  "            return parameters.Where(p => Regex.IsMatch(sql' "[@:]" + p.Name + "([^a-zA-Z0-9_]+|$)"' RegexOptions.IgnoreCase | RegexOptions.Multiline)); " is 139.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            var dm = new DynamicMethod(string.Format("ParamInfo{0}"' Guid.NewGuid())' null' new[] { typeof(IDbCommand)' typeof(object) }' type' true); " is 138.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetProperty("Parameters").GetGetMethod()' null); // stack is now [parameters] " is 126.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "            IEnumerable<PropertyInfo> props = type.GetProperties().Where(p => p.GetIndexParameters().Length == 0).OrderBy(p => p.Name); " is 123.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter] " is 120.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter] " is 138.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter] " is 157.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time " is 195.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 152.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 155.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value] " is 125.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                        il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null); " is 121.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter] " is 151.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The length of the statement  "                    il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter] " is 153.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetStructDeserializer,The length of the statement  "            // no point using special per-type handling here; it boils down to the same' plus not all are supported anyway (see: SqlDataReader.GetChar - not supported!) " is 156.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "            var dm = new DynamicMethod(string.Format("Deserialize{0}"' Guid.NewGuid())' typeof(object)' new[] { typeof(IDataReader) }' true); " is 129.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                throw new ArgumentException("When using the multi-mapping APIs ensure you set the splitOn param if you have keys other than Id"' "splitOn"); " is 140.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                        throw new InvalidOperationException(String.Format("A parameterless default constructor or one matching signature {0} is required for {1} materialization"' proposedTypes' type.FullName)); " is 186.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            memberType == typeof(char) ? "ReadChar" : "ReadNullableChar"' BindingFlags.Static | BindingFlags.Public)' null); // stack is now [target][target][typed-value] " is 158.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null);// stack is now [target][target][enum-type] " is 120.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                il.Emit(OpCodes.Newobj' memberType.GetConstructor(new[] { nullUnderlyingType })); // stack is now [target][target][enum-value] " is 126.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                            il.Emit(OpCodes.Newobj' memberType.GetConstructor(new Type[] { typeof(byte[]) }));// stack is now [target][target][binary] " is 122.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                    il.EmitCall(OpCodes.Call' typeof(Type).GetMethod("GetTypeFromHandle")' null); // stack is now [target][target][value][member-type] " is 130.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetTypeDeserializer,The length of the statement  "                                    il.EmitCall(OpCodes.Call' typeof(Convert).GetMethod("ChangeType"' new Type[] { typeof(object)' typeof(Type) })' null); // stack is now [target][target][boxed-member-type-value] " is 176.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,GridReader,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Read,The length of the statement  "                if (reader == null) throw new ObjectDisposedException(GetType().FullName' "The reader has been disposed; this can happen after all data has been consumed"); " is 156.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,GridReader,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Read,The length of the statement  "                if (consumed) throw new InvalidOperationException("Query results must be consumed in the correct order' and each result can only be consumed once"); " is 148.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,GridReader,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,MultiReadInternal,The length of the statement  "                    foreach (var r in SqlMapper.MultiMapImpl<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>(null' null' func' null' null' splitOn' null' null' reader' identity)) " is 161.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,DynamicParameters,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Add,The length of the statement  "            parameters[Clean(name)] = new ParamInfo() { Name = name' Value = value' ParameterDirection = direction ?? ParameterDirection.Input' DbType = dbType' Size = size }; " is 163.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,DbString,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,AddParameter,The length of the statement  "            param.DbType = IsAnsi ? (IsFixedLength ? DbType.AnsiStringFixedLength : DbType.AnsiString) : (IsFixedLength ? DbType.StringFixedLength : DbType.String); " is 152.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetPropertySetter,The length of the statement  "                propertyInfo.DeclaringType.GetProperty(propertyInfo.Name' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetSetMethod(true); " is 147.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,FindConstructor,The length of the statement  "            foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length)) " is 137.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetConstructorParameter,The length of the statement  "            return new SimpleMemberMap(columnName' parameters.FirstOrDefault(p => string.Equals(p.Name' columnName' StringComparison.OrdinalIgnoreCase))); " is 142.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core.Extensions,ExtensionsForAssembly,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Extensions\ExtensionsForAssembly.cs,SearchForStringResource,The length of the statement  "                var delimitedResourceName = fullOrPartialResourceName.StartsWith(".") ? fullOrPartialResourceName : "." + fullOrPartialResourceName; " is 132.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core.Extensions,ExtensionsForAssembly,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Extensions\ExtensionsForAssembly.cs,SearchForStringResource,The length of the statement  "                    throw new Exception(string.Format("Ambiguous partial resource name '{0}' also matched '{1}'"' fullOrPartialResourceName' string.Join("'' '"' matchingNames))); " is 158.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.Core.Extensions,ExtensionsForAssembly,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Extensions\ExtensionsForAssembly.cs,SearchForStringResource,The length of the statement  "                    throw new Exception(string.Format("Unable to locate resource '{0}' based on partial resource '{1}'"' fullResourceName' fullOrPartialResourceName)); " is 147.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "database_id: {0}' source_database_id: {1}' create_date: {2}' compatibility_level: {3}' collation_name: {4}' user_access: {5}' user_access_desc: {6}' is_read_only: {7}' " + " is 172.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_auto_close_on: {8}' is_auto_shrink_on: {9}' state: {10}' state_desc: {11}' is_in_standby: {12}' is_cleanly_shutdown: {13}' is_supplemental_logging_enabled: {14}' " + " is 169.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "snapshot_isolation_state: {15}' snapshot_isolation_state_desc: {16}' is_read_committed_snapshot_on: {17}' recovery_model: {18}' recovery_model_desc: {19}' " + " is 159.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "page_verify_option: {20}' page_verify_option_desc: {21}' is_auto_create_stats_on: {22}' is_auto_update_stats_on: {23}' is_auto_update_stats_async_on: {24}' " + " is 160.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_ansi_null_default_on: {25}' is_ansi_nulls_on: {26}' is_ansi_padding_on: {27}' is_ansi_warnings_on: {28}' is_arithabort_on: {29}' is_concat_null_yields_null_on: {30}' " + " is 173.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_numeric_roundabort_on: {31}' is_quoted_identifier_on: {32}' is_recursive_triggers_on: {33}' is_cursor_close_on_commit_on: {34}' is_local_cursor_default: {35}' " + " is 166.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_fulltext_enabled: {36}' is_trustworthy_on: {37}' is_db_chaining_on: {38}' is_parameterization_forced: {39}' is_master_key_encrypted_by_server: {40}' is_published: {41}' " + " is 176.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_subscribed: {42}' is_merge_published: {43}' is_distributor: {44}' is_sync_with_backup: {45}' is_broker_enabled: {46}' log_reuse_wait: {47}' log_reuse_wait_desc: {48}' " + " is 174.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_date_correlation_on: {49}' is_cdc_enabled: {50}' is_encrypted: {51}' is_honor_broker_priority_on: {52}' replica_id: {53}' group_database_id: {54}' " + " is 154.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "default_language_lcid: {55}' default_language_name: {56}' default_fulltext_language_lcid: {57}' default_fulltext_language_name: {58}' is_nested_triggers_on: {59}' " + " is 167.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 "is_transform_noise_words_on: {60}' two_digit_year_cutoff: {61}' containment: {62}' containment_desc: {63}' target_recovery_time_in_seconds: {64}"' " is 147.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 database_id' source_database_id' create_date' compatibility_level' collation_name' user_access' user_access_desc' is_read_only' is_auto_close_on' is_auto_shrink_on' state' " is 171.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 state_desc' is_in_standby' is_cleanly_shutdown' is_supplemental_logging_enabled' snapshot_isolation_state' snapshot_isolation_state_desc' is_read_committed_snapshot_on' " is 168.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 recovery_model' recovery_model_desc' page_verify_option' page_verify_option_desc' is_auto_create_stats_on' is_auto_update_stats_on' is_auto_update_stats_async_on' " is 162.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 is_ansi_null_default_on' is_ansi_nulls_on' is_ansi_padding_on' is_ansi_warnings_on' is_arithabort_on' is_concat_null_yields_null_on' is_numeric_roundabort_on' " is 158.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 is_quoted_identifier_on' is_recursive_triggers_on' is_cursor_close_on_commit_on' is_local_cursor_default' is_fulltext_enabled' is_trustworthy_on' is_db_chaining_on' " is 164.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 is_parameterization_forced' is_master_key_encrypted_by_server' is_published' is_subscribed' is_merge_published' is_distributor' is_sync_with_backup' is_broker_enabled' " is 167.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 log_reuse_wait' log_reuse_wait_desc' is_date_correlation_on' is_cdc_enabled' is_encrypted' is_honor_broker_priority_on' replica_id' group_database_id' default_language_lcid' " is 173.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseDetails,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseDetails.cs,ToString,The length of the statement  "                                 default_language_name' default_fulltext_language_lcid' default_fulltext_language_name' is_nested_triggers_on' is_transform_noise_words_on' two_digit_year_cutoff' containment' " is 174.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseMetricBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseMetricBase.cs,ParameterizeQuery,The length of the statement  "			return ParameterizeQuery(commandText' WhereClauseToken' DbNameForWhereClause' endpoint.IncludedDatabaseNames' endpoint.ExcludedDatabaseNames); " is 142.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,DatabaseMetricBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\DatabaseMetricBase.cs,ParameterizeQuery,The length of the statement  "				throw new Exception(string.Format("SQL is not in the expected format. Missing replacement token '{0}'"' whereClauseToken)); " is 123.
Long Statement,NewRelic.Microsoft.SqlServer.Plugin.QueryTypes,WaitState,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\QueryTypes\WaitState.cs,ToString,The length of the statement  "                                 WaitType' WaitSeconds' ResourceSeconds' SignalSeconds' WaitCount' Percentage' AvgWaitSeconds' AvgResourceSeconds' AvgSignalSeconds); " is 132.
Complex Conditional,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetBindByName,The conditional expression  "prop != null && prop.CanWrite && prop.PropertyType == typeof(bool)                  && ((indexers = prop.GetIndexParameters()) == null || indexers.Length == 0)                  && (setter = prop.GetSetMethod()) != null"  is complex.
Complex Conditional,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetDeserializer,The conditional expression  "!(typeMap.ContainsKey(type) || type.IsEnum || type.FullName == LinqBinary ||                  (type.IsValueType && (underlyingType = Nullable.GetUnderlyingType(type)) != null && underlyingType.IsEnum))"  is complex.
Complex Conditional,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,FindConstructor,The conditional expression  "unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string))"  is complex.
Empty Catch Block,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryMultiple,The method has an empty catch block.
Empty Catch Block,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,QueryInternal,The method has an empty catch block.
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin,SqlErrorReporter,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlErrorReporter.cs,LogSqlException,The following statement contains a magic number: switch (sqlException.Number)              {                  case 297: // User cannot log on via Windows Auth                  case 18456: // User cannot login via SQL Auth                      if (connectionString.IntegratedSecurity)                      {                          // System.Data.SqlClient.SqlException: Login failed. The login is from an untrusted domain and cannot be used with Windows authentication.                          _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          Environment.UserName' connectionString.DataSource);                      }                      else                      {                          // System.Data.SqlClient.SqlException: Login failed for user '<user id>'.                          _log.Error("User '{0}' cannot access the server '{1}'. " +                                          "Consider changing the connection string in the configuration file " +                                          "or adding permissions to your SQL Server (see readme.md)."'                                          connectionString.UserID' connectionString.DataSource);                      }                      break;                    case 4060: // Missing database user                      // System.Data.SqlClient.SqlException: Cannot open database "Junk" requested by the login. The login failed.                      if (connectionString.IntegratedSecurity)                      {                          if (Environment.UserInteractive)                          {                              _log.Error("The plugin is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                          else                          {                              _log.Error("The Windows service is running as user '{0}'' however' the user cannot access the database '{1}'. " +                                              "Ensure the login has a user in the database (see readme.md)."'                                              Environment.UserName' connectionString.InitialCatalog);                          }                      }                      else                      {                          _log.Error("User '{0}' cannot access the database '{1}'. " +                                          "Ensure the login has a user in the database (see readme.md)."'                                          connectionString.UserID' connectionString.InitialCatalog);                      }                      break;                    case 10060:                  case 10061:                  case 11001:                  case 40615:                      if (sqlException.Message.Contains("sp_set_firewall_rule"))                      {                          var relevantErrorMessage = Regex.Replace(sqlException.Message' @"change to take effect\.(.*)$"' string.Empty' RegexOptions.Singleline);                          _log.Error("Azure SQL Error: " + relevantErrorMessage);                      }                      else                      {                          _log.Error("Timeout connecting to server at '{0}'. Verify that the connection string is correct and the server is reachable."'                                          connectionString.DataSource);                      }                      break;                    default:                      _log.Error("Error collecting metric '{0}': {1}"' query.QueryName' sqlException.Message);                      _log.Error("SQL Exception Details: Class {0}' Number {1}' State {2}"' sqlException.Class' sqlException.Number' sqlException.State);                      _log.Error(@"Check the error log for more details at 'C:\ProgramData\New Relic\MicrosoftSQLServerPlugin\ErrorDetailOutput.log'");                      _log.Error("For additional help' contact New Relic support at https://support.newrelic.com/home. Please paste all log messages above into the support request.");                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Configuration,Settings,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Configuration\Settings.cs,Settings,The following statement contains a magic number: PollIntervalSeconds = 60;
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,PollingThread,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\PollingThread.cs,Stop,The following statement contains a magic number: if (ThreadSettings.Thread != null && waitForThreadExit)              {                  if (!ThreadSettings.Thread.Join(new TimeSpan(0' 0' 20)))                  {                      ThreadSettings.Thread.Abort();                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,PollingThread,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\PollingThread.cs,ThreadLoop,The following statement contains a magic number: while (_threadState.IsRunning)              {                  if (!_threadState.IsPaused(true))                  {                      try                      {                          ThreadSettings.PollAction();                      }                      catch (ThreadAbortException)                      {                          break;                      }                      catch (Exception ex)                      {                          ExceptionThrown(ex);                            if (++errorCount >= 3)                          {                              throw;                          }                            _log.Debug("Ignoring Error ({0} of 3):\r\n{1}"' errorCount' ex);                      }                  }                  else                  {                      _log.Debug("{0}: Paused - skipping pass"' ThreadSettings.Name);                  }                    var interval = TimeSpan.FromSeconds(ThreadSettings.PollIntervalSeconds);                    _log.Debug("{0}: Sleeping for {1}"' ThreadSettings.Name' interval);                    if (ThreadSettings.AutoResetEvent.WaitOne(interval' true))                  {                      _log.Debug("{0}: Interrupted - woken up early"' ThreadSettings.Name);                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GetColumnHash,The following statement contains a magic number: unchecked              {                  int colCount = reader.FieldCount' hash = colCount;                  for (int i = 0; i < colCount; i++)                  {   // binding code is only interested in names - not types                      object tmp = reader.GetName(i);                      hash = (hash * 31) + (tmp == null ? 0 : tmp.GetHashCode());                  }                  return hash;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,GenerateMapper,The following statement contains a magic number: switch (otherDeserializers.Length)              {                  case 1:                      return r => ((Func<TFirst' TSecond' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r));                  case 2:                      return r => ((Func<TFirst' TSecond' TThird' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r));                  case 3:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r));  #if !CSHARP30                  case 4:                      return r => ((Func<TFirst' TSecond' TThird' TFourth' TFifth' TReturn>)map)((TFirst)deserializer(r)' (TSecond)otherDeserializers[0](r)' (TThird)otherDeserializers[1](r)' (TFourth)otherDeserializers[2](r)' (TFifth)otherDeserializers[3](r));  #endif                  default:                      throw new NotSupportedException();              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,PackListParameters,The following statement contains a magic number: if (list != null)              {                  if (FeatureSupport.Get(command.Connection).Arrays)                  {                      var arrayParm = command.CreateParameter();                      arrayParm.Value = list;                      arrayParm.ParameterName = namePrefix;                      command.Parameters.Add(arrayParm);                  }                  else                  {                      bool isString = value is IEnumerable<string>;                      bool isDbString = value is IEnumerable<DbString>;                      foreach (var item in list)                      {                          count++;                          var listParam = command.CreateParameter();                          listParam.ParameterName = namePrefix + count;                          listParam.Value = item ?? DBNull.Value;                          if (isString)                          {                              listParam.Size = 4000;                              if (item != null && ((string)item).Length > 4000)                              {                                  listParam.Size = -1;                              }                          }                          if (isDbString && item as DbString != null)                          {                              var str = item as DbString;                              str.AddParameter(command' listParam.ParameterName);                          }                          else                          {                              command.Parameters.Add(listParam);                          }                      }                        if (count == 0)                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' "(SELECT NULL WHERE 1 = 0)");                      }                      else                      {                          command.CommandText = Regex.Replace(command.CommandText' @"[?@:]" + Regex.Escape(namePrefix)' match =>                          {                              var grp = match.Value;                              var sb = new StringBuilder("(").Append(grp).Append(1);                              for (int i = 2; i <= count; i++)                              {                                  sb.Append(''').Append(grp).Append(i);                              }                              return sb.Append(')').ToString();                          });                      }                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props)              {                  if (filterParams)                  {                      if (identity.sql.IndexOf("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf(":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0)                      { // can't see the parameter in the text (even in a comment' etc) - burn it with fire                          continue;                      }                  }                  if (prop.PropertyType == typeof(DbString))                  {                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [dbstring]                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [dbstring] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [dbstring] [command] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(DbString).GetMethod("AddParameter")' null); // stack is now [parameters]                      continue;                  }                  DbType dbType = LookupDbType(prop.PropertyType' prop.Name);                  if (dbType == DynamicParameters.EnumerableMultiParameter)                  {                      // this actually represents special handling for list types;                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [command] [name]                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [command] [name] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [command] [name] [typed-value]                      if (prop.PropertyType.IsValueType)                      {                          il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [command] [name] [boxed-value]                      }                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("PackListParameters")' null); // stack is [parameters]                      continue;                  }                  il.Emit(OpCodes.Dup); // stack is now [parameters] [parameters]                    il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [parameters] [command]                    if (checkForDuplicates)                  {                      // need to be a little careful about adding; use a utility method                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [command] [name]                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter]                  }                  else                  {                      // no risk of duplicates; just blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [parameters] [parameter] [parameter]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [parameter] [parameter] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter]                  }                  if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time                  {                      il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      EmitInt32(il' (int)dbType);// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]                        il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                  }                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  EmitInt32(il' (int)ParameterDirection.Input);// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]                  il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]                  bool checkForNull = true;                  if (prop.PropertyType.IsValueType)                  {                      il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]                      if (Nullable.GetUnderlyingType(prop.PropertyType) == null)                      {   // struct but not Nullable<T>; boxed value cannot be null                          checkForNull = false;                      }                  }                  if (checkForNull)                  {                      if (dbType == DbType.String && !haveInt32Arg1)                      {                          il.DeclareLocal(typeof(int));                          haveInt32Arg1 = true;                      }                      // relative stack: [boxed value]                      il.Emit(OpCodes.Dup);// relative stack: [boxed value] [boxed value]                      Label notNull = il.DefineLabel();                      Label? allDone = dbType == DbType.String ? il.DefineLabel() : (Label?)null;                      il.Emit(OpCodes.Brtrue_S' notNull);                      // relative stack [boxed value = null]                      il.Emit(OpCodes.Pop); // relative stack empty                      il.Emit(OpCodes.Ldsfld' typeof(DBNull).GetField("Value")); // relative stack [DBNull]                      if (dbType == DbType.String)                      {                          EmitInt32(il' 0);                          il.Emit(OpCodes.Stloc_1);                      }                      if (allDone != null) il.Emit(OpCodes.Br_S' allDone.Value);                      il.MarkLabel(notNull);                      if (prop.PropertyType == typeof(string))                      {                          il.Emit(OpCodes.Dup); // [string] [string]                          il.EmitCall(OpCodes.Callvirt' typeof(string).GetProperty("Length").GetGetMethod()' null); // [string] [length]                          EmitInt32(il' 4000); // [string] [length] [4000]                          il.Emit(OpCodes.Cgt); // [string] [0 or 1]                          Label isLong = il.DefineLabel()' lenDone = il.DefineLabel();                          il.Emit(OpCodes.Brtrue_S' isLong);                          EmitInt32(il' 4000); // [string] [4000]                          il.Emit(OpCodes.Br_S' lenDone);                          il.MarkLabel(isLong);                          EmitInt32(il' -1); // [string] [-1]                          il.MarkLabel(lenDone);                          il.Emit(OpCodes.Stloc_1); // [string]                       }                      if (prop.PropertyType.FullName == LinqBinary)                      {                          il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);                      }                      if (allDone != null) il.MarkLabel(allDone.Value);                      // relative stack [boxed value or DBNull]                  }                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    if (prop.PropertyType == typeof(string))                  {                      var endOfSize = il.DefineLabel();                      // don't set if 0                      il.Emit(OpCodes.Ldloc_1); // [parameters] [[parameters]] [parameter] [size]                      il.Emit(OpCodes.Brfalse_S' endOfSize); // [parameters] [[parameters]] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      il.Emit(OpCodes.Ldloc_1); // stack is now [parameters] [[parameters]] [parameter] [parameter] [size]                      il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter]                        il.MarkLabel(endOfSize);                  }                  if (checkForDuplicates)                  {                      // stack is now [parameters] [parameter]                      il.Emit(OpCodes.Pop); // don't need parameter any more                  }                  else                  {                      // stack is now [parameters] [parameters] [parameter]                      // blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IList).GetMethod("Add")' null); // stack is now [parameters]                      il.Emit(OpCodes.Pop); // IList.Add returns the new index (int); we don't care                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,CreateParamInfoGenerator,The following statement contains a magic number: foreach (var prop in props)              {                  if (filterParams)                  {                      if (identity.sql.IndexOf("@" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0                          && identity.sql.IndexOf(":" + prop.Name' StringComparison.InvariantCultureIgnoreCase) < 0)                      { // can't see the parameter in the text (even in a comment' etc) - burn it with fire                          continue;                      }                  }                  if (prop.PropertyType == typeof(DbString))                  {                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [dbstring]                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [dbstring] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [dbstring] [command] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(DbString).GetMethod("AddParameter")' null); // stack is now [parameters]                      continue;                  }                  DbType dbType = LookupDbType(prop.PropertyType' prop.Name);                  if (dbType == DynamicParameters.EnumerableMultiParameter)                  {                      // this actually represents special handling for list types;                      il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [command]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [command] [name]                      il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [command] [name] [typed-param]                      il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [command] [name] [typed-value]                      if (prop.PropertyType.IsValueType)                      {                          il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [command] [name] [boxed-value]                      }                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("PackListParameters")' null); // stack is [parameters]                      continue;                  }                  il.Emit(OpCodes.Dup); // stack is now [parameters] [parameters]                    il.Emit(OpCodes.Ldarg_0); // stack is now [parameters] [parameters] [command]                    if (checkForDuplicates)                  {                      // need to be a little careful about adding; use a utility method                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [command] [name]                      il.EmitCall(OpCodes.Call' typeof(SqlMapper).GetMethod("FindOrAddParameter")' null); // stack is [parameters] [parameter]                  }                  else                  {                      // no risk of duplicates; just blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IDbCommand).GetMethod("CreateParameter")' null);// stack is now [parameters] [parameters] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [parameters] [parameter] [parameter]                      il.Emit(OpCodes.Ldstr' prop.Name); // stack is now [parameters] [parameters] [parameter] [parameter] [name]                      il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("ParameterName").GetSetMethod()' null);// stack is now [parameters] [parameters] [parameter]                  }                  if (dbType != DbType.Time) // https://connect.microsoft.com/VisualStudio/feedback/details/381934/sqlparameter-dbtype-dbtype-time-sets-the-parameter-to-sqldbtype-datetime-instead-of-sqldbtype-time                  {                      il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      EmitInt32(il' (int)dbType);// stack is now [parameters] [[parameters]] [parameter] [parameter] [db-type]                        il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("DbType").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                  }                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  EmitInt32(il' (int)ParameterDirection.Input);// stack is now [parameters] [[parameters]] [parameter] [parameter] [dir]                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Direction").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                  il.Emit(OpCodes.Ldloc_0); // stack is now [parameters] [[parameters]] [parameter] [parameter] [typed-param]                  il.Emit(OpCodes.Callvirt' prop.GetGetMethod()); // stack is [parameters] [[parameters]] [parameter] [parameter] [typed-value]                  bool checkForNull = true;                  if (prop.PropertyType.IsValueType)                  {                      il.Emit(OpCodes.Box' prop.PropertyType); // stack is [parameters] [[parameters]] [parameter] [parameter] [boxed-value]                      if (Nullable.GetUnderlyingType(prop.PropertyType) == null)                      {   // struct but not Nullable<T>; boxed value cannot be null                          checkForNull = false;                      }                  }                  if (checkForNull)                  {                      if (dbType == DbType.String && !haveInt32Arg1)                      {                          il.DeclareLocal(typeof(int));                          haveInt32Arg1 = true;                      }                      // relative stack: [boxed value]                      il.Emit(OpCodes.Dup);// relative stack: [boxed value] [boxed value]                      Label notNull = il.DefineLabel();                      Label? allDone = dbType == DbType.String ? il.DefineLabel() : (Label?)null;                      il.Emit(OpCodes.Brtrue_S' notNull);                      // relative stack [boxed value = null]                      il.Emit(OpCodes.Pop); // relative stack empty                      il.Emit(OpCodes.Ldsfld' typeof(DBNull).GetField("Value")); // relative stack [DBNull]                      if (dbType == DbType.String)                      {                          EmitInt32(il' 0);                          il.Emit(OpCodes.Stloc_1);                      }                      if (allDone != null) il.Emit(OpCodes.Br_S' allDone.Value);                      il.MarkLabel(notNull);                      if (prop.PropertyType == typeof(string))                      {                          il.Emit(OpCodes.Dup); // [string] [string]                          il.EmitCall(OpCodes.Callvirt' typeof(string).GetProperty("Length").GetGetMethod()' null); // [string] [length]                          EmitInt32(il' 4000); // [string] [length] [4000]                          il.Emit(OpCodes.Cgt); // [string] [0 or 1]                          Label isLong = il.DefineLabel()' lenDone = il.DefineLabel();                          il.Emit(OpCodes.Brtrue_S' isLong);                          EmitInt32(il' 4000); // [string] [4000]                          il.Emit(OpCodes.Br_S' lenDone);                          il.MarkLabel(isLong);                          EmitInt32(il' -1); // [string] [-1]                          il.MarkLabel(lenDone);                          il.Emit(OpCodes.Stloc_1); // [string]                       }                      if (prop.PropertyType.FullName == LinqBinary)                      {                          il.EmitCall(OpCodes.Callvirt' prop.PropertyType.GetMethod("ToArray"' BindingFlags.Public | BindingFlags.Instance)' null);                      }                      if (allDone != null) il.MarkLabel(allDone.Value);                      // relative stack [boxed value or DBNull]                  }                  il.EmitCall(OpCodes.Callvirt' typeof(IDataParameter).GetProperty("Value").GetSetMethod()' null);// stack is now [parameters] [[parameters]] [parameter]                    if (prop.PropertyType == typeof(string))                  {                      var endOfSize = il.DefineLabel();                      // don't set if 0                      il.Emit(OpCodes.Ldloc_1); // [parameters] [[parameters]] [parameter] [size]                      il.Emit(OpCodes.Brfalse_S' endOfSize); // [parameters] [[parameters]] [parameter]                        il.Emit(OpCodes.Dup);// stack is now [parameters] [[parameters]] [parameter] [parameter]                      il.Emit(OpCodes.Ldloc_1); // stack is now [parameters] [[parameters]] [parameter] [parameter] [size]                      il.EmitCall(OpCodes.Callvirt' typeof(IDbDataParameter).GetProperty("Size").GetSetMethod()' null); // stack is now [parameters] [[parameters]] [parameter]                        il.MarkLabel(endOfSize);                  }                  if (checkForDuplicates)                  {                      // stack is now [parameters] [parameter]                      il.Emit(OpCodes.Pop); // don't need parameter any more                  }                  else                  {                      // stack is now [parameters] [parameters] [parameter]                      // blindly add                      il.EmitCall(OpCodes.Callvirt' typeof(IList).GetMethod("Add")' null); // stack is now [parameters]                      il.Emit(OpCodes.Pop); // IList.Add returns the new index (int); we don't care                  }              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,LoadLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Ldloc_0); break;                  case 1: il.Emit(OpCodes.Ldloc_1); break;                  case 2: il.Emit(OpCodes.Ldloc_2); break;                  case 3: il.Emit(OpCodes.Ldloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Ldloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Ldloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,StoreLocal,The following statement contains a magic number: switch (index)              {                  case 0: il.Emit(OpCodes.Stloc_0); break;                  case 1: il.Emit(OpCodes.Stloc_1); break;                  case 2: il.Emit(OpCodes.Stloc_2); break;                  case 3: il.Emit(OpCodes.Stloc_3); break;                  default:                      if (index <= 255)                      {                          il.Emit(OpCodes.Stloc_S' (byte)index);                      }                      else                      {                          il.Emit(OpCodes.Stloc' (short)index);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,LoadLocalAddress,The following statement contains a magic number: if (index <= 255)              {                  il.Emit(OpCodes.Ldloca_S' (byte)index);              }              else              {                  il.Emit(OpCodes.Ldloca' (short)index);              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,SqlMapper,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,EmitInt32,The following statement contains a magic number: switch (value)              {                  case -1: il.Emit(OpCodes.Ldc_I4_M1); break;                  case 0: il.Emit(OpCodes.Ldc_I4_0); break;                  case 1: il.Emit(OpCodes.Ldc_I4_1); break;                  case 2: il.Emit(OpCodes.Ldc_I4_2); break;                  case 3: il.Emit(OpCodes.Ldc_I4_3); break;                  case 4: il.Emit(OpCodes.Ldc_I4_4); break;                  case 5: il.Emit(OpCodes.Ldc_I4_5); break;                  case 6: il.Emit(OpCodes.Ldc_I4_6); break;                  case 7: il.Emit(OpCodes.Ldc_I4_7); break;                  case 8: il.Emit(OpCodes.Ldc_I4_8); break;                  default:                      if (value >= -128 && value <= 127)                      {                          il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                      }                      else                      {                          il.Emit(OpCodes.Ldc_I4' value);                      }                      break;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,Identity,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Identity,The following statement contains a magic number: unchecked                  {                      hashCode = 17; // we *know* we are using this in a dictionary' so pre-compute this                      hashCode = hashCode * 23 + commandType.GetHashCode();                      hashCode = hashCode * 23 + gridIndex.GetHashCode();                      hashCode = hashCode * 23 + (sql == null ? 0 : sql.GetHashCode());                      hashCode = hashCode * 23 + (type == null ? 0 : type.GetHashCode());                      if (otherTypes != null)                      {                          foreach (var t in otherTypes)                          {                              hashCode = hashCode * 23 + (t == null ? 0 : t.GetHashCode());                          }                      }                      hashCode = hashCode * 23 + (connectionString == null ? 0 : connectionString.GetHashCode());                      hashCode = hashCode * 23 + (parametersType == null ? 0 : parametersType.GetHashCode());                  }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,DynamicParameters,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values)              {                  var dbType = param.DbType;                  var val = param.Value;                  string name = Clean(param.Name);                    if (dbType == null && val != null) dbType = SqlMapper.LookupDbType(val.GetType()' name);                    if (dbType == DynamicParameters.EnumerableMultiParameter)                  {  #pragma warning disable 612' 618                      SqlMapper.PackListParameters(command' name' val);  #pragma warning restore 612' 618                  }                  else                  {                        bool add = !command.Parameters.Contains(name);                      IDbDataParameter p;                      if (add)                      {                          p = command.CreateParameter();                          p.ParameterName = name;                      }                      else                      {                          p = (IDbDataParameter)command.Parameters[name];                      }                        p.Value = val ?? DBNull.Value;                      p.Direction = param.ParameterDirection;                      var s = val as string;                      if (s != null)                      {                          if (s.Length <= 4000)                          {                              p.Size = 4000;                          }                      }                      if (param.Size != null)                      {                          p.Size = param.Size.Value;                      }                      if (dbType != null)                      {                          p.DbType = dbType.Value;                      }                      if (add)                      {                          command.Parameters.Add(p);                      }                      param.AttachedParam = p;                  }                }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,DynamicParameters,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,AddParameters,The following statement contains a magic number: foreach (var param in parameters.Values)              {                  var dbType = param.DbType;                  var val = param.Value;                  string name = Clean(param.Name);                    if (dbType == null && val != null) dbType = SqlMapper.LookupDbType(val.GetType()' name);                    if (dbType == DynamicParameters.EnumerableMultiParameter)                  {  #pragma warning disable 612' 618                      SqlMapper.PackListParameters(command' name' val);  #pragma warning restore 612' 618                  }                  else                  {                        bool add = !command.Parameters.Contains(name);                      IDbDataParameter p;                      if (add)                      {                          p = command.CreateParameter();                          p.ParameterName = name;                      }                      else                      {                          p = (IDbDataParameter)command.Parameters[name];                      }                        p.Value = val ?? DBNull.Value;                      p.Direction = param.ParameterDirection;                      var s = val as string;                      if (s != null)                      {                          if (s.Length <= 4000)                          {                              p.Size = 4000;                          }                      }                      if (param.Size != null)                      {                          p.Size = param.Size.Value;                      }                      if (dbType != null)                      {                          p.DbType = dbType.Value;                      }                      if (add)                      {                          command.Parameters.Add(p);                      }                      param.AttachedParam = p;                  }                }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,DbString,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000)              {                  param.Size = 4000;              }              else              {                  param.Size = Length;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,DbString,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,AddParameter,The following statement contains a magic number: if (Length == -1 && Value != null && Value.Length <= 4000)              {                  param.Size = 4000;              }              else              {                  param.Size = Length;              }
Magic Number,NewRelic.Microsoft.SqlServer.Plugin.Core,DefaultTypeMap,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,FindConstructor,The following statement contains a magic number: foreach (ConstructorInfo ctor in constructors.OrderBy(c => c.IsPublic ? 0 : (c.IsPrivate ? 2 : 1)).ThenBy(c => c.GetParameters().Length))              {                  ParameterInfo[] ctorParameters = ctor.GetParameters();                  if (ctorParameters.Length == 0)                      return ctor;                    if (ctorParameters.Length != types.Length)                      continue;                    int i = 0;                  for (; i < ctorParameters.Length; i++)                  {                      if (!String.Equals(ctorParameters[i].Name' names[i]' StringComparison.OrdinalIgnoreCase))                          break;                      if (types[i] == typeof(byte[]) && ctorParameters[i].ParameterType.FullName == SqlMapper.LinqBinary)                          continue;                      var unboxedType = Nullable.GetUnderlyingType(ctorParameters[i].ParameterType) ?? ctorParameters[i].ParameterType;                      if (unboxedType != types[i]                          && !(unboxedType.IsEnum && Enum.GetUnderlyingType(unboxedType) == types[i])                          && !(unboxedType == typeof(char) && types[i] == typeof(string)))                          break;                  }                    if (i == ctorParameters.Length)                      return ctor;              }
Missing Default,NewRelic.Microsoft.SqlServer.Plugin,SqlEndpointBase,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\SqlEndpointBase.cs,CalculateSqlDmlActivityIncrease,The following switch statement is missing a default case: switch (a.Value.QueryType)                                   {                                       case "Writes":                                           writes += increase;                                           break;                                       case "Reads":                                           reads += increase;                                           break;                                   }
Missing Default,NewRelic.Microsoft.SqlServer.Plugin.Core,DynamicParameters,C:\repos\newrelic-platform_newrelic_microsoft_sqlserver_plugin\src\NewRelic.Microsoft.SqlServer.Plugin\Core\Dapper.cs,Clean,The following switch statement is missing a default case: switch (name[0])                  {                      case '@':                      case ':':                      case '?':                          return name.Substring(1);                  }
