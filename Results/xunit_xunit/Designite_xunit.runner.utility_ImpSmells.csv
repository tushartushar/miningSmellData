Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadString,The method has 110 lines of code.
Complex Method,Xunit,JsonDeserializer,C:\repos\xunit_xunit\src\common\Json.cs,DeserializeInternal,Cyclomatic complexity of the method is 8
Complex Method,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,Cyclomatic complexity of the method is 11
Complex Method,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Deserialize,Cyclomatic complexity of the method is 22
Complex Method,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Serialize,Cyclomatic complexity of the method is 23
Complex Method,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,CanSerializeObject,Cyclomatic complexity of the method is 9
Complex Method,Xunit.Serialization,ArraySerializer,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Deserialize,Cyclomatic complexity of the method is 9
Long Parameter List,Xunit,ExceptionUtility,C:\repos\xunit_xunit\src\common\ExceptionUtility.cs,ConvertExceptionToFailureInformation,The method has 6 parameters. Parameters: ex' parentIndex' exceptionTypes' messages' stackTraces' indices
Long Parameter List,Xunit,ErrorMessage,C:\repos\xunit_xunit\src\messages\ErrorMessage.cs,ErrorMessage,The method has 5 parameters. Parameters: testCases' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestAssemblyCleanupFailure,C:\repos\xunit_xunit\src\messages\TestAssemblyCleanupFailure.cs,TestAssemblyCleanupFailure,The method has 6 parameters. Parameters: testCases' testAssembly' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestAssemblyFinished,C:\repos\xunit_xunit\src\messages\TestAssemblyFinished.cs,TestAssemblyFinished,The method has 6 parameters. Parameters: testCases' testAssembly' executionTime' testsRun' testsFailed' testsSkipped
Long Parameter List,Xunit,TestAssemblyStarting,C:\repos\xunit_xunit\src\messages\TestAssemblyStarting.cs,TestAssemblyStarting,The method has 5 parameters. Parameters: testCases' testAssembly' startTime' testEnvironment' testFrameworkDisplayName
Long Parameter List,Xunit,TestCaseCleanupFailure,C:\repos\xunit_xunit\src\messages\TestCaseCleanupFailure.cs,TestCaseCleanupFailure,The method has 5 parameters. Parameters: testCase' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestCaseFinished,C:\repos\xunit_xunit\src\messages\TestCaseFinished.cs,TestCaseFinished,The method has 5 parameters. Parameters: testCase' executionTime' testsRun' testsFailed' testsSkipped
Long Parameter List,Xunit,TestClassCleanupFailure,C:\repos\xunit_xunit\src\messages\TestClassCleanupFailure.cs,TestClassCleanupFailure,The method has 6 parameters. Parameters: testCases' testClass' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestClassFinished,C:\repos\xunit_xunit\src\messages\TestClassFinished.cs,TestClassFinished,The method has 6 parameters. Parameters: testCases' testClass' executionTime' testsRun' testsFailed' testsSkipped
Long Parameter List,Xunit,TestCleanupFailure,C:\repos\xunit_xunit\src\messages\TestCleanupFailure.cs,TestCleanupFailure,The method has 5 parameters. Parameters: test' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestCollectionCleanupFailure,C:\repos\xunit_xunit\src\messages\TestCollectionCleanupFailure.cs,TestCollectionCleanupFailure,The method has 6 parameters. Parameters: testCases' testCollection' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestCollectionFinished,C:\repos\xunit_xunit\src\messages\TestCollectionFinished.cs,TestCollectionFinished,The method has 6 parameters. Parameters: testCases' testCollection' executionTime' testsRun' testsFailed' testsSkipped
Long Parameter List,Xunit,TestFailed,C:\repos\xunit_xunit\src\messages\TestFailed.cs,TestFailed,The method has 7 parameters. Parameters: test' executionTime' output' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestMethodCleanupFailure,C:\repos\xunit_xunit\src\messages\TestMethodCleanupFailure.cs,TestMethodCleanupFailure,The method has 6 parameters. Parameters: testCases' testMethod' exceptionTypes' messages' stackTraces' exceptionParentIndices
Long Parameter List,Xunit,TestMethodFinished,C:\repos\xunit_xunit\src\messages\TestMethodFinished.cs,TestMethodFinished,The method has 6 parameters. Parameters: testCases' testMethod' executionTime' testsRun' testsFailed' testsSkipped
Long Statement,Xunit,ExceptionUtility,C:\repos\xunit_xunit\src\common\ExceptionUtility.cs,GetStackTrace,The length of the statement  "                    result += $"{Environment.NewLine}----- Inner Stack Trace #{idx + 1} ({GetAt(failureInfo.ExceptionTypes' children[idx])}) -----{Environment.NewLine}{GetStackTrace(failureInfo' children[idx])}"; " is 192.
Long Statement,Xunit,ExceptionUtility,C:\repos\xunit_xunit\src\common\ExceptionUtility.cs,GetStackTrace,The length of the statement  "                result += $"{Environment.NewLine}----- Inner Stack Trace -----{Environment.NewLine}{GetStackTrace(failureInfo' children[0])}"; " is 126.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,Deserialize,The length of the statement  "                throw new ArgumentException($"Could not load type '{pieces[0]}' from serialization value '{serializedValue}'"' nameof(serializedValue)); " is 136.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,Deserialize,The length of the statement  "                throw new ArgumentException("Cannot de-serialize an object that does not implement " + typeof(IXunitSerializable).FullName' nameof(serializedValue)); " is 149.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,Serialize,The length of the statement  "                throw new ArgumentException("Cannot serialize an object that does not implement " + typeof(IXunitSerializable).FullName' nameof(value)); " is 136.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The length of the statement  "                        var genericArgument = assemblyQualifiedTypeName.Substring(firstOpenSquare + 1' lastOpenSquare - firstOpenSquare - 2);  // Strip surrounding [ and ] " is 147.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The length of the statement  "                        var innerTypeNames = SplitAtOuterCommas(genericArgument).Select(x => x.Substring(1' x.Length - 2));  // Strip surrounding [ and ] from each type name " is 149.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The length of the statement  "                        var genericDefinitionName = assemblyQualifiedTypeName.Substring(0' firstOpenSquare) + assemblyQualifiedTypeName.Substring(lastOpenSquare); " is 138.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The length of the statement  "                assemblyName = assemblyName.Substring(0' assemblyName.Length - ExecutionHelper.SubstitutionToken.Length + 1) + ExecutionHelper.PlatformSuffix; " is 142.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The length of the statement  "            var assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.FullName == assemblyName || a.GetName().Name == assemblyName); " is 139.
Long Statement,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetTypeNameForSerialization,The length of the statement  "                if (typeToMap.GetAssembly().GetCustomAttributes().FirstOrDefault(a => a != null && a.GetType().FullName == "Xunit.Sdk.PlatformSpecificAssemblyAttribute") != null) " is 162.
Long Statement,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Deserialize,The length of the statement  "                var styles = serializedValue.EndsWith("Z"' StringComparison.Ordinal) ? DateTimeStyles.AdjustToUniversal : DateTimeStyles.None; " is 126.
Long Statement,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Deserialize,The length of the statement  "                var styles = serializedValue.EndsWith("Z"' StringComparison.Ordinal) ? DateTimeStyles.AdjustToUniversal : DateTimeStyles.None; " is 126.
Long Statement,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,DeserializeSerializable,The length of the statement  "                throw new InvalidOperationException($"Could not de-serialize type '{type.FullName}' because it lacks a parameterless constructor."); " is 132.
Long Statement,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,Serialize,The length of the statement  "                    throw new ArgumentException($"We cannot serialize enum {valueType.FullName}.{value} because it lives in the GAC"' nameof(value)); " is 129.
Complex Conditional,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadNumber,The conditional expression  "(next >= '0' && next <= '9') ||                      next == '.' ||                      next == 'e' ||                      next == 'E'"  is complex.
Complex Conditional,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadLiteral,The conditional expression  "tail != '}' &&                  tail != ']' &&                  tail != ''' &&                  tail != '\n' &&                  tail != -1 &&                  !IsWhitespace(tail)"  is complex.
Empty Catch Block,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The method has an empty catch block.
Magic Number,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadString,The following statement contains a magic number: while (true)              {                  var next = ReadNextChar();                    if (next == -1 || next == '\n')                  {                      throw new JsonDeserializerException(                          JsonDeserializerResource.JSON_OpenString'                          _line' _column);                  }                  else if (escaped)                  {                      if ((next == '"') || (next == '\\') || (next == '/'))                      {                          _buffer.Append((char)next);                      }                      else if (next == 'b')                      {                          // '\b' backspace                          _buffer.Append('\b');                      }                      else if (next == 'f')                      {                          // '\f' form feed                          _buffer.Append('\f');                      }                      else if (next == 'n')                      {                          // '\n' line feed                          _buffer.Append('\n');                      }                      else if (next == 'r')                      {                          // '\r' carriage return                          _buffer.Append('\r');                      }                      else if (next == 't')                      {                          // '\t' tab                          _buffer.Append('\t');                      }                      else if (next == 'u')                      {                          // '\uXXXX' unicode                          var unicodeLine = _line;                          var unicodeColumn = _column;    #if NET35                          _codePointBuffer = new StringBuilder(4);  #else                          _codePointBuffer.Clear();  #endif                          for (int i = 0; i < 4; ++i)                          {                              next = ReadNextChar();                              if (next == -1)                              {                                  throw new JsonDeserializerException(                                      JsonDeserializerResource.JSON_InvalidEnd'                                      unicodeLine'                                      unicodeColumn);                              }                              else                              {                                  _codePointBuffer[i] = (char)next;                              }                          }                            try                          {                              var unicodeValue = int.Parse(_codePointBuffer.ToString()' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                              _buffer.Append((char)unicodeValue);                          }                          catch (FormatException ex)                          {                              throw new JsonDeserializerException(                                  JsonDeserializerResource.Format_InvalidUnicode(_codePointBuffer.ToString())'                                  ex'                                  unicodeLine'                                  unicodeColumn);                          }                      }                      else                      {                          throw new JsonDeserializerException(                              JsonDeserializerResource.Format_InvalidSyntaxNotExpected("character escape"' "\\" + next)'                              _line'                              _column);                      }                        escaped = false;                  }                  else if (next == '\\')                  {                      escaped = true;                  }                  else if (next == '"')                  {                      break;                  }                  else                  {                      _buffer.Append((char)next);                  }              }
Magic Number,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,Deserialize,The following statement contains a magic number: var pieces = serializedValue.Split(new[] { ':' }' 2);
Magic Number,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,Deserialize,The following statement contains a magic number: if (pieces.Length != 2)                  throw new ArgumentException("De-serialized string is in the incorrect format.");
Magic Number,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The following statement contains a magic number: if (firstOpenSquare > 0)              {                  var backtick = assemblyQualifiedTypeName.IndexOf('`');                  if (backtick > 0 && backtick < firstOpenSquare)                  {                      // Run the string looking for the matching closing square brace. Can't just assume the last one                      // is the end' since the type could be trailed by array designators.                      var depth = 1;                      var lastOpenSquare = firstOpenSquare + 1;                      var sawNonArrayDesignator = false;                      for (; depth > 0 && lastOpenSquare < assemblyQualifiedTypeName.Length; ++lastOpenSquare)                      {                          switch (assemblyQualifiedTypeName[lastOpenSquare])                          {                              case '[': ++depth; break;                              case ']': --depth; break;                              case ''': break;                              default: sawNonArrayDesignator = true; break;                          }                      }                        if (sawNonArrayDesignator)                      {                          if (depth != 0)  // Malformed' because we never closed what we opened                              return null;                            var genericArgument = assemblyQualifiedTypeName.Substring(firstOpenSquare + 1' lastOpenSquare - firstOpenSquare - 2);  // Strip surrounding [ and ]                          var innerTypeNames = SplitAtOuterCommas(genericArgument).Select(x => x.Substring(1' x.Length - 2));  // Strip surrounding [ and ] from each type name                          var innerTypes = innerTypeNames.Select(s => GetType(s)).ToArray();                          if (innerTypes.Any(t => t == null))                              return null;                            var genericDefinitionName = assemblyQualifiedTypeName.Substring(0' firstOpenSquare) + assemblyQualifiedTypeName.Substring(lastOpenSquare);                          var genericDefinition = GetType(genericDefinitionName);                          if (genericDefinition == null)                              return null;                            // Push array ranks so we can get down to the actual generic definition                          var arrayRanks = new Stack<int>();                          while (genericDefinition.IsArray)                          {                              arrayRanks.Push(genericDefinition.GetArrayRank());                              genericDefinition = genericDefinition.GetElementType();                          }                            var closedGenericType = genericDefinition.MakeGenericType(innerTypes);                          while (arrayRanks.Count > 0)                          {                              var rank = arrayRanks.Pop();                              closedGenericType = rank > 1 ? closedGenericType.MakeArrayType(rank) : closedGenericType.MakeArrayType();                          }                            return closedGenericType;                      }                  }              }
Magic Number,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,GetType,The following statement contains a magic number: if (firstOpenSquare > 0)              {                  var backtick = assemblyQualifiedTypeName.IndexOf('`');                  if (backtick > 0 && backtick < firstOpenSquare)                  {                      // Run the string looking for the matching closing square brace. Can't just assume the last one                      // is the end' since the type could be trailed by array designators.                      var depth = 1;                      var lastOpenSquare = firstOpenSquare + 1;                      var sawNonArrayDesignator = false;                      for (; depth > 0 && lastOpenSquare < assemblyQualifiedTypeName.Length; ++lastOpenSquare)                      {                          switch (assemblyQualifiedTypeName[lastOpenSquare])                          {                              case '[': ++depth; break;                              case ']': --depth; break;                              case ''': break;                              default: sawNonArrayDesignator = true; break;                          }                      }                        if (sawNonArrayDesignator)                      {                          if (depth != 0)  // Malformed' because we never closed what we opened                              return null;                            var genericArgument = assemblyQualifiedTypeName.Substring(firstOpenSquare + 1' lastOpenSquare - firstOpenSquare - 2);  // Strip surrounding [ and ]                          var innerTypeNames = SplitAtOuterCommas(genericArgument).Select(x => x.Substring(1' x.Length - 2));  // Strip surrounding [ and ] from each type name                          var innerTypes = innerTypeNames.Select(s => GetType(s)).ToArray();                          if (innerTypes.Any(t => t == null))                              return null;                            var genericDefinitionName = assemblyQualifiedTypeName.Substring(0' firstOpenSquare) + assemblyQualifiedTypeName.Substring(lastOpenSquare);                          var genericDefinition = GetType(genericDefinitionName);                          if (genericDefinition == null)                              return null;                            // Push array ranks so we can get down to the actual generic definition                          var arrayRanks = new Stack<int>();                          while (genericDefinition.IsArray)                          {                              arrayRanks.Push(genericDefinition.GetArrayRank());                              genericDefinition = genericDefinition.GetElementType();                          }                            var closedGenericType = genericDefinition.MakeGenericType(innerTypes);                          while (arrayRanks.Count > 0)                          {                              var rank = arrayRanks.Pop();                              closedGenericType = rank > 1 ? closedGenericType.MakeArrayType(rank) : closedGenericType.MakeArrayType();                          }                            return closedGenericType;                      }                  }              }
Magic Number,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,DeserializeTriple,The following statement contains a magic number: var pieces = value.Split(new[] { ':' }' 3);
Magic Number,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,DeserializeTriple,The following statement contains a magic number: if (pieces.Length < 2)                  throw new ArgumentException("Data does not appear to be a valid serialized triple: " + value);
Magic Number,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,DeserializeTriple,The following statement contains a magic number: var deserializedValue = pieces.Length == 3 ? Deserialize(pieceType' pieces[2]) : null;
Magic Number,Xunit.Serialization,XunitSerializationInfo,C:\repos\xunit_xunit\src\common\XunitSerializationInfo.cs,DeserializeTriple,The following statement contains a magic number: var deserializedValue = pieces.Length == 3 ? Deserialize(pieceType' pieces[2]) : null;
Missing Default,Xunit.Sdk,SerializationHelper,C:\repos\xunit_xunit\src\common\SerializationHelper.cs,SplitAtOuterCommas,The following switch statement is missing a default case: switch (value[endIndex])                  {                      case '[': ++depth; break;                      case ']': --depth; break;                      case ''':                          if (depth == 0)                          {                              results.Add(trimWhitespace ?                                  SubstringTrim(value' startIndex' endIndex - startIndex) :                                  value.Substring(startIndex' endIndex - startIndex));                              startIndex = endIndex + 1;                          }                          break;                  }
