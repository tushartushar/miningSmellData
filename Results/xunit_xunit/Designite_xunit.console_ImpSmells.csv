Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadString,The method has 110 lines of code.
Complex Method,Xunit,JsonDeserializer,C:\repos\xunit_xunit\src\common\Json.cs,DeserializeInternal,Cyclomatic complexity of the method is 8
Complex Conditional,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadNumber,The conditional expression  "(next >= '0' && next <= '9') ||                      next == '.' ||                      next == 'e' ||                      next == 'E'"  is complex.
Complex Conditional,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadLiteral,The conditional expression  "tail != '}' &&                  tail != ']' &&                  tail != ''' &&                  tail != '\n' &&                  tail != -1 &&                  !IsWhitespace(tail)"  is complex.
Magic Number,Xunit,JsonBuffer,C:\repos\xunit_xunit\src\common\Json.cs,ReadString,The following statement contains a magic number: while (true)              {                  var next = ReadNextChar();                    if (next == -1 || next == '\n')                  {                      throw new JsonDeserializerException(                          JsonDeserializerResource.JSON_OpenString'                          _line' _column);                  }                  else if (escaped)                  {                      if ((next == '"') || (next == '\\') || (next == '/'))                      {                          _buffer.Append((char)next);                      }                      else if (next == 'b')                      {                          // '\b' backspace                          _buffer.Append('\b');                      }                      else if (next == 'f')                      {                          // '\f' form feed                          _buffer.Append('\f');                      }                      else if (next == 'n')                      {                          // '\n' line feed                          _buffer.Append('\n');                      }                      else if (next == 'r')                      {                          // '\r' carriage return                          _buffer.Append('\r');                      }                      else if (next == 't')                      {                          // '\t' tab                          _buffer.Append('\t');                      }                      else if (next == 'u')                      {                          // '\uXXXX' unicode                          var unicodeLine = _line;                          var unicodeColumn = _column;    #if NET35                          _codePointBuffer = new StringBuilder(4);  #else                          _codePointBuffer.Clear();  #endif                          for (int i = 0; i < 4; ++i)                          {                              next = ReadNextChar();                              if (next == -1)                              {                                  throw new JsonDeserializerException(                                      JsonDeserializerResource.JSON_InvalidEnd'                                      unicodeLine'                                      unicodeColumn);                              }                              else                              {                                  _codePointBuffer[i] = (char)next;                              }                          }                            try                          {                              var unicodeValue = int.Parse(_codePointBuffer.ToString()' NumberStyles.HexNumber' CultureInfo.InvariantCulture);                              _buffer.Append((char)unicodeValue);                          }                          catch (FormatException ex)                          {                              throw new JsonDeserializerException(                                  JsonDeserializerResource.Format_InvalidUnicode(_codePointBuffer.ToString())'                                  ex'                                  unicodeLine'                                  unicodeColumn);                          }                      }                      else                      {                          throw new JsonDeserializerException(                              JsonDeserializerResource.Format_InvalidSyntaxNotExpected("character escape"' "\\" + next)'                              _line'                              _column);                      }                        escaped = false;                  }                  else if (next == '\\')                  {                      escaped = true;                  }                  else if (next == '"')                  {                      break;                  }                  else                  {                      _buffer.Append((char)next);                  }              }
