Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,DeserializeAll,Cyclomatic complexity of the method is 8
Long Parameter List,Sitecore.FakeDb.Serialization,DsDbItem,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\DsDbItem.cs,DsDbItem,The method has 5 parameters. Parameters: serializationFolderName' syncItem' file' includeDescendants' deserializeLinkedTemplate
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,Deserialize,The length of the statement  "      Assert.IsTrue(".item".Equals(file.Extension' StringComparison.InvariantCultureIgnoreCase)' string.Format("File '{0}' is not a .item file"' file.FullName)); " is 155.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,DeserializeAll,The length of the statement  "        var childItemsFolder = new DirectoryInfo(itemFile.Directory.FullName + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(itemFile.Name)); " is 150.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,CopySharedFieldsTo,The length of the statement  "        Assert.IsTrue(ID.IsID(sharedField.FieldID)' string.Format("Shared field id '{0}' is not a valid guid"' sharedField.FieldID)); " is 125.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,CopySharedFieldsTo,The length of the statement  "          dsDbItem.Add(new DbField(sharedField.FieldName' ID.Parse(sharedField.FieldID)) { Value = sharedField.FieldValue' Shared = true }); " is 130.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,ResolveSerializationPath,The length of the statement  "        string.Format("Serialized item '{0}' could not be found in the path '{1}'; please check the path and if the item is serialized correctly"' truePath' itemLocation.FullName)); " is 173.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,GetSerializationFolder,The length of the statement  "      Assert.IsNotNullOrEmpty(serializationFolderName' "Please specify a serialization folder when you instantiate a FakeDb or individual DsDbItem/DsDbTemplate"); " is 156.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,GetSerializationFolder,The length of the statement  "          "Configuration for serialization folder name '{0}' could not be found; please check the <szfolders /> configuration in the app.config"'  " is 135.
Long Statement,Sitecore.FakeDb.Serialization,Deserializer,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Deserializer.cs,GetSerializationFolder,The length of the statement  "          "Path '{0}'' as configured in the app.config could not be found; please check the <szfolders /> configuration in the app.config"'  " is 129.
Long Statement,Sitecore.FakeDb.Serialization.Pipelines,CopyParentId,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Pipelines\CopyParentId.cs,Process,The length of the statement  "      Assert.ArgumentCondition(ID.IsID(syncItem.ParentID)' "ParentID"' "Unable to copy ParentId. Valid identifier expected."); " is 120.
Long Statement,Sitecore.FakeDb.Serialization.Pipelines,DeserializeDescendants,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Pipelines\DeserializeDescendants.cs,Process,The length of the statement  "      var childItemsFolder = new DirectoryInfo(file.Directory.FullName + Path.DirectorySeparatorChar + Path.GetFileNameWithoutExtension(file.Name)); " is 142.
Long Statement,Sitecore.FakeDb.Serialization.Pipelines,DeserializeLinkedTemplate,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Pipelines\DeserializeLinkedTemplate.cs,Process,The length of the statement  "      if (dsDbItem == null || !dsDbItem.DeserializeLinkedTemplate || args.DataStorage.GetFakeItem(dsDbItem.TemplateID) != null) " is 121.
Magic Number,Sitecore.FakeDb.Serialization,SerializedIdToPathResolver,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\SerializedIdToPathDictionary.cs,FindFilePath,The following statement contains a magic number: lock (PathSets)        {          // find or create the set of paths for the serialization folder          SerializedIdToPathSet pathSet;          if (PathSets.ContainsKey(serializationFolderName))          {            pathSet = PathSets[serializationFolderName];          }          else          {            pathSet = new SerializedIdToPathSet();            var serializationFolder = Deserializer.GetSerializationFolder(serializationFolderName);              // Add filepaths for shortened paths            foreach (              var shortenedItemsFolder in ShortenedPathsDictionary.GetLocationsFromLinkFiles(serializationFolder).Values)            {              pathSet.FilePaths.Push(shortenedItemsFolder);            }              // Add filepath for root of regular content            pathSet.FilePaths.Push(serializationFolder.FullName);              PathSets.Add(serializationFolderName' pathSet);          }            // get the individual item if already found          if (pathSet.Paths.ContainsKey(id))          {            return pathSet.Paths[id];          }            while (pathSet.FilePaths.Any())          {            var filePath = pathSet.FilePaths.Pop();            foreach (var subdirectory in Directory.GetDirectories(filePath))            {              pathSet.FilePaths.Push(subdirectory);            }              string foundFile = null;            foreach (var file in Directory.GetFiles(filePath' "*.item"))            {              using (var sr = new StreamReader(file))              {                sr.ReadLine();                sr.ReadLine();                var itemIdStr = sr.ReadLine().Substring(4);                if (!ID.IsID(itemIdStr))                {                  continue;                }                  var itemId = ID.Parse(itemIdStr);                if (pathSet.Paths.ContainsKey(itemId))                {                  throw new DuplicateIdException(itemId' file' pathSet.Paths[itemId]);                }                pathSet.Paths.Add(itemId' file);                if (itemId == id)                {                  foundFile = file;                }              }            }              if (foundFile != null)            {              return foundFile;            }          }            return null;        }
Magic Number,Sitecore.FakeDb.Serialization.Pipelines,LoadTemplateFields,C:\repos\sergeyshushlyapin_Sitecore.FakeDb\src\Sitecore.FakeDb.Serialization\Pipelines\LoadTemplateFields.cs,Process,The following statement contains a magic number: foreach (var descendantItem in template.File          .DeserializeAll(template.SyncItem' Deserializer.GetSerializationFolder(template.SerializationFolderName)' 3)          .Where(i => ID.IsID(i.TemplateID) && ID.Parse(i.TemplateID) == TemplateIDs.TemplateField))        {          var isSharedField = descendantItem.SharedFields.FirstOrDefault(f => "Shared".Equals(f.FieldName));          var typeField = descendantItem.SharedFields.FirstOrDefault(f => "Type".Equals(f.FieldName));            var isShared = isSharedField != null && "1".Equals(isSharedField.FieldValue);            template.Fields.Add(new DbField(descendantItem.Name' ID.Parse(descendantItem.ID))            {              Shared = isShared'              Type = typeField != null ? typeField.FieldValue : string.Empty            });        }
