Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,FindExecutable,Cyclomatic complexity of the method is 11
Complex Method,NMaier.SimpleDlna.Utilities,HttpStream,C:\repos\nmaier_simpleDLNA\util\HttpStream.cs,OpenAt,Cyclomatic complexity of the method is 9
Complex Conditional,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,GetFileDimensions,The conditional expression  "IdentifyFile(file).TryGetValue("VIDEO_WIDTH"' out sw)            && IdentifyFile(file).TryGetValue("VIDEO_HEIGHT"' out sh)            && int.TryParse(sw' out w)            && int.TryParse(sh' out h)            && w > 0 && h > 0"  is complex.
Empty Catch Block,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,ConfigParameters,C:\repos\nmaier_simpleDLNA\util\ConfigParameters.cs,TryGet,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,ConfigParameters,C:\repos\nmaier_simpleDLNA\util\ConfigParameters.cs,TryGet,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,FindExecutable,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,FindExecutable,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,FindExecutable,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,FindExecutable,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,Repository<TInterface>,C:\repos\nmaier_simpleDLNA\util\Repository.cs,BuildRepository,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Utilities,StreamPump,C:\repos\nmaier_simpleDLNA\util\StreamPump.cs,Finish,The method has an empty catch block.
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,AddressToMacResolver,C:\repos\nmaier_simpleDLNA\util\AddressToMacResolver.cs,Resolve,The following statement contains a magic number: try {          if (ip.AddressFamily != AddressFamily.InterNetwork) {            throw new NotSupportedException(              "Addresses other than IPV4 are not supported");          }          MACInfo info;          if (cache.TryGetValue(ip' out info) && info.Fresh > DateTime.Now) {            DebugFormat("From Cache: {0} -> {1}"' ip' info.MAC ?? "<UNKNOWN>");            return info.MAC;          }          var raw = new byte[6];          var length = 6u;  #pragma warning disable 612'618          var addr = (uint)ip.Address;  #pragma warning restore 612'618          string mac = null;            try {            if (SafeNativeMethods.SendARP(addr' 0' raw' ref length) == 0) {              mac = $"{raw[0]:X}:{raw[1]:X}:{raw[2]:X}:{raw[3]:X}:{raw[4]:X}:{raw[5]:X}";            }          }          catch (DllNotFoundException) {            // ignore          }          cache.TryAdd(ip' new MACInfo          {            MAC = mac'            Fresh = DateTime.Now.AddMinutes(mac != null ? 10 : 1)          });          DebugFormat("Retrieved: {0} -> {1}"' ip' mac ?? "<UNKNOWN>");          return mac;        }        catch (Exception ex) {          Warn($"Failed to resolve {ip} to MAC"' ex);          return null;        }
Magic Number,NMaier.SimpleDlna.Utilities,ConfigParameters,C:\repos\nmaier_simpleDLNA\util\ConfigParameters.cs,ConfigParameters,The following statement contains a magic number: foreach (var valuesplit in parameters.Split(''').Select(p => p.Split(new[] {'='}' 2))) {          Add(valuesplit[0]' valuesplit.Length == 2 ? valuesplit[1] : null);        }
Magic Number,NMaier.SimpleDlna.Utilities,ConfigParameters,C:\repos\nmaier_simpleDLNA\util\ConfigParameters.cs,ConfigParameters,The following statement contains a magic number: foreach (var valuesplit in parameters.Split(''').Select(p => p.Split(new[] {'='}' 2))) {          Add(valuesplit[0]' valuesplit.Length == 2 ? valuesplit[1] : null);        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,IdentifyInternalFromProcess,The following statement contains a magic number: using (var p = new Process()) {          var sti = p.StartInfo;  #if !DEBUG          sti.CreateNoWindow = true;  #endif          sti.UseShellExecute = false;          sti.FileName = FFmpegExecutable;          sti.Arguments = $"-i \"{file.FullName}\"";          sti.LoadUserProfile = false;          sti.RedirectStandardError = true;          p.Start();          IDictionary<string' string> rv = new Dictionary<string' string>();            using (var reader = new StreamReader(StreamManager.GetStream())) {            using (var pump = new StreamPump(              p.StandardError.BaseStream' reader.BaseStream' 4096)) {              pump.Pump(null);              if (!p.WaitForExit(3000)) {                throw new NotSupportedException("ffmpeg timed out");              }              if (!pump.Wait(1000)) {                throw new NotSupportedException("ffmpeg pump timed out");              }              reader.BaseStream.Seek(0' SeekOrigin.Begin);                var output = reader.ReadToEnd();              var match = regDuration.Match(output);              if (match.Success) {                int h' m' s;                if (int.TryParse(match.Groups[1].Value' out h) &&                    int.TryParse(match.Groups[2].Value' out m) &&                    int.TryParse(match.Groups[3].Value' out s)) {                  int ms;                  if (match.Groups.Count < 5 ||                      !int.TryParse(match.Groups[4].Value' out ms)) {                    ms = 0;                  }                  var ts = new TimeSpan(0' h' m' s' ms * 10);                  var tss = ts.TotalSeconds.ToString(                    CultureInfo.InvariantCulture);                  rv.Add("LENGTH"' tss);                }              }              match = regDimensions.Match(output);              if (match.Success) {                int w' h;                if (int.TryParse(match.Groups[1].Value' out w) &&                    int.TryParse(match.Groups[2].Value' out h)) {                  rv.Add("VIDEO_WIDTH"' w.ToString());                  rv.Add("VIDEO_HEIGHT"' h.ToString());                }              }            }          }          if (rv.Count == 0) {            throw new NotSupportedException("File not supported");          }          return rv;        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,GetSubtitleSubrip,The following statement contains a magic number: try {          using (var p = new Process()) {            var sti = p.StartInfo;  #if !DEBUG            sti.CreateNoWindow = true;  #endif            sti.UseShellExecute = false;            sti.FileName = FFmpegExecutable;            sti.Arguments = $"-i \"{file.FullName}\" -map s:0 -f srt pipe:";            sti.LoadUserProfile = false;            sti.RedirectStandardOutput = true;            p.Start();              var lastPosition = 0L;            using (var reader = new StreamReader(StreamManager.GetStream())) {              using (var pump = new StreamPump(                p.StandardOutput.BaseStream' reader.BaseStream' 100)) {                pump.Pump(null);                while (!p.WaitForExit(20000)) {                  if (lastPosition != reader.BaseStream.Position) {                    lastPosition = reader.BaseStream.Position;                    continue;                  }                  p.Kill();                  throw new NotSupportedException("ffmpeg timed out");                }                if (!pump.Wait(2000)) {                  throw new NotSupportedException("ffmpeg pump timed out");                }                reader.BaseStream.Seek(0' SeekOrigin.Begin);                  var rv = string.Empty;                string line;                while ((line = reader.ReadLine()) != null) {                  rv += regAssStrip.Replace(line.Trim()' string.Empty) + "\n";                }                if (!string.IsNullOrWhiteSpace(rv)) {                  return rv;                }              }            }          }        }        catch (Exception ex) {          throw new NotSupportedException(ex.Message' ex);        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,GetSubtitleSubrip,The following statement contains a magic number: try {          using (var p = new Process()) {            var sti = p.StartInfo;  #if !DEBUG            sti.CreateNoWindow = true;  #endif            sti.UseShellExecute = false;            sti.FileName = FFmpegExecutable;            sti.Arguments = $"-i \"{file.FullName}\" -map s:0 -f srt pipe:";            sti.LoadUserProfile = false;            sti.RedirectStandardOutput = true;            p.Start();              var lastPosition = 0L;            using (var reader = new StreamReader(StreamManager.GetStream())) {              using (var pump = new StreamPump(                p.StandardOutput.BaseStream' reader.BaseStream' 100)) {                pump.Pump(null);                while (!p.WaitForExit(20000)) {                  if (lastPosition != reader.BaseStream.Position) {                    lastPosition = reader.BaseStream.Position;                    continue;                  }                  p.Kill();                  throw new NotSupportedException("ffmpeg timed out");                }                if (!pump.Wait(2000)) {                  throw new NotSupportedException("ffmpeg pump timed out");                }                reader.BaseStream.Seek(0' SeekOrigin.Begin);                  var rv = string.Empty;                string line;                while ((line = reader.ReadLine()) != null) {                  rv += regAssStrip.Replace(line.Trim()' string.Empty) + "\n";                }                if (!string.IsNullOrWhiteSpace(rv)) {                  return rv;                }              }            }          }        }        catch (Exception ex) {          throw new NotSupportedException(ex.Message' ex);        }
Magic Number,NMaier.SimpleDlna.Utilities,FFmpeg,C:\repos\nmaier_simpleDLNA\util\FFmpeg.cs,GetSubtitleSubrip,The following statement contains a magic number: try {          using (var p = new Process()) {            var sti = p.StartInfo;  #if !DEBUG            sti.CreateNoWindow = true;  #endif            sti.UseShellExecute = false;            sti.FileName = FFmpegExecutable;            sti.Arguments = $"-i \"{file.FullName}\" -map s:0 -f srt pipe:";            sti.LoadUserProfile = false;            sti.RedirectStandardOutput = true;            p.Start();              var lastPosition = 0L;            using (var reader = new StreamReader(StreamManager.GetStream())) {              using (var pump = new StreamPump(                p.StandardOutput.BaseStream' reader.BaseStream' 100)) {                pump.Pump(null);                while (!p.WaitForExit(20000)) {                  if (lastPosition != reader.BaseStream.Position) {                    lastPosition = reader.BaseStream.Position;                    continue;                  }                  p.Kill();                  throw new NotSupportedException("ffmpeg timed out");                }                if (!pump.Wait(2000)) {                  throw new NotSupportedException("ffmpeg pump timed out");                }                reader.BaseStream.Seek(0' SeekOrigin.Begin);                  var rv = string.Empty;                string line;                while ((line = reader.ReadLine()) != null) {                  rv += regAssStrip.Replace(line.Trim()' string.Empty) + "\n";                }                if (!string.IsNullOrWhiteSpace(rv)) {                  return rv;                }              }            }          }        }        catch (Exception ex) {          throw new NotSupportedException(ex.Message' ex);        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: if (size < 900) {          return $"{size} B";        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: var ds = size / 1024.0;
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: if (ds < 900) {          return $"{ds:F2} KB";        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: ds /= 1024.0;
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: if (ds < 900) {          return $"{ds:F2} MB";        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: ds /= 1024.0;
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: if (ds < 900) {          return $"{ds:F3} GB";        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: ds /= 1024.0;
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: if (ds < 900) {          return $"{ds:F3} TB";        }
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,FormatFileSize,The following statement contains a magic number: ds /= 1024.0;
Magic Number,NMaier.SimpleDlna.Utilities,Formatting,C:\repos\nmaier_simpleDLNA\util\Formatting.cs,GetSystemName,The following statement contains a magic number: var buf = Marshal.AllocHGlobal(8192);
Magic Number,NMaier.SimpleDlna.Utilities,HttpStream,C:\repos\nmaier_simpleDLNA\util\HttpStream.cs,GenerateUserAgent,The following statement contains a magic number: return string.Format(          "sdlna/{4}.{5} ({0}{1} {2}.{3}) like curl/7.3 like wget/1.0"'          pstring'          IntPtr.Size * 8'          os.Version.Major'          os.Version.Minor'          Assembly.GetExecutingAssembly().GetName().Version.Major'          Assembly.GetExecutingAssembly().GetName().Version.Minor          );
Magic Number,NMaier.SimpleDlna.Utilities,HttpStream,C:\repos\nmaier_simpleDLNA\util\HttpStream.cs,OpenAt,The following statement contains a magic number: request.Timeout = TIMEOUT * 1000;
Magic Number,NMaier.SimpleDlna.Utilities,LeastRecentlyUsedDictionary<TKey;TValue>,C:\repos\nmaier_simpleDLNA\util\LeastRecentlyUsedDictionary.cs,LeastRecentlyUsedDictionary,The following statement contains a magic number: toDrop = Math.Min(10' (uint)(capacity * 0.07));
Magic Number,NMaier.SimpleDlna.Utilities,LeastRecentlyUsedDictionary<TKey;TValue>,C:\repos\nmaier_simpleDLNA\util\LeastRecentlyUsedDictionary.cs,LeastRecentlyUsedDictionary,The following statement contains a magic number: toDrop = Math.Min(10' (uint)(capacity * 0.07));
Magic Number,NMaier.SimpleDlna.Utilities,Repository<TInterface>,C:\repos\nmaier_simpleDLNA\util\Repository.cs,Lookup,The following statement contains a magic number: var argsplit = name.Split(new[] {':'}' 2);
Missing Default,NMaier.SimpleDlna.Utilities,HttpStream,C:\repos\nmaier_simpleDLNA\util\HttpStream.cs,Seek,The following switch statement is missing a default case: switch (origin) {        case SeekOrigin.Begin:          np = offset;          break;        case SeekOrigin.Current:          np = position + offset;          break;        case SeekOrigin.End:          np = Length + np;          break;        }
