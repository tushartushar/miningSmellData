Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,ProcessHtmlRequest,Cyclomatic complexity of the method is 11
Complex Method,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,AddGeneralProperties,Cyclomatic complexity of the method is 11
Complex Method,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,BrowseFolder_AddItems,Cyclomatic complexity of the method is 8
Complex Method,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleRequest,Cyclomatic complexity of the method is 16
Complex Method,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ReadCallback,Cyclomatic complexity of the method is 10
Complex Method,NMaier.SimpleDlna.Server.Views,ByTitleView,C:\repos\nmaier_simpleDLNA\server\Views\ByTitleView.cs,PartitionChildren,Cyclomatic complexity of the method is 8
Complex Method,NMaier.SimpleDlna.Server.Views,CascadedView,C:\repos\nmaier_simpleDLNA\server\Views\CascadedView.cs,Transform,Cyclomatic complexity of the method is 8
Complex Method,NMaier.SimpleDlna.Server.Views,DimensionView,C:\repos\nmaier_simpleDLNA\server\Views\DimensionView.cs,Allowed,Cyclomatic complexity of the method is 8
Complex Method,NMaier.SimpleDlna.Server.Views,FlattenView,C:\repos\nmaier_simpleDLNA\server\Views\FlattenView.cs,TransformInternal,Cyclomatic complexity of the method is 8
Long Parameter List,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,BrowseFolder_AddItems,The method has 5 parameters. Parameters: request' result' root' start' requested
Long Parameter List,NMaier.SimpleDlna.Server.Views,MusicView,C:\repos\nmaier_simpleDLNA\server\Views\MusicView.cs,SortFolder,The method has 5 parameters. Parameters: folder' artists' performers' albums' genres
Long Statement,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,AddCover,The length of the statement  "                         $"http-get:*:image/jpeg:DLNA.ORG_PN=JPEG_TN;DLNA.ORG_OP=01;DLNA.ORG_CI=1;DLNA.ORG_FLAGS={DlnaMaps.DefaultInteractive}"); " is 120.
Long Statement,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,ProcessSoapRequest,The length of the statement  "          "<detail><UPnPError xmlns=\"urn:schemas-upnp-org:control-1-0\"><errorCode>401</errorCode><errorDescription>Invalid Action</errorDescription></UPnPError></detail>"; " is 163.
Long Statement,NMaier.SimpleDlna.Server,HtmlTools,C:\repos\nmaier_simpleDLNA\server\Types\HtmlTools.cs,CreateHtmlArticle,The length of the statement  "                                     $"SimpleDLNA Media Server: sdlna/{Assembly.GetExecutingAssembly().GetName().Version.Major}.{Assembly.GetExecutingAssembly().GetName().Version.Minor}")); " is 152.
Complex Conditional,NMaier.SimpleDlna.Server.Comparers,FileSizeComparer,C:\repos\nmaier_simpleDLNA\server\Comparers\FileSizeComparer.cs,Compare,The conditional expression  "xm == null || ym == null || !xm.InfoSize.HasValue || !ym.InfoSize.HasValue"  is complex.
Complex Conditional,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ProcessRanges,The conditional expression  "m.Groups.Count != 3 ||              !long.TryParse(m.Groups[2].Value' out end) ||              end <= start || end >= totalLength"  is complex.
Complex Conditional,NMaier.SimpleDlna.Server.Views,DimensionView,C:\repos\nmaier_simpleDLNA\server\Views\DimensionView.cs,Transform,The conditional expression  "!min.HasValue && !max.HasValue && !minWidth.HasValue &&            !maxWidth.HasValue && !minHeight.HasValue && !maxHeight.HasValue"  is complex.
Empty Catch Block,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,AddCover,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,AddVideoProperties,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,GetContentLengthFromStream,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,Close,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,Close,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,HttpServer,C:\repos\nmaier_simpleDLNA\server\Http\HttpServer.cs,Accept,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,HttpServer,C:\repos\nmaier_simpleDLNA\server\Http\HttpServer.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,ItemResponse,C:\repos\nmaier_simpleDLNA\server\Responses\ItemResponse.cs,ItemResponse,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,ItemResponse,C:\repos\nmaier_simpleDLNA\server\Responses\ItemResponse.cs,ItemResponse,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server,Subtitle,C:\repos\nmaier_simpleDLNA\server\Types\Subtitle.cs,Load,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server.Ssdp,Datagram,C:\repos\nmaier_simpleDLNA\server\Ssdp\Datagram.cs,Send,The method has an empty catch block.
Empty Catch Block,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,Receive,The method has an empty catch block.
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleBrowse,The following statement contains a magic number: var requested = 20;
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleBrowse,The following statement contains a magic number: try {          if (int.TryParse(sparams["RequestedCount"]' out requested) &&              requested <= 0) {            requested = 20;          }          if (int.TryParse(sparams["StartingIndex"]' out start) && start <= 0) {            start = 0;          }        }        catch (Exception ex) {          Debug("Not all params provided"' ex);        }
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleXSetBookmark,The following statement contains a magic number: if (item != null) {          var newbookmark = long.Parse(sparams["PosSecond"]);          if (newbookmark > 30) {            newbookmark -= 5;          }          if (newbookmark > 30 || !item.Bookmark.HasValue ||              item.Bookmark.Value < 60) {            item.Bookmark = newbookmark;            soapCache.Clear();          }        }
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleXSetBookmark,The following statement contains a magic number: if (item != null) {          var newbookmark = long.Parse(sparams["PosSecond"]);          if (newbookmark > 30) {            newbookmark -= 5;          }          if (newbookmark > 30 || !item.Bookmark.HasValue ||              item.Bookmark.Value < 60) {            item.Bookmark = newbookmark;            soapCache.Clear();          }        }
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleXSetBookmark,The following statement contains a magic number: if (item != null) {          var newbookmark = long.Parse(sparams["PosSecond"]);          if (newbookmark > 30) {            newbookmark -= 5;          }          if (newbookmark > 30 || !item.Bookmark.HasValue ||              item.Bookmark.Value < 60) {            item.Bookmark = newbookmark;            soapCache.Clear();          }        }
Magic Number,NMaier.SimpleDlna.Server,MediaMount,C:\repos\nmaier_simpleDLNA\server\Handlers\MediaMount_HTML.cs,HandleXSetBookmark,The following statement contains a magic number: if (item != null) {          var newbookmark = long.Parse(sparams["PosSecond"]);          if (newbookmark > 30) {            newbookmark -= 5;          }          if (newbookmark > 30 || !item.Bookmark.HasValue ||              item.Bookmark.Value < 60) {            item.Bookmark = newbookmark;            soapCache.Clear();          }        }
Magic Number,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ProcessRanges,The following statement contains a magic number: try {          string ar;          if (status != HttpCode.Ok && contentLength > 0 ||              !Headers.TryGetValue("Range"' out ar)) {            return responseBody;          }          var m = bytes.Match(ar);          if (!m.Success) {            throw new InvalidDataException("Not parsed!");          }          var totalLength = contentLength;          long start;          long end;          if (!long.TryParse(m.Groups[1].Value' out start) || start < 0) {            throw new InvalidDataException("Not parsed");          }          if (m.Groups.Count != 3 ||              !long.TryParse(m.Groups[2].Value' out end) ||              end <= start || end >= totalLength) {            end = totalLength - 1;          }          if (start >= end) {            responseBody.Close();            rangedResponse = error416.HandleRequest(this);            return rangedResponse.Body;          }            if (start > 0) {            responseBody.Seek(start' SeekOrigin.Current);          }          contentLength = end - start + 1;          rangedResponse.Headers["Content-Length"] = contentLength.ToString();          rangedResponse.Headers.Add(            "Content-Range"'            $"bytes {start}-{end}/{totalLength}"            );          status = HttpCode.Partial;        }        catch (Exception ex) {          Warn($"{this} - Failed to process range request!"' ex);        }
Magic Number,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ProcessRanges,The following statement contains a magic number: try {          string ar;          if (status != HttpCode.Ok && contentLength > 0 ||              !Headers.TryGetValue("Range"' out ar)) {            return responseBody;          }          var m = bytes.Match(ar);          if (!m.Success) {            throw new InvalidDataException("Not parsed!");          }          var totalLength = contentLength;          long start;          long end;          if (!long.TryParse(m.Groups[1].Value' out start) || start < 0) {            throw new InvalidDataException("Not parsed");          }          if (m.Groups.Count != 3 ||              !long.TryParse(m.Groups[2].Value' out end) ||              end <= start || end >= totalLength) {            end = totalLength - 1;          }          if (start >= end) {            responseBody.Close();            rangedResponse = error416.HandleRequest(this);            return rangedResponse.Body;          }            if (start > 0) {            responseBody.Seek(start' SeekOrigin.Current);          }          contentLength = end - start + 1;          rangedResponse.Headers["Content-Length"] = contentLength.ToString();          rangedResponse.Headers.Add(            "Content-Range"'            $"bytes {start}-{end}/{totalLength}"            );          status = HttpCode.Partial;        }        catch (Exception ex) {          Warn($"{this} - Failed to process range request!"' ex);        }
Magic Number,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ReadCallback,The following statement contains a magic number: try {          if (!hasHeaders) {            readStream.Seek(0' SeekOrigin.Begin);            var reader = new StreamReader(readStream);            for (var line = reader.ReadLine();              line != null;              line = reader.ReadLine()) {              line = line.Trim();              if (string.IsNullOrEmpty(line)) {                hasHeaders = true;                readStream = StreamManager.GetStream();                if (Headers.ContainsKey("content-length") &&                    uint.TryParse(Headers["content-length"]' out bodyBytes)) {                  if (bodyBytes > 1 << 20) {                    throw new IOException("Body too long");                  }                  var ascii = Encoding.ASCII.GetBytes(reader.ReadToEnd());                  readStream.Write(ascii' 0' ascii.Length);                  DebugFormat("Must read body bytes {0}"' bodyBytes);                }                break;              }              if (Method == null) {                var parts = line.Split(new[] {' '}' 3);                Method = parts[0].Trim().ToUpperInvariant();                Path = parts[1].Trim();                DebugFormat("{0} - {1} request for {2}"' this' Method' Path);              }              else {                var parts = line.Split(new[] {':'}' 2);                Headers[parts[0]] = Uri.UnescapeDataString(parts[1]).Trim();              }            }          }          if (bodyBytes != 0 && bodyBytes > readStream.Length) {            DebugFormat(              "{0} - Bytes to go {1}"' this' bodyBytes - readStream.Length);            Read();            return;          }          using (readStream) {            Body = Encoding.UTF8.GetString(readStream.ToArray());            Debug(Body);            Debug(Headers);          }          SetupResponse();        }        catch (Exception ex) {          Warn($"{this} - Failed to process request"' ex);          response = error500.HandleRequest(this);          SendResponse();        }
Magic Number,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ReadCallback,The following statement contains a magic number: try {          if (!hasHeaders) {            readStream.Seek(0' SeekOrigin.Begin);            var reader = new StreamReader(readStream);            for (var line = reader.ReadLine();              line != null;              line = reader.ReadLine()) {              line = line.Trim();              if (string.IsNullOrEmpty(line)) {                hasHeaders = true;                readStream = StreamManager.GetStream();                if (Headers.ContainsKey("content-length") &&                    uint.TryParse(Headers["content-length"]' out bodyBytes)) {                  if (bodyBytes > 1 << 20) {                    throw new IOException("Body too long");                  }                  var ascii = Encoding.ASCII.GetBytes(reader.ReadToEnd());                  readStream.Write(ascii' 0' ascii.Length);                  DebugFormat("Must read body bytes {0}"' bodyBytes);                }                break;              }              if (Method == null) {                var parts = line.Split(new[] {' '}' 3);                Method = parts[0].Trim().ToUpperInvariant();                Path = parts[1].Trim();                DebugFormat("{0} - {1} request for {2}"' this' Method' Path);              }              else {                var parts = line.Split(new[] {':'}' 2);                Headers[parts[0]] = Uri.UnescapeDataString(parts[1]).Trim();              }            }          }          if (bodyBytes != 0 && bodyBytes > readStream.Length) {            DebugFormat(              "{0} - Bytes to go {1}"' this' bodyBytes - readStream.Length);            Read();            return;          }          using (readStream) {            Body = Encoding.UTF8.GetString(readStream.ToArray());            Debug(Body);            Debug(Headers);          }          SetupResponse();        }        catch (Exception ex) {          Warn($"{this} - Failed to process request"' ex);          response = error500.HandleRequest(this);          SendResponse();        }
Magic Number,NMaier.SimpleDlna.Server,HttpClient,C:\repos\nmaier_simpleDLNA\server\Http\HttpClient.cs,ReadCallback,The following statement contains a magic number: try {          if (!hasHeaders) {            readStream.Seek(0' SeekOrigin.Begin);            var reader = new StreamReader(readStream);            for (var line = reader.ReadLine();              line != null;              line = reader.ReadLine()) {              line = line.Trim();              if (string.IsNullOrEmpty(line)) {                hasHeaders = true;                readStream = StreamManager.GetStream();                if (Headers.ContainsKey("content-length") &&                    uint.TryParse(Headers["content-length"]' out bodyBytes)) {                  if (bodyBytes > 1 << 20) {                    throw new IOException("Body too long");                  }                  var ascii = Encoding.ASCII.GetBytes(reader.ReadToEnd());                  readStream.Write(ascii' 0' ascii.Length);                  DebugFormat("Must read body bytes {0}"' bodyBytes);                }                break;              }              if (Method == null) {                var parts = line.Split(new[] {' '}' 3);                Method = parts[0].Trim().ToUpperInvariant();                Path = parts[1].Trim();                DebugFormat("{0} - {1} request for {2}"' this' Method' Path);              }              else {                var parts = line.Split(new[] {':'}' 2);                Headers[parts[0]] = Uri.UnescapeDataString(parts[1]).Trim();              }            }          }          if (bodyBytes != 0 && bodyBytes > readStream.Length) {            DebugFormat(              "{0} - Bytes to go {1}"' this' bodyBytes - readStream.Length);            Read();            return;          }          using (readStream) {            Body = Encoding.UTF8.GetString(readStream.ToArray());            Debug(Body);            Debug(Headers);          }          SetupResponse();        }        catch (Exception ex) {          Warn($"{this} - Failed to process request"' ex);          response = error500.HandleRequest(this);          SendResponse();        }
Magic Number,NMaier.SimpleDlna.Server,HttpServer,C:\repos\nmaier_simpleDLNA\server\Http\HttpServer.cs,HttpServer,The following statement contains a magic number: listener.Server.Ttl = 32;
Magic Number,NMaier.SimpleDlna.Server,HttpServer,C:\repos\nmaier_simpleDLNA\server\Http\HttpServer.cs,GenerateServerSignature,The following statement contains a magic number: var bitness = IntPtr.Size * 8;
Magic Number,NMaier.SimpleDlna.Server,Identifiers,C:\repos\nmaier_simpleDLNA\server\Types\Identifiers.cs,RegisterPath,The following statement contains a magic number: if (!paths.ContainsKey(path)) {          while (ids.ContainsKey(id = idGen.Next(1000' int.MaxValue).ToString("X8"))) {          }          paths[path] = id;        }        else {          id = paths[path];        }
Magic Number,NMaier.SimpleDlna.Server.Ssdp,Datagram,C:\repos\nmaier_simpleDLNA\server\Ssdp\Datagram.cs,Send,The following statement contains a magic number: try {          var client = new UdpClient();          client.Client.Bind(new IPEndPoint(LocalAddress' 0));          client.Ttl = 10;          client.Client.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 10);          client.BeginSend(msg' msg.Length' EndPoint' result =>          {            try {              client.EndSend(result);            }            catch (Exception ex) {              Debug(ex);            }            finally {              try {                client.Close();              }              catch (Exception) {                // ignored              }            }          }' null);        }        catch (Exception ex) {          Error(ex);        }
Magic Number,NMaier.SimpleDlna.Server.Ssdp,Datagram,C:\repos\nmaier_simpleDLNA\server\Ssdp\Datagram.cs,Send,The following statement contains a magic number: try {          var client = new UdpClient();          client.Client.Bind(new IPEndPoint(LocalAddress' 0));          client.Ttl = 10;          client.Client.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 10);          client.BeginSend(msg' msg.Length' EndPoint' result =>          {            try {              client.EndSend(result);            }            catch (Exception ex) {              Debug(ex);            }            finally {              try {                client.Close();              }              catch (Exception) {                // ignored              }            }          }' null);        }        catch (Exception ex) {          Error(ex);        }
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,SsdpHandler,The following statement contains a magic number: client.JoinMulticastGroup(ssdpIP' 10);
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,ProcessQueue,The following statement contains a magic number: queueTimer.Interval = random.Next(25' running ? 75 : 50);
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,ProcessQueue,The following statement contains a magic number: queueTimer.Interval = random.Next(25' running ? 75 : 50);
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,ProcessQueue,The following statement contains a magic number: queueTimer.Interval = random.Next(25' running ? 75 : 50);
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,ReceiveCallback,The following statement contains a magic number: try {          var endpoint = new IPEndPoint(IPAddress.None' SSDP_PORT);          var received = client.EndReceive(result' ref endpoint);          if (received == null) {            throw new IOException("Didn't receive anything");          }          if (received.Length == 0) {            throw new IOException("Didn't receive any bytes");          }  #if DUMP_ALL_SSDP          DebugFormat("{0} - SSDP Received a datagram"' endpoint);  #endif          using (var reader = new StreamReader(            new MemoryStream(received)' Encoding.ASCII)) {            var proto = reader.ReadLine();            if (proto == null) {              throw new IOException("Couldn't read protocol line");            }            proto = proto.Trim();            if (string.IsNullOrEmpty(proto)) {              throw new IOException("Invalid protocol line");            }            var method = proto.Split(new[] {' '}' 2)[0];            var headers = new Headers();            for (var line = reader.ReadLine();              line != null;              line = reader.ReadLine()) {              line = line.Trim();              if (string.IsNullOrEmpty(line)) {                break;              }              var parts = line.Split(new[] {':'}' 2);              headers[parts[0]] = parts[1].Trim();            }  #if DUMP_ALL_SSDP            DebugFormat("{0} - Datagram method: {1}"' endpoint' method);            Debug(headers);  #endif            if (method == "M-SEARCH") {              RespondToSearch(endpoint' headers["st"]);            }          }        }        catch (IOException ex) {          Debug("Failed to read SSDP message"' ex);        }        catch (Exception ex) {          Warn("Failed to read SSDP message"' ex);        }
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,ReceiveCallback,The following statement contains a magic number: try {          var endpoint = new IPEndPoint(IPAddress.None' SSDP_PORT);          var received = client.EndReceive(result' ref endpoint);          if (received == null) {            throw new IOException("Didn't receive anything");          }          if (received.Length == 0) {            throw new IOException("Didn't receive any bytes");          }  #if DUMP_ALL_SSDP          DebugFormat("{0} - SSDP Received a datagram"' endpoint);  #endif          using (var reader = new StreamReader(            new MemoryStream(received)' Encoding.ASCII)) {            var proto = reader.ReadLine();            if (proto == null) {              throw new IOException("Couldn't read protocol line");            }            proto = proto.Trim();            if (string.IsNullOrEmpty(proto)) {              throw new IOException("Invalid protocol line");            }            var method = proto.Split(new[] {' '}' 2)[0];            var headers = new Headers();            for (var line = reader.ReadLine();              line != null;              line = reader.ReadLine()) {              line = line.Trim();              if (string.IsNullOrEmpty(line)) {                break;              }              var parts = line.Split(new[] {':'}' 2);              headers[parts[0]] = parts[1].Trim();            }  #if DUMP_ALL_SSDP            DebugFormat("{0} - Datagram method: {1}"' endpoint' method);            Debug(headers);  #endif            if (method == "M-SEARCH") {              RespondToSearch(endpoint' headers["st"]);            }          }        }        catch (IOException ex) {          Debug("Failed to read SSDP message"' ex);        }        catch (Exception ex) {          Warn("Failed to read SSDP message"' ex);        }
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,Tick,The following statement contains a magic number: notificationTimer.Interval = random.Next(60000' 120000);
Magic Number,NMaier.SimpleDlna.Server.Ssdp,SsdpHandler,C:\repos\nmaier_simpleDLNA\server\Ssdp\SsdpHandler.cs,Tick,The following statement contains a magic number: notificationTimer.Interval = random.Next(60000' 120000);
Magic Number,NMaier.SimpleDlna.Server.Views,ByTitleView,C:\repos\nmaier_simpleDLNA\server\Views\ByTitleView.cs,PartitionChildren,The following statement contains a magic number: for (var wordcount = startfrom;;) {          var curwc = wordcount;          var groups = from i in folder.ChildItems.ToList()                       let prefix = prefixer.GetWordPrefix(GetTitle(i)' curwc)                       where !string.IsNullOrWhiteSpace(prefix)                       group i by prefix.ToLowerInvariant()                       into g                       let gcount = g.LongCount()                       where gcount > 3                       orderby g.LongCount() descending                       select g;          var longest = groups.FirstOrDefault();          if (longest == null) {            if (wordcount++ > 5) {              return;            }            continue;          }          var newfolder = new VirtualFolder(folder' longest.Key);          foreach (var item in longest) {            folder.RemoveResource(item);            newfolder.AddResource(item);          }          if (newfolder.ChildCount > 100) {            PartitionChildren(newfolder' prefixer' wordcount + 1);          }          if (newfolder.ChildFolders.LongCount() == 1) {            foreach (var f in newfolder.ChildFolders.ToList()) {              folder.AdoptFolder(f);            }          }          else {            folder.AdoptFolder(newfolder);          }        }
Magic Number,NMaier.SimpleDlna.Server.Views,ByTitleView,C:\repos\nmaier_simpleDLNA\server\Views\ByTitleView.cs,PartitionChildren,The following statement contains a magic number: for (var wordcount = startfrom;;) {          var curwc = wordcount;          var groups = from i in folder.ChildItems.ToList()                       let prefix = prefixer.GetWordPrefix(GetTitle(i)' curwc)                       where !string.IsNullOrWhiteSpace(prefix)                       group i by prefix.ToLowerInvariant()                       into g                       let gcount = g.LongCount()                       where gcount > 3                       orderby g.LongCount() descending                       select g;          var longest = groups.FirstOrDefault();          if (longest == null) {            if (wordcount++ > 5) {              return;            }            continue;          }          var newfolder = new VirtualFolder(folder' longest.Key);          foreach (var item in longest) {            folder.RemoveResource(item);            newfolder.AddResource(item);          }          if (newfolder.ChildCount > 100) {            PartitionChildren(newfolder' prefixer' wordcount + 1);          }          if (newfolder.ChildFolders.LongCount() == 1) {            foreach (var f in newfolder.ChildFolders.ToList()) {              folder.AdoptFolder(f);            }          }          else {            folder.AdoptFolder(newfolder);          }        }
Magic Number,NMaier.SimpleDlna.Server.Views,ByTitleView,C:\repos\nmaier_simpleDLNA\server\Views\ByTitleView.cs,PartitionChildren,The following statement contains a magic number: for (var wordcount = startfrom;;) {          var curwc = wordcount;          var groups = from i in folder.ChildItems.ToList()                       let prefix = prefixer.GetWordPrefix(GetTitle(i)' curwc)                       where !string.IsNullOrWhiteSpace(prefix)                       group i by prefix.ToLowerInvariant()                       into g                       let gcount = g.LongCount()                       where gcount > 3                       orderby g.LongCount() descending                       select g;          var longest = groups.FirstOrDefault();          if (longest == null) {            if (wordcount++ > 5) {              return;            }            continue;          }          var newfolder = new VirtualFolder(folder' longest.Key);          foreach (var item in longest) {            folder.RemoveResource(item);            newfolder.AddResource(item);          }          if (newfolder.ChildCount > 100) {            PartitionChildren(newfolder' prefixer' wordcount + 1);          }          if (newfolder.ChildFolders.LongCount() == 1) {            foreach (var f in newfolder.ChildFolders.ToList()) {              folder.AdoptFolder(f);            }          }          else {            folder.AdoptFolder(newfolder);          }        }
Magic Number,NMaier.SimpleDlna.Server.Views,ByTitleView,C:\repos\nmaier_simpleDLNA\server\Views\ByTitleView.cs,Transform,The following statement contains a magic number: foreach (var i in titles.ChildFolders.ToList()) {          if (i.ChildCount > 100) {            DebugFormat("Partioning folder {0}"' i.Title);            using (var prefixer = new Prefixer()) {              PartitionChildren(i as VirtualFolder' prefixer);            }          }          root.AdoptFolder(i);        }
Magic Number,NMaier.SimpleDlna.Server.Views,CascadedView,C:\repos\nmaier_simpleDLNA\server\Views\CascadedView.cs,Transform,The following statement contains a magic number: foreach (var f in sorted.ChildFolders.ToList()) {          if (f.ChildCount < 2) {            foreach (var file in f.ChildItems) {              root.AddResource(file);            }            continue;          }          var fsmi = f as VirtualFolder;          root.AdoptFolder(fsmi);        }
Magic Number,NMaier.SimpleDlna.Server.Views,CascadedView,C:\repos\nmaier_simpleDLNA\server\Views\CascadedView.cs,Transform,The following statement contains a magic number: if (!cascade || root.ChildFolders.LongCount() <= 50) {          return root;        }
Magic Number,NMaier.SimpleDlna.Server.Views,FlattenView,C:\repos\nmaier_simpleDLNA\server\Views\FlattenView.cs,TransformInternal,The following statement contains a magic number: if (current == root || current.ChildItems.Count() > 3) {          return false;        }
Magic Number,NMaier.SimpleDlna.Server.Views,LargeView,C:\repos\nmaier_simpleDLNA\server\Views\LargeView.cs,SetParameters,The following statement contains a magic number: if (parameters.TryGet("size"' out min)) {          minSize = min * 1024 * 1024;        }
Magic Number,NMaier.SimpleDlna.Server.Views,LargeView,C:\repos\nmaier_simpleDLNA\server\Views\LargeView.cs,SetParameters,The following statement contains a magic number: if (parameters.TryGet("size"' out min)) {          minSize = min * 1024 * 1024;        }
