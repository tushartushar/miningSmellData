Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 218 lines of code.
Complex Method,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,Cyclomatic complexity of the method is 8
Long Parameter List,NuGetConsole,ConsoleContainer,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\ConsoleContainer.xaml.cs,ConsoleContainer,The method has 5 parameters. Parameters: solutionManager' productUpdateService' packageRestoreManager' deleteOnRestartManager' shell
Long Parameter List,NuGetConsole,VSScriptExecutor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\VSScriptExecutor.cs,ExecuteAsync,The method has 7 parameters. Parameters: packageIdentity' packageInstallPath' scriptRelativePath' envDTEProject' nuGetProject' nuGetProjectContext' throwOnFailure
Long Parameter List,NuGetConsole,VSScriptExecutor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\VSScriptExecutor.cs,ExecuteCoreAsync,The method has 7 parameters. Parameters: packageIdentity' fullScriptPath' packageInstallPath' envDTEProject' nuGetProject' nuGetProjectContext' throwOnFailure
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\OleCommandFilter.cs,InternalExec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,NuGetConsole.Implementation.Console,OleCommandFilter,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\OleCommandFilter.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,WpfConsole,The method has 5 parameters. Parameters: factory' sp' consoleStatus' contentTypeName' hostName
Long Parameter List,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,NuGetConsole.Implementation,PowerConsoleToolWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\PowerConsoleToolWindow.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Identifier,NuGetConsole.Implementation.Console,WpfConsoleClassifier,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,GetCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Identifier,NuGetConsole.Implementation.Console,WpfConsoleClassifier,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleClassifier.cs,TryGetCachedCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Identifier,NuGetConsole.Implementation,GuidList,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Guids.cs,,The length of the parameter GuidPackageManagerConsoleFontAndColorCategoryString is 51.
Long Identifier,NuGetConsole.Implementation,GuidList,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Guids.cs,,The length of the parameter guidPackageManagerConsoleFontAndColorCategory is 45.
Long Statement,NuGetConsole,OutputConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\OutputConsole\OutputConsole.cs,Start,The length of the statement  "                int result = _outputWindow.CreatePane(ref _outputWindowPaneGuid' Resources.OutputConsolePaneName' fInitVisible: 1' fClearWithSolution: 0); " is 138.
Long Statement,NuGetConsole,VSScriptExecutor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\VSScriptExecutor.cs,ExecuteAsync,The length of the statement  "            return await ExecuteCoreAsync(packageIdentity' scriptFullPath' packageInstallPath' envDTEProject' nuGetProject' nuGetProjectContext' throwOnFailure); " is 149.
Long Statement,NuGetConsole.Implementation,DebugConsoleToolWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\DebugConsole\DebugConsoleToolWindow.cs,Log,The length of the statement  "                        String.Format(CultureInfo.CurrentCulture' "[{0:O}][{1}]{2}"' timestamp' Shorten(source)' message) + Environment.NewLine' " is 120.
Long Statement,NuGetConsole.DebugConsole,DebugWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\DebugConsole\DebugWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/NuGet.Console;component/debugconsole/debugwindow.xaml"' System.UriKind.Relative); " is 127.
Complex Conditional,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,PasteText,The conditional expression  "iLineStart < text.Length                          && (c = text[iLineStart]) != text[iNewLine]                          && (c == '\n' || c == '\r')"  is complex.
Empty Catch Block,NuGetConsole,ConsoleInitializer,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\ConsoleInitializer.cs,GetInitializeTask,The method has an empty catch block.
Magic Number,NuGetConsole,ConsoleContainer,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\ConsoleContainer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RootLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.InitializeText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,NuGetConsole.Implementation.Console,Dispatcher,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\ConsoleDispatcher.cs,PromptNewLine,The following statement contains a magic number: WpfConsole.Write(WpfConsole.Host.Prompt + (char)32);
Magic Number,NuGetConsole.Implementation.Console,TextFormatClassifier,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\TextFormatClassifier.cs,GetClassificationName,The following statement contains a magic number: StringBuilder sb = new StringBuilder(32);
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete > 100)              {                  percentComplete = 100;              }
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete > 100)              {                  percentComplete = 100;              }
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete == 100)              {                  HideProgress();              }              else              {                  VsStatusBar.Progress(                      ref _pdwCookieForStatusBar'                      1 /* in progress */'                      operation'                      (uint)percentComplete'                      (uint)100);              }
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: if (percentComplete == 100)              {                  HideProgress();              }              else              {                  VsStatusBar.Progress(                      ref _pdwCookieForStatusBar'                      1 /* in progress */'                      operation'                      (uint)percentComplete'                      (uint)100);              }
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress(                  ref _pdwCookieForStatusBar'                  0 /* completed */'                  String.Empty'                  (uint)100'                  (uint)100);
Magic Number,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress(                  ref _pdwCookieForStatusBar'                  0 /* completed */'                  String.Empty'                  (uint)100'                  (uint)100);
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: keyScan = (short)(keyScan >> 8);
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,TriggerCompletionAsync,The following statement contains a magic number: CancellationTokenSource ctSource = new CancellationTokenSource(TabExpansionTimeout * 1000);
Magic Number,NuGetConsole.Implementation,DebugConsoleToolWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\DebugConsole\DebugConsoleToolWindow.cs,DebugConsoleToolWindow,The following statement contains a magic number: this.BitmapResourceID = 301;
Magic Number,NuGetConsole.Implementation,PowerConsoleToolWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\PowerConsoleToolWindow.cs,PowerConsoleToolWindow,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,NuGetConsole.Implementation,PowerConsoleToolWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\PowerConsoleToolWindow.cs,OnToolWindowCreated,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(10);
Magic Number,NuGetConsole.DebugConsole,DebugWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\DebugConsole\DebugWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LogLevel = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.DebugGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,NuGetConsole,ConsoleContainer,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\ConsoleContainer.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.RootLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.InitializeText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,NuGetConsole.Implementation.Console,WpfConsole,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,The following switch statement is missing a default case: switch (value)                  {                      case ReadOnlyRegionType.BeginAndBody:                          if (snapshot.Length > 0)                          {                              _readOnlyRegionBegin = edit.CreateReadOnlyRegion(new Span(0' 0)'                                  SpanTrackingMode.EdgeExclusive'                                  EdgeInsertionMode.Deny);                              _readOnlyRegionBody = edit.CreateReadOnlyRegion(new Span(0' snapshot.Length));                          }                          break;                        case ReadOnlyRegionType.All:                          _readOnlyRegionBody = edit.CreateReadOnlyRegion(new Span(0' snapshot.Length)'                              SpanTrackingMode.EdgeExclusive'                              EdgeInsertionMode.Deny);                          break;                  }
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch ((VSConstants.VSStd97CmdID)nCmdID)                  {                      case VSConstants.VSStd97CmdID.Paste:                          if (IsCaretInReadOnlyRegion || IsSelectionReadonly)                          {                              hr = VSConstants.S_OK; // eat it                          }                          else                          {                              PasteText(ref hr);                          }                          break;                  }
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID)                      {                          case VSConstants.VSStd2KCmdID.TYPECHAR:                          case VSConstants.VSStd2KCmdID.BACKSPACE:                          case VSConstants.VSStd2KCmdID.RETURN:                              var keyInfo = GetVsKeyInfo(pvaIn' commandID);                              WpfConsole.Dispatcher.PostKey(keyInfo);                              break;                            case VSConstants.VSStd2KCmdID.CANCEL: // Handle ESC                              WpfConsole.Dispatcher.CancelWaitKey();                              break;                      }
Missing Default,NuGetConsole.Implementation.Console,WpfConsoleKeyProcessor,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID)                      {                          case VSConstants.VSStd2KCmdID.TYPECHAR:                              if (IsCompletionSessionActive)                              {                                  char ch = (char)(ushort)Marshal.GetObjectForNativeVariant(pvaIn);                                  if (IsCommitChar(ch))                                  {                                      if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected)                                      {                                          _completionSession.Commit();                                      }                                      else                                      {                                          _completionSession.Dismiss();                                      }                                  }                              }                              else                              {                                  if (IsSelectionReadonly)                                  {                                      WpfTextView.Selection.Clear();                                  }                                  if (IsCaretInReadOnlyRegion)                                  {                                      WpfTextView.Caret.MoveTo(WpfConsole.InputLineExtent.End);                                  }                              }                              break;                            case VSConstants.VSStd2KCmdID.LEFT:                          case VSConstants.VSStd2KCmdID.LEFT_EXT:                          case VSConstants.VSStd2KCmdID.LEFT_EXT_COL:                          case VSConstants.VSStd2KCmdID.WORDPREV:                          case VSConstants.VSStd2KCmdID.WORDPREV_EXT:                          case VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL:                              if (IsCaretAtInputLineStart)                              {                                  //                                  // Note: This simple implementation depends on Prompt containing a trailing space.                                  // When caret is on the right of InputLineStart' editor will handle it correctly'                                  // and caret won't move left to InputLineStart because of the trailing space.                                  //                                  hr = VSConstants.S_OK; // eat it                              }                              break;                            case VSConstants.VSStd2KCmdID.BOL:                          case VSConstants.VSStd2KCmdID.BOL_EXT:                          case VSConstants.VSStd2KCmdID.BOL_EXT_COL:                              if (IsCaretOnInputLine)                              {                                  VirtualSnapshotPoint oldCaretPoint = WpfTextView.Caret.Position.VirtualBufferPosition;                                    WpfTextView.Caret.MoveTo(WpfConsole.InputLineStart.Value);                                  WpfTextView.Caret.EnsureVisible();                                    if ((VSConstants.VSStd2KCmdID)nCmdID == VSConstants.VSStd2KCmdID.BOL)                                  {                                      WpfTextView.Selection.Clear();                                  }                                  else if ((VSConstants.VSStd2KCmdID)nCmdID != VSConstants.VSStd2KCmdID.BOL)                                  // extend selection                                  {                                      VirtualSnapshotPoint anchorPoint = WpfTextView.Selection.IsEmpty                                          ? oldCaretPoint.TranslateTo(                                              WpfTextView.TextSnapshot)                                          : WpfTextView.Selection.AnchorPoint;                                      WpfTextView.Selection.Select(anchorPoint'                                          WpfTextView.Caret.Position.VirtualBufferPosition);                                  }                                    hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.UP:                              if (!IsCompletionSessionActive)                              {                                  if (IsCaretInReadOnlyRegion)                                  {                                      ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  }                                  WpfConsole.NavigateHistory(-1);                                  hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.DOWN:                              if (!IsCompletionSessionActive)                              {                                  if (IsCaretInReadOnlyRegion)                                  {                                      ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  }                                  WpfConsole.NavigateHistory(+1);                                  hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.RETURN:                              if (IsCompletionSessionActive)                              {                                  if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected)                                  {                                      _completionSession.Commit();                                  }                                  else                                  {                                      _completionSession.Dismiss();                                  }                              }                              else if (IsCaretOnInputLine || !IsCaretInReadOnlyRegion)                              {                                  ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  ExecuteCommand(VSConstants.VSStd2KCmdID.RETURN);                                    WpfConsole.EndInputLine();                              }                              hr = VSConstants.S_OK;                              break;                            case VSConstants.VSStd2KCmdID.TAB:                              if (!IsCaretInReadOnlyRegion)                              {                                  if (IsCompletionSessionActive)                                  {                                      _completionSession.Commit();                                  }                                  else                                  {                                      ThreadHelper.JoinableTaskFactory.RunAsync(async delegate { await TriggerCompletionAsync(); });                                  }                              }                              hr = VSConstants.S_OK;                              break;                            case VSConstants.VSStd2KCmdID.CANCEL:                              if (IsCompletionSessionActive)                              {                                  _completionSession.Dismiss();                                  hr = VSConstants.S_OK;                              }                              else if (!IsCaretInReadOnlyRegion)                              {                                  // Delete all text after InputLineStart                                  WpfTextView.TextBuffer.Delete(WpfConsole.AllInputExtent);                                  hr = VSConstants.S_OK;                              }                              break;                          case VSConstants.VSStd2KCmdID.CUTLINE:                              // clears the console when CutLine shortcut key is pressed'                              // usually it is Ctrl + L                              WpfConsole.ClearConsole();                              hr = VSConstants.S_OK;                              break;                      }
Missing Default,NuGetConsole.DebugConsole,DebugWindow,C:\repos\NuGet_NuGet.VisualStudioExtension\src\VsConsole\Console\DebugConsole\DebugWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.LogLevel = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.DebugGrid = ((System.Windows.Controls.Grid)(target));              return;              }
