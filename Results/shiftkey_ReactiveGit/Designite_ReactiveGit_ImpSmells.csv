Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Clone,The length of the statement  "                    var receivingMessage = String.Format("Receiving objects:  {0}% ({1}/{2})"' p' progress.ReceivedObjects' progress.TotalObjects); " is 127.
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,SignalCompleted,The following statement contains a magic number: observer.OnNext(Tuple.Create("checkout completed"' 100));
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Clone,The following statement contains a magic number: var options = new CloneOptions              {                  Checkout = true'                  CredentialsProvider = credentials'                  OnTransferProgress = progress =>                  {                      // TODO: how should we signal for the "indexing objects" events                      var p = (100 * progress.ReceivedObjects) / progress.TotalObjects;                      var receivingMessage = String.Format("Receiving objects:  {0}% ({1}/{2})"' p' progress.ReceivedObjects' progress.TotalObjects);                      observer.OnNext(Tuple.Create(receivingMessage' p));                      return !isCancelled;                  }'                  IsBare = false'                  OnCheckoutProgress = ProgressFactory.CreateHandlerWithoutMessages(observer)              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Clone,The following statement contains a magic number: return Observable.Create<ObservableRepository>(subj =>              {                  var sub = Observable.Start(() =>                  {                      var directory = Repository.Clone(sourceUrl' workingDirectory' options);                        observer.OnNext(Tuple.Create("clone completed"' 100));                      observer.OnCompleted();                        return new ObservableRepository(directory' credentials);                  }' Scheduler.Default).Subscribe(subj);                    return new CompositeDisposable(                      sub'                      Disposable.Create(() =>                      {                          isCancelled = true;                          observer.OnCompleted();                      }));              });
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Pull,The following statement contains a magic number: var options = new PullOptions              {                  FetchOptions = new FetchOptions                  {                      TagFetchMode = TagFetchMode.None'                      CredentialsProvider = _credentialsHandler'                      OnTransferProgress = progress =>                      {                          // TODO: how should we signal for the "indexing objects" events                          var p = (50 * progress.ReceivedObjects) / progress.TotalObjects;                          observer.OnNext(Tuple.Create(""' p));                          return !isCancelled;                      }                  }'                  MergeOptions = new MergeOptions                  {                      OnCheckoutProgress = ProgressFactory.CreateHandler(observer' start:50' count:50)                  }              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Pull,The following statement contains a magic number: var options = new PullOptions              {                  FetchOptions = new FetchOptions                  {                      TagFetchMode = TagFetchMode.None'                      CredentialsProvider = _credentialsHandler'                      OnTransferProgress = progress =>                      {                          // TODO: how should we signal for the "indexing objects" events                          var p = (50 * progress.ReceivedObjects) / progress.TotalObjects;                          observer.OnNext(Tuple.Create(""' p));                          return !isCancelled;                      }                  }'                  MergeOptions = new MergeOptions                  {                      OnCheckoutProgress = ProgressFactory.CreateHandler(observer' start:50' count:50)                  }              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Pull,The following statement contains a magic number: var options = new PullOptions              {                  FetchOptions = new FetchOptions                  {                      TagFetchMode = TagFetchMode.None'                      CredentialsProvider = _credentialsHandler'                      OnTransferProgress = progress =>                      {                          // TODO: how should we signal for the "indexing objects" events                          var p = (50 * progress.ReceivedObjects) / progress.TotalObjects;                          observer.OnNext(Tuple.Create(""' p));                          return !isCancelled;                      }                  }'                  MergeOptions = new MergeOptions                  {                      OnCheckoutProgress = ProgressFactory.CreateHandler(observer' start:50' count:50)                  }              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Pull,The following statement contains a magic number: return Observable.Create<MergeResult>(subj =>              {                  var sub = Observable.Start(() =>                  {                      var result = _repository.Network.Pull(signature' options);                        observer.OnNext(Tuple.Create("pull completed"' 100));                      observer.OnCompleted();                        return result;                  }' Scheduler.Default).Subscribe(subj);                    return new CompositeDisposable(                      sub'                      Disposable.Create(() =>                      {                          isCancelled = true;                          observer.OnCompleted();                      }));              });
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Push,The following statement contains a magic number: var options = new PushOptions              {                  CredentialsProvider = _credentialsHandler'                  OnPushTransferProgress = (current' total' bytes) =>                  {                      var progress = 0;                      if (total != 0)                      {                          progress = 50 + (50 * current) / total;                      }                        observer.OnNext(Tuple.Create(""' progress));                        return !isCancelled;                  }              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Push,The following statement contains a magic number: var options = new PushOptions              {                  CredentialsProvider = _credentialsHandler'                  OnPushTransferProgress = (current' total' bytes) =>                  {                      var progress = 0;                      if (total != 0)                      {                          progress = 50 + (50 * current) / total;                      }                        observer.OnNext(Tuple.Create(""' progress));                        return !isCancelled;                  }              };
Magic Number,ReactiveGit,ObservableRepository,D:\research\architectureSmells\repos1\shiftkey_ReactiveGit\ReactiveGit\ObservableRepository.Checkout.cs,Push,The following statement contains a magic number: return Observable.Create<Unit>(subj =>              {                  var sub = Observable.Start(() =>                  {                      _repository.Network.Push(branch' options);                        observer.OnNext(Tuple.Create("push completed"' 100));                      observer.OnCompleted();                  }' Scheduler.Default).Subscribe(subj);                    return new CompositeDisposable(                      sub'                      Disposable.Create(() =>                      {                          isCancelled = true;                          observer.OnCompleted();                      }));              });
