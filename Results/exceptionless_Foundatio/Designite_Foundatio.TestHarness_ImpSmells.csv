Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,Cyclomatic complexity of the method is 9
Complex Method,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,Cyclomatic complexity of the method is 8
Long Parameter List,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,GetQueue,The method has 6 parameters. Parameters: retries' workItemTimeout' retryDelay' retryMultipliers' deadLetterMaxItems' runQueueMaintenance
Long Parameter List,Foundatio.Tests.Storage,StorageExtensions,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CompleteEventPostAsync,The method has 6 parameters. Parameters: storage' path' projectId' created' shouldArchive' logger
Long Identifier,Foundatio.Tests.Extensions,TaskExtensions,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Extensions\TaskExtensions.cs,WaitAsync,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Extensions,TaskExtensions,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Extensions\TaskExtensions.cs,WaitAsync,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The length of the parameter timeoutCancellationTokenSource is 30.
Long Statement,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The length of the statement  "                await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 }); " is 120.
Long Statement,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,GetCacheClient,The length of the statement  "            return new HybridCacheClient(_distributedCache' _messageBus' new InMemoryCacheClientOptions { CloneValues = true }' Log); " is 121.
Long Statement,Foundatio.Tests.Jobs,HelloWorldJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\HelloWorldJob.cs,RunInternalAsync,The length of the statement  "                _logger.LogTrace("HelloWorld Running: instance={Id} runs={RunCount} global={GlobalRunCount}"' _id' RunCount' GlobalRunCount); " is 125.
Long Statement,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobWithLockFailAsync,The length of the statement  "                var lockProvider = new ThrottlingLockProvider(new InMemoryCacheClient(new InMemoryCacheClientOptions())' allowedLockCount' TimeSpan.FromDays(1)' Log); " is 150.
Long Statement,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunMultipleQueueJobsAsync,The length of the statement  "            using (var metrics = new InMemoryMetricsClient(new InMemoryMetricsClientOptions { LoggerFactory = Log' Buffered = true })) { " is 124.
Long Statement,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunMultipleQueueJobsAsync,The length of the statement  "                            _logger.LogInformation("Queue#{Id}: Working: {Working} Completed: {Completed} Abandoned: {Abandoned} Error: {Errors} Deadletter: {Deadletter}"' i' stats.Working' stats.Completed' stats.Abandoned' stats.Errors' stats.Deadletter); " is 228.
Long Statement,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The length of the statement  "            var lock1 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1)); " is 137.
Long Statement,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanReleaseLockMultipleTimes,The length of the statement  "            var lock1 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1)); " is 137.
Long Statement,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanReleaseLockMultipleTimes,The length of the statement  "            var lock2 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1)); " is 137.
Long Statement,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,DoLockedWorkAsync,The length of the statement  "            return await locker.TryUsingAsync("DoLockedWork"' async () => await SystemClock.SleepAsync(500)' TimeSpan.FromMinutes(1)' TimeSpan.Zero); " is 137.
Long Statement,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The length of the statement  "                if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("Processed {Processed} in {Duration:g}"' numConcurrentMessages - countdown.CurrentCount' sw.Elapsed); " is 157.
Long Statement,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The length of the statement  "                using (var behavior = new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(25)' loggerFactory: Log)) { " is 147.
Long Statement,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The length of the statement  "                    using (var queue = new InMemoryQueue<SimpleWorkItem>(new InMemoryQueueOptions<SimpleWorkItem> { Behaviors = new [] { behavior }' LoggerFactory = Log })) { " is 154.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,VerifyRetryAttemptsImplAsync,The length of the statement  "                    _logger.LogInformation("Finished Attempt {Attempt} to work on queue item' Metadata Attempts: {MetadataAttempts}"' attempts' queueEntryMetadata.Attempts); " is 153.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The length of the statement  "                    queue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log)); " is 146.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The length of the statement  "                        secondQueue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log)); " is 152.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The length of the statement  "                        if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("TotalDuration: {TotalDuration} AverageDuration: {AverageDuration}"' timing.TotalDuration' timing.AverageDuration); " is 171.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The length of the statement  "                using (var metrics = new InMemoryMetricsClient(new InMemoryMetricsClientOptions { Buffered = false' LoggerFactory = Log })) { " is 125.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The length of the statement  "                    queue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log)); " is 146.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The length of the statement  "                            _logger.LogInformation("Completed: {Completed} Errors: {Errors} Deadletter: {Deadletter} Working: {Working} "' stats.Completed' stats.Errors' stats.Deadletter' stats.Working); " is 175.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The length of the statement  "                    if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("Completed: {Completed} Abandoned: {Abandoned} Error: {Errors}"' " is 120.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The length of the statement  "                        _logger.LogInformation("Work Info Stats: Completed: {Completed} Abandoned: {Abandoned} Error: {Errors}"' info.CompletedCount' info.AbandonCount' info.ErrorCount); " is 162.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The length of the statement  "                                _logger.LogInformation("Worker#{Id} Working: {Working} Completed: {Completed} Abandoned: {Abandoned} Error: {Errors} Deadletter: {Deadletter}"' i' stats.Working' stats.Completed' stats.Abandoned' stats.Errors' stats.Deadletter); " is 228.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The length of the statement  "            using (var metrics = new InMemoryMetricsClient(new InMemoryMetricsClientOptions { Buffered = false' LoggerFactory = Log })) { " is 125.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The length of the statement  "                var behavior = new MetricsQueueBehavior<WorkItemData>(metrics' "metric"' TimeSpan.FromMilliseconds(100)' loggerFactory: Log); " is 125.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRenewLockAsync,The length of the statement  "                if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("Waiting for {RenewWait:g} to see if lock was renewed"' renewWait); " is 123.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueWithLockingImpAsync,The length of the statement  "                using (var metrics = new InMemoryMetricsClient(new InMemoryMetricsClientOptions { Buffered = false' LoggerFactory = Log })) { " is 125.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueWithLockingImpAsync,The length of the statement  "                    _logger.LogInformation("Completed: {Completed} Errors: {Errors} Deadletter: {Deadletter} Working: {Working} "' stats.Completed' stats.Errors' stats.Deadletter' stats.Working); " is 175.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The length of the statement  "                    if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("Completed: {Completed} Abandoned: {Abandoned} Error: {Errors}"' info.CompletedCount' info.AbandonCount' info.ErrorCount); " is 178.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The length of the statement  "                        _logger.LogInformation("Work Info Stats: Completed: {Completed} Abandoned: {Abandoned} Error: {Errors}"' info.CompletedCount' info.AbandonCount' info.ErrorCount); " is 162.
Long Statement,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The length of the statement  "                                _logger.LogInformation("Worker#{Id} Working: {Working} Completed: {Completed} Abandoned: {Abandoned} Error: {Errors} Deadletter: {Deadletter}"' i' stats.Working' stats.Completed' stats.Abandoned' stats.Errors' stats.Deadletter); " is 228.
Long Statement,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetFileInfoAsync,The length of the statement  "                // NOTE: File creation time might not be accurate: http://stackoverflow.com/questions/2109152/unbelievable-strange-file-creation-time-problem " is 141.
Long Statement,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetFileInfoAsync,The length of the statement  "                Assert.True(startTime <= fileInfo.Modified' $"File {path} modified time {fileInfo.Modified:O} should be newer than the start time {startTime:O}."); " is 147.
Long Statement,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetFileInfoAsync,The length of the statement  "                Assert.True(startTime <= fileInfo.Modified' $"File {path} modified time {fileInfo.Modified:O} should be newer than the start time {startTime:O}."); " is 147.
Long Statement,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The length of the statement  "                    var eventPost = await storage.GetEventPostAndSetActiveAsync(Path.Combine(queueFolder' RandomData.GetInt(0' 25) + ".json")' _logger); " is 132.
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: await cache.SetAsync("test2"' 2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: await cache.SetAsync("test3"' 3);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: Assert.Equal(3' result.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: Assert.Equal(2' result["test2"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: Assert.Equal(3' result["test3"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: await cache.SetAsync("obj2"' new SimpleModel { Data1 = "data 2"' Data2 = 2 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: string json = JsonConvert.SerializeObject(new SimpleModel {Data1 = "test 1"' Data2 = 4});
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: Assert.Equal(5' result2.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllAsync,The following statement contains a magic number: Assert.Equal(3' result3.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: await cache.SetAsync("test2"' 2.0);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: await cache.SetAsync("test3"' 3.0);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: await cache.SetAllAsync(new Dictionary<string' double> {                      { "test3"' 3.5 }'                      { "test4"' 4.0 }'                      { "test5"' 5.0 }                  });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: await cache.SetAllAsync(new Dictionary<string' double> {                      { "test3"' 3.5 }'                      { "test4"' 4.0 }'                      { "test5"' 5.0 }                  });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: await cache.SetAllAsync(new Dictionary<string' double> {                      { "test3"' 3.5 }'                      { "test4"' 4.0 }'                      { "test5"' 5.0 }                  });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: Assert.Equal(5' result.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: Assert.Equal(2.0' result["test2"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: Assert.Equal(3.5' result["test3"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: Assert.Equal(4.0' result["test4"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanGetAllWithOverlapAsync,The following statement contains a magic number: Assert.Equal(5.0' result["test5"].Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAsync,The following statement contains a magic number: Assert.Equal(3' await cache.ListAddAsync("set"' new List<int> { 1' 1' 2' 3 }));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAsync,The following statement contains a magic number: Assert.Equal(3' await cache.ListAddAsync("set"' new List<int> { 1' 1' 2' 3 }));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAsync,The following statement contains a magic number: Assert.Equal(3' await cache.ListAddAsync("set"' new List<int> { 1' 1' 2' 3 }));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAsync,The following statement contains a magic number: Assert.Equal(3' result.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAsync,The following statement contains a magic number: Assert.Equal(2' result.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAndGetValueAsync,The following statement contains a magic number: Assert.False(await cache.AddAsync("test"' 2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAndGetValueAsync,The following statement contains a magic number: Assert.True(await cache.ReplaceAsync("test"' 2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAndGetValueAsync,The following statement contains a magic number: Assert.Equal(2' (await cache.GetAsync<int>("test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAndGetValueAsync,The following statement contains a magic number: Assert.True(await cache.AddAsync("test"' 2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetAndGetValueAsync,The following statement contains a magic number: Assert.Equal(2' (await cache.GetAsync<int>("test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanAddConcurrentlyAsync,The following statement contains a magic number: string cacheKey = Guid.NewGuid().ToString("N").Substring(10);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanAddConcurrentlyAsync,The following statement contains a magic number: await Run.InParallelAsync(5' async i => {                      if (await cache.AddAsync(cacheKey' i' TimeSpan.FromMinutes(1)))                          Interlocked.Increment(ref adds);                  });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: await scopedCache1.SetAsync("test"' 2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: await nestedScopedCache1.SetAsync("test"' 3);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(2' (await scopedCache1.GetAsync<int>("test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(3' (await nestedScopedCache1.GetAsync<int>("test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(3' (await scopedCache1.GetAsync<int>("nested:test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(3' (await cache.GetAsync<int>("scoped1:nested:test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(10' await scopedCache1.IncrementAsync("total"' 10));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(10' await scopedCache1.IncrementAsync("total"' 10));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(10' await scopedCache1.GetAsync<double>("total"' 0));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(20' await nestedScopedCache1.IncrementAsync("total"' 20));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(20' await nestedScopedCache1.IncrementAsync("total"' 20));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanUseScopedCachesAsync,The following statement contains a magic number: Assert.Equal(20' await nestedScopedCache1.GetAsync<double>("total"' 0));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRemoveByPrefixAsync,The following statement contains a magic number: await cache.SetAsync(prefix + "test2"' 4);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRemoveByPrefixAsync,The following statement contains a magic number: Assert.Equal(2' await cache.RemoveByPrefixAsync(prefix));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetExpirationAsync,The following statement contains a magic number: var expiresAt = SystemClock.UtcNow.AddMilliseconds(300);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetExpirationAsync,The following statement contains a magic number: success = await cache.SetAsync("test2"' 1' expiresAt.AddMilliseconds(100));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetExpirationAsync,The following statement contains a magic number: await SystemClock.SleepAsync(500);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanSetMinMaxExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test1")).Value' expires.Subtract(TimeSpan.FromSeconds(10))' expires);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanIncrementAndExpireAsync,The following statement contains a magic number: await SystemClock.SleepAsync(1500);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: var lowerValue = value - 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfLowerAsync("test"' lowerValue));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfHigherAsync("test"' value));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: var minExpiration = TimeSpan.FromHours(1).Add(TimeSpan.FromMinutes(59)).Add(TimeSpan.FromSeconds(55));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: var minExpiration = TimeSpan.FromHours(1).Add(TimeSpan.FromMinutes(59)).Add(TimeSpan.FromSeconds(55));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: double value = 2 * 1000 * 1000 * 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.True(await cache.SetAsync("test"' value' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test")).Value' minExpiration' TimeSpan.FromHours(2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: var lowerValue = value - 1000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfLowerAsync("test"' lowerValue' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfLowerAsync("test"' lowerValue' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test")).Value' minExpiration' TimeSpan.FromHours(2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(0' await cache.SetIfLowerAsync("test"' value' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test")).Value' minExpiration' TimeSpan.FromHours(2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfHigherAsync("test"' value' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(1000' await cache.SetIfHigherAsync("test"' value' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test")).Value' minExpiration' TimeSpan.FromHours(2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.Equal(0' await cache.SetIfHigherAsync("test"' lowerValue' TimeSpan.FromHours(2)));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanRoundTripLargeNumbersWithExpirationAsync,The following statement contains a magic number: Assert.InRange((await cache.GetExpirationAsync("test")).Value' minExpiration' TimeSpan.FromHours(2));
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("test1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("test1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(3' result.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListRemoveAsync("test1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListRemoveAsync("test1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("test1"' 2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("test1"' 3);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(3' result.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListRemoveAsync("test1"' 2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(2' result.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListRemoveAsync("test1"' 3);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' 11' 12' 13' 14' 15' 16' 17' 18' 19' 20 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: var pagedResult = await cache.GetListAsync<int>("testpaging"' 1' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(5' pagedResult.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 2' 3' 4' 5 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 2' 3' 4' 5 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 2' 3' 4' 5 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 2' 3' 4' 5 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: pagedResult = await cache.GetListAsync<int>("testpaging"' 2' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: pagedResult = await cache.GetListAsync<int>("testpaging"' 2' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(5' pagedResult.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 6' 7' 8' 9' 10 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 6' 7' 8' 9' 10 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 6' 7' 8' 9' 10 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 6' 7' 8' 9' 10 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 6' 7' 8' 9' 10 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 21' 22 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListAddAsync("testpaging"' new[] { 21' 22 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: pagedResult = await cache.GetListAsync<int>("testpaging"' 5' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: pagedResult = await cache.GetListAsync<int>("testpaging"' 5' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(2' pagedResult.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 21' 22 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 21' 22 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: await cache.ListRemoveAsync("testpaging"' 2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: pagedResult = await cache.GetListAsync<int>("testpaging"' 1' 5);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(5' pagedResult.Value.Count);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 3' 4' 5' 6 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 3' 4' 5' 6 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 3' 4' 5' 6 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,CanManageListsAsync,The following statement contains a magic number: Assert.Equal(pagedResult.Value.ToArray()' new[] { 1' 3' 4' 5' 6 });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureThroughputAsync,The following statement contains a magic number: const int itemCount = 10000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' 13422);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureThroughputAsync,The following statement contains a magic number: Assert.Equal(13422' (await cache.GetAsync<int>("test")).Value);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerSimpleThroughputAsync,The following statement contains a magic number: const int itemCount = 10000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerSimpleThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' new SimpleModel {                                               Data1 = "Hello"'                                               Data2 = 12                                           });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerSimpleThroughputAsync,The following statement contains a magic number: Assert.Equal(12' model.Value.Data2);
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: const int itemCount = 10000;
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' new ComplexModel {                          Data1 = "Hello"'                          Data2 = 12'                          Data3 = true'                          Simple = new SimpleModel {                              Data1 = "hi"'                              Data2 = 13                          }'                          Simples = new List<SimpleModel> {                              new SimpleModel {                                  Data1 = "hey"'                                  Data2 = 45                              }'                              new SimpleModel {                                  Data1 = "next"'                                  Data2 = 3423                              }                          }'                          DictionarySimples = new Dictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }'                            DerivedDictionarySimples = new SampleDictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }                      });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' new ComplexModel {                          Data1 = "Hello"'                          Data2 = 12'                          Data3 = true'                          Simple = new SimpleModel {                              Data1 = "hi"'                              Data2 = 13                          }'                          Simples = new List<SimpleModel> {                              new SimpleModel {                                  Data1 = "hey"'                                  Data2 = 45                              }'                              new SimpleModel {                                  Data1 = "next"'                                  Data2 = 3423                              }                          }'                          DictionarySimples = new Dictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }'                            DerivedDictionarySimples = new SampleDictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }                      });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' new ComplexModel {                          Data1 = "Hello"'                          Data2 = 12'                          Data3 = true'                          Simple = new SimpleModel {                              Data1 = "hi"'                              Data2 = 13                          }'                          Simples = new List<SimpleModel> {                              new SimpleModel {                                  Data1 = "hey"'                                  Data2 = 45                              }'                              new SimpleModel {                                  Data1 = "next"'                                  Data2 = 3423                              }                          }'                          DictionarySimples = new Dictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }'                            DerivedDictionarySimples = new SampleDictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }                      });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: await cache.SetAsync("test"' new ComplexModel {                          Data1 = "Hello"'                          Data2 = 12'                          Data3 = true'                          Simple = new SimpleModel {                              Data1 = "hi"'                              Data2 = 13                          }'                          Simples = new List<SimpleModel> {                              new SimpleModel {                                  Data1 = "hey"'                                  Data2 = 45                              }'                              new SimpleModel {                                  Data1 = "next"'                                  Data2 = 3423                              }                          }'                          DictionarySimples = new Dictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }'                            DerivedDictionarySimples = new SampleDictionary<string' SimpleModel> {                              { "sdf"' new SimpleModel { Data1 = "Sachin" } }                          }                      });
Magic Number,Foundatio.Tests.Caching,CacheClientTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\CacheClientTestsBase.cs,MeasureSerializerComplexThroughputAsync,The following statement contains a magic number: Assert.Equal(12' model.Value.Data2);
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillUseLocalCache,The following statement contains a magic number: string cacheKey = Guid.NewGuid().ToString("N").Substring(10);
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillUseLocalCache,The following statement contains a magic number: Assert.Equal(2' firstCache.LocalCache.Count);
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillUseLocalCache,The following statement contains a magic number: Assert.Equal(2' firstCache.LocalCache.Count);
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillExpireRemoteItems,The following statement contains a magic number: Assert.True(await firstCache.AddAsync(cacheKey' new SimpleModel { Data1 = "test" }' TimeSpan.FromMilliseconds(250)));
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillExpireRemoteItems,The following statement contains a magic number: await firstResetEvent.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillExpireRemoteItems,The following statement contains a magic number: await secondResetEvent.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillWorkWithSets,The following statement contains a magic number: await firstCache.ListAddAsync("set1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillWorkWithSets,The following statement contains a magic number: await firstCache.ListAddAsync("set1"' new[] { 1' 2' 3 });
Magic Number,Foundatio.Tests.Caching,HybridCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Caching\HybridCacheClientTests.cs,WillWorkWithSets,The following statement contains a magic number: Assert.Equal(3' values.Value.Count);
Magic Number,Foundatio.Tests.Jobs,HelloWorldJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\HelloWorldJob.cs,HelloWorldJob,The following statement contains a magic number: _id = Guid.NewGuid().ToString("N").Substring(0' 10);
Magic Number,Foundatio.Tests.Jobs,FailingJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\HelloWorldJob.cs,FailingJob,The following statement contains a magic number: _id = Guid.NewGuid().ToString("N").Substring(0' 10);
Magic Number,Foundatio.Tests.Jobs,LongRunningJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\HelloWorldJob.cs,LongRunningJob,The following statement contains a magic number: _id = Guid.NewGuid().ToString("N").Substring(0' 10);
Magic Number,Foundatio.Tests.Jobs,LongRunningJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\HelloWorldJob.cs,RunInternalAsync,The following statement contains a magic number: _iterationCount % 10000 == 0 && _logger.IsEnabled(LogLevel.Trace)
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobAsync,The following statement contains a magic number: const int workItemCount = 100;
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobAsync,The following statement contains a magic number: await SystemClock.SleepAsync(10);
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobWithLockFailAsync,The following statement contains a magic number: const int workItemCount = 10;
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobWithLockFailAsync,The following statement contains a magic number: const int allowedLockCount = 5;
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobWithLockFailAsync,The following statement contains a magic number: await SystemClock.SleepAsync(10);
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunQueueJobWithLockFailAsync,The following statement contains a magic number: Assert.Equal(allowedLockCount * 4' stats.Abandoned);
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunMultipleQueueJobsAsync,The following statement contains a magic number: const int jobCount = 5;
Magic Number,Foundatio.Tests.Jobs,JobQueueTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\JobQueueTestsBase.cs,CanRunMultipleQueueJobsAsync,The following statement contains a magic number: const int workItemCount = 100;
Magic Number,Foundatio.Tests.Jobs,SampleQueueJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\SampleQueueJob.cs,ProcessQueueEntryAsync,The following statement contains a magic number: RandomData.GetBool(10)
Magic Number,Foundatio.Tests.Jobs,SampleQueueJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\SampleQueueJob.cs,ProcessQueueEntryAsync,The following statement contains a magic number: RandomData.GetBool(10)
Magic Number,Foundatio.Tests.Jobs,SampleQueueJobWithLocking,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\SampleQueueJob.cs,GetQueueEntryLockAsync,The following statement contains a magic number: return _lockProvider.AcquireAsync("job"' TimeSpan.FromMilliseconds(100)' TimeSpan.Zero);
Magic Number,Foundatio.Tests.Jobs,SampleJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\SampleQueueJob.cs,RunInternalAsync,The following statement contains a magic number: RandomData.GetBool(10)
Magic Number,Foundatio.Tests.Jobs,SampleJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\SampleQueueJob.cs,RunInternalAsync,The following statement contains a magic number: RandomData.GetBool(10)
Magic Number,Foundatio.Tests.Jobs,ThrottledJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\ThrottledJob.cs,ThrottledJob,The following statement contains a magic number: _locker = new ThrottlingLockProvider(client' 1' TimeSpan.FromMilliseconds(100)' loggerFactory);
Magic Number,Foundatio.Tests.Jobs,WithLockingJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Jobs\WithLockingJob.cs,RunInternalAsync,The following statement contains a magic number: await SystemClock.SleepAsync(150' context.CancellationToken);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: var lock1 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: var lock2Task = locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(250));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(250));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: await Run.InParallelAsync(25' async i => {                  bool success = await locker.TryUsingAsync("test"' () => {                      Interlocked.Increment(ref counter);                  }' acquireTimeout: TimeSpan.FromSeconds(10));                    Assert.True(success);              });
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: await Run.InParallelAsync(25' async i => {                  bool success = await locker.TryUsingAsync("test"' () => {                      Interlocked.Increment(ref counter);                  }' acquireTimeout: TimeSpan.FromSeconds(10));                    Assert.True(success);              });
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanAcquireAndReleaseLockAsync,The following statement contains a magic number: Assert.Equal(25' counter);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanReleaseLockMultipleTimes,The following statement contains a magic number: var lock1 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,CanReleaseLockMultipleTimes,The following statement contains a magic number: var lock2 = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(100)' timeUntilExpires: TimeSpan.FromSeconds(1));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,LockWillTimeoutAsync,The following statement contains a magic number: var testLock = await locker.AcquireAsync("test"' timeUntilExpires: TimeSpan.FromMilliseconds(250));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,LockWillTimeoutAsync,The following statement contains a magic number: testLock = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromMilliseconds(50));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,LockWillTimeoutAsync,The following statement contains a magic number: testLock = await locker.AcquireAsync("test"' acquireTimeout: TimeSpan.FromSeconds(10));
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,LockOneAtATimeAsync,The following statement contains a magic number: Assert.Equal(2' successCount);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,DoLockedWorkAsync,The following statement contains a magic number: return await locker.TryUsingAsync("DoLockedWork"' async () => await SystemClock.SleepAsync(500)' TimeSpan.FromMinutes(1)' TimeSpan.Zero);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: const int allowedLocks = 25;
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: var period = TimeSpan.FromSeconds(2);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: string lockName = Guid.NewGuid().ToString("N").Substring(10);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: SystemClock.UtcNow.Ticks % period.Ticks < TimeSpan.TicksPerMillisecond * 100
Magic Number,Foundatio.Tests.Locks,LockTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Locks\LockTestBase.cs,WillThrottleCallsAsync,The following statement contains a magic number: result = await locker.AcquireAsync(lockName' acquireTimeout: TimeSpan.FromSeconds(2.5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMessageAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMessageAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanHandleNullMessageAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDerivedMessageAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDerivedMessageAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMappedMessageAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMappedMessageAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: const int numConcurrentMessages = 1000;
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: await messageBus.SubscribeAsync<SimpleMessageA>(msg => {                      if (++messages % 50 == 0)                          if (_logger.IsEnabled(LogLevel.Trace)) _logger.LogTrace("Total Processed {Messages} messages"' messages);                        Assert.Equal("Hello"' msg.Data);                      countdown.Signal();                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: await Run.InParallelAsync(numConcurrentMessages' async i => {                      await messageBus.PublishAsync(new SimpleMessageA {                          Data = "Hello"'                          Count = i                      }' TimeSpan.FromMilliseconds(RandomData.GetInt(0' 100)));                      if (i % 500 == 0)                          _logger.LogTrace("Published 500 messages...");                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: await Run.InParallelAsync(numConcurrentMessages' async i => {                      await messageBus.PublishAsync(new SimpleMessageA {                          Data = "Hello"'                          Count = i                      }' TimeSpan.FromMilliseconds(RandomData.GetInt(0' 100)));                      if (i % 500 == 0)                          _logger.LogTrace("Published 500 messages...");                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed.TotalMilliseconds' 50' 5000);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendDelayedMessageAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed.TotalMilliseconds' 50' 5000);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeConcurrentlyAsync,The following statement contains a magic number: const int iterations = 100;
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeConcurrentlyAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(iterations * 10);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeConcurrentlyAsync,The following statement contains a magic number: await Run.InParallelAsync(10' i => {                      return messageBus.SubscribeAsync<SimpleMessageA>(msg => {                          Assert.Equal("Hello"' msg.Data);                          countdown.Signal();                      });                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeConcurrentlyAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: const int iterations = 100;
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var messageBuses = new List<IMessageBus>(10);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(iterations * 10);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: await Run.InParallelAsync(10' async i => {                      var bus = GetMessageBus();                      await bus.SubscribeAsync<SimpleMessageA>(msg => {                          Assert.Equal("Hello"' msg.Data);                          countdown.Signal();                      });                        messageBuses.Add(bus);                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var subscribe = Run.InParallelAsync(iterations'                      i => {  #pragma warning disable AsyncFixer02 // Long running or blocking operations under an async method                          SystemClock.Sleep(RandomData.GetInt(0' 10));  #pragma warning restore AsyncFixer02 // Long running or blocking operations under an async method                          return messageBuses.Random().SubscribeAsync<NeverPublishedMessage>(msg => Task.CompletedTask);                      });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: var publish = Run.InParallelAsync(iterations + 3' i => {                      switch (i) {                          case 1:                              return messageBus.PublishAsync(new DerivedSimpleMessageA { Data = "Hello" });                          case 2:                              return messageBus.PublishAsync(new Derived2SimpleMessageA { Data = "Hello" });                          case 3:                              return messageBus.PublishAsync(new Derived3SimpleMessageA { Data = "Hello" });                          case 4:                              return messageBus.PublishAsync(new Derived4SimpleMessageA { Data = "Hello" });                          case 5:                              return messageBus.PublishAsync(new Derived5SimpleMessageA { Data = "Hello" });                          case 6:                              return messageBus.PublishAsync(new Derived6SimpleMessageA { Data = "Hello" });                          case 7:                              return messageBus.PublishAsync(new Derived7SimpleMessageA { Data = "Hello" });                          case 8:                              return messageBus.PublishAsync(new Derived8SimpleMessageA { Data = "Hello" });                          case 9:                              return messageBus.PublishAsync(new Derived9SimpleMessageA { Data = "Hello" });                          case 10:                              return messageBus.PublishAsync(new Derived10SimpleMessageA { Data = "Hello" });                          case iterations + 1:                              return messageBus.PublishAsync(new { Data = "Hello" });                          case iterations + 2:                              return messageBus.PublishAsync(new SimpleMessageC { Data = "Hello" });                          case iterations + 3:                              return messageBus.PublishAsync(new SimpleMessageB { Data = "Hello" });                          default:                              return messageBus.PublishAsync(new SimpleMessageA { Data = "Hello" });                      }                  });
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveMessagesConcurrentlyAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMessageToMultipleSubscribersAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(3);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSendMessageToMultipleSubscribersAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanTolerateSubscriberFailureAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(2);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanTolerateSubscriberFailureAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,WillOnlyReceiveSubscribedMessageTypeAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,WillReceiveDerivedMessageTypesAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(2);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,WillReceiveDerivedMessageTypesAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeToAllMessageTypesAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(3);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanSubscribeToAllMessageTypesAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,WontKeepMessagesWithNoSubscribersAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,WontKeepMessagesWithNoSubscribersAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanCancelSubscriptionAsync,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(2);
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanCancelSubscriptionAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanCancelSubscriptionAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveFromMultipleSubscribersAsync,The following statement contains a magic number: await countdown1.WaitAsync(TimeSpan.FromSeconds(20));
Magic Number,Foundatio.Tests.Messaging,MessageBusTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Messaging\MessageBusTestBase.cs,CanReceiveFromMultipleSubscribersAsync,The following statement contains a magic number: await countdown2.WaitAsync(TimeSpan.FromSeconds(20));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 12d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: Assert.Equal(12d' (await stats.GetGaugeStatsAsync("mygauge")).Last);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 10d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 5d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 4d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 12d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: metrics.Gauge("mygauge"' 20d);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSetGaugesAsync,The following statement contains a magic number: Assert.Equal(20d' (await stats.GetGaugeStatsAsync("mygauge")).Last);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementCounterAsync,The following statement contains a magic number: metrics.Counter("c1"' 5);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementCounterAsync,The following statement contains a magic number: await AssertCounterAsync(stats' "c1"' 6);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementCounterAsync,The following statement contains a magic number: metrics.Gauge("g1"' 2.534);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementCounterAsync,The following statement contains a magic number: Assert.Equal(2.534' await stats.GetLastGaugeValueAsync("g1"));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementCounterAsync,The following statement contains a magic number: metrics.Timer("t1"' 50788);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,AssertCounterAsync,The following statement contains a magic number: await Run.WithRetriesAsync(async () => {                  long actual = await client.GetCounterCountAsync(name' SystemClock.UtcNow.Subtract(TimeSpan.FromHours(1)));                  Assert.Equal(expected' actual);              }' 8' logger: _logger);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: await SystemClock.SleepAsync(50);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: await SystemClock.SleepAsync(15);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: Assert.InRange(queueStats.QueueTime.AverageDuration' 45' 250);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: Assert.InRange(queueStats.QueueTime.AverageDuration' 45' 250);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: Assert.InRange(queueStats.ProcessTime.AverageDuration' 10' 250);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanGetBufferedQueueMetricsAsync,The following statement contains a magic number: Assert.InRange(queueStats.ProcessTime.AverageDuration' 10' 250);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: var counter = await stats.GetCounterStatsAsync("c1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Counter("c1"' 5);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: counter = await stats.GetCounterStatsAsync("c1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(6' counter.Count);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Gauge("g1"' 5.34);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: var gauge = await stats.GetGaugeStatsAsync("g1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(5.34' gauge.Last);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(5.34' gauge.Max);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Gauge("g1"' 2.534);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: gauge = await stats.GetGaugeStatsAsync("g1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(2.534' gauge.Last);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(5.34' gauge.Max);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Timer("t1"' 50788);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: var timer = await stats.GetTimerStatsAsync("t1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(50788' timer.TotalDuration);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Timer("t1"' 98);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: metrics.Timer("t1"' 102);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: timer = await stats.GetTimerStatsAsync("t1"' SystemClock.UtcNow.AddMinutes(-5)' SystemClock.UtcNow);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(3' timer.Count);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(50788 + 98 + 102' timer.TotalDuration);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(50788 + 98 + 102' timer.TotalDuration);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanIncrementBufferedCounterAsync,The following statement contains a magic number: Assert.Equal(50788 + 98 + 102' timer.TotalDuration);
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(50));                      metrics.Counter(CounterName);                  });
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: var task = metrics.WaitForCounterAsync(CounterName' 1' TimeSpan.FromMilliseconds(500));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(50));                      metrics.Counter(CounterName);                  });
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: task = metrics.WaitForCounterAsync(CounterName' timeout: TimeSpan.FromMilliseconds(500));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(50));                      metrics.Counter(CounterName' 2);                  });
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(50));                      metrics.Counter(CounterName' 2);                  });
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: task = metrics.WaitForCounterAsync(CounterName' 2' TimeSpan.FromMilliseconds(500));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: task = metrics.WaitForCounterAsync(CounterName' 2' TimeSpan.FromMilliseconds(500));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanWaitForCounterAsync,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(500));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSendBufferedMetricsAsync,The following statement contains a magic number: Parallel.For(0' 100' i => metrics.Counter("c1"));
Magic Number,Foundatio.Tests.Metrics,MetricsClientTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Metrics\MetricsClientTestBase.cs,CanSendBufferedMetricsAsync,The following statement contains a magic number: Assert.Equal(100' counter.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDiscardDuplicateQueueEntriesAsync,The following statement contains a magic number: Assert.Equal(2' (await queue.GetQueueStatsAsync()).Enqueued);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,VerifyRetryAttemptsAsync,The following statement contains a magic number: const int retryCount = 2;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,VerifyRetryAttemptsAsync,The following statement contains a magic number: return VerifyRetryAttemptsImplAsync(queue' retryCount' TimeSpan.FromSeconds(3));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,VerifyDelayedRetryAttemptsAsync,The following statement contains a magic number: const int retryCount = 2;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,VerifyDelayedRetryAttemptsAsync,The following statement contains a magic number: return VerifyRetryAttemptsImplAsync(queue' retryCount' TimeSpan.FromSeconds(7));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: const int iterations = 100;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: queue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: Task.Run(async () => {                          _logger.LogTrace("Starting enqueue loop.");                          for (int index = 0; index < iterations; index++) {                              await SystemClock.SleepAsync(RandomData.GetInt(10' 30));                              await queue.EnqueueAsync(new SimpleWorkItem { Data = "Hello" });                          }                          _logger.LogTrace("Finished enqueuing.");                      });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: Task.Run(async () => {                          _logger.LogTrace("Starting enqueue loop.");                          for (int index = 0; index < iterations; index++) {                              await SystemClock.SleepAsync(RandomData.GetInt(10' 30));                              await queue.EnqueueAsync(new SimpleWorkItem { Data = "Hello" });                          }                          _logger.LogTrace("Finished enqueuing.");                      });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: var item = await queue.DequeueAsync(TimeSpan.FromSeconds(3));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueEfficientlyAsync,The following statement contains a magic number: Assert.InRange(timing.AverageDuration' 0' 75);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The following statement contains a magic number: const int iterations = 10;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The following statement contains a magic number: secondQueue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The following statement contains a magic number: var item = await secondQueue.DequeueAsync(TimeSpan.FromSeconds(3));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanResumeDequeueEfficientlyAsync,The following statement contains a magic number: Assert.InRange(timing.AverageDuration' 0' 75);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanQueueAndDequeueMultipleWorkItemsAsync,The following statement contains a magic number: const int workItemCount = 25;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanQueueAndDequeueMultipleWorkItemsAsync,The following statement contains a magic number: var workItem = await queue.DequeueAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanQueueAndDequeueMultipleWorkItemsAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed.TotalSeconds' 0' 5);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillNotWaitForItemAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed.TotalMilliseconds' 0' 100);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillWaitForItemAsync,The following statement contains a magic number: var workItem = await queue.DequeueAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillWaitForItemAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(5000));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillWaitForItemAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed' TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(5000));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillWaitForItemAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(500);                      await queue.EnqueueAsync(new SimpleWorkItem {                          Data = "Hello"                      });                  });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WillWaitForItemAsync,The following statement contains a magic number: Assert.True(sw.Elapsed > TimeSpan.FromMilliseconds(400));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,DequeueWaitWillGetSignaledAsync,The following statement contains a magic number: Task.Run(async () => {                      await SystemClock.SleepAsync(250);                      await queue.EnqueueAsync(new SimpleWorkItem {                          Data = "Hello"                      });                  });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,DequeueWaitWillGetSignaledAsync,The following statement contains a magic number: var workItem = await queue.DequeueAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,DequeueWaitWillGetSignaledAsync,The following statement contains a magic number: Assert.InRange(sw.Elapsed.TotalSeconds' 0' 2);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The following statement contains a magic number: queue.AttachBehavior(new MetricsQueueBehavior<SimpleWorkItem>(metrics' reportCountsInterval: TimeSpan.FromMilliseconds(100)' loggerFactory: Log));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The following statement contains a magic number: await resetEvent.WaitAsync(TimeSpan.FromSeconds(200));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHandleErrorInWorkerAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WorkItemsWillTimeoutAsync,The following statement contains a magic number: var queue = GetQueue(retryDelay: TimeSpan.Zero' workItemTimeout: TimeSpan.FromMilliseconds(50));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WorkItemsWillTimeoutAsync,The following statement contains a magic number: workItem = await queue.DequeueAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WorkItemsWillGetMovedToDeadletterAsync,The following statement contains a magic number: workItem = await queue.DequeueAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WorkItemsWillGetMovedToDeadletterAsync,The following statement contains a magic number: Assert.Equal(2' (await queue.GetQueueStatsAsync()).Dequeued);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,WorkItemsWillGetMovedToDeadletterAsync,The following statement contains a magic number: Assert.Equal(2' stats.Abandoned);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanAutoCompleteWorkerAsync,The following statement contains a magic number: await resetEvent.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The following statement contains a magic number: const int workItemCount = 500;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The following statement contains a magic number: const int workerCount = 3;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesAsync,The following statement contains a magic number: await SystemClock.SleepAsync(50);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDelayRetryAsync,The following statement contains a magic number: var queue = GetQueue(workItemTimeout: TimeSpan.FromMilliseconds(500)' retryDelay: TimeSpan.FromSeconds(1));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDelayRetryAsync,The following statement contains a magic number: workItem = await queue.DequeueAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDelayRetryAsync,The following statement contains a magic number: Assert.True(elapsed > TimeSpan.FromSeconds(.95));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: var behavior = new MetricsQueueBehavior<WorkItemData>(metrics' "metric"' TimeSpan.FromMilliseconds(100)' loggerFactory: Log);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: await queue.EnqueueAsync(new SimpleWorkItem { Id = 2' Data = "Testing" });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: await queue.EnqueueAsync(new SimpleWorkItem { Id = 3' Data = "Testing" });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(2' completedCount);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.InRange((await metrics.GetGaugeStatsAsync("metric.workitemdata.count")).Max' 1' 3);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' await metrics.GetCounterCountAsync("metric.workitemdata.simple.enqueued"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' await metrics.GetCounterCountAsync("metric.workitemdata.enqueued"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' await metrics.GetCounterCountAsync("metric.workitemdata.simple.dequeued"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' await metrics.GetCounterCountAsync("metric.workitemdata.dequeued"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(2' await metrics.GetCounterCountAsync("metric.workitemdata.simple.completed"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(2' await metrics.GetCounterCountAsync("metric.workitemdata.completed"));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' queueTiming.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' queueTiming.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' processTiming.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' processTiming.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' queueStats.Enqueued.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' queueStats.Dequeued.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(2' queueStats.Completed.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.InRange(queueStats.Count.Max' 1' 3);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' subQueueStats.Enqueued.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(3' subQueueStats.Dequeued.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRunWorkItemWithMetricsAsync,The following statement contains a magic number: Assert.Equal(2' subQueueStats.Completed.Count);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanRenewLockAsync,The following statement contains a magic number: var renewWait = TimeSpan.FromSeconds(workItemTimeout.TotalSeconds * .25d);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueWithLockingImpAsync,The following statement contains a magic number: await queue.StartWorkingAsync(async w => {                          _logger.LogInformation("Acquiring distributed lock in work item");                          var l = await distributedLock.AcquireAsync("test");                          Assert.NotNull(l);                          _logger.LogInformation("Acquired distributed lock");                          await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(250));                          await l.ReleaseAsync();                          _logger.LogInformation("Released distributed lock");                            await w.CompleteAsync();                          resetEvent.Set();                      });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanDequeueWithLockingImpAsync,The following statement contains a magic number: await resetEvent.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The following statement contains a magic number: const int workItemCount = 16;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The following statement contains a magic number: const int workerCount = 4;
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The following statement contains a magic number: await q.StartWorkingAsync(async w => {                              if (_logger.IsEnabled(LogLevel.Information))                                  _logger.LogInformation("[{Instance}] Acquiring distributed lock in work item: {Id}"' instanceCount' w.Id);                              var l = await distributedLock.AcquireAsync("test");                              Assert.NotNull(l);                              if (_logger.IsEnabled(LogLevel.Information))                                  _logger.LogInformation("[{Instance}] Acquired distributed lock: {Id}"' instanceCount' w.Id);                              await SystemClock.SleepAsync(TimeSpan.FromMilliseconds(50));                              await l.ReleaseAsync();                              if (_logger.IsEnabled(LogLevel.Information))                                  _logger.LogInformation("[{Instance}] Released distributed lock: {Id}"' instanceCount' w.Id);                                await w.CompleteAsync();                              info.IncrementCompletedCount();                              countdown.Signal();                              if (_logger.IsEnabled(LogLevel.Information))                                  _logger.LogInformation("[{Instance}] Signaled countdown: {Id}"' instanceCount' w.Id);                          });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,CanHaveMultipleQueueInstancesWithLockingImplAsync,The following statement contains a magic number: await SystemClock.SleepAsync(50);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,MaintainJobNotAbandon_NotWorkTimeOutEntry,The following statement contains a magic number: var queue = GetQueue(retries: 0' workItemTimeout: TimeSpan.FromMilliseconds(100)' retryDelay: TimeSpan.Zero);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,MaintainJobNotAbandon_NotWorkTimeOutEntry,The following statement contains a magic number: queue.EnqueueAsync(new SimpleWorkItem {                      Data = "Hello World"'                      Id = 2                  });
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,MaintainJobNotAbandon_NotWorkTimeOutEntry,The following statement contains a magic number: await SystemClock.SleepAsync(60);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,MaintainJobNotAbandon_NotWorkTimeOutEntry,The following statement contains a magic number: await SystemClock.SleepAsync(60);
Magic Number,Foundatio.Tests.Queue,QueueTestBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Queue\QueueTestBase.cs,MaintainJobNotAbandon_NotWorkTimeOutEntry,The following statement contains a magic number: Assert.Equal(2' stats.Completed);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetPagedFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetPagedFileListAsync(100)).Files.Count);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetPagedFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetPagedFileListAsync(100)).Files.Count);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetPagedFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Single((await storage.GetPagedFileListAsync(2' @"long\path\in\here\*stuff*.json")).Files);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetPagedFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Single((await storage.GetPagedFileListAsync(2'@"archived\*")).Files);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanGetPagedFileListForSingleFolderAsync,The following statement contains a magic number: Assert.Single((await storage.GetPagedFileListAsync(2'@"q\*")).Files);
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteEntireFolderAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteEntireFolderWithWildcardAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteEntireFolderWithWildcardAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync(@"x\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync(@"x\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync(@"x\nested\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync(@"x\*.txt")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteNestedFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteNestedFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync(@"x\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteNestedFolderAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync(@"x\nested\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteNestedFolderAsync,The following statement contains a magic number: Assert.Equal(2' (await storage.GetFileListAsync(@"x\*.txt")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesInNestedFolderAsync,The following statement contains a magic number: Assert.Equal(5' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesInNestedFolderAsync,The following statement contains a magic number: Assert.Equal(5' (await storage.GetFileListAsync(@"x\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesInNestedFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync(@"x\nested\*")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesInNestedFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync(@"x\*.txt")).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanDeleteSpecificFilesInNestedFolderAsync,The following statement contains a magic number: Assert.Equal(3' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The following statement contains a magic number: await Run.InParallelAsync(10' async i => {                      var ev = new PostInfo {                          ApiVersion = 2'                          CharSet = "utf8"'                          ContentEncoding = "application/json"'                          Data = Encoding.UTF8.GetBytes("{}")'                          IpAddress = "127.0.0.1"'                          MediaType = "gzip"'                          ProjectId = i.ToString()'                          UserAgent = "test"                      };                        await storage.SaveObjectAsync(Path.Combine(queueFolder' i + ".json")' ev);                      queueItems.Add(i);                  });
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The following statement contains a magic number: await Run.InParallelAsync(10' async i => {                      var ev = new PostInfo {                          ApiVersion = 2'                          CharSet = "utf8"'                          ContentEncoding = "application/json"'                          Data = Encoding.UTF8.GetBytes("{}")'                          IpAddress = "127.0.0.1"'                          MediaType = "gzip"'                          ProjectId = i.ToString()'                          UserAgent = "test"                      };                        await storage.SaveObjectAsync(Path.Combine(queueFolder' i + ".json")' ev);                      queueItems.Add(i);                  });
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The following statement contains a magic number: Assert.Equal(10' (await storage.GetFileListAsync()).Count());
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The following statement contains a magic number: await Run.InParallelAsync(10' async i => {                      string path = Path.Combine(queueFolder' queueItems.Random() + ".json");                      var eventPost = await storage.GetEventPostAndSetActiveAsync(Path.Combine(queueFolder' RandomData.GetInt(0' 25) + ".json")' _logger);                      if (eventPost == null)                          return;                        if (RandomData.GetBool()) {                          await storage.CompleteEventPostAsync(path' eventPost.ProjectId' SystemClock.UtcNow' true' _logger);                      } else                          await storage.SetNotActiveAsync(path' _logger);                  });
Magic Number,Foundatio.Tests.Storage,FileStorageTestsBase,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Storage\FileStorageTestsBase.cs,CanConcurrentlyManageFilesAsync,The following statement contains a magic number: await Run.InParallelAsync(10' async i => {                      string path = Path.Combine(queueFolder' queueItems.Random() + ".json");                      var eventPost = await storage.GetEventPostAndSetActiveAsync(Path.Combine(queueFolder' RandomData.GetInt(0' 25) + ".json")' _logger);                      if (eventPost == null)                          return;                        if (RandomData.GetBool()) {                          await storage.CompleteEventPostAsync(path' eventPost.ProjectId' SystemClock.UtcNow' true' _logger);                      } else                          await storage.SetNotActiveAsync(path' _logger);                  });
Magic Number,Foundatio.Tests.Utility,Configuration,D:\research\architectureSmells\repos\exceptionless_Foundatio\src\Foundatio.TestHarness\Utility\Configuration.cs,GetBasePath,The following statement contains a magic number: i < 5
