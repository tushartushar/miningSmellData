Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Foundatio.HostingSample,Sample1Job,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Jobs\Sample1Job.cs,RunAsync,The length of the statement  "                _logger.LogTrace("Sample1Job Run #{IterationCount} Thread={ManagedThreadId}"' _iterationCount' Thread.CurrentThread.ManagedThreadId); " is 133.
Long Statement,Foundatio.HostingSample,Sample2Job,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Jobs\Sample2Job.cs,RunAsync,The length of the statement  "                _logger.LogTrace("Sample2Job Run #{IterationCount} Thread={ManagedThreadId}"' _iterationCount' Thread.CurrentThread.ManagedThreadId); " is 133.
Long Statement,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The length of the statement  "                    // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available " is 124.
Long Statement,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The length of the statement  "                        s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5))); " is 174.
Magic Number,Foundatio.HostingSample,EvenMinutesJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Jobs\EvenMinutesJob.cs,RunAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Foundatio.HostingSample,EveryMinuteJob,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Jobs\EveryMinuteJob.cs,RunAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(4));
Magic Number,Foundatio.HostingSample,Sample2Job,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Jobs\Sample2Job.cs,CheckHealthAsync,The following statement contains a magic number: SystemClock.UtcNow.Subtract(_lastRun.Value) > TimeSpan.FromSeconds(5)
Magic Number,Foundatio.HostingSample,MyCriticalHealthCheck,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\MyCriticalHealthCheck.cs,CheckHealthAsync,The following statement contains a magic number: return DateTime.Now.Subtract(_startTime) > TimeSpan.FromSeconds(3) ?                  Task.FromResult(HealthCheckResult.Healthy("Critical resource is available."))                  : Task.FromResult(HealthCheckResult.Unhealthy("Critical resource not available."));
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,Program,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Program.cs,CreateHostBuilder,The following statement contains a magic number: var builder = Host.CreateDefaultBuilder(args)                  .UseSerilog()                  .ConfigureWebHostDefaults(webBuilder => {                      webBuilder.Configure(app => {                          app.UseSerilogRequestLogging();                                                    app.UseHealthChecks("/health");                          app.UseReadyHealthChecks("Critical");                            // this middleware will return Service Unavailable until the startup actions have completed                          app.UseWaitForStartupActionsBeforeServingRequests();                            // add mvc or other request middleware after the UseWaitForStartupActionsBeforeServingRequests call                      });                  })                  .ConfigureServices(s => {                      // will shutdown the host if no jobs are running                      s.AddJobLifetimeService();                        // inserts a startup action that does not complete until the critical health checks are healthy                      // gets inserted as 1st startup action so that any other startup actions dont run until the critical resources are available                      s.AddStartupActionToWaitForHealthChecks("Critical");                        s.AddHealthChecks().AddCheck<MyCriticalHealthCheck>("My Critical Resource"' tags: new[] { "Critical" });                        // add health check that does not return healthy until the startup actions have completed                      // useful for readiness checks                      s.AddHealthChecks().AddCheckForStartupActions("Critical");                        if (everyMinute)                          s.AddCronJob<EveryMinuteJob>("* * * * *");                        if (evenMinutes)                          s.AddCronJob<EvenMinutesJob>("*/2 * * * *");                        if (sample1)                          s.AddJob(sp => new Sample1Job(sp.GetRequiredService<ILoggerFactory>())' o => o.ApplyDefaults<Sample1Job>().WaitForStartupActions(true).InitialDelay(TimeSpan.FromSeconds(5)));                        if (sample2) {                          s.AddHealthChecks().AddCheck<Sample2Job>("Sample2Job");                          s.AddJob<Sample2Job>(true);                      }                        // if you don't specify priority' actions will automatically be assigned an incrementing priority starting at 0                      s.AddStartupAction("Test1"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 1 action.");                          for (int i = 0; i < 3; i++) {                              await Task.Delay(1000);                              logger.LogTrace("Running startup 1 action...");                          }                            logger.LogTrace("Done running startup 1 action.");                      });                        // then these startup actions will run concurrently since they both have the same priority                      s.AddStartupAction<MyStartupAction>(priority: 100);                      s.AddStartupAction<OtherStartupAction>(priority: 100);                        s.AddStartupAction("Test2"' async sp => {                          var logger = sp.GetRequiredService<ILogger<Program>>();                          logger.LogTrace("Running startup 2 action.");                          for (int i = 0; i < 2; i++) {                              await Task.Delay(1500);                              logger.LogTrace("Running startup 2 action...");                          }                          //throw new ApplicationException("Boom goes the startup.");                          logger.LogTrace("Done running startup 2 action.");                      });                                            //s.AddStartupAction("Boom"' () => throw new ApplicationException("Boom goes the startup"));                  });
Magic Number,Foundatio.HostingSample,MyStartupAction,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Startup\MyStartupAction.cs,RunAsync,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Foundatio.HostingSample,MyStartupAction,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Startup\MyStartupAction.cs,RunAsync,The following statement contains a magic number: i < 5
Magic Number,Foundatio.HostingSample,OtherStartupAction,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Startup\OtherStartupAction.cs,RunAsync,The following statement contains a magic number: await Task.Delay(900);
Magic Number,Foundatio.HostingSample,OtherStartupAction,D:\research\architectureSmells\repos\exceptionless_Foundatio\samples\Foundatio.HostingSample\Startup\OtherStartupAction.cs,RunAsync,The following statement contains a magic number: i < 5
