Implementation smell,Namespace,Class,File,Method,Description
Long Method,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The method has 143 lines of code.
Long Statement,Foundatio.Jobs.Commands.Extensions,TypeHelper,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\Extensions\TypeHelper.cs,GetDerivedTypes,The length of the statement  "                    types.AddRange(from type in assembly.GetTypes() where type.IsClass && !type.IsNotPublic && !type.IsAbstract && typeof(TAction).IsAssignableFrom(type) select type); " is 163.
Long Statement,Foundatio.Jobs.Commands.Extensions,TypeHelper,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\Extensions\TypeHelper.cs,GetDerivedTypes,The length of the statement  "                    Trace.TraceInformation("Unable to search types from assembly \"{0}\" for plugins of type \"{1}\": {2}"' assembly.FullName' typeof(TAction).Name' loaderMessages); " is 161.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                        var isContinuousOption = c.Option("-c --continuous <BOOL>"' "Wether the job should be run continuously."' CommandOptionType.SingleValue); " is 137.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                        var intervalOption = c.Option("-i --interval <INTERVAL>"' "The amount of time to delay between job runs when running continuously."' CommandOptionType.SingleValue); " is 164.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                        var delayOption = c.Option("-d --delay <TIME>"' "The amount of time to delay before the initial job run."' CommandOptionType.SingleValue); " is 138.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                        var limitOption = c.Option("-l --iteration-limit <COUNT>"' "The number of times the job should be run before exiting."' CommandOptionType.SingleValue); " is 151.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                            return new JobRunner(job' loggerFactory' runContinuous: isContinuous' interval: interval' initialDelay: delay' iterationLimit: limit).RunInConsole(); " is 149.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                var isContinuousOption = c.Option("-c --continuous <BOOL>"' "Wether the job should be run continuously."' CommandOptionType.SingleValue); " is 137.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                var intervalOption = c.Option("-i --interval <NAME>"' "The amount of time to delay between job runs when running continuously."' CommandOptionType.SingleValue); " is 160.
Long Statement,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The length of the statement  "                    return new JobRunner(() => lazyServiceProvider.Value.GetService(jobType) as IJob' loggerFactory' runContinuous: isContinuous' interval: interval).RunInConsole(); " is 161.
Magic Number,Foundatio.Jobs.Commands,JobCommands,C:\repos\exceptionless_Foundatio\src\Foundatio.Jobs.Commands\JobCommands.cs,Run,The following statement contains a magic number: foreach (var jobType in jobTypes) {                  var jobAttribute = jobType.GetCustomAttribute<JobAttribute>() ?? new JobAttribute();                  string jobName = jobAttribute.Name;                    if (String.IsNullOrEmpty(jobName)) {                      jobName = jobType.Name;                      if (jobName.EndsWith("Job"))                          jobName = jobName.Substring(0' jobName.Length - 3);                        jobName = jobName.ToLower();                  }                    app.Command(jobName' c => {                      if (!String.IsNullOrEmpty(jobAttribute.Description))                          c.Description = jobAttribute.Description;                        var configureMethod = jobType.GetMethod("Configure"' BindingFlags.Static | BindingFlags.Public);                      if (configureMethod != null) {                          configureMethod.Invoke(null' new[] { new JobCommandContext(c' jobType' lazyServiceProvider' loggerFactory) });                      } else {                          var isContinuousOption = c.Option("-c --continuous <BOOL>"' "Wether the job should be run continuously."' CommandOptionType.SingleValue);                          var intervalOption = c.Option("-i --interval <INTERVAL>"' "The amount of time to delay between job runs when running continuously."' CommandOptionType.SingleValue);                          var delayOption = c.Option("-d --delay <TIME>"' "The amount of time to delay before the initial job run."' CommandOptionType.SingleValue);                          var limitOption = c.Option("-l --iteration-limit <COUNT>"' "The number of times the job should be run before exiting."' CommandOptionType.SingleValue);                            c.OnExecute(() => {                              bool isContinuous = jobAttribute.IsContinuous;                              TimeSpan? interval = null;                              TimeSpan? delay = null;                              int limit = -1;                                if (isContinuousOption.HasValue())                                  Boolean.TryParse(isContinuousOption.Value()' out isContinuous);                                if (!String.IsNullOrEmpty(jobAttribute.Interval))                                  TimeUnit.TryParse(jobAttribute.Interval' out interval);                                if (intervalOption.HasValue())                                  TimeUnit.TryParse(intervalOption.Value()' out interval);                                if (!String.IsNullOrEmpty(jobAttribute.InitialDelay))                                  TimeUnit.TryParse(jobAttribute.InitialDelay' out delay);                                if (delayOption.HasValue())                                  TimeUnit.TryParse(delayOption.Value()' out delay);                                if (jobAttribute.IterationLimit > 0)                                  limit = jobAttribute.IterationLimit;                                if (limitOption.HasValue())                                  Int32.TryParse(limitOption.Value()' out limit);                                var job = lazyServiceProvider.Value.GetService(jobType) as IJob;                              return new JobRunner(job' loggerFactory' runContinuous: isContinuous' interval: interval' initialDelay: delay' iterationLimit: limit).RunInConsole();                          });                      }                      c.HelpOption("-?|-h|--help");                  });              }
