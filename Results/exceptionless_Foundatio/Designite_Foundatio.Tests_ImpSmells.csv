Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,GetQueue,The method has 6 parameters. Parameters: retries' workItemTimeout' retryDelay' retryMultipliers' deadLetterMaxItems' runQueueMaintenance
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelJob,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobs,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The length of the parameter timeoutCancellationTokenSource is 30.
Long Statement,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The length of the statement  "                var runnerTask = new JobRunner(job' Log' instanceCount: 5' iterationLimit: 10000' interval: TimeSpan.FromMilliseconds(1)).RunAsync(timeoutCancellationTokenSource.Token); " is 169.
Long Statement,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The length of the statement  "                var jobs = new List<ThrottledJob>(new[] { new ThrottledJob(client' Log)' new ThrottledJob(client' Log)' new ThrottledJob(client' Log) }); " is 137.
Long Statement,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The length of the statement  "                    await Task.WhenAll(jobs.Select(job => job.RunContinuousAsync(TimeSpan.FromMilliseconds(1)' cancellationToken: timeoutCancellationTokenSource.Token))); " is 150.
Long Statement,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunBadWorkItem,The length of the statement  "            using (var queue = new InMemoryQueue<WorkItemData>(o => o.RetryDelay(TimeSpan.FromMilliseconds(500)).LoggerFactory(Log))) { " is 123.
Long Statement,Foundatio.Tests.Utility,ConfigurationTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ConnectionStringParserTests.cs,CanParseConnectionString,The length of the statement  "            const string connectionString = "provider=azurestorage;DefaultEndpointsProtocol=https;AccountName=test;AccountKey=nx4TKwaaaaaaaaaa8t51oPyOErc/4N0TOjrMy6aaaaaabDMbFiK+Gf5rLr6XnU1aaaaaqiX2Yik7tvLcwp4lw==;EndpointSuffix=core.windows.net"; " is 235.
Long Statement,Foundatio.Tests.Utility,ConfigurationTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ConnectionStringParserTests.cs,CanParseConnectionString,The length of the statement  "            Assert.Equal("nx4TKwaaaaaaaaaa8t51oPyOErc/4N0TOjrMy6aaaaaabDMbFiK+Gf5rLr6XnU1aaaaaqiX2Yik7tvLcwp4lw=="' data["AccountKey"]); " is 124.
Long Statement,Foundatio.Tests.Utility,TestUdpListener,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\TestUdpListener.cs,StartListening,The length of the statement  "                _receiveTask = Task.Factory.StartNew(() => ProcessMessages(_cancellationTokenSource.Token)' _cancellationTokenSource.Token); " is 124.
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: var cache = new InMemoryCacheClient(o => o.MaxItems(10).CloneValues(true));
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: Assert.Equal(10' cache.Count);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: Assert.Equal(10' cache.Count);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: await SystemClock.SleepAsync(50);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: await cache.SetAsync("next2"' 2);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: Assert.Equal(2' cache.Misses);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: Assert.Equal(2' cache.Misses);
Magic Number,Foundatio.Tests.Caching,InMemoryCacheClientTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Caching\InMemoryCacheClientTests.cs,CanSetMaxItems,The following statement contains a magic number: x < 5
Magic Number,Foundatio.Tests.Hosting,HostingTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Hosting\HostingTests.cs,WillStopWaitingWhenStartupActionFails,The following statement contains a magic number: Assert.True(sw.Elapsed < TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Hosting,TestServerExtensions,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Hosting\TestServerExtensions.cs,WaitForReadyAsync,The following statement contains a magic number: maxWaitTime = maxWaitTime ?? TimeSpan.FromSeconds(5);
Magic Number,Foundatio.Tests.Hosting,TestServerExtensions,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Hosting\TestServerExtensions.cs,WaitForReadyAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelJob,The following statement contains a magic number: var timeoutCancellationTokenSource = new CancellationTokenSource(1000);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelJob,The following statement contains a magic number: await SystemClock.SleepAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanStopLongRunningJob,The following statement contains a magic number: var cts = new CancellationTokenSource(1000);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanStopLongRunningCronJob,The following statement contains a magic number: var cts = new CancellationTokenSource(1000);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobs,The following statement contains a magic number: await job.RunContinuousAsync(iterationLimit: 2);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobs,The following statement contains a magic number: Assert.Equal(3' job.RunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobs,The following statement contains a magic number: Assert.InRange(sw.Elapsed' TimeSpan.FromMilliseconds(95)' TimeSpan.FromMilliseconds(800));
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobs,The following statement contains a magic number: Assert.InRange(sw.Elapsed' TimeSpan.FromMilliseconds(95)' TimeSpan.FromMilliseconds(800));
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The following statement contains a magic number: await new JobRunner(job' Log' instanceCount: 5' iterationLimit: 1).RunAsync(timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The following statement contains a magic number: Assert.Equal(5' HelloWorldJob.GlobalRunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The following statement contains a magic number: await new JobRunner(job' Log' instanceCount: 5' iterationLimit: 100).RunAsync(timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The following statement contains a magic number: await new JobRunner(job' Log' instanceCount: 5' iterationLimit: 100).RunAsync(timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunMultipleInstances,The following statement contains a magic number: Assert.Equal(500' HelloWorldJob.GlobalRunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The following statement contains a magic number: var timeoutCancellationTokenSource = new CancellationTokenSource(100);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The following statement contains a magic number: await job.RunContinuousAsync(TimeSpan.FromSeconds(1)' 5' timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The following statement contains a magic number: timeoutCancellationTokenSource = new CancellationTokenSource(500);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The following statement contains a magic number: var runnerTask = new JobRunner(job' Log' instanceCount: 5' iterationLimit: 10000' interval: TimeSpan.FromMilliseconds(1)).RunAsync(timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanCancelContinuousJobs,The following statement contains a magic number: var runnerTask = new JobRunner(job' Log' instanceCount: 5' iterationLimit: 10000' interval: TimeSpan.FromMilliseconds(1)).RunAsync(timeoutCancellationTokenSource.Token);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithLocks,The following statement contains a magic number: await job.RunContinuousAsync(iterationLimit: 2);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithLocks,The following statement contains a magic number: Assert.Equal(3' job.RunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithLocks,The following statement contains a magic number: await Run.InParallelAsync(2' i => job.RunAsync());
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithLocks,The following statement contains a magic number: Assert.Equal(4' job.RunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The following statement contains a magic number: Assert.InRange(jobs.Sum(j => j.RunCount)' 4' 14);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The following statement contains a magic number: Assert.InRange(jobs.Sum(j => j.RunCount)' 4' 14);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 20' 1500);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunThrottledJobs,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 20' 1500);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithInterval,The following statement contains a magic number: var time = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithInterval,The following statement contains a magic number: var interval = TimeSpan.FromHours(.75);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithInterval,The following statement contains a magic number: await job.RunContinuousAsync(iterationLimit: 2' interval: interval);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithInterval,The following statement contains a magic number: Assert.Equal(2' job.RunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithIntervalBetweenFailingJob,The following statement contains a magic number: var time = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithIntervalBetweenFailingJob,The following statement contains a magic number: var interval = TimeSpan.FromHours(.75);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithIntervalBetweenFailingJob,The following statement contains a magic number: await job.RunContinuousAsync(iterationLimit: 2' interval: interval);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,CanRunJobsWithIntervalBetweenFailingJob,The following statement contains a magic number: Assert.Equal(2' job.RunCount);
Magic Number,Foundatio.Tests.Jobs,JobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\JobTests.cs,JobLoopPerf,The following statement contains a magic number: const int iterations = 10000;
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItem,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 0; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItem,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 0; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItem,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 0; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItem,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(12);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItem,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: const int workItemCount = 1000;
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                              var jobData = ctx.GetData<MyWorkItem>();                              Assert.Equal("Test"' jobData.SomeData);                                int jobWorkTotal = jobIds.AddOrUpdate(ctx.JobId' 1' (key' value) => value + 1);                              if (jobData.Index % 100 == 0 && _logger.IsEnabled(LogLevel.Trace))                                  _logger.LogTrace("Job {JobId} processing work item #: {JobWorkTotal}"' ctx.JobId' jobWorkTotal);                                for (int i = 0; i < 10; i++)                                  await ctx.ReportProgressAsync(10 * i);                                if (RandomData.GetBool(1)) {                                  Interlocked.Increment(ref errors);                                  throw new Exception("Boom!");                              }                          });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                              var jobData = ctx.GetData<MyWorkItem>();                              Assert.Equal("Test"' jobData.SomeData);                                int jobWorkTotal = jobIds.AddOrUpdate(ctx.JobId' 1' (key' value) => value + 1);                              if (jobData.Index % 100 == 0 && _logger.IsEnabled(LogLevel.Trace))                                  _logger.LogTrace("Job {JobId} processing work item #: {JobWorkTotal}"' ctx.JobId' jobWorkTotal);                                for (int i = 0; i < 10; i++)                                  await ctx.ReportProgressAsync(10 * i);                                if (RandomData.GetBool(1)) {                                  Interlocked.Increment(ref errors);                                  throw new Exception("Boom!");                              }                          });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                              var jobData = ctx.GetData<MyWorkItem>();                              Assert.Equal("Test"' jobData.SomeData);                                int jobWorkTotal = jobIds.AddOrUpdate(ctx.JobId' 1' (key' value) => value + 1);                              if (jobData.Index % 100 == 0 && _logger.IsEnabled(LogLevel.Trace))                                  _logger.LogTrace("Job {JobId} processing work item #: {JobWorkTotal}"' ctx.JobId' jobWorkTotal);                                for (int i = 0; i < 10; i++)                                  await ctx.ReportProgressAsync(10 * i);                                if (RandomData.GetBool(1)) {                                  Interlocked.Increment(ref errors);                                  throw new Exception("Boom!");                              }                          });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: await messageBus.SubscribeAsync<WorkItemStatus>(status => {                              if (status.Progress == 100 && _logger.IsEnabled(LogLevel.Trace))                                  _logger.LogTrace("Progress: {Progress}"' status.Progress);                                if (status.Progress < 100)                                  return;                                lock (completedItemsLock)                                  completedItems.Add(status.WorkItemId);                          });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: await messageBus.SubscribeAsync<WorkItemStatus>(status => {                              if (status.Progress == 100 && _logger.IsEnabled(LogLevel.Trace))                                  _logger.LogTrace("Progress: {Progress}"' status.Progress);                                if (status.Progress < 100)                                  return;                                lock (completedItemsLock)                                  completedItems.Add(status.WorkItemId);                          });
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: var cancellationTokenSource = new CancellationTokenSource(10000);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanHandleMultipleWorkItemInstances,The following statement contains a magic number: Assert.Equal(3' jobIds.Count);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithClassHandler,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(11);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithClassHandler,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithDelegateHandler,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 1; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      }' Log.CreateLogger("MyWorkItem"));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithDelegateHandler,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 1; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      }' Log.CreateLogger("MyWorkItem"));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithDelegateHandler,The following statement contains a magic number: handlerRegistry.Register<MyWorkItem>(async ctx => {                          var jobData = ctx.GetData<MyWorkItem>();                          Assert.Equal("Test"' jobData.SomeData);                            for (int i = 1; i < 10; i++) {                              await SystemClock.SleepAsync(100);                              await ctx.ReportProgressAsync(10 * i);                          }                      }' Log.CreateLogger("MyWorkItem"));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithDelegateHandler,The following statement contains a magic number: var countdown = new AsyncCountdownEvent(11);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemWithDelegateHandler,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemJobUntilEmpty,The following statement contains a magic number: Assert.Equal(2' stats.Enqueued);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemJobUntilEmpty,The following statement contains a magic number: Assert.Equal(2' stats.Dequeued);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunWorkItemJobUntilEmpty,The following statement contains a magic number: Assert.Equal(2' stats.Completed);
Magic Number,Foundatio.Tests.Jobs,WorkItemJobTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,CanRunBadWorkItem,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(2));
Magic Number,Foundatio.Tests.Jobs,MyWorkItemHandler,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,HandleItemAsync,The following statement contains a magic number: await SystemClock.SleepAsync(100);
Magic Number,Foundatio.Tests.Jobs,MyWorkItemHandler,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,HandleItemAsync,The following statement contains a magic number: await context.ReportProgressAsync(10 * i);
Magic Number,Foundatio.Tests.Jobs,MyWorkItemHandler,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Jobs\WorkItemJobTests.cs,HandleItemAsync,The following statement contains a magic number: i < 10
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CounterWithValue,The following statement contains a magic number: _client.Counter("counter"' 5);
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,Gauge,The following statement contains a magic number: _client.Gauge("gauge"' 1.1);
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendOffline,The following statement contains a magic number: SystemClock.Sleep(1000);
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendOffline,The following statement contains a magic number: _listener.StopListening(2);
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendOffline,The following statement contains a magic number: Assert.Equal(2' messages.Length);
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendMultithreaded,The following statement contains a magic number: const int iterations = 100;
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendMultithreaded,The following statement contains a magic number: Parallel.For(0' iterations' i => {                  SystemClock.Sleep(5);                  _client.Counter("counter");              });
Magic Number,Foundatio.Tests.Metrics,StatsDMetricsTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Metrics\StatsDMetricsTests.cs,CanSendMultithreaded,The following statement contains a magic number: Assert.InRange(messages.Length' iterations * 0.9' iterations);
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,GetQueue,The following statement contains a magic number: _queue = new InMemoryQueue<SimpleWorkItem>(o => o                          .RetryDelay(retryDelay.GetValueOrDefault(TimeSpan.FromMinutes(1)))                          .Retries(retries)                          .RetryMultipliers(retryMultipliers ?? new [] { 1' 3' 5' 10 })                          .WorkItemTimeout(workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5)))                          .LoggerFactory(Log));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,GetQueue,The following statement contains a magic number: _queue = new InMemoryQueue<SimpleWorkItem>(o => o                          .RetryDelay(retryDelay.GetValueOrDefault(TimeSpan.FromMinutes(1)))                          .Retries(retries)                          .RetryMultipliers(retryMultipliers ?? new [] { 1' 3' 5' 10 })                          .WorkItemTimeout(workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5)))                          .LoggerFactory(Log));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,GetQueue,The following statement contains a magic number: _queue = new InMemoryQueue<SimpleWorkItem>(o => o                          .RetryDelay(retryDelay.GetValueOrDefault(TimeSpan.FromMinutes(1)))                          .Retries(retries)                          .RetryMultipliers(retryMultipliers ?? new [] { 1' 3' 5' 10 })                          .WorkItemTimeout(workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5)))                          .LoggerFactory(Log));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,GetQueue,The following statement contains a magic number: _queue = new InMemoryQueue<SimpleWorkItem>(o => o                          .RetryDelay(retryDelay.GetValueOrDefault(TimeSpan.FromMinutes(1)))                          .Retries(retries)                          .RetryMultipliers(retryMultipliers ?? new [] { 1' 3' 5' 10 })                          .WorkItemTimeout(workItemTimeout.GetValueOrDefault(TimeSpan.FromMinutes(5)))                          .LoggerFactory(Log));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,TestAsyncEvents,The following statement contains a magic number: var disposables = new List<IDisposable>(5);
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,TestAsyncEvents,The following statement contains a magic number: disposables.Add(q.Enqueuing.AddHandler(async (sender' args) => {                          await SystemClock.SleepAsync(250);                          _logger.LogInformation("First Enqueuing.");                      }));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,TestAsyncEvents,The following statement contains a magic number: disposables.Add(q.Enqueuing.AddHandler(async (sender' args) => {                          await SystemClock.SleepAsync(250);                          _logger.LogInformation("Second Enqueuing.");                      }));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,TestAsyncEvents,The following statement contains a magic number: disposables.Add(q.Enqueued.AddHandler(async (sender' args) => {                          await SystemClock.SleepAsync(250);                          _logger.LogInformation("First.");                      }));
Magic Number,Foundatio.Tests.Queue,InMemoryQueueTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Queue\InMemoryQueueTests.cs,TestAsyncEvents,The following statement contains a magic number: disposables.Add(q.Enqueued.AddHandler(async (sender' args) => {                          await SystemClock.SleepAsync(250);                          _logger.LogInformation("Second.");                      }));
Magic Number,Foundatio.Tests.Utility,ConfigurationTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ConnectionStringParserTests.cs,CanParseConnectionString,The following statement contains a magic number: Assert.Equal(5' data.Count);
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRun,The following statement contains a magic number: await resetEvent.WaitAsync(new CancellationTokenSource(500).Token);
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunWithMinimumInterval,The following statement contains a magic number: return CanRunConcurrentlyAsync(TimeSpan.FromMilliseconds(100));
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunConcurrentlyAsync,The following statement contains a magic number: const int iterations = 2;
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunConcurrentlyAsync,The following statement contains a magic number: await SystemClock.SleepAsync(250);
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunConcurrentlyAsync,The following statement contains a magic number: var t = Task.Run(async () => {                      for (int i = 0; i < iterations; i++) {                          await SystemClock.SleepAsync(10);                          timer.ScheduleNext();                      }                  });
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunConcurrentlyAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromMilliseconds(300));
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRunConcurrentlyAsync,The following statement contains a magic number: await countdown.WaitAsync(TimeSpan.FromSeconds(1.5));
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRecoverFromError,The following statement contains a magic number: await resetEvent.WaitAsync(new CancellationTokenSource(800).Token);
Magic Number,Foundatio.Tests.Utility,ScheduledTimerTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\ScheduledTimerTests.cs,CanRecoverFromError,The following statement contains a magic number: Assert.Equal(2' hits);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: SystemClock.Sleep(250);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 225' 400);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 225' 400);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: SystemClock.Sleep(1000);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 0' 30);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: Assert.InRange(afterSleepNow.Subtract(now).TotalMilliseconds' 950' 1100);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleep,The following statement contains a magic number: Assert.InRange(afterSleepNow.Subtract(now).TotalMilliseconds' 950' 1100);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: await SystemClock.SleepAsync(250);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 225' 3000);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 225' 3000);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: await SystemClock.SleepAsync(1000);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 0' 30);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: Assert.InRange(afterSleepNow.Subtract(now).TotalMilliseconds' 950' 5000);
Magic Number,Foundatio.Tests.Utility,SystemClockTests,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\SystemClockTests.cs,CanSleepAsync,The following statement contains a magic number: Assert.InRange(afterSleepNow.Subtract(now).TotalMilliseconds' 950' 5000);
Magic Number,Foundatio.Tests.Utility,TestUdpListener,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\TestUdpListener.cs,StartListening,The following statement contains a magic number: _listener.Client.ReceiveTimeout = 1000;
Magic Number,Foundatio.Tests.Utility,TestUdpListener,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\TestUdpListener.cs,StopListening,The following statement contains a magic number: _receiveTask?.Wait(1000);
Magic Number,Foundatio.Tests.Utility,TestUdpListener,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\TestUdpListener.cs,StopListening,The following statement contains a magic number: StopListening(expectedMessageCount' new CancellationTokenSource(10000).Token);
Magic Number,Foundatio.Tests.Utility,TestUdpListener,D:\research\architectureSmells\repos\exceptionless_Foundatio\tests\Foundatio.Tests\Utility\TestUdpListener.cs,StopListening,The following statement contains a magic number: Thread.Sleep(100);
