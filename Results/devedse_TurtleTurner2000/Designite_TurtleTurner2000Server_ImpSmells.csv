Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,Cyclomatic complexity of the method is 23
Complex Method,TurtleTurner2000Server,StoreAppListenerRouter,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\StoreAppListenerRouter.cs,kenServer_ReceivedMessage,Cyclomatic complexity of the method is 20
Long Parameter List,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The method has 5 parameters.
Long Statement,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The length of the statement  "		g.DrawRectangle (pen' r.X / delendoor + i' r.Y / delendoor + i' r.Width / delendoor - 2 * i' r.Height / delendoor - 2 * i); " is 123.
Long Statement,TutleTurner200.Server,StoreAppListener,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\StoreAppListener.cs,OnConnection,The length of the statement  "			// Display the string on the screen. The event is invoked on a non-UI thread' so we need to marshal the text back to the UI thread. " is 131.
Empty Catch Block,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,textBox1_TextChanged,The method has an empty catch block.
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Form1,The following statement contains a magic number: deveServer = new DeveServer (1337);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: while (true) {  	DeveIncomingMessage inc;  	if ((inc = deveServer.ReadMessage ()) != null) {  		switch (inc.MessageType) {  		case DeveMessageType.KeepAlive:  			break;  		case DeveMessageType.Data:  			int hetTypeMessage = inc.ReadInt32 ();  			if (hetTypeMessage == 0)//Een join message  			 {  				int hetTypeDevice = inc.ReadInt32 ();  				if (hetTypeDevice == 0)//Een screen client  				 {  					DebugMSG ("Het is een screen client :D:D:D");  					ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  					screenClientjes.Add (inc.Sender' screenClientje);  					allClientjes.Add (inc.Sender' screenClientje);  					curNumberOfScreen++;  					SendNewAreas ();  				}  				else if (hetTypeDevice == 1)//Android  				 {  					DebugMSG ("Het is een Android :)");  					ControlClientje controlClientje = new ControlClientje (inc.Sender);  					controlClientjes.Add (inc.Sender' controlClientje);  					allClientjes.Add (inc.Sender' controlClientje);  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (1);  					//Add beestje bij alle screens  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  			}  			else if (hetTypeMessage == 1)//Een message met button klik stuff  			 {  				ControlClientje curControlClient = controlClientjes [inc.Sender];  				String direction = inc.ReadString ();  				DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  				if (direction == "left") {  					curControlClient.posx -= 50;  				}  				else if (direction == "right") {  					curControlClient.posx += 50;  				}  				else if (direction == "up") {  					curControlClient.posy -= 50;  				}  				else if (direction == "down") {  					curControlClient.posy += 50;  				}  				DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (3);  				outje.WriteString (curControlClient.guid);  				outje.WriteInt32 (curControlClient.posx);  				outje.WriteInt32 (curControlClient.posy);  				SendToScreens (outje);  			}  			break;  		case DeveMessageType.StatusChanged:  			byte newStatus = inc.ReadByte ();  			NetworkStatus ns = (NetworkStatus)newStatus;  			switch (ns) {  			case NetworkStatus.Connected:  				DebugMSG ("Er connect iets :O");  				break;  			case NetworkStatus.Disconnected:  				if (controlClientjes.ContainsKey (inc.Sender)) {  					ControlClientje controlClientje = controlClientjes [inc.Sender];  					DeveOutgoingMessage outje = new DeveOutgoingMessage ();  					outje.WriteInt32 (2);  					outje.WriteString (controlClientje.guid);  					SendToScreens (outje);  				}  				RemoveFromAllClientLists (inc.Sender);  				break;  			default:  				break;  			}  			break;  		default:  			break;  		}  	}  	Thread.Sleep (1);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if ((inc = deveServer.ReadMessage ()) != null) {  	switch (inc.MessageType) {  	case DeveMessageType.KeepAlive:  		break;  	case DeveMessageType.Data:  		int hetTypeMessage = inc.ReadInt32 ();  		if (hetTypeMessage == 0)//Een join message  		 {  			int hetTypeDevice = inc.ReadInt32 ();  			if (hetTypeDevice == 0)//Een screen client  			 {  				DebugMSG ("Het is een screen client :D:D:D");  				ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  				screenClientjes.Add (inc.Sender' screenClientje);  				allClientjes.Add (inc.Sender' screenClientje);  				curNumberOfScreen++;  				SendNewAreas ();  			}  			else if (hetTypeDevice == 1)//Android  			 {  				DebugMSG ("Het is een Android :)");  				ControlClientje controlClientje = new ControlClientje (inc.Sender);  				controlClientjes.Add (inc.Sender' controlClientje);  				allClientjes.Add (inc.Sender' controlClientje);  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (1);  				//Add beestje bij alle screens  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  		}  		else if (hetTypeMessage == 1)//Een message met button klik stuff  		 {  			ControlClientje curControlClient = controlClientjes [inc.Sender];  			String direction = inc.ReadString ();  			DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  			if (direction == "left") {  				curControlClient.posx -= 50;  			}  			else if (direction == "right") {  				curControlClient.posx += 50;  			}  			else if (direction == "up") {  				curControlClient.posy -= 50;  			}  			else if (direction == "down") {  				curControlClient.posy += 50;  			}  			DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (3);  			outje.WriteString (curControlClient.guid);  			outje.WriteInt32 (curControlClient.posx);  			outje.WriteInt32 (curControlClient.posy);  			SendToScreens (outje);  		}  		break;  	case DeveMessageType.StatusChanged:  		byte newStatus = inc.ReadByte ();  		NetworkStatus ns = (NetworkStatus)newStatus;  		switch (ns) {  		case NetworkStatus.Connected:  			DebugMSG ("Er connect iets :O");  			break;  		case NetworkStatus.Disconnected:  			if (controlClientjes.ContainsKey (inc.Sender)) {  				ControlClientje controlClientje = controlClientjes [inc.Sender];  				DeveOutgoingMessage outje = new DeveOutgoingMessage ();  				outje.WriteInt32 (2);  				outje.WriteString (controlClientje.guid);  				SendToScreens (outje);  			}  			RemoveFromAllClientLists (inc.Sender);  			break;  		default:  			break;  		}  		break;  	default:  		break;  	}  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (inc.MessageType) {  case DeveMessageType.KeepAlive:  	break;  case DeveMessageType.Data:  	int hetTypeMessage = inc.ReadInt32 ();  	if (hetTypeMessage == 0)//Een join message  	 {  		int hetTypeDevice = inc.ReadInt32 ();  		if (hetTypeDevice == 0)//Een screen client  		 {  			DebugMSG ("Het is een screen client :D:D:D");  			ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  			screenClientjes.Add (inc.Sender' screenClientje);  			allClientjes.Add (inc.Sender' screenClientje);  			curNumberOfScreen++;  			SendNewAreas ();  		}  		else if (hetTypeDevice == 1)//Android  		 {  			DebugMSG ("Het is een Android :)");  			ControlClientje controlClientje = new ControlClientje (inc.Sender);  			controlClientjes.Add (inc.Sender' controlClientje);  			allClientjes.Add (inc.Sender' controlClientje);  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (1);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  	}  	else if (hetTypeMessage == 1)//Een message met button klik stuff  	 {  		ControlClientje curControlClient = controlClientjes [inc.Sender];  		String direction = inc.ReadString ();  		DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  		if (direction == "left") {  			curControlClient.posx -= 50;  		}  		else if (direction == "right") {  			curControlClient.posx += 50;  		}  		else if (direction == "up") {  			curControlClient.posy -= 50;  		}  		else if (direction == "down") {  			curControlClient.posy += 50;  		}  		DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (3);  		outje.WriteString (curControlClient.guid);  		outje.WriteInt32 (curControlClient.posx);  		outje.WriteInt32 (curControlClient.posy);  		SendToScreens (outje);  	}  	break;  case DeveMessageType.StatusChanged:  	byte newStatus = inc.ReadByte ();  	NetworkStatus ns = (NetworkStatus)newStatus;  	switch (ns) {  	case NetworkStatus.Connected:  		DebugMSG ("Er connect iets :O");  		break;  	case NetworkStatus.Disconnected:  		if (controlClientjes.ContainsKey (inc.Sender)) {  			ControlClientje controlClientje = controlClientjes [inc.Sender];  			DeveOutgoingMessage outje = new DeveOutgoingMessage ();  			outje.WriteInt32 (2);  			outje.WriteString (controlClientje.guid);  			SendToScreens (outje);  		}  		RemoveFromAllClientLists (inc.Sender);  		break;  	default:  		break;  	}  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 0)//Een join message   {  	int hetTypeDevice = inc.ReadInt32 ();  	if (hetTypeDevice == 0)//Een screen client  	 {  		DebugMSG ("Het is een screen client :D:D:D");  		ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		curNumberOfScreen++;  		SendNewAreas ();  	}  	else if (hetTypeDevice == 1)//Android  	 {  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (1);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  }  else if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 0)//Een join message   {  	int hetTypeDevice = inc.ReadInt32 ();  	if (hetTypeDevice == 0)//Een screen client  	 {  		DebugMSG ("Het is een screen client :D:D:D");  		ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		curNumberOfScreen++;  		SendNewAreas ();  	}  	else if (hetTypeDevice == 1)//Android  	 {  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (1);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  }  else if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 0)//Een join message   {  	int hetTypeDevice = inc.ReadInt32 ();  	if (hetTypeDevice == 0)//Een screen client  	 {  		DebugMSG ("Het is een screen client :D:D:D");  		ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		curNumberOfScreen++;  		SendNewAreas ();  	}  	else if (hetTypeDevice == 1)//Android  	 {  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (1);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  }  else if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 0)//Een join message   {  	int hetTypeDevice = inc.ReadInt32 ();  	if (hetTypeDevice == 0)//Een screen client  	 {  		DebugMSG ("Het is een screen client :D:D:D");  		ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		curNumberOfScreen++;  		SendNewAreas ();  	}  	else if (hetTypeDevice == 1)//Android  	 {  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (1);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  }  else if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 0)//Een join message   {  	int hetTypeDevice = inc.ReadInt32 ();  	if (hetTypeDevice == 0)//Een screen client  	 {  		DebugMSG ("Het is een screen client :D:D:D");  		ScreenClientje screenClientje = new ScreenClientje (inc.Sender' curNumberOfScreen);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		curNumberOfScreen++;  		SendNewAreas ();  	}  	else if (hetTypeDevice == 1)//Android  	 {  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (1);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  }  else if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (hetTypeMessage == 1)//Een message met button klik stuff   {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	DebugMSG ("Got message with: " + direction + " from: " + inc.Sender);  	if (direction == "left") {  		curControlClient.posx -= 50;  	}  	else if (direction == "right") {  		curControlClient.posx += 50;  	}  	else if (direction == "up") {  		curControlClient.posy -= 50;  	}  	else if (direction == "down") {  		curControlClient.posy += 50;  	}  	DebugMSG ("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (3);  	outje.WriteString (curControlClient.guid);  	outje.WriteInt32 (curControlClient.posx);  	outje.WriteInt32 (curControlClient.posy);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "left") {  	curControlClient.posx -= 50;  }  else if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "left") {  	curControlClient.posx -= 50;  }  else if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "left") {  	curControlClient.posx -= 50;  }  else if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "left") {  	curControlClient.posx -= 50;  }  else if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: curControlClient.posx -= 50;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "right") {  	curControlClient.posx += 50;  }  else if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: curControlClient.posx += 50;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "up") {  	curControlClient.posy -= 50;  }  else if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: curControlClient.posy -= 50;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (direction == "down") {  	curControlClient.posy += 50;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: curControlClient.posy += 50;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: outje.WriteInt32 (3);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: switch (ns) {  case NetworkStatus.Connected:  	DebugMSG ("Er connect iets :O");  	break;  case NetworkStatus.Disconnected:  	if (controlClientjes.ContainsKey (inc.Sender)) {  		ControlClientje controlClientje = controlClientjes [inc.Sender];  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 (2);  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  	RemoveFromAllClientLists (inc.Sender);  	break;  default:  	break;  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: if (controlClientjes.ContainsKey (inc.Sender)) {  	ControlClientje controlClientje = controlClientjes [inc.Sender];  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (2);  	outje.WriteString (controlClientje.guid);  	SendToScreens (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,Runner,The following statement contains a magic number: outje.WriteInt32 (2);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: g.FillRectangle (Brushes.CornflowerBlue' new Rectangle (0' 0' 1000000' 1000000));  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: g.FillRectangle (Brushes.CornflowerBlue' new Rectangle (0' 0' 1000000' 1000000));  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: totSize.Width = sortedScreenClients.Count * 1920;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: totSize.Height = sortedScreenClients.Count * 1080;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: for (int i = 0; i < sortedScreenClients.Count; i++) {  	Clientje curClient = sortedScreenClients [i];  	Rectangle curSize = new Rectangle ();  	curSize.X = i * 1920;  	curSize.Y = 0;  	curSize.Width = 1920;  	curSize.Height = 1080;  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (0);  	//Identifier  	outje.WriteInt32 (totSize.X);  	outje.WriteInt32 (totSize.Y);  	outje.WriteInt32 (totSize.Width);  	outje.WriteInt32 (totSize.Height);  	outje.WriteInt32 (curSize.X);  	outje.WriteInt32 (curSize.Y);  	outje.WriteInt32 (curSize.Width);  	outje.WriteInt32 (curSize.Height);  	drawFatRect (Pens.Red' g' curSize' 5' i.ToString ());  	curClient.deveConnection.Send (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: for (int i = 0; i < sortedScreenClients.Count; i++) {  	Clientje curClient = sortedScreenClients [i];  	Rectangle curSize = new Rectangle ();  	curSize.X = i * 1920;  	curSize.Y = 0;  	curSize.Width = 1920;  	curSize.Height = 1080;  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (0);  	//Identifier  	outje.WriteInt32 (totSize.X);  	outje.WriteInt32 (totSize.Y);  	outje.WriteInt32 (totSize.Width);  	outje.WriteInt32 (totSize.Height);  	outje.WriteInt32 (curSize.X);  	outje.WriteInt32 (curSize.Y);  	outje.WriteInt32 (curSize.Width);  	outje.WriteInt32 (curSize.Height);  	drawFatRect (Pens.Red' g' curSize' 5' i.ToString ());  	curClient.deveConnection.Send (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: for (int i = 0; i < sortedScreenClients.Count; i++) {  	Clientje curClient = sortedScreenClients [i];  	Rectangle curSize = new Rectangle ();  	curSize.X = i * 1920;  	curSize.Y = 0;  	curSize.Width = 1920;  	curSize.Height = 1080;  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (0);  	//Identifier  	outje.WriteInt32 (totSize.X);  	outje.WriteInt32 (totSize.Y);  	outje.WriteInt32 (totSize.Width);  	outje.WriteInt32 (totSize.Height);  	outje.WriteInt32 (curSize.X);  	outje.WriteInt32 (curSize.Y);  	outje.WriteInt32 (curSize.Width);  	outje.WriteInt32 (curSize.Height);  	drawFatRect (Pens.Red' g' curSize' 5' i.ToString ());  	curClient.deveConnection.Send (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: for (int i = 0; i < sortedScreenClients.Count; i++) {  	Clientje curClient = sortedScreenClients [i];  	Rectangle curSize = new Rectangle ();  	curSize.X = i * 1920;  	curSize.Y = 0;  	curSize.Width = 1920;  	curSize.Height = 1080;  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (0);  	//Identifier  	outje.WriteInt32 (totSize.X);  	outje.WriteInt32 (totSize.Y);  	outje.WriteInt32 (totSize.Width);  	outje.WriteInt32 (totSize.Height);  	outje.WriteInt32 (curSize.X);  	outje.WriteInt32 (curSize.Y);  	outje.WriteInt32 (curSize.Width);  	outje.WriteInt32 (curSize.Height);  	drawFatRect (Pens.Red' g' curSize' 5' i.ToString ());  	curClient.deveConnection.Send (outje);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: curSize.X = i * 1920;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: curSize.Width = 1920;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: curSize.Height = 1080;  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,SendNewAreas,The following statement contains a magic number: drawFatRect (Pens.Red' g' curSize' 5' i.ToString ());  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: for (int i = 0; i < fadity; i++) {  	g.DrawRectangle (pen' r.X / delendoor + i' r.Y / delendoor + i' r.Width / delendoor - 2 * i' r.Height / delendoor - 2 * i);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: for (int i = 0; i < fadity; i++) {  	g.DrawRectangle (pen' r.X / delendoor + i' r.Y / delendoor + i' r.Width / delendoor - 2 * i' r.Height / delendoor - 2 * i);  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: g.DrawRectangle (pen' r.X / delendoor + i' r.Y / delendoor + i' r.Width / delendoor - 2 * i' r.Height / delendoor - 2 * i);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: g.DrawRectangle (pen' r.X / delendoor + i' r.Y / delendoor + i' r.Width / delendoor - 2 * i' r.Height / delendoor - 2 * i);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: g.DrawString (stringinside' drawFont' Brushes.White' new Point (r.X / delendoor + 20' r.Y / delendoor + 20));  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,drawFatRect,The following statement contains a magic number: g.DrawString (stringinside' drawFont' Brushes.White' new Point (r.X / delendoor + 20' r.Y / delendoor + 20));  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,textBox1_TextChanged,The following statement contains a magic number: try {  	timer1.Interval = Math.Max (int.Parse (textBox1.Text)' 10);  }  catch (Exception eeee) {  }  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,textBox1_TextChanged,The following statement contains a magic number: timer1.Interval = Math.Max (int.Parse (textBox1.Text)' 10);  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,button2_Click,The following statement contains a magic number: drawFatRect (Pens.Red' g' r' 2' "r1");  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,button2_Click,The following statement contains a magic number: drawFatRect (Pens.Blue' g' r2' 2' "r2");  
Magic Number,TurtleTurner2000Server,Form1,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\Form1.cs,button2_Click,The following statement contains a magic number: drawFatRect (Pens.Green' g' runion' 2' "");  
Magic Number,TurtleTurner2000Server,StoreAppListenerRouter,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\StoreAppListenerRouter.cs,StoreAppListenerRouter,The following statement contains a magic number: kenServer = new StoreAppListener (1338);  
Magic Number,TurtleTurner2000Server,StoreAppListenerRouter,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\TurtleTurner2000Server\StoreAppListenerRouter.cs,kenServer_ReceivedMessage,The following statement contains a magic number: switch (e.Action) {  case "connected":  	DeveClient deveClient = new DeveClient ("localhost"' 1337);  	deveClient.Start ();  	DeveOutgoingMessage outje = new DeveOutgoingMessage ();  	outje.WriteInt32 (0);  	//Join message  	outje.WriteInt32 (1);  	//Android  	deveClient.Send (outje);  	clients.Add (e.Id' deveClient);  	break;  case "closed":  	clients [e.Id].Stop ();  	clients.Remove (e.Id);  	//deveServer.messages.Enqueue(inc);  	break;  default:  	DeveClient deveClientNow = clients [e.Id];  	DeveOutgoingMessage outje2 = new DeveOutgoingMessage ();  	outje2.WriteInt32 (1);  	//Identifier for command message  	outje2.WriteString (e.Action);  	deveClientNow.Send (outje2);  	break;  }  
