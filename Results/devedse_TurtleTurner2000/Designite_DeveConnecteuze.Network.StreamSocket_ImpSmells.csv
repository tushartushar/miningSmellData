Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,Runner,The length of the statement  "				//throw new InvalidDataException("This message is probably a bit big :)' the size is: " + bytesToRead + " max message size is: " + this.maxMessageSize); " is 152.
Long Statement,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,CheckAndSendKeepAliveIfNeeded,The length of the statement  "		DeveOutgoingMessageStreamSocket keepalivemsg = new DeveOutgoingMessageStreamSocket (DeveMessageTypeStreamSocket.KeepAlive); " is 123.
Magic Number,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,Runner,The following statement contains a magic number: peer.AddDeveIncomingMessage (new DeveIncomingMessageStreamSocket (this' new byte[2] {  	(byte)DeveMessageTypeStreamSocket.StatusChanged'  	(byte)NetworkStatusStreamSocket.Connected  }));  
Magic Number,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,Runner,The following statement contains a magic number: while (!shouldShutdown && tcpClient.Connected) {  	try {  		byte[] firstLengthIntByteArray = ReadThisAmmountOfBytes (4);  		int bytesToRead = BitConverter.ToInt32 (firstLengthIntByteArray' 0);  		if (bytesToRead > peer.MaxMessageSize) {  			Console.WriteLine ("Warning: I'm gonna receive a big message of the size: " + bytesToRead);  			//throw new InvalidDataException("This message is probably a bit big :)' the size is: " + bytesToRead + " max message size is: " + this.maxMessageSize);  		}  		byte[] data = ReadThisAmmountOfBytes (bytesToRead);  		DeveIncomingMessageStreamSocket devIn = new DeveIncomingMessageStreamSocket (this' data);  		peer.AddDeveIncomingMessage (devIn);  	}  	catch (SocketException e) {  		Console.WriteLine ("Socket exception: " + e.ToString ());  		break;  	}  	catch (EndOfStreamException e) {  		Console.WriteLine ("Exception that happens when a client disconnects nice and safe: " + e.ToString ());  		break;  	}  	catch (IOException e) {  		Console.WriteLine ("IOException: " + e.ToString ());  		break;  	}  }  
Magic Number,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,Runner,The following statement contains a magic number: try {  	byte[] firstLengthIntByteArray = ReadThisAmmountOfBytes (4);  	int bytesToRead = BitConverter.ToInt32 (firstLengthIntByteArray' 0);  	if (bytesToRead > peer.MaxMessageSize) {  		Console.WriteLine ("Warning: I'm gonna receive a big message of the size: " + bytesToRead);  		//throw new InvalidDataException("This message is probably a bit big :)' the size is: " + bytesToRead + " max message size is: " + this.maxMessageSize);  	}  	byte[] data = ReadThisAmmountOfBytes (bytesToRead);  	DeveIncomingMessageStreamSocket devIn = new DeveIncomingMessageStreamSocket (this' data);  	peer.AddDeveIncomingMessage (devIn);  }  catch (SocketException e) {  	Console.WriteLine ("Socket exception: " + e.ToString ());  	break;  }  catch (EndOfStreamException e) {  	Console.WriteLine ("Exception that happens when a client disconnects nice and safe: " + e.ToString ());  	break;  }  catch (IOException e) {  	Console.WriteLine ("IOException: " + e.ToString ());  	break;  }  
Magic Number,DeveConnecteuze.Network,DeveConnectionStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveConnection.cs,Runner,The following statement contains a magic number: peer.AddDeveIncomingMessage (new DeveIncomingMessageStreamSocket (this' new byte[2] {  	(byte)DeveMessageTypeStreamSocket.StatusChanged'  	(byte)NetworkStatusStreamSocket.Disconnected  }));  
Magic Number,DeveConnecteuze.Network,DeveIncomingMessageStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveIncomingMessage.cs,ReadInt32,The following statement contains a magic number: m_readPosition += 4;  
Magic Number,DeveConnecteuze.Network,DeveOutgoingMessageStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveOutgoingMessage.cs,GetBytes,The following statement contains a magic number: bytes [2] = lengthInBytes [2];  
Magic Number,DeveConnecteuze.Network,DeveOutgoingMessageStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveOutgoingMessage.cs,GetBytes,The following statement contains a magic number: bytes [2] = lengthInBytes [2];  
Magic Number,DeveConnecteuze.Network,DeveOutgoingMessageStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveOutgoingMessage.cs,GetBytes,The following statement contains a magic number: bytes [3] = lengthInBytes [3];  
Magic Number,DeveConnecteuze.Network,DeveOutgoingMessageStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveOutgoingMessage.cs,GetBytes,The following statement contains a magic number: bytes [3] = lengthInBytes [3];  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,Enqueue,The following statement contains a magic number: lock (m_lock) {  	if (m_size == m_items.Length)  		SetCapacity (m_items.Length + 8);  	int slot = (m_head + m_size) % m_items.Length;  	m_items [slot] = item;  	m_size++;  }  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,Enqueue,The following statement contains a magic number: if (m_size == m_items.Length)  	SetCapacity (m_items.Length + 8);  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,Enqueue,The following statement contains a magic number: SetCapacity (m_items.Length + 8);  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,EnqueueFirst,The following statement contains a magic number: lock (m_lock) {  	if (m_size >= m_items.Length)  		SetCapacity (m_items.Length + 8);  	m_head--;  	if (m_head < 0)  		m_head = m_items.Length - 1;  	m_items [m_head] = item;  	m_size++;  }  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,EnqueueFirst,The following statement contains a magic number: if (m_size >= m_items.Length)  	SetCapacity (m_items.Length + 8);  
Magic Number,DeveConnecteuze.Network,DeveQueueStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveQueue.cs,EnqueueFirst,The following statement contains a magic number: SetCapacity (m_items.Length + 8);  
Magic Number,DeveConnecteuze.Network,DeveServerStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveServer.cs,Runner,The following statement contains a magic number: while (!shouldShutdown) {  	if (!tcpListener.Pending ()) {  		Thread.Sleep (100);  	}  	else {  		//blocks until a client has connected to the server  		TcpClient client = tcpListener.AcceptTcpClient ();  		Console.WriteLine ("Client connected");  		DeveConnectionStreamSocket deveClientConnection = new DeveConnectionStreamSocket (client' this);  		deveClientConnection.Start ();  		lock (clientConnections) {  			clientConnections.Add (deveClientConnection);  		}  		//Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClientComm));  		//clientThread.Start(client);  	}  }  
Magic Number,DeveConnecteuze.Network,DeveServerStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveServer.cs,Runner,The following statement contains a magic number: if (!tcpListener.Pending ()) {  	Thread.Sleep (100);  }  else {  	//blocks until a client has connected to the server  	TcpClient client = tcpListener.AcceptTcpClient ();  	Console.WriteLine ("Client connected");  	DeveConnectionStreamSocket deveClientConnection = new DeveConnectionStreamSocket (client' this);  	deveClientConnection.Start ();  	lock (clientConnections) {  		clientConnections.Add (deveClientConnection);  	}  	//Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClientComm));  	//clientThread.Start(client);  }  
Magic Number,DeveConnecteuze.Network,DeveServerStreamSocket,C:\repos\devedse_TurtleTurner2000\Oud\TurtleTurner2000Server\DeveConnecteuze.NetworkStreamSocket\DeveServer.cs,Runner,The following statement contains a magic number: Thread.Sleep (100);  
