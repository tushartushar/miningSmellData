Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,UpdateNetwork,Cyclomatic complexity of the method is 13
Complex Method,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleDataMessage,Cyclomatic complexity of the method is 18
Complex Method,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleCamera,Cyclomatic complexity of the method is 12
Long Statement,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Update,The length of the statement  "	if (GamePad.GetState (PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState ().IsKeyDown (Keys.Escape)) " is 123.
Long Statement,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleCamera,The length of the statement  "		camMove -= Camera.ConvertScreenToWorld (new Vector2 (ms.X' ms.Y)) - Camera.ConvertScreenToWorld (new Vector2 (previousms.X' previousms.Y)); " is 139.
Long Statement,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The length of the statement  "		spriteBatch.Draw (skwirtleTexture' new Rectangle ((int)(controlClientje.posx) - skwirtleTexture.Width / 2' (int)(controlClientje.posy) - skwirtleTexture.Height / 2' skwirtleTexture.Width' skwirtleTexture.Height)' Color.White); " is 226.
Long Statement,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The length of the statement  "	spriteBatch.DrawString (font' Math.Round (1.0 / fpsMeterStopwatch.Elapsed.TotalSeconds' 2).ToString ()' new Vector2 (10' 10)' Color.White); " is 139.
Long Statement,TurtleTurner2000.Server,RectangleSprite,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\RectangleSprite.cs,Draw,The length of the statement  "	spriteBatch.Draw (pixel' new Rectangle (rect.X - width' rect.Y + rect.Height' rect.Width + 2 * width' width)' alphared); " is 120.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	Vector2 adjustedMousePos = game.Camera.ConvertScreenToWorld (new Vector2 (game.currentMouseState.X' game.currentMouseState.Y)) * 100; " is 133.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	Vector2 oldAdjustedMousePos = game.Camera.ConvertScreenToWorld (new Vector2 (game.previousMouseState.X' game.previousMouseState.Y)) * 100; " is 138.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	if (game.currentMouseState.LeftButton == ButtonState.Pressed && game.previousMouseState.LeftButton == ButtonState.Released && rect.Intersects (mousePos)) { " is 155.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	if (game.currentMouseState.LeftButton == ButtonState.Released && game.previousMouseState.LeftButton == ButtonState.Pressed) { " is 125.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	//    Vector2 mouseVect = game.Camera.ConvertScreenToWorld(new Vector2(game.currentMouseState.X - game.previousMouseState.X' game.currentMouseState.Y - game.previousMouseState.Y)); " is 180.
Long Statement,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,Update,The length of the statement  "	//if (rect.Intersects(mousePos) && game.currentMouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Pressed && game.previousMouseState.LeftButton == Microsoft.Xna.Framework.Input.ButtonState.Released) " is 214.
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Game1,The following statement contains a magic number: deveServer = new DeveServer (1337);  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Game1,The following statement contains a magic number: this.graphics.PreferredBackBufferHeight = 768;  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Game1,The following statement contains a magic number: this.graphics.PreferredBackBufferWidth = 1024;  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Initialize,The following statement contains a magic number: Camera.MoveCamera (Camera.ConvertScreenToWorld (new Vector2 (map [0].Count * tileSize / 2' map.Count * tileSize / 2)));  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Initialize,The following statement contains a magic number: Camera.MoveCamera (Camera.ConvertScreenToWorld (new Vector2 (map [0].Count * tileSize / 2' map.Count * tileSize / 2)));  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleDataMessage,The following statement contains a magic number: switch (messageType) {  case ServerReceiveMessageType.LoginMessageScreenClient:  	{  		DebugMSG ("Screen client connected");  		int xscr = random.Next (100' 1000);  		int yscr = random.Next (100' 1000);  		int widthscr = inc.ReadInt32 ();  		int heightscr = inc.ReadInt32 ();  		ScreenClientje screenClientje = new ScreenClientje (new Rectangle (xscr' yscr' widthscr' heightscr)' this' inc.Sender);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.MapString);  		outje.WriteInt32 (map [0].Count);  		outje.WriteInt32 (map.Count);  		foreach (var mapline in map) {  			StringBuilder build = new StringBuilder ();  			foreach (String str in mapline) {  				build.Append (str);  			}  			outje.WriteString (build.ToString ());  		}  		screenClientje.deveConnection.Send (outje);  		foreach (var controlClientje in controlClientjes.Values) {  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			screenClientje.deveConnection.Send (outje);  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SetPlayerLocation);  			outje.WriteString (controlClientje.guid);  			outje.WriteInt32 ((int)controlClientje.posx);  			outje.WriteInt32 ((int)controlClientje.posy);  			outje.WriteInt32 (0);  			outje.WriteInt32 (0);  			screenClientje.deveConnection.Send (outje);  		}  	}  	break;  case ServerReceiveMessageType.LoginMessageControlClient:  	{  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender' this);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  	break;  case ServerReceiveMessageType.NewButtonState: {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	String onOrOffString = inc.ReadString ();  	Boolean onOrOff = onOrOffString == "True";  	DebugMSG ("Got message with: " + direction + ": " + onOrOff);  	if (direction == "left") {  		curControlClient.LeftArrow = onOrOff;  	}  	else if (direction == "right") {  		curControlClient.RightArrow = onOrOff;  	}  	else if (direction == "up") {  		curControlClient.UpArrown = onOrOff;  	}  	else if (direction == "down") {  		curControlClient.DownArrow = onOrOff;  	}  	//DebugMSG("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	//DeveOutgoingMessage outje = new DeveOutgoingMessage();  	//outje.WriteInt32((int)ServerSendMessageType.SetPlayerLocation);  	//outje.WriteString(curControlClient.guid);  	//outje.WriteInt32((int)curControlClient.posx);  	//outje.WriteInt32((int)curControlClient.posy);  	//SendToScreens(outje);  	break;  }  default:  	DebugMSG ("Unknown message type");  	break;  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleDataMessage,The following statement contains a magic number: switch (messageType) {  case ServerReceiveMessageType.LoginMessageScreenClient:  	{  		DebugMSG ("Screen client connected");  		int xscr = random.Next (100' 1000);  		int yscr = random.Next (100' 1000);  		int widthscr = inc.ReadInt32 ();  		int heightscr = inc.ReadInt32 ();  		ScreenClientje screenClientje = new ScreenClientje (new Rectangle (xscr' yscr' widthscr' heightscr)' this' inc.Sender);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.MapString);  		outje.WriteInt32 (map [0].Count);  		outje.WriteInt32 (map.Count);  		foreach (var mapline in map) {  			StringBuilder build = new StringBuilder ();  			foreach (String str in mapline) {  				build.Append (str);  			}  			outje.WriteString (build.ToString ());  		}  		screenClientje.deveConnection.Send (outje);  		foreach (var controlClientje in controlClientjes.Values) {  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			screenClientje.deveConnection.Send (outje);  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SetPlayerLocation);  			outje.WriteString (controlClientje.guid);  			outje.WriteInt32 ((int)controlClientje.posx);  			outje.WriteInt32 ((int)controlClientje.posy);  			outje.WriteInt32 (0);  			outje.WriteInt32 (0);  			screenClientje.deveConnection.Send (outje);  		}  	}  	break;  case ServerReceiveMessageType.LoginMessageControlClient:  	{  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender' this);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  	break;  case ServerReceiveMessageType.NewButtonState: {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	String onOrOffString = inc.ReadString ();  	Boolean onOrOff = onOrOffString == "True";  	DebugMSG ("Got message with: " + direction + ": " + onOrOff);  	if (direction == "left") {  		curControlClient.LeftArrow = onOrOff;  	}  	else if (direction == "right") {  		curControlClient.RightArrow = onOrOff;  	}  	else if (direction == "up") {  		curControlClient.UpArrown = onOrOff;  	}  	else if (direction == "down") {  		curControlClient.DownArrow = onOrOff;  	}  	//DebugMSG("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	//DeveOutgoingMessage outje = new DeveOutgoingMessage();  	//outje.WriteInt32((int)ServerSendMessageType.SetPlayerLocation);  	//outje.WriteString(curControlClient.guid);  	//outje.WriteInt32((int)curControlClient.posx);  	//outje.WriteInt32((int)curControlClient.posy);  	//SendToScreens(outje);  	break;  }  default:  	DebugMSG ("Unknown message type");  	break;  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleDataMessage,The following statement contains a magic number: switch (messageType) {  case ServerReceiveMessageType.LoginMessageScreenClient:  	{  		DebugMSG ("Screen client connected");  		int xscr = random.Next (100' 1000);  		int yscr = random.Next (100' 1000);  		int widthscr = inc.ReadInt32 ();  		int heightscr = inc.ReadInt32 ();  		ScreenClientje screenClientje = new ScreenClientje (new Rectangle (xscr' yscr' widthscr' heightscr)' this' inc.Sender);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.MapString);  		outje.WriteInt32 (map [0].Count);  		outje.WriteInt32 (map.Count);  		foreach (var mapline in map) {  			StringBuilder build = new StringBuilder ();  			foreach (String str in mapline) {  				build.Append (str);  			}  			outje.WriteString (build.ToString ());  		}  		screenClientje.deveConnection.Send (outje);  		foreach (var controlClientje in controlClientjes.Values) {  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			screenClientje.deveConnection.Send (outje);  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SetPlayerLocation);  			outje.WriteString (controlClientje.guid);  			outje.WriteInt32 ((int)controlClientje.posx);  			outje.WriteInt32 ((int)controlClientje.posy);  			outje.WriteInt32 (0);  			outje.WriteInt32 (0);  			screenClientje.deveConnection.Send (outje);  		}  	}  	break;  case ServerReceiveMessageType.LoginMessageControlClient:  	{  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender' this);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  	break;  case ServerReceiveMessageType.NewButtonState: {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	String onOrOffString = inc.ReadString ();  	Boolean onOrOff = onOrOffString == "True";  	DebugMSG ("Got message with: " + direction + ": " + onOrOff);  	if (direction == "left") {  		curControlClient.LeftArrow = onOrOff;  	}  	else if (direction == "right") {  		curControlClient.RightArrow = onOrOff;  	}  	else if (direction == "up") {  		curControlClient.UpArrown = onOrOff;  	}  	else if (direction == "down") {  		curControlClient.DownArrow = onOrOff;  	}  	//DebugMSG("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	//DeveOutgoingMessage outje = new DeveOutgoingMessage();  	//outje.WriteInt32((int)ServerSendMessageType.SetPlayerLocation);  	//outje.WriteString(curControlClient.guid);  	//outje.WriteInt32((int)curControlClient.posx);  	//outje.WriteInt32((int)curControlClient.posy);  	//SendToScreens(outje);  	break;  }  default:  	DebugMSG ("Unknown message type");  	break;  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,HandleDataMessage,The following statement contains a magic number: switch (messageType) {  case ServerReceiveMessageType.LoginMessageScreenClient:  	{  		DebugMSG ("Screen client connected");  		int xscr = random.Next (100' 1000);  		int yscr = random.Next (100' 1000);  		int widthscr = inc.ReadInt32 ();  		int heightscr = inc.ReadInt32 ();  		ScreenClientje screenClientje = new ScreenClientje (new Rectangle (xscr' yscr' widthscr' heightscr)' this' inc.Sender);  		screenClientjes.Add (inc.Sender' screenClientje);  		allClientjes.Add (inc.Sender' screenClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.MapString);  		outje.WriteInt32 (map [0].Count);  		outje.WriteInt32 (map.Count);  		foreach (var mapline in map) {  			StringBuilder build = new StringBuilder ();  			foreach (String str in mapline) {  				build.Append (str);  			}  			outje.WriteString (build.ToString ());  		}  		screenClientje.deveConnection.Send (outje);  		foreach (var controlClientje in controlClientjes.Values) {  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  			//Add beestje bij alle screens  			outje.WriteString (controlClientje.guid);  			screenClientje.deveConnection.Send (outje);  			outje = new DeveOutgoingMessage ();  			outje.WriteInt32 ((int)ServerSendMessageType.SetPlayerLocation);  			outje.WriteString (controlClientje.guid);  			outje.WriteInt32 ((int)controlClientje.posx);  			outje.WriteInt32 ((int)controlClientje.posy);  			outje.WriteInt32 (0);  			outje.WriteInt32 (0);  			screenClientje.deveConnection.Send (outje);  		}  	}  	break;  case ServerReceiveMessageType.LoginMessageControlClient:  	{  		DebugMSG ("Het is een Android :)");  		ControlClientje controlClientje = new ControlClientje (inc.Sender' this);  		controlClientjes.Add (inc.Sender' controlClientje);  		allClientjes.Add (inc.Sender' controlClientje);  		DeveOutgoingMessage outje = new DeveOutgoingMessage ();  		outje.WriteInt32 ((int)ServerSendMessageType.SpawnNewPlayer);  		//Add beestje bij alle screens  		outje.WriteString (controlClientje.guid);  		SendToScreens (outje);  	}  	break;  case ServerReceiveMessageType.NewButtonState: {  	ControlClientje curControlClient = controlClientjes [inc.Sender];  	String direction = inc.ReadString ();  	String onOrOffString = inc.ReadString ();  	Boolean onOrOff = onOrOffString == "True";  	DebugMSG ("Got message with: " + direction + ": " + onOrOff);  	if (direction == "left") {  		curControlClient.LeftArrow = onOrOff;  	}  	else if (direction == "right") {  		curControlClient.RightArrow = onOrOff;  	}  	else if (direction == "up") {  		curControlClient.UpArrown = onOrOff;  	}  	else if (direction == "down") {  		curControlClient.DownArrow = onOrOff;  	}  	//DebugMSG("X: " + curControlClient.posx + " Y: " + curControlClient.posy);  	//DeveOutgoingMessage outje = new DeveOutgoingMessage();  	//outje.WriteInt32((int)ServerSendMessageType.SetPlayerLocation);  	//outje.WriteString(curControlClient.guid);  	//outje.WriteInt32((int)curControlClient.posx);  	//outje.WriteInt32((int)curControlClient.posy);  	//SendToScreens(outje);  	break;  }  default:  	DebugMSG ("Unknown message type");  	break;  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: foreach (ControlClientje controlClientje in controlClientjes.Values) {  	spriteBatch.Draw (skwirtleTexture' new Rectangle ((int)(controlClientje.posx) - skwirtleTexture.Width / 2' (int)(controlClientje.posy) - skwirtleTexture.Height / 2' skwirtleTexture.Width' skwirtleTexture.Height)' Color.White);  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: foreach (ControlClientje controlClientje in controlClientjes.Values) {  	spriteBatch.Draw (skwirtleTexture' new Rectangle ((int)(controlClientje.posx) - skwirtleTexture.Width / 2' (int)(controlClientje.posy) - skwirtleTexture.Height / 2' skwirtleTexture.Width' skwirtleTexture.Height)' Color.White);  }  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (skwirtleTexture' new Rectangle ((int)(controlClientje.posx) - skwirtleTexture.Width / 2' (int)(controlClientje.posy) - skwirtleTexture.Height / 2' skwirtleTexture.Width' skwirtleTexture.Height)' Color.White);  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (skwirtleTexture' new Rectangle ((int)(controlClientje.posx) - skwirtleTexture.Width / 2' (int)(controlClientje.posy) - skwirtleTexture.Height / 2' skwirtleTexture.Width' skwirtleTexture.Height)' Color.White);  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString (font' Math.Round (1.0 / fpsMeterStopwatch.Elapsed.TotalSeconds' 2).ToString ()' new Vector2 (10' 10)' Color.White);  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString (font' Math.Round (1.0 / fpsMeterStopwatch.Elapsed.TotalSeconds' 2).ToString ()' new Vector2 (10' 10)' Color.White);  
Magic Number,TurtleTurner2000.Server,Game1,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString (font' Math.Round (1.0 / fpsMeterStopwatch.Elapsed.TotalSeconds' 2).ToString ()' new Vector2 (10' 10)' Color.White);  
Magic Number,TurtleTurner2000.Server,RectangleSprite,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\RectangleSprite.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (pixel' new Rectangle (rect.X - width' rect.Y - width' rect.Width + 2 * width' width)' alphared);  
Magic Number,TurtleTurner2000.Server,RectangleSprite,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\RectangleSprite.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (pixel' new Rectangle (rect.X - width' rect.Y + rect.Height' rect.Width + 2 * width' width)' alphared);  
Magic Number,TurtleTurner2000.Server,ScreenClientje,C:\repos\devedse_TurtleTurner2000\TurtleTurner2000\TurtleTurner2000.Server\ScreenClientje.cs,ScreenClientje,The following statement contains a magic number: rectSprite = new RectangleSprite (rect' 5' game);  
