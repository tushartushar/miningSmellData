Implementation smell,Namespace,Class,File,Method,Description
Long Method,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,TryConvert,The method has 102 lines of code.
Long Method,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,ExtendImpl,The method has 113 lines of code.
Long Method,CsQuery.Engine,SelectorParser,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorParser.cs,Parse,The method has 236 lines of code.
Long Method,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Select,The method has 202 lines of code.
Long Method,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,Parse,The method has 134 lines of code.
Long Method,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,HtmlData,The method has 131 lines of code.
Complex Method,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,ExtendImpl,Cyclomatic complexity of the method is 11
Complex Method,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,ToNewExpando,Cyclomatic complexity of the method is 11
Complex Method,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,OnDeserialization,Cyclomatic complexity of the method is 8
Complex Method,CsQuery.Implementation,CSSStyleDeclaration,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\CSSStyleDeclaration.cs,ValidateUnitString,Cyclomatic complexity of the method is 11
Complex Method,CsQuery.Engine,SelectorClause,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorClause.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Select,Cyclomatic complexity of the method is 17
Complex Method,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,GetMatches,Cyclomatic complexity of the method is 12
Complex Method,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Matches,Cyclomatic complexity of the method is 10
Complex Method,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,Tokenize,Cyclomatic complexity of the method is 12
Complex Method,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_remove,Cyclomatic complexity of the method is 8
Complex Method,CsQuery.StringScanner.Patterns,Bounded,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Patterns\Bounded.cs,Expect,Cyclomatic complexity of the method is 11
Long Parameter List,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,CreateFromUrlAsync,The method has 5 parameters. Parameters: url' id' callbackSuccess' callbackFail' options
Long Parameter List,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Create,The method has 5 parameters. Parameters: html' encoding' parsingMode' parsingOptions' docType
Long Parameter List,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,CQ,The method has 5 parameters. Parameters: html' encoding' parsingMode' parsingOptions' docType
Long Parameter List,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,CreateNew,The method has 6 parameters. Parameters: target' html' encoding' parsingMode' parsingOptions' docType
Long Parameter List,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,AddExtendKVP,The method has 5 parameters. Parameters: deep' parents' target' name' value
Long Parameter List,CsQuery.Implementation,DomDocument,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\DomDocument.cs,Create,The method has 5 parameters. Parameters: html' encoding' parsingMode' parsingOptions' docType
Long Parameter List,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,Create,The method has 5 parameters. Parameters: html' streamEncoding' parsingMode' parsingOptions' docType
Long Parameter List,CsQuery.Web,AsyncWebRequestManager,C:\repos\jamietre_CsQuery\source\CsQuery\Web\AsyncWebRequestManager.cs,StartAsyncWebRequest,The method has 5 parameters. Parameters: url' success' fail' id' options
Long Identifier,CsQuery.HtmlParser,CsQueryTreeBuilder,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\CsQueryTreeBuilder.cs,ReceiveDocumentMode,The length of the parameter html4SpecificAddcionalErrorChecks is 33.
Long Statement,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Attr,The length of the statement  "                // Using attr with empty string should set a property to "true. But prop() itself requires a truthy value. Check for this specifically. " is 135.
Long Statement,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,InsertAtOffset,The length of the statement  "            // bind the source to the target's document if it was itself a CsQuery object' and update its selection set to reflect the  " is 122.
Long Statement,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,AddSelection,The length of the statement  "            //    throw new InvalidOperationException("Cannot add unbound elements or elements bound to another DOM directly to a selection set."); " is 135.
Long Statement,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,ToNewExpando,The length of the statement  "                        throw new InvalidCastException("The key '" + key + "' could not be added because the same key already exists. Conversion of the source object's keys to strings did not result in unique keys."); " is 193.
Long Statement,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,ToNewExpando,The length of the statement  "                throw new InvalidCastException("Conversion to ExpandObject must be from a JSON string' an object' or an ExpandoObject"); " is 120.
Long Statement,CsQuery.Engine,PseudoSelectors,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoSelectors.cs,PopulateInnerSelectors,The length of the statement  "                throw new InvalidOperationException(String.Format("I didn't find the native PseudoClassSelectors in the namespace {0}."'defaultNamespace)); " is 139.
Long Statement,CsQuery.Engine,SelectorParser,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorParser.cs,Parse,The length of the statement  "                                    throw new ArgumentException("Unknown pseudo-class :\"" + key + "\". If this is a valid CSS or jQuery selector' please let us know."); " is 133.
Long Statement,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,SetVariable,The length of the statement  "            // Setting a variable doesn't do anything directly' instead' it stores the value for use when it's accessed by the equation. " is 124.
Long Statement,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,SetVariable,The length of the statement  "            // Each entity that makes up an equation has its own variable list - the objects used for "x" each time it appears are not the " is 126.
Long Statement,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,SetVariable,The length of the statement  "            // same instance. This makes construction easier (otherwise' there would have to be an "owner" for each operand so they could " is 125.
Long Statement,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,SetVariable,The length of the statement  "            // access an existing instance of same-named variable). So we get variable values from an event' rather than assigning them " is 123.
Long Statement,CsQuery.EquationParser.Implementation,EquationParserEngine,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\EquationParserEngine.cs,GetOperand,The length of the statement  "                    throw new ArgumentException("Unexpected character '" + scanner.Match + "' found' expected an operand (a number or variable name)"); " is 131.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagActionForDocument,The length of the statement  "                // [html5] A head element's start tag may be omitted if the element is empty' or if the first thing inside the head element is an element. " is 138.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagActionForDocument,The length of the statement  "                // [csquery] When a metadata tag appears' we start a head. Otherwise' we start a body. If a body later appears it will be ignored. " is 130.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A dt element's end tag may be omitted if the dt element is immediately followed by another dt element or a dd element. " is 129.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A dd element's end tag may be omitted if the dd element is immediately followed by another dd element or a dt element' or if there is no more content in the parent element. " is 183.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [csquery] I have no idea what "the parent element is not an element" means. Closing an open p whenever we hit one of these elements seems to work. " is 149.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] An rt element's end tag may be omitted if the rt element is immediately followed by an rt or rp element' or if there is no more content in the parent element. " is 169.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] An rp element's end tag may be omitted if the rp element is immediately followed by an rt or rp element' or if there is no more content in the parent element. " is 169.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5]  A tr element's end tag may be omitted if the tr element is immediately followed by another tr element' or if there is no more content in the parent element. " is 168.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A th element's end tag may be omitted if the th element is immediately followed by a td or th element' or if there is no more content in the parent element. " is 167.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [csquery] we evaluate "no more content" by trying to open another tag type in the table. This can return both a close & create  " is 129.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A thead element's end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element. " is 125.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                //         A tbody element's end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element' or if there is no more content in the parent element. " is 179.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A tfoot element's end tag may be omitted if the tfoot element is immediately followed by a tbody element' or if there is no more content in the parent element. " is 170.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                // [html5] A tbody element's start tag may be omitted if the first thing inside the tbody element is a tr element' and if the element is not immediately  " is 152.
Long Statement,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,SpecialTagAction,The length of the statement  "                //        preceded by a tbody' thead' or tfoot element whose end tag has been omitted. (It can't be omitted if the element is empty.) " is 133.
Long Statement,CsQuery.Output,FormatDefault,C:\repos\jamietre_CsQuery\source\CsQuery\Output\OutputFormatterDefault.cs,ParseChildren,The length of the statement  "                    NodeStackElement nodeStackEl = new NodeStackElement(el' el.NodeType == NodeType.TEXT_NODE && HtmlData.HtmlChildrenNotAllowed(element.NodeNameID)' false); " is 153.
Long Statement,CsQuery.StringScanner.Implementation,ExpectPattern,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Implementation\ExpectPattern.cs,GetOuput,The length of the statement  "                        //        throw new InvalidOperationException("Invalid escape character found in quoted string: '" + Source[index] + "'"); " is 122.
Long Statement,CsQuery.StringScanner.Patterns,Bounded,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Patterns\Bounded.cs,Validate,The length of the statement  "            // HonorQuotes parm is false no matter what because we don't want to process escape characters for this method -only for " is 120.
Long Statement,CsQuery.ExtensionMethods.Forms,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Forms.cs,RestoreData,The length of the statement  "                    throw new InvalidOperationException(String.Format("An unknown element type was found while restoring post data: '{0}'"' element.NodeName)); " is 139.
Long Statement,CsQuery.Utility,Support,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\Support.cs,TryGetFilePath,The length of the statement  "            List<string> rootedPath = new List<string>(basePath.ToLower().Split(new char[] { '\\' }' StringSplitOptions.RemoveEmptyEntries)); " is 129.
Long Statement,CsQuery.Utility,Support,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\Support.cs,TryGetFilePath,The length of the statement  "            List<string> findPath = new List<string>(partialPath.ToLower().Split(new char[] { '\\' }' StringSplitOptions.RemoveEmptyEntries)); " is 130.
Long Statement,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,ParseJSONValue,The length of the statement  "                throw new ArgumentException("The value '" + jsonValue + "' could not be parsed' it doesn't seem to be something that should be a JSON value"); " is 142.
Long Statement,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,ParseJSONObject,The length of the statement  "            Dictionary<string' object> dict = (Dictionary<string' object>)serializer.Deserialize(objectToDeserialize' typeof(Dictionary<string' object>)); " is 142.
Complex Conditional,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Attr,The conditional expression  "name == "value" &&                            (el.NodeName == "INPUT" || el.NodeName == "SELECT" || el.NodeName == "OPTION")"  is complex.
Complex Conditional,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Attr,The conditional expression  "(e.NodeNameID == HtmlData.tagINPUT || e.NodeNameID == HtmlData.tagBUTTON) && name == "type"                      && !e.IsFragment"  is complex.
Complex Conditional,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,TryConvert,The conditional expression  "realType == typeof(int)                  || realType == typeof(long)                  || realType == typeof(float)                  || realType == typeof(double)                  || realType == typeof(decimal)"  is complex.
Complex Conditional,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,AddExtendKVP,The conditional expression  "fieldInfo.IsStatic || !fieldInfo.IsPublic || fieldInfo.IsLiteral || fieldInfo.IsInitOnly"  is complex.
Complex Conditional,CsQuery.Implementation,DomElement,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\DomElement.cs,SetAttribute,The conditional expression  "tokenId == HtmlData.CheckedAttrId                          && _NodeNameID == HtmlData.tagINPUT                          && Type == "radio"                          && !String.IsNullOrEmpty(Name)                          && value != null                          && Document != null"  is complex.
Complex Conditional,CsQuery.Engine,PseudoSelectors,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoSelectors.cs,PopulateFromAssembly,The conditional expression  "t.IsClass && t.Namespace != null &&                      !t.IsAbstract &&                      nameSpaces.Contains(t.Namespace)"  is complex.
Complex Conditional,CsQuery.Engine,NthChildMatcher,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoClassSelectors\Css\NthChildMatcher.cs,UpdateCacheInfo,The conditional expression  "(val < lastIndex && iterator <= lastIndex+1) ||                  (lastVal > val && val>0  )"  is complex.
Complex Conditional,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Select,The conditional expression  "rangedIndex != null ||                      (simpleIndex != null && canUseBasicIndex)                      && !selector.NoIndex"  is complex.
Complex Conditional,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,GetMatches,The conditional expression  "selector.IsDomPositionPseudoSelector &&                              ((selector.TraversalType == TraversalType.All) ||                              (selector.TraversalType == TraversalType.Child && selector.ChildDepth == current.Depth + 1) ||                              (selector.TraversalType == TraversalType.Descendent && selector.ChildDepth <= current.Depth + 1))"  is complex.
Complex Conditional,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,Parse,The conditional expression  "ActiveEncoding == null ||                      (bomReader.Encoding != null &&                           (bomReader.Encoding.WebName == "utf-8" || bomReader.Encoding.WebName == "utf-16")                      )"  is complex.
Complex Conditional,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_delete,The conditional expression  "(sibling.left != null && !sibling.left.IsBlack) ||                      (sibling.right != null && !sibling.right.IsBlack)"  is complex.
Complex Conditional,CsQuery.Utility,Support,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\Support.cs,ToCamelCase,The conditional expression  "c == '-' &&                          pos > 0 &&                          pos < name.Length - 1 &&                          CharacterData.IsType(name[pos - 1]' CharacterType.Alpha) &&                          CharacterData.IsType(name[pos + 1]' CharacterType.Alpha)"  is complex.
Virtual Method Call from Constructor,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,Equation,The constructor "Equation" calls a virtual method "Initialize".
Virtual Method Call from Constructor,CsQuery.EquationParser.Implementation,Equation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Equation.cs,Equation,The constructor "Equation" calls a virtual method "Initialize".
Virtual Method Call from Constructor,CsQuery.EquationParser.Implementation,Literal,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Literal.cs,Literal,The constructor "Literal" calls a virtual method "Set".
Empty Catch Block,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetEncodingFromXML,The method has an empty catch block.
Empty Catch Block,CsQuery.Promises,Deferred,C:\repos\jamietre_CsQuery\source\CsQuery\Promises\Deferred.cs,RejectImpl,The method has an empty catch block.
Magic Number,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Data,The following statement contains a magic number: if (obj != null)              {                    foreach (var item in obj.Attributes)                  {                      if (item.Key.StartsWith("data-"))                      {                          object value;                          if (JSON.TryParseJSONValue(item.Value' typeof(object)' out value))                          {                              data[item.Key.Substring(5)] = value;                          }                          else                          {                              data[item.Key.Substring(5)] = item.Value;                          }                      }                  }                  return dataObj;              }              else              {                  return null;              }
Magic Number,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Data,The following statement contains a magic number: if (obj != null)              {                    foreach (var item in obj.Attributes)                  {                      if (item.Key.StartsWith("data-"))                      {                          object value;                          if (JSON.TryParseJSONValue(item.Value' typeof(object)' out value))                          {                              data[item.Key.Substring(5)] = value;                          }                          else                          {                              data[item.Key.Substring(5)] = item.Value;                          }                      }                  }                  return dataObj;              }              else              {                  return null;              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,PathKeyComparer,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\PathKeyComparer.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  const int hashP = 16777619;                  int hash = (int)2166136261;                    for (int i = 0; i < obj.Length; i++)                      hash = (hash ^ obj[i]) * hashP;                                    return ((((hash + (hash << 13))                      ^ (hash >> 7))                      + (hash << 3))                      ^ (hash >> 17))                      + (hash << 5);              }
Magic Number,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,TestPrime,The following statement contains a magic number: if ((x & 1) != 0)              {                  int top = (int)Math.Sqrt(x);                    for (int n = 3; n < top; n += 2)                  {                      if ((x % n) == 0)                          return false;                  }                  return true;              }
Magic Number,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,TestPrime,The following statement contains a magic number: if ((x & 1) != 0)              {                  int top = (int)Math.Sqrt(x);                    for (int n = 3; n < top; n += 2)                  {                      if ((x % n) == 0)                          return false;                  }                  return true;              }
Magic Number,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,TestPrime,The following statement contains a magic number: return (x == 2);
Magic Number,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,CalcPrime,The following statement contains a magic number: for (int i = (x & (~1)) - 1; i < Int32.MaxValue; i += 2)              {                  if (TestPrime(i)) return i;              }
Magic Number,CsQuery.Implementation,DomObject,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\DomObject.cs,GetPath,The following statement contains a magic number: ushort[] path = new ushort[32];
Magic Number,CsQuery.Implementation,DomObject,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\DomObject.cs,GetPath,The following statement contains a magic number: int len = 32;
Magic Number,CsQuery.Implementation,RangeSortedDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RangeSortedDictionary.cs,HumanReadableKey,The following statement contains a magic number: if (!indexKey[0].Equals(indexSeparator))              {                  ushort keyPart = (ushort)Convert.ChangeType(indexKey[1]' typeof(ushort));                  humanReadableKey = Convert.ChangeType(indexKey[0]' typeof(char)) + HtmlData.TokenName(keyPart) + '/';                  startIndex = 3;              }
Magic Number,CsQuery.Implementation,RangeSortedDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RangeSortedDictionary.cs,HumanReadableKey,The following statement contains a magic number: for (int i = startIndex; i < indexKey.Length; i++)              {                  ushort c = (ushort)Convert.ChangeType(indexKey[i]' typeof(ushort));                  humanReadableKey += ((ushort)c).ToString().PadLeft(3' '0');                  if (i < indexKey.Length - 1)                  {                      humanReadableKey += '/';                  }              }
Magic Number,CsQuery.Engine,NthChildMatcher,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoClassSelectors\Css\NthChildMatcher.cs,UpdateCacheInfo,The following statement contains a magic number: int lastVal = 999999;
Magic Number,CsQuery.Engine.PseudoClassSelectors,Even,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoClassSelectors\jQuery\Even.cs,Filter,The following statement contains a magic number: foreach (var child in selection)              {                  if (index % 2 == 0)                  {                      yield return child;                  }                  index++;              }
Magic Number,CsQuery.Engine.PseudoClassSelectors,Odd,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoClassSelectors\jQuery\Odd.cs,Filter,The following statement contains a magic number: foreach (var child in selection)              {                  if (index % 2 != 0)                  {                      yield return child;                  }                  index++;              }
Magic Number,CsQuery.Engine.PseudoClassSelectors,Header,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\PseudoClassSelectors\jQuery\Header.cs,Matches,The following statement contains a magic number: return nodeName[0] == 'H'                  && nodeName.Length == 2                  && nodeName[1] >= '0'                  && nodeName[1] <= '6';
Magic Number,CsQuery.EquationParser.Implementation,Operand,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Operand.cs,ToByte,The following statement contains a magic number: if (intValue >= 0 || intValue < 255)              {                  return (byte)intValue;              }
Magic Number,CsQuery.EquationParser.Implementation,Operand,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Operand.cs,ToChar,The following statement contains a magic number: if (intValue < 0 || intValue > 65535)              {                  return (char)intValue;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,Parse,The following statement contains a magic number: BytesRead = InputStream.Read(Header' 0' 5);
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,BOMReader,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\BOMReader.cs,GetFileEncoding,The following statement contains a magic number: if (Matches(new byte[] { 0xef' 0xbb' 0xbf }))              {                  enc = Encoding.UTF8;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0x00' 0x00' 0xfe' 0xff }))              {                  enc = new UTF32Encoding(true' true);                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xff' 0xfe' 0x00' 0x00 }))              {                  enc = Encoding.UTF32;                  BomLength=4;                  IsBOM = true;              }              else if (Matches(new byte[] {  0x2b' 0x2f' 0x76 })) {                  enc = Encoding.UTF7;                  BomLength=3;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.BigEndianUnicode;                  BomLength=2;                  IsBOM = true;              }              else if (Matches(new byte[] { 0xfe' 0xff }))              {                  enc = Encoding.Unicode;                  BomLength=2;                  IsBOM = true;              }                                else if (Matches(new byte[] { 0x3c' 0x3f' 0x78' 0x6d' 0x6c }))              {                  enc = GetEncodingFromXML();                  BomLength = 0;                  IsBOM = true;                  IsXML = true;              }
Magic Number,CsQuery.HtmlParser,HtmlData,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\HtmlData.cs,TokenName,The following statement contains a magic number: return tokenId <= 0 ? "" : Tokens[tokenId - 2];
Magic Number,CsQuery.Implementation.Mono,Node,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoSortedSet.cs,Node,The following statement contains a magic number: size_black = 2;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_insert,The following statement contains a magic number: Node parent = path[path.Count - 3];
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_insert,The following statement contains a magic number: for (int i = 0; i < path.Count - 2; i += 2)                  ++path[i].Size;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_insert,The following statement contains a magic number: for (int i = 0; i < path.Count - 2; i += 2)                  ++path[i].Size;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_remove,The following statement contains a magic number: node_reparent(curpos == 0 ? null : path[curpos - 2]' current' 0' null);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_remove,The following statement contains a magic number: for (int i = 0; i < path.Count - 2; i += 2)                  --path[i].Size;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,do_remove,The following statement contains a magic number: for (int i = 0; i < path.Count - 2; i += 2)                  --path[i].Size;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert,The following statement contains a magic number: do              {                  // parent == curpos-2' uncle == curpos-3' grandpa == curpos-4                  if (path[curpos - 3] == null || path[curpos - 3].IsBlack)                  {                      rebalance_insert__rotate_final(curpos' path);                      return;                  }                    path[curpos - 2].IsBlack = path[curpos - 3].IsBlack = true;                    curpos -= 4; // move to the grandpa                    if (curpos == 0) // => current == root                      return;                  path[curpos].IsBlack = false;              } while (!path[curpos - 2].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_delete,The following statement contains a magic number: do              {                  Node sibling = path[curpos - 1];                  // current is black => sibling != null                  if (!sibling.IsBlack)                  {                      // current is black && sibling is red                       // => both sibling.left and sibling.right are black' and are not null                      curpos = ensure_sibling_black(curpos' path);                      // one of the nephews became the new sibling -- in either case' sibling != null                      sibling = path[curpos - 1];                  }                    if ((sibling.left != null && !sibling.left.IsBlack) ||                      (sibling.right != null && !sibling.right.IsBlack))                  {                      rebalance_delete__rotate_final(curpos' path);                      return;                  }                    sibling.IsBlack = false;                    curpos -= 2; // move to the parent                    if (curpos == 0)                      return;              } while (path[curpos].IsBlack);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert__rotate_final,The following statement contains a magic number: Node parent = path[curpos - 2];
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert__rotate_final,The following statement contains a magic number: Node grandpa = path[curpos - 4];
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert__rotate_final,The following statement contains a magic number: node_reparent(curpos == 4 ? null : path[curpos - 6]' grandpa' grandpa_size' new_root);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_insert__rotate_final,The following statement contains a magic number: node_reparent(curpos == 4 ? null : path[curpos - 6]' grandpa' grandpa_size' new_root);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_delete__rotate_final,The following statement contains a magic number: Node parent = path[curpos - 2];
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_delete__rotate_final,The following statement contains a magic number: node_reparent(curpos == 2 ? null : path[curpos - 4]' parent' parent_size' new_root);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,rebalance_delete__rotate_final,The following statement contains a magic number: node_reparent(curpos == 2 ? null : path[curpos - 4]' parent' parent_size' new_root);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: Node parent = path[curpos - 2];
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: node_reparent(curpos == 2 ? null : path[curpos - 4]' parent' parent_size' sibling);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: node_reparent(curpos == 2 ? null : path[curpos - 4]' parent' parent_size' sibling);
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: path[curpos - 2] = sibling;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: path[curpos + 2] = current;
Magic Number,CsQuery.Implementation.Mono,RBTree,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\RBTree.cs,ensure_sibling_black,The following statement contains a magic number: return curpos + 2;
Magic Number,CsQuery.Output,HtmlEncoderFull,C:\repos\jamietre_CsQuery\source\CsQuery\Output\HtmlEncoderFull.cs,TryEncode,The following statement contains a magic number: if (c>=160) {                  bool found = HtmlEntityMap.TryGetValue(c' out encoded);                  if (found) {                      return true;                  }              }
Magic Number,CsQuery.Output,HtmlEncoderMinimumNbsp,C:\repos\jamietre_CsQuery\source\CsQuery\Output\HtmlEncoderMinimumNbsp.cs,TryEncode,The following statement contains a magic number: switch (c)              {                  case (char)160:                      encoded = "&nbsp;";                      return true;                  default:                      return base.TryEncode(c' out encoded);              }
Magic Number,CsQuery.Output,HtmlEncoderBasic,C:\repos\jamietre_CsQuery\source\CsQuery\Output\HtmlEncoderBasic.cs,TryEncode,The following statement contains a magic number: switch (c)              {                  case '<':                      encoded = "&lt;";                      return true;                  case '>':                      encoded = "&gt;";                      return true;                  case '"':                      encoded = "&quot;";                      return true; ;                  case '&':                      encoded = "&amp;";                      return true; ;                  case (char)160:                      encoded = "&nbsp;";                      return true; ;                  default:                      if (c > 160)                      {                          // decimal numeric entity                          encoded = EncodeNumeric(c);                          return true;                      }                      else                      {                          encoded = null;                          return false;                      }              }
Magic Number,CsQuery.Output,HtmlEncoderBasic,C:\repos\jamietre_CsQuery\source\CsQuery\Output\HtmlEncoderBasic.cs,TryEncode,The following statement contains a magic number: switch (c)              {                  case '<':                      encoded = "&lt;";                      return true;                  case '>':                      encoded = "&gt;";                      return true;                  case '"':                      encoded = "&quot;";                      return true; ;                  case '&':                      encoded = "&amp;";                      return true; ;                  case (char)160:                      encoded = "&nbsp;";                      return true; ;                  default:                      if (c > 160)                      {                          // decimal numeric entity                          encoded = EncodeNumeric(c);                          return true;                      }                      else                      {                          encoded = null;                          return false;                      }              }
Magic Number,CsQuery.StringScanner,CharacterData,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\CharacterData.cs,CharacterData,The following statement contains a magic number: characterFlags = new uint[65536];
Magic Number,CsQuery.StringScanner.Implementation,StringScannerEngine,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Implementation\StringScannerEngine.cs,ThrowException,The following statement contains a magic number: if (pos >= 0)              {                  error += " at position " + pos + ": \"";                    if (Index != pos)                  {                      if (Index > 0 && Index < Length)                      {                          error += ".. ";                      }                      error += Text.SubstringBetween(Math.Max(Index - 10' 0)' pos) + ">>" + Text[pos] + "<<";                      if (pos < Length - 1)                      {                          error += Text.SubstringBetween(pos + 1' Math.Min(Length' pos + 30));                      }                      error += "\"";                  }              }
Magic Number,CsQuery.StringScanner.Implementation,StringScannerEngine,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Implementation\StringScannerEngine.cs,ThrowException,The following statement contains a magic number: if (pos >= 0)              {                  error += " at position " + pos + ": \"";                    if (Index != pos)                  {                      if (Index > 0 && Index < Length)                      {                          error += ".. ";                      }                      error += Text.SubstringBetween(Math.Max(Index - 10' 0)' pos) + ">>" + Text[pos] + "<<";                      if (pos < Length - 1)                      {                          error += Text.SubstringBetween(pos + 1' Math.Min(Length' pos + 30));                      }                      error += "\"";                  }              }
Magic Number,CsQuery.StringScanner.Patterns,EscapedString,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Patterns\EscapedString.cs,Validate,The following statement contains a magic number: while (index<Source.Length && !done)              {                  char character = Source[index];                  if (!Escaped && character == '\\')                  {                      Escaped = true;                  }                  else                  {                      if (Escaped)                      {  						// process unicode char code point' if presented  						int tempIndex = index;  						StringBuilder sb = new StringBuilder();                            while (tempIndex < Source.Length // end of string?                              && tempIndex - index < 6     // only 6 hexadecimal digits are allowed                              && CharacterData.IsType(Source[tempIndex]'CharacterType.Hexadecimal))  						{  							sb.Append(Source[tempIndex]);    							tempIndex++;  						}                            if (sb.Length >= 1)                          {                              int value = 0;                              if (Int32.TryParse(sb.ToString()' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value))                              {                                  character = (char)value;                                  index = tempIndex;                              }                                // If the escape sequence is <6 characters and was terminated by whitespace' then skip the whitespace.                                if (sb.Length < 6                                  && index < Source.Length                                  && CharacterData.IsType(Source[index]' CharacterType.Whitespace))                              {                                  index++;                                  relativeIndex++;                              }                                // decrement because it will be incremented again outside this part of the loop                              index--;                              relativeIndex--;                          }                          else                          {                                // means the escaped character wasn't hex' so just pass it through                              sb.Append(Source[tempIndex]);                            }  												                          Escaped = false;                      }                      else                      {                          if (!ValidCharacter(relativeIndex'character))                          {                              done = true;                              continue;                          }                      }                      Result += character;                  }                  index++;                  relativeIndex++;              }
Magic Number,CsQuery.StringScanner.Patterns,EscapedString,C:\repos\jamietre_CsQuery\source\CsQuery\StringScanner\Patterns\EscapedString.cs,Validate,The following statement contains a magic number: while (index<Source.Length && !done)              {                  char character = Source[index];                  if (!Escaped && character == '\\')                  {                      Escaped = true;                  }                  else                  {                      if (Escaped)                      {  						// process unicode char code point' if presented  						int tempIndex = index;  						StringBuilder sb = new StringBuilder();                            while (tempIndex < Source.Length // end of string?                              && tempIndex - index < 6     // only 6 hexadecimal digits are allowed                              && CharacterData.IsType(Source[tempIndex]'CharacterType.Hexadecimal))  						{  							sb.Append(Source[tempIndex]);    							tempIndex++;  						}                            if (sb.Length >= 1)                          {                              int value = 0;                              if (Int32.TryParse(sb.ToString()' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out value))                              {                                  character = (char)value;                                  index = tempIndex;                              }                                // If the escape sequence is <6 characters and was terminated by whitespace' then skip the whitespace.                                if (sb.Length < 6                                  && index < Source.Length                                  && CharacterData.IsType(Source[index]' CharacterType.Whitespace))                              {                                  index++;                                  relativeIndex++;                              }                                // decrement because it will be incremented again outside this part of the loop                              index--;                              relativeIndex--;                          }                          else                          {                                // means the escaped character wasn't hex' so just pass it through                              sb.Append(Source[tempIndex]);                            }  												                          Escaped = false;                      }                      else                      {                          if (!ValidCharacter(relativeIndex'character))                          {                              done = true;                              continue;                          }                      }                      Result += character;                  }                  index++;                  relativeIndex++;              }
Magic Number,CsQuery.Utility,Support,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\Support.cs,CleanFilePath,The following statement contains a magic number: while (pos > 0)              {                  int prevPos = output.Substring(0' pos).LastIndexOf("\\");                  if (prevPos > 0)                  {                      output = output.Substring(0' prevPos) + output.Substring(pos + 3);                      pos = output.IndexOf("\\..\\");                  }                  else                  {                      pos = -1;                  }                }
Magic Number,CsQuery.Utility,Support,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\Support.cs,RemoveRelativePath,The following statement contains a magic number: if (finalPath.StartsWith("~/"))              {                  if (finalPath.Length > 0)                  {                      finalPath = finalPath.Substring(2);                  }                  else                  {                      finalPath = "";                  }              }
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup = new char[127];
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['b'] = (char)8;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['f'] = (char)12;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['n'] = (char)10;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['e'] = (char)13;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['t'] = (char)9;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,JSON,The following statement contains a magic number: escapeLookup['v'] = (char)11;
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,IsJsonDate,The following statement contains a magic number: return jsonValue.Length >= 7 && jsonValue.Substring(0' 7) == "\"\\/Date";
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,IsJsonDate,The following statement contains a magic number: return jsonValue.Length >= 7 && jsonValue.Substring(0' 7) == "\"\\/Date";
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,ParseJsonString,The following statement contains a magic number: string obj = input.Substring(1' input.Length - 2);
Magic Number,CsQuery.Utility,JSON,C:\repos\jamietre_CsQuery\source\CsQuery\Utility\JSON.cs,ParseJsonArray,The following statement contains a magic number: string obj = input.Substring(1' input.Length - 2);
Magic Number,CsQuery.Web,ServerConfig,C:\repos\jamietre_CsQuery\source\CsQuery\Web\ServerConfig.cs,ServerConfig,The following statement contains a magic number: _Default = new ServerConfig              {                  Timeout = TimeSpan.FromSeconds(10)'                  UserAgent = "Mozilla/5.0 (compatible; CsQuery/1.3)"              };
Magic Number,CsQuery.Web,CsQueryHttpContext,C:\repos\jamietre_CsQuery\source\CsQuery\Web\CsQueryHttpContext.cs,Create,The following statement contains a magic number: if (mgr != null && mgr.IsInAsyncPostBack)              {                  _AsyncPostbackData = new List<AsyncPostbackData>();                  string input = _sb.ToString();                  int inputLength = input.Length;                  string id = String.Empty;                  string type = String.Empty;                  int length = 0;                    int pos = 0;                  int step = 1;                  while (pos < inputLength)                  {                      if (step < 4)                      {                          int nextPos = input.IndexOf('|'' pos);                          if (nextPos > inputLength)                          {                              throw new InvalidOperationException("Unable to parse UpdatePanel data");                          }                          string data = input.SubstringBetween(pos' nextPos);                          switch (step)                          {                              case 1:                                  length = Convert.ToInt32(data);                                  break;                              case 2:                                  type = data;                                  break;                              case 3:                                  id = data;                                  break;                          }                          step++;                          pos = nextPos + 1;                      }                      else                      {                          AsyncPostbackData postData = new AsyncPostbackData();                          postData.Create(length' type' id' input.Substring(pos' length));                          pos += length + 1;                          step = 1;                          _AsyncPostbackData.Add(postData);                      }                  }              }              else              {                  Dom = CQ.CreateDocument(_sb.ToString());              }
Magic Number,CsQuery.Web,CsQueryHttpContext,C:\repos\jamietre_CsQuery\source\CsQuery\Web\CsQueryHttpContext.cs,Create,The following statement contains a magic number: if (mgr != null && mgr.IsInAsyncPostBack)              {                  _AsyncPostbackData = new List<AsyncPostbackData>();                  string input = _sb.ToString();                  int inputLength = input.Length;                  string id = String.Empty;                  string type = String.Empty;                  int length = 0;                    int pos = 0;                  int step = 1;                  while (pos < inputLength)                  {                      if (step < 4)                      {                          int nextPos = input.IndexOf('|'' pos);                          if (nextPos > inputLength)                          {                              throw new InvalidOperationException("Unable to parse UpdatePanel data");                          }                          string data = input.SubstringBetween(pos' nextPos);                          switch (step)                          {                              case 1:                                  length = Convert.ToInt32(data);                                  break;                              case 2:                                  type = data;                                  break;                              case 3:                                  id = data;                                  break;                          }                          step++;                          pos = nextPos + 1;                      }                      else                      {                          AsyncPostbackData postData = new AsyncPostbackData();                          postData.Create(length' type' id' input.Substring(pos' length));                          pos += length + 1;                          step = 1;                          _AsyncPostbackData.Add(postData);                      }                  }              }              else              {                  Dom = CQ.CreateDocument(_sb.ToString());              }
Magic Number,CsQuery.Web,CsQueryHttpContext,C:\repos\jamietre_CsQuery\source\CsQuery\Web\CsQueryHttpContext.cs,Create,The following statement contains a magic number: if (mgr != null && mgr.IsInAsyncPostBack)              {                  _AsyncPostbackData = new List<AsyncPostbackData>();                  string input = _sb.ToString();                  int inputLength = input.Length;                  string id = String.Empty;                  string type = String.Empty;                  int length = 0;                    int pos = 0;                  int step = 1;                  while (pos < inputLength)                  {                      if (step < 4)                      {                          int nextPos = input.IndexOf('|'' pos);                          if (nextPos > inputLength)                          {                              throw new InvalidOperationException("Unable to parse UpdatePanel data");                          }                          string data = input.SubstringBetween(pos' nextPos);                          switch (step)                          {                              case 1:                                  length = Convert.ToInt32(data);                                  break;                              case 2:                                  type = data;                                  break;                              case 3:                                  id = data;                                  break;                          }                          step++;                          pos = nextPos + 1;                      }                      else                      {                          AsyncPostbackData postData = new AsyncPostbackData();                          postData.Create(length' type' id' input.Substring(pos' length));                          pos += length + 1;                          step = 1;                          _AsyncPostbackData.Add(postData);                      }                  }              }              else              {                  Dom = CQ.CreateDocument(_sb.ToString());              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,Reverse,The following statement contains a magic number: if (text.Length > 1)              {                  int pivotPos = text.Length / 2;                  for (int i = 0; i < pivotPos; i++)                  {                      int iRight = text.Length - (i + 1);                      char rightChar = text[i];                      text[i] = text[iRight];                      text[iRight] = rightChar;                  }              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,ToLower,The following statement contains a magic number: if (character >= 'A' && character <= 'Z')              {                  return (char)(character + 32);              }              else              {                  return character;              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,ToUpper,The following statement contains a magic number: if (character >= 'a' && character <= 'z')              {                  return (char)(character - 32);              }              else              {                  return character;              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,ToByteArray,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,HighByte,The following statement contains a magic number: unchecked              {                  return (byte)(source >> 8);              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,HighByte,The following statement contains a magic number: unchecked              {                  return (byte)(source >> 8);              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,LowByte,The following statement contains a magic number: unchecked              {                  return (byte)(source & 255);              }
Magic Number,CsQuery.ExtensionMethods.Internal,ExtensionMethods,C:\repos\jamietre_CsQuery\source\CsQuery\ExtensionMethods\Internal\ExtensionMethods.cs,LowByte,The following statement contains a magic number: unchecked              {                  return (byte)(source & 255);              }
Missing Default,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,Css,The following switch statement is missing a default case: switch (style)                  {                      case "display":                          if (String.IsNullOrEmpty(def))                          {                              def = el.IsBlock ? "block" : "inline";                          }                          break;                      case "opacity":                          if (String.IsNullOrEmpty(def))                          {                              def = "1";                          }                          break;                  }
Missing Default,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,SetOptionSelected,The following switch statement is missing a default case: switch (e.NodeNameID)                  {                      case HtmlData.tagOPTION:                          attribute = "selected";                          break;                      case HtmlData.tagINPUT:                          switch (e["type"])                          {                              case "checkbox":                              case "radio":                                  attribute = "checked";                                  break;                          }                          break;                      case HtmlData.tagOPTGROUP:                          SetOptionSelected(e.ChildElements' values' multiple);                          break;                  }
Missing Default,CsQuery,CQ,C:\repos\jamietre_CsQuery\source\CsQuery\CQ_CsQuery\HasAttr.cs,SetOptionSelected,The following switch statement is missing a default case: switch (e["type"])                          {                              case "checkbox":                              case "radio":                                  attribute = "checked";                                  break;                          }
Missing Default,CsQuery,Objects,C:\repos\jamietre_CsQuery\source\CsQuery\Objects.cs,TryStringToBool,The following switch statement is missing a default case: switch (value)              {                  case "on":                  case "yes":                  case "true":                  case "enabled":                  case "active":                  case "1":                      result = true;                      return true;                  case "off":                  case "no":                  case "false":                  case "disabled":                  case "0":                      result = false;                      return true;              }
Missing Default,CsQuery.Implementation,HTMLOptionsCollection,C:\repos\jamietre_CsQuery\source\CsQuery\Dom\Implementation\HtmlElements\HTMLOptionsCollection.cs,Children,The following switch statement is missing a default case: switch (item.NodeNameID)                  {                      case HtmlData.tagOPTION:                          yield return new OptionElement {                               Element = (DomElement)item'                               Disabled = disabled || item.HasAttribute("disabled")                          };                          break;                        case HtmlData.tagOPTGROUP:                          foreach (var child in Children(item' disabled || item.HasAttribute("disabled")))                          {                              yield return child;                          }                          break;                  }
Missing Default,CsQuery.Implementation,MonoDictionary<TKey;TValue>,C:\repos\jamietre_CsQuery\source\CsQuery\Implementation\MonoDictionary.cs,OnDeserialization,The following switch statement is missing a default case: switch (e.Name)                  {                      case "Version":                          generation = (int)e.Value;                          break;                        case "Comparer":                          hcp = (IEqualityComparer<TKey>)e.Value;                          break;                        case "HashSize":                          hashSize = (int)e.Value;                          break;                        case "KeyValuePairs":                          data = (KeyValuePair<TKey' TValue>[])e.Value;                          break;                  }
Missing Default,CsQuery.Engine,DomIndexRanged,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\DomIndexRanged.cs,ProcessQueue,The following switch statement is missing a default case: switch (item.IndexOperationType)                  {                      case IndexOperationType.Add:                          SelectorXref.Add(item.Key' item.Value);                          break;                      case IndexOperationType.Remove:                          SelectorXref.Remove(item.Key);                          break;                  }
Missing Default,CsQuery.Engine,SelectorClause,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorClause.cs,ToString,The following switch statement is missing a default case: switch (TraversalType)              {                  case TraversalType.Child:                      output += " > ";                      break;                  case TraversalType.Descendent:                      output += " ";                      break;                  case TraversalType.Adjacent:                      output += " + ";                      break;                  case TraversalType.Sibling :                      output += " ~ ";                      break;              }
Missing Default,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Select,The following switch statement is missing a default case: switch (selector.TraversalType)                  {                      case TraversalType.Child:                          depth = selector.ChildDepth;                          descendants = false;                          break;                      case TraversalType.Filter:                      case TraversalType.Adjacent:                      case TraversalType.Sibling:                          depth = 0;                          descendants = false;                          break;                      case TraversalType.Descendent:                          depth = 1;                          descendants = true;                          break;                      // default: fall through with default values set above.                  }
Missing Default,CsQuery.Engine,SelectorEngine,C:\repos\jamietre_CsQuery\source\CsQuery\Engine\SelectorEngine.cs,Matches,The following switch statement is missing a default case: switch (selector.TraversalType)              {                  case TraversalType.Child:                      if (selector.ChildDepth != depth)                      {                          return false;                      }                      break;                  case TraversalType.Descendent:                      // Special case because this code is jacked up: when only "AttributeValue" it's ALWAYS a filter' it means                      // the AttributeExists was handled previously by the index.                        // This engine at some point should be reworked so that the "And" combinator is just a subselector' this logic has                       // become too brittle.                        if (depth == 0)                      {                          return false;                      }                      break;              }
Missing Default,CsQuery.EquationParser.Implementation,Operator,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Operator.cs,TrySet,The following switch statement is missing a default case: switch (value)              {                  case "+":                      _OperationType = OperationType.Addition;                      break;                  case "-":                      _OperationType = OperationType.Subtraction;                      break;                  case "*":                      _OperationType = OperationType.Multiplication;                      break;                  case "/":                      _OperationType = OperationType.Division;                      break;                  case "^":                      _OperationType = OperationType.Power;                      break;                  case "%":                      _OperationType = OperationType.Modulus;                      break;                }
Missing Default,CsQuery.EquationParser.Implementation.Functions,NativeOperation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Functions\NativeOperation.cs,GetValueDouble,The following switch statement is missing a default case: switch (Operators[i])                  {                      case OperationType.Addition:                          value += valueN;                          break;                      case OperationType.Subtraction:                          value -= valueN;                          break;                      case OperationType.Multiplication:                          value *= valueN;                          break;                      case OperationType.Division:                          value /= valueN;                          break;                      case OperationType.Power:                          value = Math.Pow(value' valueN);                          break;                      case OperationType.Modulus:                          value %= valueN;                          break;                  }
Missing Default,CsQuery.EquationParser.Implementation.Functions,NativeOperation,C:\repos\jamietre_CsQuery\source\CsQuery\EquationParser\Implementation\Functions\NativeOperation.cs,GetValueLong,The following switch statement is missing a default case: switch (Operators[i])                  {                      case OperationType.Addition:                          value += valueN;                          break;                      case OperationType.Subtraction:                          value -= valueN;                          break;                      case OperationType.Multiplication:                          value *= valueN;                          break;                      case OperationType.Division:                          value /= valueN;                          break;                      case OperationType.Power:                          value = (long)Math.Pow((double)Convert.ToDouble(value)' (double)Convert.ToDouble(valueN));                          break;                      case OperationType.Modulus:                          value %= valueN;                          break;                  }
Missing Default,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,ConfigureTreeBuilderForParsingMode,The following switch statement is missing a default case: switch (HtmlParsingMode)              {                    case HtmlParsingMode.Document:                      treeBuilder.DoctypeExpectation = DoctypeExpectation.Auto;                      break;                  case HtmlParsingMode.Content:                      treeBuilder.SetFragmentContext("body");                      treeBuilder.DoctypeExpectation = DoctypeExpectation.Html;                      break;                  case HtmlParsingMode.Fragment:                      treeBuilder.DoctypeExpectation = DoctypeExpectation.Html;                      treeBuilder.SetFragmentContext(FragmentContext);                      HtmlParsingMode = HtmlParsingMode.Auto;                      break;              }
Missing Default,CsQuery.HtmlParser,ElementFactory,C:\repos\jamietre_CsQuery\source\CsQuery\HtmlParser\ElementFactory.cs,GetContextFromStream,The following switch statement is missing a default case: switch(mode) {                      case 0:                          if (cur=='<') {                              mode=1;                          }                          break;                      case 1:                          if (CharacterData.IsType(cur' CharacterType.HtmlTagOpenerEnd))                          {                              finished = true;                              break;                          }                          tag += cur;                          break;                  }
Missing Default,CsQuery.Web,CsQueryHttpContext,C:\repos\jamietre_CsQuery\source\CsQuery\Web\CsQueryHttpContext.cs,Create,The following switch statement is missing a default case: switch (step)                          {                              case 1:                                  length = Convert.ToInt32(data);                                  break;                              case 2:                                  type = data;                                  break;                              case 3:                                  id = data;                                  break;                          }
