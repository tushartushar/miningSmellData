Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,Cyclomatic complexity of the method is 9
Long Parameter List,Methods.Block,Block,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Block.cs,getContainers,The method has 8 parameters.
Long Parameter List,Methods.Block,Block,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Block.cs,getDecodedInfo,The method has 8 parameters.
Long Parameter List,Methods.Block,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Container.cs,Container,The method has 5 parameters.
Long Parameter List,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The method has 5 parameters.
Long Parameter List,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getContainers,The method has 10 parameters.
Long Parameter List,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The method has 6 parameters.
Long Parameter List,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getDecodedInfo,The method has 10 parameters.
Long Parameter List,Methods.Block_Different_Shape,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Container.cs,Container,The method has 7 parameters.
Long Parameter List,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The method has 5 parameters.
Long Statement,Methods.Block,Block,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Block.cs,Coder,The length of the statement  "	if (numberOfContainers < data.msgBits.Length)// проверяю возможность внедрении информации относительно размеров контейнеров и длины сообщения " is 141.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The length of the statement  "	if (numberOfContainers < data.msgBits.Length)// проверяю возможность внедрении информации относительно размеров контейнеров и длины сообщения " is 141.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The length of the statement  "	Methods.Block_Different_Shape.Container[] containers = new Methods.Block_Different_Shape.Container[data.msgBits.Length]; " is 120.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The length of the statement  "	getContainers (ref data' ref containers' selectedPoints' NotSelectedPoints' xSize' ySize' rowContainers' colContainers' containers.Length); " is 139.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getContainers,The length of the statement  "			containers [index] = new Methods.Block_Different_Shape.Container (ref data' selectedPoints' NotSelectedPoints' x' y' xSize' ySize); " is 131.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The length of the statement  "	message = getDecodedInfo (ref data' selectedPoints' notSelectedPoints' xSize' ySize' calContainers' rowContainers' ref startFrom' limit' ref index); " is 148.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The length of the statement  "	message = getDecodedInfo (ref data' selectedPoints' notSelectedPoints' xSize' ySize' calContainers' rowContainers' ref startFrom' limit' ref index); " is 148.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The length of the statement  "	message = getDecodedInfo (ref data' selectedPoints' notSelectedPoints' xSize' ySize' calContainers' rowContainers' ref startFrom' limit' ref index); " is 148.
Long Statement,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getDecodedInfo,The length of the statement  "	getContainers (ref data' ref containers' selectedPoints' notSelectedPoints' xSize' ySize' rowContainers' calContainers' hiddenData.Length' startFrom); " is 150.
Magic Number,Methods.Block,Block,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Block.cs,Decoder,The following statement contains a magic number: limit = 32;  
Magic Number,Methods.Block,Block,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Block.cs,Decoder,The following statement contains a magic number: limit = Convert.ToInt32 (message) * 8;  
Magic Number,Methods.Block,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Container.cs,getSumBits,The following statement contains a magic number: for (int y = top.y; y < bottom.y; y++) {  	for (int x = top.x; x < bottom.x; x++) {  		char[] colorBits = Convert.ToString (data.imgChanel [y] [x]' 2).ToCharArray ();  		// переводим текущую цветовую компоненту в двоичный вид  		if (colorBits [colorBits.Length - 1] == '1')// если последний бит единица  		 {  			sum ^= true;  			// складываем с единицей  		}  		else {  			sum ^= false;  			// складываем с нулем  		}  	}  }  
Magic Number,Methods.Block,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Container.cs,getSumBits,The following statement contains a magic number: for (int x = top.x; x < bottom.x; x++) {  	char[] colorBits = Convert.ToString (data.imgChanel [y] [x]' 2).ToCharArray ();  	// переводим текущую цветовую компоненту в двоичный вид  	if (colorBits [colorBits.Length - 1] == '1')// если последний бит единица  	 {  		sum ^= true;  		// складываем с единицей  	}  	else {  		sum ^= false;  		// складываем с нулем  	}  }  
Magic Number,Methods.Block,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block\Container.cs,updateValue,The following statement contains a magic number: data.imgChanel [y] [x] = Convert.ToInt32 (new string (colorBits)' 2);  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: while (index < containers.Length) {  	if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  		if (containers [index].points_NotChecked == null) {  			if (containers [index].sumBits_Checked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' false' ref data);  			}  		}  		else {  			if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' true' ref data);  			}  		}  	}  	else {  		if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  		else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  	}  	index++;  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: while (index < containers.Length) {  	if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  		if (containers [index].points_NotChecked == null) {  			if (containers [index].sumBits_Checked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' false' ref data);  			}  		}  		else {  			if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' true' ref data);  			}  		}  	}  	else {  		if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  		else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  	}  	index++;  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: while (index < containers.Length) {  	if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  		if (containers [index].points_NotChecked == null) {  			if (containers [index].sumBits_Checked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' false' ref data);  			}  		}  		else {  			if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' true' ref data);  			}  		}  	}  	else {  		if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  		else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  	}  	index++;  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: while (index < containers.Length) {  	if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  		if (containers [index].points_NotChecked == null) {  			if (containers [index].sumBits_Checked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' false' ref data);  			}  		}  		else {  			if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  				containers [index].updateValue (data.msgBits [index]' true' ref data);  			}  		}  	}  	else {  		if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  		else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  		}  	}  	index++;  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  	if (containers [index].points_NotChecked == null) {  		if (containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' false' ref data);  		}  	}  	else {  		if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' true' ref data);  		}  	}  }  else {  	if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  	else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  	if (containers [index].points_NotChecked == null) {  		if (containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' false' ref data);  		}  	}  	else {  		if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' true' ref data);  		}  	}  }  else {  	if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  	else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  	if (containers [index].points_NotChecked == null) {  		if (containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' false' ref data);  		}  	}  	else {  		if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' true' ref data);  		}  	}  }  else {  	if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  	else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (containers [index].points_NotChecked == null || containers [index].points_Checked == null) {  	if (containers [index].points_NotChecked == null) {  		if (containers [index].sumBits_Checked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' false' ref data);  		}  	}  	else {  		if (containers [index].sumBits_NotChecked != data.msgBits [index]) {  			containers [index].updateValue (data.msgBits [index]' true' ref data);  		}  	}  }  else {  	if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  	else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  		containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  	}  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 0 && containers [index].sumBits_Checked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  else if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: if (index % 2 == 1 && containers [index].sumBits_NotChecked != data.msgBits [index]) {  	containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Coder,The following statement contains a magic number: containers [index].updateValue (data.msgBits [index]' Convert.ToBoolean (index % 2)' ref data);  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The following statement contains a magic number: limit = 32;  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,Decoder,The following statement contains a magic number: limit = Convert.ToInt32 (message) * 8;  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getDecodedInfo,The following statement contains a magic number: while (index < hiddenData.Length) {  	if (index % 2 == 0)  		hiddenData [index] = containers [index].sumBits_Checked;  	else  		hiddenData [index] = containers [index].sumBits_NotChecked;  	index++;  }  
Magic Number,Methods.Block_Different_Shape,Block_Different_Shape,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Block_Different_Shape.cs,getDecodedInfo,The following statement contains a magic number: if (index % 2 == 0)  	hiddenData [index] = containers [index].sumBits_Checked;  else  	hiddenData [index] = containers [index].sumBits_NotChecked;  
Magic Number,Methods.Block_Different_Shape,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Container.cs,getSumBits,The following statement contains a magic number: for (int i = 0; i < points.Length; i++) {  	char[] colorBits = Convert.ToString (data.imgChanel [points [i].y] [points [i].x]' 2).ToCharArray ();  	// переводим текущую цветовую компоненту в двоичный вид  	if (colorBits [colorBits.Length - 1] == '1')// если последний бит единица  	 {  		sum ^= true;  		// складываем с единицей  	}  	else {  		sum ^= false;  		// складываем с нулем  	}  }  
Magic Number,Methods.Block_Different_Shape,Container,C:\repos\SiLVeR-OD_Block-Method\Methods\Block_Different_Shape\Container.cs,updateValue,The following statement contains a magic number: data.imgChanel [points [i].y] [points [i].x] = Convert.ToInt32 (new string (colorBits)' 2);  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Encrypt,The following statement contains a magic number: while (m < data.img.Height) {  	n = n - data.imgChanel [m].Length;  	if (n % data.imgChanel [m].Length == 0)  		n = 0;  	while (n < data.img.Width) {  		if (((m * data.img.Width + n) / (offset + 1)) >= data.msgBits.Length) {  			data.imgCoded = Utils.setColorChanel (ref data);  			return;  			// нужно присмотреться  		}  		char[] colorBits = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  		if (data.msgBits [((m * data.img.Width + n) / (offset + 1))]) {  			colorBits [colorBits.Length - 1] = '1';  		}  		else {  			colorBits [colorBits.Length - 1] = '0';  		}  		data.imgChanel [m] [n] = Convert.ToInt32 (new string (colorBits)' 2);  		n += offset + 1;  	}  	m++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Encrypt,The following statement contains a magic number: while (m < data.img.Height) {  	n = n - data.imgChanel [m].Length;  	if (n % data.imgChanel [m].Length == 0)  		n = 0;  	while (n < data.img.Width) {  		if (((m * data.img.Width + n) / (offset + 1)) >= data.msgBits.Length) {  			data.imgCoded = Utils.setColorChanel (ref data);  			return;  			// нужно присмотреться  		}  		char[] colorBits = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  		if (data.msgBits [((m * data.img.Width + n) / (offset + 1))]) {  			colorBits [colorBits.Length - 1] = '1';  		}  		else {  			colorBits [colorBits.Length - 1] = '0';  		}  		data.imgChanel [m] [n] = Convert.ToInt32 (new string (colorBits)' 2);  		n += offset + 1;  	}  	m++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Encrypt,The following statement contains a magic number: while (n < data.img.Width) {  	if (((m * data.img.Width + n) / (offset + 1)) >= data.msgBits.Length) {  		data.imgCoded = Utils.setColorChanel (ref data);  		return;  		// нужно присмотреться  	}  	char[] colorBits = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  	if (data.msgBits [((m * data.img.Width + n) / (offset + 1))]) {  		colorBits [colorBits.Length - 1] = '1';  	}  	else {  		colorBits [colorBits.Length - 1] = '0';  	}  	data.imgChanel [m] [n] = Convert.ToInt32 (new string (colorBits)' 2);  	n += offset + 1;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Encrypt,The following statement contains a magic number: while (n < data.img.Width) {  	if (((m * data.img.Width + n) / (offset + 1)) >= data.msgBits.Length) {  		data.imgCoded = Utils.setColorChanel (ref data);  		return;  		// нужно присмотреться  	}  	char[] colorBits = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  	if (data.msgBits [((m * data.img.Width + n) / (offset + 1))]) {  		colorBits [colorBits.Length - 1] = '1';  	}  	else {  		colorBits [colorBits.Length - 1] = '0';  	}  	data.imgChanel [m] [n] = Convert.ToInt32 (new string (colorBits)' 2);  	n += offset + 1;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Encrypt,The following statement contains a magic number: data.imgChanel [m] [n] = Convert.ToInt32 (new string (colorBits)' 2);  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Decrypt,The following statement contains a magic number: limit += (32 / 8);  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,Decrypt,The following statement contains a magic number: limit += (32 / 8);  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The following statement contains a magic number: while (m < data.img.Height) {  	if (n - data.imgChanel [m].Length > 0)  		n = n - data.imgChanel [m].Length;  	if (n % data.imgChanel [m].Length == 0)  		n = 0;  	while (n < data.img.Width) {  		if (((m * data.img.Width + n) / (offset + 1)) >= (limit * 8)) {  			byte[] hiddenDataBytes = new byte[limit];  			hiddenData.CopyTo (hiddenDataBytes' 0);  			return Encoding.UTF8.GetString (hiddenDataBytes);  			// изменить  		}  		char[] bitsOfColorComponent = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  		// переводим текущу. цветовую компоненту в 2й вид  		if (bitsOfColorComponent [bitsOfColorComponent.Length - 1] == '1')// если последний бит единица  		 {  			hiddenData [k] = true;  			// записываем в объект 1  		}  		else {  			hiddenData [k] = false;  			// записываем в объект 0  		}  		n += offset + 1;  		// сдвигаем указатель дальше  		k++;  	}  	m++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The following statement contains a magic number: while (m < data.img.Height) {  	if (n - data.imgChanel [m].Length > 0)  		n = n - data.imgChanel [m].Length;  	if (n % data.imgChanel [m].Length == 0)  		n = 0;  	while (n < data.img.Width) {  		if (((m * data.img.Width + n) / (offset + 1)) >= (limit * 8)) {  			byte[] hiddenDataBytes = new byte[limit];  			hiddenData.CopyTo (hiddenDataBytes' 0);  			return Encoding.UTF8.GetString (hiddenDataBytes);  			// изменить  		}  		char[] bitsOfColorComponent = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  		// переводим текущу. цветовую компоненту в 2й вид  		if (bitsOfColorComponent [bitsOfColorComponent.Length - 1] == '1')// если последний бит единица  		 {  			hiddenData [k] = true;  			// записываем в объект 1  		}  		else {  			hiddenData [k] = false;  			// записываем в объект 0  		}  		n += offset + 1;  		// сдвигаем указатель дальше  		k++;  	}  	m++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The following statement contains a magic number: while (n < data.img.Width) {  	if (((m * data.img.Width + n) / (offset + 1)) >= (limit * 8)) {  		byte[] hiddenDataBytes = new byte[limit];  		hiddenData.CopyTo (hiddenDataBytes' 0);  		return Encoding.UTF8.GetString (hiddenDataBytes);  		// изменить  	}  	char[] bitsOfColorComponent = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  	// переводим текущу. цветовую компоненту в 2й вид  	if (bitsOfColorComponent [bitsOfColorComponent.Length - 1] == '1')// если последний бит единица  	 {  		hiddenData [k] = true;  		// записываем в объект 1  	}  	else {  		hiddenData [k] = false;  		// записываем в объект 0  	}  	n += offset + 1;  	// сдвигаем указатель дальше  	k++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The following statement contains a magic number: while (n < data.img.Width) {  	if (((m * data.img.Width + n) / (offset + 1)) >= (limit * 8)) {  		byte[] hiddenDataBytes = new byte[limit];  		hiddenData.CopyTo (hiddenDataBytes' 0);  		return Encoding.UTF8.GetString (hiddenDataBytes);  		// изменить  	}  	char[] bitsOfColorComponent = Convert.ToString (data.imgChanel [m] [n]' 2).ToCharArray ();  	// переводим текущу. цветовую компоненту в 2й вид  	if (bitsOfColorComponent [bitsOfColorComponent.Length - 1] == '1')// если последний бит единица  	 {  		hiddenData [k] = true;  		// записываем в объект 1  	}  	else {  		hiddenData [k] = false;  		// записываем в объект 0  	}  	n += offset + 1;  	// сдвигаем указатель дальше  	k++;  }  
Magic Number,Methods,LeastSignificantBit,C:\repos\SiLVeR-OD_Block-Method\Methods\LeastSignificantBit.cs,getInformation,The following statement contains a magic number: if (((m * data.img.Width + n) / (offset + 1)) >= (limit * 8)) {  	byte[] hiddenDataBytes = new byte[limit];  	hiddenData.CopyTo (hiddenDataBytes' 0);  	return Encoding.UTF8.GetString (hiddenDataBytes);  	// изменить  }  
