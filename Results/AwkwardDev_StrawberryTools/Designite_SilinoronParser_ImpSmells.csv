Implementation smell,Namespace,Class,File,Method,Description
Long Method,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The method has 170 lines of code.
Complex Method,SilinoronParser.Enums,OpcodeDB,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Enums\OpcodeDB.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,SilinoronParser.Loading,Reader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Reader.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,Cyclomatic complexity of the method is 26
Complex Method,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,Cyclomatic complexity of the method is 11
Complex Method,SilinoronParser.Parsing.Parsers,ChatHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ChatHandler.cs,HandleMessageChat,Cyclomatic complexity of the method is 33
Complex Method,SilinoronParser.Parsing.Parsers,MovementHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\MovementHandler.cs,ReadMovementInfo,Cyclomatic complexity of the method is 10
Complex Method,SilinoronParser.Parsing.Parsers,MovementHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\MovementHandler.cs,ParseMonsterMovePackets,Cyclomatic complexity of the method is 14
Complex Method,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateObject,Cyclomatic complexity of the method is 18
Complex Method,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,Cyclomatic complexity of the method is 57
Complex Method,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,Cyclomatic complexity of the method is 21
Complex Method,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,Cyclomatic complexity of the method is 16
Complex Method,SilinoronParser,Program,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Program.cs,Main,Cyclomatic complexity of the method is 13
Complex Method,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadEnum,Cyclomatic complexity of the method is 28
Long Parameter List,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The method has 5 parameters.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The length of the statement  "	var caseNum = ((opcode & 2 | ((opcode & 0x10 | ((opcode & 0x40 | ((opcode & 0x100 | ((opcode & 0xC00 | (opcode >> 2) & 0x1000) >> 1)) >> 1)) >> 1)) >> 2)) >> 1); " is 161.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The length of the statement  "		Console.WriteLine ("{0}: {1} (0x{2}' Special) (Case: {3} ({4} / 0x{5})) Length: {6} Time: {7}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' SpecialHandlerNames [caseNum]' (int)caseNum' ((int)caseNum).ToString ("X4")' length' time); " is 290.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The length of the statement  "			Console.WriteLine ("{0}: {1} (0x{2}' Special) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' opcode' ((int)opcode).ToString ("X4")' length' time); " is 179.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The length of the statement  "		Console.WriteLine ("Packet not fully read! Current position is {0}' length is {1}' and diff is {2}."' pos' len' len - pos); " is 123.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The length of the statement  "		Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time); " is 178.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The length of the statement  "			Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time); " is 178.
Long Statement,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The length of the statement  "		Console.WriteLine ("Packet not fully read! Current position is {0}' length is {1}' and diff is {2}."' pos' len' len - pos); " is 123.
Long Statement,SilinoronParser.Parsing.Parsers,MovementHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\MovementHandler.cs,ReadMovementInfo,The length of the statement  "	bool HaveTransportData = false' HaveTransportTime2 = false' HaveTransportTime3 = false' HavePitch = false' HaveFallData = false' HaveFallDirection = false' HaveSplineElevation = false' UnknownBool = false; " is 205.
Long Statement,SilinoronParser,Program,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Program.cs,PrintUsage,The length of the statement  "	var usage = "Usage: SilinoronParser -file <input file> -loader <loader type> " + "[-nodump <boolean>] [-nohex <boolean>] [-tosql <boolean>] [-skiplarge <boolean>]" + n + n + "-file\t\tThe file to read packets from." + n + "-loader\t\tThe loader to use (zor4xx/tiawps/izidor/synric)." + n + "-nodump\t\tSet to True to disable file logging." + n + "-nohex\t\tSet to True to not print out hex dumps." + n + "-tosql\t\tSet to True to output SQL dumps." + n + "-skiplarge\t\tSet to True to avoid printing out LARGE hex dumps."; " is 522.
Long Statement,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,ToString,The length of the statement  "	return "Full: 0x" + Full.ToString ("X8") + " Flags: " + GetHighMask () + " Type: " + GetHighType () + " Entry: " + GetEntry () + " Low: " + GetLow (); " is 150.
Long Statement,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The length of the statement  "	var header = "|-------------------------------------------------|------------------" + "---------------|" + n + "| 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F | 0 1 2 3 4 5 6 7 8 9 A B C D E F |" + n + "|-------------------------------------------------|------------------" + "---------------|" + n; " is 303.
Long Statement,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,GetPathFromFullPath,The length of the statement  "	return !fullPath.Contains ("\\") ? Directory.GetCurrentDirectory () : fullPath.Substring (0' fullPath.LastIndexOf ("\\") + 1); " is 126.
Empty Catch Block,SilinoronParser.Loading,Reader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Reader.cs,Read,The method has an empty catch block.
Magic Number,SilinoronParser.Enums,OpcodeDB,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Enums\OpcodeDB.cs,Load,The following statement contains a magic number: if (build == 0) {  	build = 14333;  	// default to latest  }  
Magic Number,SilinoronParser.Enums,OpcodeDB,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Enums\OpcodeDB.cs,Load,The following statement contains a magic number: build = 14333;  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split (';');  		//0123  		string[] data0 = data [0].Split (' ');  		string[] data1 = data [1].Split (' ');  		string[] data2 = data [2].Split (' ');  		string[] data3 = data [3].Split (' ');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data0 [1]));  		byte direction = (byte)(data1 [1].Equals ("SMSG") ? 0 : 1);  		ushort opcode = UInt16.Parse (data2 [1]);  		string directdata = data3 [1];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split (';');  		//0123  		string[] data0 = data [0].Split (' ');  		string[] data1 = data [1].Split (' ');  		string[] data2 = data [2].Split (' ');  		string[] data3 = data [3].Split (' ');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data0 [1]));  		byte direction = (byte)(data1 [1].Equals ("SMSG") ? 0 : 1);  		ushort opcode = UInt16.Parse (data2 [1]);  		string directdata = data3 [1];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split (';');  	//0123  	string[] data0 = data [0].Split (' ');  	string[] data1 = data [1].Split (' ');  	string[] data2 = data [2].Split (' ');  	string[] data3 = data [3].Split (' ');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data0 [1]));  	byte direction = (byte)(data1 [1].Equals ("SMSG") ? 0 : 1);  	ushort opcode = UInt16.Parse (data2 [1]);  	string directdata = data3 [1];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split (';');  	//0123  	string[] data0 = data [0].Split (' ');  	string[] data1 = data [1].Split (' ');  	string[] data2 = data [2].Split (' ');  	string[] data3 = data [3].Split (' ');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data0 [1]));  	byte direction = (byte)(data1 [1].Equals ("SMSG") ? 0 : 1);  	ushort opcode = UInt16.Parse (data2 [1]);  	string directdata = data3 [1];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseHex,The following statement contains a magic number: if ((hex.Length % 2) != 0) {  	throw new ArgumentException ("Invalid length: " + hex.Length);  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseHex,The following statement contains a magic number: ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseHex,The following statement contains a magic number: offset += 2;  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseNybble,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	return c - 'A' + 10;  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseNybble,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseNybble,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	return c - 'a' + 10;  }  
Magic Number,SilinoronParser.Loading.Loaders,FabiLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\Fabi.cs,ParseNybble,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: using (var gr = new BinaryReader (new FileStream (FileToParse' FileMode.Open' FileAccess.Read)' Encoding.ASCII)) {  	gr.ReadBytes (3);  	// PKT  	var version = gr.ReadUInt16 ();  	// sniff version (0x0201' 0x0202)  	switch (version) {  	case 0x0201:  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (40);  		// session key  		break;  	case 0x0202:  		gr.ReadByte ();  		// 0x06  		Build = gr.ReadUInt16 ();  		// build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (20);  		// packet key  		gr.ReadBytes (64);  		// realm name  		break;  	case 0x0300:  		gr.ReadByte ();  		// snifferId  		Build = gr.ReadUInt32 ();  		// client build  		gr.ReadBytes (4);  		// client locale  		gr.ReadBytes (40);  		// session key  		var optionalHeaderLength = gr.ReadInt32 ();  		gr.ReadBytes (optionalHeaderLength);  		break;  	default:  		throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  	}  	var packets = new List<Packet> ();  	if (version != 0x0300) {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			uint size = gr.ReadUInt32 ();  			ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  			byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	else {  		while (gr.PeekChar () >= 0) {  			byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  			DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  			uint tickcount = gr.ReadUInt32 ();  			int optionalSize = gr.ReadInt32 ();  			int dataSize = gr.ReadInt32 ();  			gr.ReadBytes (optionalSize);  			ushort opcode = (ushort)gr.ReadUInt32 ();  			byte[] data = gr.ReadBytes (dataSize - 4);  			Packet p = new Packet (data' opcode' time' direction);  			packets.Add (p);  		}  	}  	return packets;  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (3);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: switch (version) {  case 0x0201:  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (40);  	// session key  	break;  case 0x0202:  	gr.ReadByte ();  	// 0x06  	Build = gr.ReadUInt16 ();  	// build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (20);  	// packet key  	gr.ReadBytes (64);  	// realm name  	break;  case 0x0300:  	gr.ReadByte ();  	// snifferId  	Build = gr.ReadUInt32 ();  	// client build  	gr.ReadBytes (4);  	// client locale  	gr.ReadBytes (40);  	// session key  	var optionalHeaderLength = gr.ReadInt32 ();  	gr.ReadBytes (optionalHeaderLength);  	break;  default:  	throw new Exception (String.Format ("Unknown sniff version {0:X2}"' version));  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (40);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (4);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (20);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (64);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (4);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: gr.ReadBytes (40);  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: if (version != 0x0300) {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		uint size = gr.ReadUInt32 ();  		ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  		byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  else {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		int optionalSize = gr.ReadInt32 ();  		int dataSize = gr.ReadInt32 ();  		gr.ReadBytes (optionalSize);  		ushort opcode = (ushort)gr.ReadUInt32 ();  		byte[] data = gr.ReadBytes (dataSize - 4);  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: if (version != 0x0300) {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		uint size = gr.ReadUInt32 ();  		ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  		byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  else {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		int optionalSize = gr.ReadInt32 ();  		int dataSize = gr.ReadInt32 ();  		gr.ReadBytes (optionalSize);  		ushort opcode = (ushort)gr.ReadUInt32 ();  		byte[] data = gr.ReadBytes (dataSize - 4);  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: if (version != 0x0300) {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		uint size = gr.ReadUInt32 ();  		ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  		byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  else {  	while (gr.PeekChar () >= 0) {  		byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  		DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  		uint tickcount = gr.ReadUInt32 ();  		int optionalSize = gr.ReadInt32 ();  		int dataSize = gr.ReadInt32 ();  		gr.ReadBytes (optionalSize);  		ushort opcode = (ushort)gr.ReadUInt32 ();  		byte[] data = gr.ReadBytes (dataSize - 4);  		Packet p = new Packet (data' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: while (gr.PeekChar () >= 0) {  	byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  	DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  	uint tickcount = gr.ReadUInt32 ();  	uint size = gr.ReadUInt32 ();  	ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  	byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  	Packet p = new Packet (data' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: while (gr.PeekChar () >= 0) {  	byte direction = (byte)(gr.ReadByte () == 0xff ? 0 : 1);  	DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  	uint tickcount = gr.ReadUInt32 ();  	uint size = gr.ReadUInt32 ();  	ushort opcode = (direction == 1) ? (ushort)gr.ReadUInt32 () : gr.ReadUInt16 ();  	byte[] data = gr.ReadBytes ((int)size - ((direction == 1) ? 4 : 2));  	Packet p = new Packet (data' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,PktLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\PktLoader.cs,ParseFile,The following statement contains a magic number: while (gr.PeekChar () >= 0) {  	byte direction = (byte)(gr.ReadUInt32 () == 0x47534d53 ? 0 : 1);  	DateTime time = Utilities.GetDateTimeFromUnixTime (gr.ReadUInt32 ());  	uint tickcount = gr.ReadUInt32 ();  	int optionalSize = gr.ReadInt32 ();  	int dataSize = gr.ReadInt32 ();  	gr.ReadBytes (optionalSize);  	ushort opcode = (ushort)gr.ReadUInt32 ();  	byte[] data = gr.ReadBytes (dataSize - 4);  	Packet p = new Packet (data' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split ('<'' '>'' '"');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  		byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  		ushort opcode = UInt16.Parse (data [6]);  		string directdata = data [8];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split ('<'' '>'' '"');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  		byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  		ushort opcode = UInt16.Parse (data [6]);  		string directdata = data [8];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split ('<'' '>'' '"');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  		byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  		ushort opcode = UInt16.Parse (data [6]);  		string directdata = data [8];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		string[] data = line.Split ('<'' '>'' '"');  		DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  		byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  		ushort opcode = UInt16.Parse (data [6]);  		string directdata = data [8];  		byte[] byteData = ParseHex (directdata);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split ('<'' '>'' '"');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  	byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  	ushort opcode = UInt16.Parse (data [6]);  	string directdata = data [8];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split ('<'' '>'' '"');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  	byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  	ushort opcode = UInt16.Parse (data [6]);  	string directdata = data [8];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split ('<'' '>'' '"');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  	byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  	ushort opcode = UInt16.Parse (data [6]);  	string directdata = data [8];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	string[] data = line.Split ('<'' '>'' '"');  	DateTime time = Utilities.GetDateTimeFromUnixTime (UInt32.Parse (data [2]));  	byte direction = (byte)(data [4] == "StoC" ? 0 : 1);  	ushort opcode = UInt16.Parse (data [6]);  	string directdata = data [8];  	byte[] byteData = ParseHex (directdata);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseHex,The following statement contains a magic number: if ((hex.Length % 2) != 0) {  	throw new ArgumentException ("Invalid length: " + hex.Length);  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseHex,The following statement contains a magic number: ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseHex,The following statement contains a magic number: offset += 2;  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	return c - 'A' + 10;  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseNybble,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	return c - 'a' + 10;  }  
Magic Number,SilinoronParser.Loading.Loaders,IzidorLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\IzidorLoader.cs,ParseNybble,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: try {  	using (TextReader tr = new StreamReader (FileToParse)) {  		byte direction = 0;  		ushort opcode = 0;  		DateTime time = DateTime.Now;  		bool inPacket = false;  		string packetData = "";  		while (tr.Peek () != -1) {  			string line = tr.ReadLine ();  			if (line.Length == 0) {  				lineNum++;  				continue;  				// skip the useless empty lines  			}  			if (line.StartsWith ("{")) {  				// packet metadata  				//         [0]         [1]     [2]      [3]     [4]        [5] [6]  				// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  				string[] metadata = line.Split (' ');  				string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  				direction = (byte)(directionStr == "SERVER" ? 0 : 1);  				time = DateTime.Now;  				// not saved in file  				byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  				opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  				for (int i = 0; i < 7; i++) {  					lineNum++;  					tr.ReadLine ();  				}  				inPacket = true;  			}  			else if (line.StartsWith ("|")) {  				if (!inPacket) {  					Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  					lineNum++;  					continue;  				}  				// right. We're in a packet.  				// looks like this:  				// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  				string lineData = line.Split ('|') [1];  				lineData = lineData.Replace (" "' "");  				lineData = lineData.Replace ("|"' "");  				packetData += lineData;  			}  			else if (line.StartsWith ("-")) {  				byte[] byteData = ParseHex (packetData);  				Packet p = new Packet (byteData' opcode' time' direction);  				packets.Add (p);  				inPacket = false;  				packetData = "";  				direction = 0;  				opcode = 0;  			}  			lineNum++;  		}  	}  }  catch {  	Console.WriteLine ("Exception while reading line {0} - probably a spliced packet"' lineNum);  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: try {  	using (TextReader tr = new StreamReader (FileToParse)) {  		byte direction = 0;  		ushort opcode = 0;  		DateTime time = DateTime.Now;  		bool inPacket = false;  		string packetData = "";  		while (tr.Peek () != -1) {  			string line = tr.ReadLine ();  			if (line.Length == 0) {  				lineNum++;  				continue;  				// skip the useless empty lines  			}  			if (line.StartsWith ("{")) {  				// packet metadata  				//         [0]         [1]     [2]      [3]     [4]        [5] [6]  				// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  				string[] metadata = line.Split (' ');  				string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  				direction = (byte)(directionStr == "SERVER" ? 0 : 1);  				time = DateTime.Now;  				// not saved in file  				byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  				opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  				for (int i = 0; i < 7; i++) {  					lineNum++;  					tr.ReadLine ();  				}  				inPacket = true;  			}  			else if (line.StartsWith ("|")) {  				if (!inPacket) {  					Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  					lineNum++;  					continue;  				}  				// right. We're in a packet.  				// looks like this:  				// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  				string lineData = line.Split ('|') [1];  				lineData = lineData.Replace (" "' "");  				lineData = lineData.Replace ("|"' "");  				packetData += lineData;  			}  			else if (line.StartsWith ("-")) {  				byte[] byteData = ParseHex (packetData);  				Packet p = new Packet (byteData' opcode' time' direction);  				packets.Add (p);  				inPacket = false;  				packetData = "";  				direction = 0;  				opcode = 0;  			}  			lineNum++;  		}  	}  }  catch {  	Console.WriteLine ("Exception while reading line {0} - probably a spliced packet"' lineNum);  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: try {  	using (TextReader tr = new StreamReader (FileToParse)) {  		byte direction = 0;  		ushort opcode = 0;  		DateTime time = DateTime.Now;  		bool inPacket = false;  		string packetData = "";  		while (tr.Peek () != -1) {  			string line = tr.ReadLine ();  			if (line.Length == 0) {  				lineNum++;  				continue;  				// skip the useless empty lines  			}  			if (line.StartsWith ("{")) {  				// packet metadata  				//         [0]         [1]     [2]      [3]     [4]        [5] [6]  				// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  				string[] metadata = line.Split (' ');  				string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  				direction = (byte)(directionStr == "SERVER" ? 0 : 1);  				time = DateTime.Now;  				// not saved in file  				byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  				opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  				for (int i = 0; i < 7; i++) {  					lineNum++;  					tr.ReadLine ();  				}  				inPacket = true;  			}  			else if (line.StartsWith ("|")) {  				if (!inPacket) {  					Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  					lineNum++;  					continue;  				}  				// right. We're in a packet.  				// looks like this:  				// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  				string lineData = line.Split ('|') [1];  				lineData = lineData.Replace (" "' "");  				lineData = lineData.Replace ("|"' "");  				packetData += lineData;  			}  			else if (line.StartsWith ("-")) {  				byte[] byteData = ParseHex (packetData);  				Packet p = new Packet (byteData' opcode' time' direction);  				packets.Add (p);  				inPacket = false;  				packetData = "";  				direction = 0;  				opcode = 0;  			}  			lineNum++;  		}  	}  }  catch {  	Console.WriteLine ("Exception while reading line {0} - probably a spliced packet"' lineNum);  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: try {  	using (TextReader tr = new StreamReader (FileToParse)) {  		byte direction = 0;  		ushort opcode = 0;  		DateTime time = DateTime.Now;  		bool inPacket = false;  		string packetData = "";  		while (tr.Peek () != -1) {  			string line = tr.ReadLine ();  			if (line.Length == 0) {  				lineNum++;  				continue;  				// skip the useless empty lines  			}  			if (line.StartsWith ("{")) {  				// packet metadata  				//         [0]         [1]     [2]      [3]     [4]        [5] [6]  				// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  				string[] metadata = line.Split (' ');  				string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  				direction = (byte)(directionStr == "SERVER" ? 0 : 1);  				time = DateTime.Now;  				// not saved in file  				byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  				opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  				for (int i = 0; i < 7; i++) {  					lineNum++;  					tr.ReadLine ();  				}  				inPacket = true;  			}  			else if (line.StartsWith ("|")) {  				if (!inPacket) {  					Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  					lineNum++;  					continue;  				}  				// right. We're in a packet.  				// looks like this:  				// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  				string lineData = line.Split ('|') [1];  				lineData = lineData.Replace (" "' "");  				lineData = lineData.Replace ("|"' "");  				packetData += lineData;  			}  			else if (line.StartsWith ("-")) {  				byte[] byteData = ParseHex (packetData);  				Packet p = new Packet (byteData' opcode' time' direction);  				packets.Add (p);  				inPacket = false;  				packetData = "";  				direction = 0;  				opcode = 0;  			}  			lineNum++;  		}  	}  }  catch {  	Console.WriteLine ("Exception while reading line {0} - probably a spliced packet"' lineNum);  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: try {  	using (TextReader tr = new StreamReader (FileToParse)) {  		byte direction = 0;  		ushort opcode = 0;  		DateTime time = DateTime.Now;  		bool inPacket = false;  		string packetData = "";  		while (tr.Peek () != -1) {  			string line = tr.ReadLine ();  			if (line.Length == 0) {  				lineNum++;  				continue;  				// skip the useless empty lines  			}  			if (line.StartsWith ("{")) {  				// packet metadata  				//         [0]         [1]     [2]      [3]     [4]        [5] [6]  				// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  				string[] metadata = line.Split (' ');  				string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  				direction = (byte)(directionStr == "SERVER" ? 0 : 1);  				time = DateTime.Now;  				// not saved in file  				byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  				opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  				for (int i = 0; i < 7; i++) {  					lineNum++;  					tr.ReadLine ();  				}  				inPacket = true;  			}  			else if (line.StartsWith ("|")) {  				if (!inPacket) {  					Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  					lineNum++;  					continue;  				}  				// right. We're in a packet.  				// looks like this:  				// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  				string lineData = line.Split ('|') [1];  				lineData = lineData.Replace (" "' "");  				lineData = lineData.Replace ("|"' "");  				packetData += lineData;  			}  			else if (line.StartsWith ("-")) {  				byte[] byteData = ParseHex (packetData);  				Packet p = new Packet (byteData' opcode' time' direction);  				packets.Add (p);  				inPacket = false;  				packetData = "";  				direction = 0;  				opcode = 0;  			}  			lineNum++;  		}  	}  }  catch {  	Console.WriteLine ("Exception while reading line {0} - probably a spliced packet"' lineNum);  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	byte direction = 0;  	ushort opcode = 0;  	DateTime time = DateTime.Now;  	bool inPacket = false;  	string packetData = "";  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		if (line.Length == 0) {  			lineNum++;  			continue;  			// skip the useless empty lines  		}  		if (line.StartsWith ("{")) {  			// packet metadata  			//         [0]         [1]     [2]      [3]     [4]        [5] [6]  			// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  			string[] metadata = line.Split (' ');  			string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  			direction = (byte)(directionStr == "SERVER" ? 0 : 1);  			time = DateTime.Now;  			// not saved in file  			byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  			opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  			for (int i = 0; i < 7; i++) {  				lineNum++;  				tr.ReadLine ();  			}  			inPacket = true;  		}  		else if (line.StartsWith ("|")) {  			if (!inPacket) {  				Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  				lineNum++;  				continue;  			}  			// right. We're in a packet.  			// looks like this:  			// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  			string lineData = line.Split ('|') [1];  			lineData = lineData.Replace (" "' "");  			lineData = lineData.Replace ("|"' "");  			packetData += lineData;  		}  		else if (line.StartsWith ("-")) {  			byte[] byteData = ParseHex (packetData);  			Packet p = new Packet (byteData' opcode' time' direction);  			packets.Add (p);  			inPacket = false;  			packetData = "";  			direction = 0;  			opcode = 0;  		}  		lineNum++;  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	byte direction = 0;  	ushort opcode = 0;  	DateTime time = DateTime.Now;  	bool inPacket = false;  	string packetData = "";  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		if (line.Length == 0) {  			lineNum++;  			continue;  			// skip the useless empty lines  		}  		if (line.StartsWith ("{")) {  			// packet metadata  			//         [0]         [1]     [2]      [3]     [4]        [5] [6]  			// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  			string[] metadata = line.Split (' ');  			string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  			direction = (byte)(directionStr == "SERVER" ? 0 : 1);  			time = DateTime.Now;  			// not saved in file  			byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  			opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  			for (int i = 0; i < 7; i++) {  				lineNum++;  				tr.ReadLine ();  			}  			inPacket = true;  		}  		else if (line.StartsWith ("|")) {  			if (!inPacket) {  				Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  				lineNum++;  				continue;  			}  			// right. We're in a packet.  			// looks like this:  			// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  			string lineData = line.Split ('|') [1];  			lineData = lineData.Replace (" "' "");  			lineData = lineData.Replace ("|"' "");  			packetData += lineData;  		}  		else if (line.StartsWith ("-")) {  			byte[] byteData = ParseHex (packetData);  			Packet p = new Packet (byteData' opcode' time' direction);  			packets.Add (p);  			inPacket = false;  			packetData = "";  			direction = 0;  			opcode = 0;  		}  		lineNum++;  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	byte direction = 0;  	ushort opcode = 0;  	DateTime time = DateTime.Now;  	bool inPacket = false;  	string packetData = "";  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		if (line.Length == 0) {  			lineNum++;  			continue;  			// skip the useless empty lines  		}  		if (line.StartsWith ("{")) {  			// packet metadata  			//         [0]         [1]     [2]      [3]     [4]        [5] [6]  			// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  			string[] metadata = line.Split (' ');  			string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  			direction = (byte)(directionStr == "SERVER" ? 0 : 1);  			time = DateTime.Now;  			// not saved in file  			byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  			opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  			for (int i = 0; i < 7; i++) {  				lineNum++;  				tr.ReadLine ();  			}  			inPacket = true;  		}  		else if (line.StartsWith ("|")) {  			if (!inPacket) {  				Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  				lineNum++;  				continue;  			}  			// right. We're in a packet.  			// looks like this:  			// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  			string lineData = line.Split ('|') [1];  			lineData = lineData.Replace (" "' "");  			lineData = lineData.Replace ("|"' "");  			packetData += lineData;  		}  		else if (line.StartsWith ("-")) {  			byte[] byteData = ParseHex (packetData);  			Packet p = new Packet (byteData' opcode' time' direction);  			packets.Add (p);  			inPacket = false;  			packetData = "";  			direction = 0;  			opcode = 0;  		}  		lineNum++;  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	byte direction = 0;  	ushort opcode = 0;  	DateTime time = DateTime.Now;  	bool inPacket = false;  	string packetData = "";  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		if (line.Length == 0) {  			lineNum++;  			continue;  			// skip the useless empty lines  		}  		if (line.StartsWith ("{")) {  			// packet metadata  			//         [0]         [1]     [2]      [3]     [4]        [5] [6]  			// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  			string[] metadata = line.Split (' ');  			string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  			direction = (byte)(directionStr == "SERVER" ? 0 : 1);  			time = DateTime.Now;  			// not saved in file  			byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  			opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  			for (int i = 0; i < 7; i++) {  				lineNum++;  				tr.ReadLine ();  			}  			inPacket = true;  		}  		else if (line.StartsWith ("|")) {  			if (!inPacket) {  				Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  				lineNum++;  				continue;  			}  			// right. We're in a packet.  			// looks like this:  			// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  			string lineData = line.Split ('|') [1];  			lineData = lineData.Replace (" "' "");  			lineData = lineData.Replace ("|"' "");  			packetData += lineData;  		}  		else if (line.StartsWith ("-")) {  			byte[] byteData = ParseHex (packetData);  			Packet p = new Packet (byteData' opcode' time' direction);  			packets.Add (p);  			inPacket = false;  			packetData = "";  			direction = 0;  			opcode = 0;  		}  		lineNum++;  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: using (TextReader tr = new StreamReader (FileToParse)) {  	byte direction = 0;  	ushort opcode = 0;  	DateTime time = DateTime.Now;  	bool inPacket = false;  	string packetData = "";  	while (tr.Peek () != -1) {  		string line = tr.ReadLine ();  		if (line.Length == 0) {  			lineNum++;  			continue;  			// skip the useless empty lines  		}  		if (line.StartsWith ("{")) {  			// packet metadata  			//         [0]         [1]     [2]      [3]     [4]        [5] [6]  			// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  			string[] metadata = line.Split (' ');  			string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  			direction = (byte)(directionStr == "SERVER" ? 0 : 1);  			time = DateTime.Now;  			// not saved in file  			byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  			opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  			for (int i = 0; i < 7; i++) {  				lineNum++;  				tr.ReadLine ();  			}  			inPacket = true;  		}  		else if (line.StartsWith ("|")) {  			if (!inPacket) {  				Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  				lineNum++;  				continue;  			}  			// right. We're in a packet.  			// looks like this:  			// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  			string lineData = line.Split ('|') [1];  			lineData = lineData.Replace (" "' "");  			lineData = lineData.Replace ("|"' "");  			packetData += lineData;  		}  		else if (line.StartsWith ("-")) {  			byte[] byteData = ParseHex (packetData);  			Packet p = new Packet (byteData' opcode' time' direction);  			packets.Add (p);  			inPacket = false;  			packetData = "";  			direction = 0;  			opcode = 0;  		}  		lineNum++;  	}  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	if (line.Length == 0) {  		lineNum++;  		continue;  		// skip the useless empty lines  	}  	if (line.StartsWith ("{")) {  		// packet metadata  		//         [0]         [1]     [2]      [3]     [4]        [5] [6]  		// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  		string[] metadata = line.Split (' ');  		string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  		direction = (byte)(directionStr == "SERVER" ? 0 : 1);  		time = DateTime.Now;  		// not saved in file  		byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  		opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  		for (int i = 0; i < 7; i++) {  			lineNum++;  			tr.ReadLine ();  		}  		inPacket = true;  	}  	else if (line.StartsWith ("|")) {  		if (!inPacket) {  			Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  			lineNum++;  			continue;  		}  		// right. We're in a packet.  		// looks like this:  		// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  		string lineData = line.Split ('|') [1];  		lineData = lineData.Replace (" "' "");  		lineData = lineData.Replace ("|"' "");  		packetData += lineData;  	}  	else if (line.StartsWith ("-")) {  		byte[] byteData = ParseHex (packetData);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  		inPacket = false;  		packetData = "";  		direction = 0;  		opcode = 0;  	}  	lineNum++;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	if (line.Length == 0) {  		lineNum++;  		continue;  		// skip the useless empty lines  	}  	if (line.StartsWith ("{")) {  		// packet metadata  		//         [0]         [1]     [2]      [3]     [4]        [5] [6]  		// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  		string[] metadata = line.Split (' ');  		string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  		direction = (byte)(directionStr == "SERVER" ? 0 : 1);  		time = DateTime.Now;  		// not saved in file  		byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  		opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  		for (int i = 0; i < 7; i++) {  			lineNum++;  			tr.ReadLine ();  		}  		inPacket = true;  	}  	else if (line.StartsWith ("|")) {  		if (!inPacket) {  			Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  			lineNum++;  			continue;  		}  		// right. We're in a packet.  		// looks like this:  		// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  		string lineData = line.Split ('|') [1];  		lineData = lineData.Replace (" "' "");  		lineData = lineData.Replace ("|"' "");  		packetData += lineData;  	}  	else if (line.StartsWith ("-")) {  		byte[] byteData = ParseHex (packetData);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  		inPacket = false;  		packetData = "";  		direction = 0;  		opcode = 0;  	}  	lineNum++;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	if (line.Length == 0) {  		lineNum++;  		continue;  		// skip the useless empty lines  	}  	if (line.StartsWith ("{")) {  		// packet metadata  		//         [0]         [1]     [2]      [3]     [4]        [5] [6]  		// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  		string[] metadata = line.Split (' ');  		string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  		direction = (byte)(directionStr == "SERVER" ? 0 : 1);  		time = DateTime.Now;  		// not saved in file  		byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  		opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  		for (int i = 0; i < 7; i++) {  			lineNum++;  			tr.ReadLine ();  		}  		inPacket = true;  	}  	else if (line.StartsWith ("|")) {  		if (!inPacket) {  			Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  			lineNum++;  			continue;  		}  		// right. We're in a packet.  		// looks like this:  		// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  		string lineData = line.Split ('|') [1];  		lineData = lineData.Replace (" "' "");  		lineData = lineData.Replace ("|"' "");  		packetData += lineData;  	}  	else if (line.StartsWith ("-")) {  		byte[] byteData = ParseHex (packetData);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  		inPacket = false;  		packetData = "";  		direction = 0;  		opcode = 0;  	}  	lineNum++;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	if (line.Length == 0) {  		lineNum++;  		continue;  		// skip the useless empty lines  	}  	if (line.StartsWith ("{")) {  		// packet metadata  		//         [0]         [1]     [2]      [3]     [4]        [5] [6]  		// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  		string[] metadata = line.Split (' ');  		string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  		direction = (byte)(directionStr == "SERVER" ? 0 : 1);  		time = DateTime.Now;  		// not saved in file  		byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  		opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  		for (int i = 0; i < 7; i++) {  			lineNum++;  			tr.ReadLine ();  		}  		inPacket = true;  	}  	else if (line.StartsWith ("|")) {  		if (!inPacket) {  			Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  			lineNum++;  			continue;  		}  		// right. We're in a packet.  		// looks like this:  		// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  		string lineData = line.Split ('|') [1];  		lineData = lineData.Replace (" "' "");  		lineData = lineData.Replace ("|"' "");  		packetData += lineData;  	}  	else if (line.StartsWith ("-")) {  		byte[] byteData = ParseHex (packetData);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  		inPacket = false;  		packetData = "";  		direction = 0;  		opcode = 0;  	}  	lineNum++;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: while (tr.Peek () != -1) {  	string line = tr.ReadLine ();  	if (line.Length == 0) {  		lineNum++;  		continue;  		// skip the useless empty lines  	}  	if (line.StartsWith ("{")) {  		// packet metadata  		//         [0]         [1]     [2]      [3]     [4]        [5] [6]  		// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  		string[] metadata = line.Split (' ');  		string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  		direction = (byte)(directionStr == "SERVER" ? 0 : 1);  		time = DateTime.Now;  		// not saved in file  		byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  		opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  		for (int i = 0; i < 7; i++) {  			lineNum++;  			tr.ReadLine ();  		}  		inPacket = true;  	}  	else if (line.StartsWith ("|")) {  		if (!inPacket) {  			Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  			lineNum++;  			continue;  		}  		// right. We're in a packet.  		// looks like this:  		// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  		string lineData = line.Split ('|') [1];  		lineData = lineData.Replace (" "' "");  		lineData = lineData.Replace ("|"' "");  		packetData += lineData;  	}  	else if (line.StartsWith ("-")) {  		byte[] byteData = ParseHex (packetData);  		Packet p = new Packet (byteData' opcode' time' direction);  		packets.Add (p);  		inPacket = false;  		packetData = "";  		direction = 0;  		opcode = 0;  	}  	lineNum++;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: if (line.StartsWith ("{")) {  	// packet metadata  	//         [0]         [1]     [2]      [3]     [4]        [5] [6]  	// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  	string[] metadata = line.Split (' ');  	string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  	direction = (byte)(directionStr == "SERVER" ? 0 : 1);  	time = DateTime.Now;  	// not saved in file  	byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  	opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  	for (int i = 0; i < 7; i++) {  		lineNum++;  		tr.ReadLine ();  	}  	inPacket = true;  }  else if (line.StartsWith ("|")) {  	if (!inPacket) {  		Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  		lineNum++;  		continue;  	}  	// right. We're in a packet.  	// looks like this:  	// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  	string lineData = line.Split ('|') [1];  	lineData = lineData.Replace (" "' "");  	lineData = lineData.Replace ("|"' "");  	packetData += lineData;  }  else if (line.StartsWith ("-")) {  	byte[] byteData = ParseHex (packetData);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  	inPacket = false;  	packetData = "";  	direction = 0;  	opcode = 0;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: if (line.StartsWith ("{")) {  	// packet metadata  	//         [0]         [1]     [2]      [3]     [4]        [5] [6]  	// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  	string[] metadata = line.Split (' ');  	string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  	direction = (byte)(directionStr == "SERVER" ? 0 : 1);  	time = DateTime.Now;  	// not saved in file  	byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  	opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  	for (int i = 0; i < 7; i++) {  		lineNum++;  		tr.ReadLine ();  	}  	inPacket = true;  }  else if (line.StartsWith ("|")) {  	if (!inPacket) {  		Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  		lineNum++;  		continue;  	}  	// right. We're in a packet.  	// looks like this:  	// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  	string lineData = line.Split ('|') [1];  	lineData = lineData.Replace (" "' "");  	lineData = lineData.Replace ("|"' "");  	packetData += lineData;  }  else if (line.StartsWith ("-")) {  	byte[] byteData = ParseHex (packetData);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  	inPacket = false;  	packetData = "";  	direction = 0;  	opcode = 0;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: if (line.StartsWith ("{")) {  	// packet metadata  	//         [0]         [1]     [2]      [3]     [4]        [5] [6]  	// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  	string[] metadata = line.Split (' ');  	string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  	direction = (byte)(directionStr == "SERVER" ? 0 : 1);  	time = DateTime.Now;  	// not saved in file  	byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  	opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  	for (int i = 0; i < 7; i++) {  		lineNum++;  		tr.ReadLine ();  	}  	inPacket = true;  }  else if (line.StartsWith ("|")) {  	if (!inPacket) {  		Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  		lineNum++;  		continue;  	}  	// right. We're in a packet.  	// looks like this:  	// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  	string lineData = line.Split ('|') [1];  	lineData = lineData.Replace (" "' "");  	lineData = lineData.Replace ("|"' "");  	packetData += lineData;  }  else if (line.StartsWith ("-")) {  	byte[] byteData = ParseHex (packetData);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  	inPacket = false;  	packetData = "";  	direction = 0;  	opcode = 0;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: if (line.StartsWith ("{")) {  	// packet metadata  	//         [0]         [1]     [2]      [3]     [4]        [5] [6]  	// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  	string[] metadata = line.Split (' ');  	string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  	direction = (byte)(directionStr == "SERVER" ? 0 : 1);  	time = DateTime.Now;  	// not saved in file  	byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  	opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  	for (int i = 0; i < 7; i++) {  		lineNum++;  		tr.ReadLine ();  	}  	inPacket = true;  }  else if (line.StartsWith ("|")) {  	if (!inPacket) {  		Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  		lineNum++;  		continue;  	}  	// right. We're in a packet.  	// looks like this:  	// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  	string lineData = line.Split ('|') [1];  	lineData = lineData.Replace (" "' "");  	lineData = lineData.Replace ("|"' "");  	packetData += lineData;  }  else if (line.StartsWith ("-")) {  	byte[] byteData = ParseHex (packetData);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  	inPacket = false;  	packetData = "";  	direction = 0;  	opcode = 0;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: if (line.StartsWith ("{")) {  	// packet metadata  	//         [0]         [1]     [2]      [3]     [4]        [5] [6]  	// format: {DIRECTION} Packet: (OPCODE) UNKNOWN PacketSize = SIZE  	string[] metadata = line.Split (' ');  	string directionStr = metadata [0].Substring (1' metadata [0].Length - 2);  	direction = (byte)(directionStr == "SERVER" ? 0 : 1);  	time = DateTime.Now;  	// not saved in file  	byte[] opcodeData = ParseHex (metadata [2].Substring (1' metadata [2].Length - 2));  	opcode = (ushort)((((ushort)opcodeData [0] * 0x100) + (ushort)opcodeData [1]));  	for (int i = 0; i < 7; i++) {  		lineNum++;  		tr.ReadLine ();  	}  	inPacket = true;  }  else if (line.StartsWith ("|")) {  	if (!inPacket) {  		Console.WriteLine ("Packet data without packet! Possibly corrupted data? Line num {0}"' lineNum);  		lineNum++;  		continue;  	}  	// right. We're in a packet.  	// looks like this:  	// |B5 9B 87 9F 91 AC D7 D2 66 DF D8 8F 53 7E A6 2C |  	string lineData = line.Split ('|') [1];  	lineData = lineData.Replace (" "' "");  	lineData = lineData.Replace ("|"' "");  	packetData += lineData;  }  else if (line.StartsWith ("-")) {  	byte[] byteData = ParseHex (packetData);  	Packet p = new Packet (byteData' opcode' time' direction);  	packets.Add (p);  	inPacket = false;  	packetData = "";  	direction = 0;  	opcode = 0;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseFile,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	lineNum++;  	tr.ReadLine ();  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseHex,The following statement contains a magic number: if ((hex.Length % 2) != 0)  	throw new ArgumentException ("Invalid length: " + hex.Length);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseHex,The following statement contains a magic number: for (int i = 0; i < ret.Length; i++) {  	ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  	offset += 2;  }  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseHex,The following statement contains a magic number: ret [i] = (byte)((ParseNybble (hex [offset]) << 4) | ParseNybble (hex [offset + 1]));  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseHex,The following statement contains a magic number: offset += 2;  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= '0' && c <= '9')  	return c - '0';  else if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  else if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  else  	throw new ArgumentException ("Invalid hex digit: " + c);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= '0' && c <= '9')  	return c - '0';  else if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  else if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  else  	throw new ArgumentException ("Invalid hex digit: " + c);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  else if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  else  	throw new ArgumentException ("Invalid hex digit: " + c);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  else if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  else  	throw new ArgumentException ("Invalid hex digit: " + c);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  else  	throw new ArgumentException ("Invalid hex digit: " + c);  
Magic Number,SilinoronParser.Loading.Loaders,SynricLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\SynricLoader.cs,ParseNybble,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,SilinoronParser.Loading.Loaders,TiawpsLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\TiawpsLoader.cs,ParseFile,The following statement contains a magic number: while (reader.Read ()) {  	ushort opcode = (ushort)(reader.GetInt32 (0));  	byte direction = (byte)(reader.GetInt32 (1));  	var timestamp = reader.GetDateTime (2);  	var data = (byte[])reader.GetValue (3);  	var packet = new Packet (data' opcode' timestamp' direction);  	packets.Add (packet);  }  
Magic Number,SilinoronParser.Loading.Loaders,TiawpsLoader,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Loading\Loaders\TiawpsLoader.cs,ParseFile,The following statement contains a magic number: while (reader.Read ()) {  	ushort opcode = (ushort)(reader.GetInt32 (0));  	byte direction = (byte)(reader.GetInt32 (1));  	var timestamp = reader.GetDateTime (2);  	var data = (byte[])reader.GetValue (3);  	var packet = new Packet (data' opcode' timestamp' direction);  	packets.Add (packet);  }  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,Parse,The following statement contains a magic number: if ((opcode & 0xB2AD) == 12)  	ParseSpecialPacket (packet);  else  	ParseStandardPacket (packet);  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The following statement contains a magic number: if (SpecialHandlers.ContainsKey (caseNum)) {  	var handler = SpecialHandlers [caseNum];  	Console.ForegroundColor = ConsoleColor.Red;  	Console.WriteLine ("{0}: {1} (0x{2}' Special) (Case: {3} ({4} / 0x{5})) Length: {6} Time: {7}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' SpecialHandlerNames [caseNum]' (int)caseNum' ((int)caseNum).ToString ("X4")' length' time);  	Console.ForegroundColor = ConsoleColor.White;  	try {  		handlerFound = true;  		handler (packet);  	}  	catch (Exception ex) {  		Console.WriteLine (ex.GetType ());  		Console.WriteLine (ex.Message);  		Console.WriteLine (ex.StackTrace);  	}  }  else if (!_noHex) {  	if (!(_skipLarge && length > 10000)) {  		Console.ForegroundColor = ConsoleColor.Red;  		Console.WriteLine ("{0}: {1} (0x{2}' Special) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' opcode' ((int)opcode).ToString ("X4")' length' time);  		Console.ForegroundColor = ConsoleColor.White;  		Console.WriteLine (Utilities.DumpPacketAsHex (packet));  	}  	else  		packet.SetPosition (packet.GetLength ());  }  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The following statement contains a magic number: if (!_noHex) {  	if (!(_skipLarge && length > 10000)) {  		Console.ForegroundColor = ConsoleColor.Red;  		Console.WriteLine ("{0}: {1} (0x{2}' Special) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' opcode' ((int)opcode).ToString ("X4")' length' time);  		Console.ForegroundColor = ConsoleColor.White;  		Console.WriteLine (Utilities.DumpPacketAsHex (packet));  	}  	else  		packet.SetPosition (packet.GetLength ());  }  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseSpecialPacket,The following statement contains a magic number: if (!(_skipLarge && length > 10000)) {  	Console.ForegroundColor = ConsoleColor.Red;  	Console.WriteLine ("{0}: {1} (0x{2}' Special) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' opcode' ((int)opcode).ToString ("X4")' length' time);  	Console.ForegroundColor = ConsoleColor.White;  	Console.WriteLine (Utilities.DumpPacketAsHex (packet));  }  else  	packet.SetPosition (packet.GetLength ());  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The following statement contains a magic number: if (Handlers.ContainsKey (opcode)) {  	Console.ForegroundColor = ConsoleColor.Red;  	Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time);  	Console.ForegroundColor = ConsoleColor.White;  	var handler = Handlers [opcode];  	try {  		handlerFound = true;  		handler (packet);  	}  	catch (Exception ex) {  		Console.WriteLine (ex.GetType ());  		Console.WriteLine (ex.Message);  		Console.WriteLine (ex.StackTrace);  	}  }  else if (!_noHex) {  	if (!(_skipLarge && length > 10000)) {  		Console.ForegroundColor = ConsoleColor.Red;  		Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time);  		Console.ForegroundColor = ConsoleColor.White;  		Console.WriteLine (Utilities.DumpPacketAsHex (packet));  	}  	else  		packet.SetPosition (packet.GetLength ());  }  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The following statement contains a magic number: if (!_noHex) {  	if (!(_skipLarge && length > 10000)) {  		Console.ForegroundColor = ConsoleColor.Red;  		Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time);  		Console.ForegroundColor = ConsoleColor.White;  		Console.WriteLine (Utilities.DumpPacketAsHex (packet));  	}  	else  		packet.SetPosition (packet.GetLength ());  }  
Magic Number,SilinoronParser.Parsing,Handler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Handler.cs,ParseStandardPacket,The following statement contains a magic number: if (!(_skipLarge && length > 10000)) {  	Console.ForegroundColor = ConsoleColor.Red;  	Console.WriteLine ("{0}: {1} (0x{2}) Length: {3} Time: {4}"' (direction == 1) ? "Client->Server" : "Server->Client"' (Opcode)opcode' ((int)opcode).ToString ("X4")' length' time);  	Console.ForegroundColor = ConsoleColor.White;  	Console.WriteLine (Utilities.DumpPacketAsHex (packet));  }  else  	packet.SetPosition (packet.GetLength ());  
Magic Number,SilinoronParser.Parsing.Parsers,MovementHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\MovementHandler.cs,ReadMovementInfo,The following statement contains a magic number: info.Flags = packet.ReadEnum<MoveFlag> ("Movement Flags"' 30);  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateObject,The following statement contains a magic number: if (unkByte != 3)  	packet.SetPosition (sposition);  else {  	Console.WriteLine ("firstType: " + unkByte);  	var guidCount = packet.ReadInt32 ("GUID Count");  	if (guidCount > 0) {  		for (uint i = 0; i < guidCount; i++)  			packet.ReadPackedGuid ("GUID " + (i + 1));  	}  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateObject,The following statement contains a magic number: for (var i = 0; i < (count - ((unkByte == 3) ? 1 : 0)); i++) {  	var type = packet.ReadEnum<UpdateType> ("Update Type #" + (i + 1));  	switch (type) {  	case UpdateType.Values: {  		var guid = packet.ReadPackedGuid ("GUID");  		var updates = ReadValuesUpdateBlock (packet);  		WowObject obj;  		if (Objects.ContainsKey (map) && Objects [map].TryGetValue (guid' out obj))  			HandleUpdateFieldChangedValues (false' guid' obj.Type' updates' obj.Movement);  		break;  	}  	case UpdateType.Movement: {  		var guid = packet.ReadPackedGuid ("GUID");  		packet.ReadEnum<ObjectType> ("Object type");  		ReadMovementUpdateBlock (packet' guid);  		ReadValuesUpdateBlock (packet);  		break;  	}  	case UpdateType.CreateObject1:  	case UpdateType.CreateObject2: {  		var guid = packet.ReadPackedGuid ("GUID");  		ReadCreateObjectBlock (packet' guid' map);  		break;  	}  	case UpdateType.FarObjects:  	case UpdateType.NearObjects: {  		var objCount = packet.ReadInt32 ("Object Count");  		for (var j = 0; j < objCount; j++)  			packet.ReadPackedGuid ("Object GUID");  		break;  	}  	}  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The following statement contains a magic number: if (objType == ObjectType.Unit && guid.GetHighType () != HighGuidType.Pet) {  	foreach (var upVal in updates) {  		bool shouldOverride = false;  		int overrideVal = -1;  		Dictionary<string' string> overrideDict = new Dictionary<string' string> ();  		bool shouldOverrideDict = false;  		bool isTemplate = false;  		shouldCommit = true;  		isIntValue = true;  		flags = false;  		var idx = (UnitField)upVal.Key;  		var val = upVal.Value;  		switch (idx) {  		case UnitField.UNIT_CREATED_BY_SPELL:  		case UnitField.UNIT_FIELD_CREATEDBY:  		case UnitField.UNIT_FIELD_SUMMONEDBY: {  			shouldCommit = false;  			break;  		}  		case (UnitField)ObjectField.OBJECT_FIELD_SCALE_X: {  			fieldName = "scale";  			isIntValue = false;  			break;  		}  		case UnitField.UNIT_DYNAMIC_FLAGS: {  			fieldName = "dynamicflags";  			flags = true;  			break;  		}  		case UnitField.UNIT_NPC_FLAGS: {  			fieldName = "npcflag";  			flags = true;  			break;  		}  		case UnitField.UNIT_FIELD_FLAGS: {  			fieldName = "unit_flags";  			flags = true;  			break;  		}  		case UnitField.UNIT_FIELD_ATTACK_POWER: {  			fieldName = "attackpower";  			break;  		}  		case UnitField.UNIT_FIELD_BASEATTACKTIME: {  			fieldName = "baseattacktime";  			break;  		}  		case UnitField.UNIT_FIELD_LEVEL: {  			int lvl = val.Int32Value;  			uint entry = guid.GetEntry ();  			bool addMin = true;  			bool addMax = true;  			isTemplate = true;  			if (minLevels.ContainsKey (entry))  				if (lvl >= minLevels [entry])  					addMin = false;  			if (maxLevels.ContainsKey (entry))  				if (lvl <= maxLevels [entry])  					addMax = false;  			if (addMin) {  				overrideDict.Add ("minlevel"' lvl.ToString ());  				minLevels [entry] = lvl;  			}  			if (addMax) {  				overrideDict.Add ("maxlevel"' lvl.ToString ());  				maxLevels [entry] = lvl;  			}  			if (!addMin && !addMax)  				shouldCommit = false;  			shouldOverrideDict = true;  			break;  		}  		case UnitField.UNIT_FIELD_RANGED_ATTACK_POWER: {  			fieldName = "rangedattackpower";  			break;  		}  		case UnitField.UNIT_FIELD_RANGEDATTACKTIME: {  			fieldName = "rangeattacktime";  			break;  		}  		case UnitField.UNIT_FIELD_FACTIONTEMPLATE: {  			isTemplate = true;  			fieldName = "faction_A=" + val.Int32Value + "' faction_H";  			break;  		}  		case UnitField.UNIT_FIELD_BASE_HEALTH: {  			fieldName = "minhealth = " + val.Int32Value + "' maxhealth";  			break;  		}  		case UnitField.UNIT_FIELD_BASE_MANA: {  			fieldName = "minmana = " + val.Int32Value + "' maxmana";  			break;  		}  		case UnitField.UNIT_FIELD_BYTES_0: {  			fieldName = "unitclass";  			overrideVal = ((val.Int32Value & 0x00FF0000) >> 16);  			isTemplate = true;  			shouldOverride = true;  			break;  		}  		default: {  			shouldCommit = false;  			break;  		}  		}  		if (!shouldCommit)  			continue;  		var finalValue = shouldOverride ? (object)overrideVal : (isIntValue ? val.Int32Value : val.SingleValue);  		if (flags && finalValue is int)  			finalValue = "0x" + ((int)finalValue).ToString ("X8");  		if (isTemplate) {  			Dictionary<string' string> data;  			if (shouldOverrideDict)  				data = overrideDict;  			else {  				data = new Dictionary<string' string> ();  				data.Add (fieldName' finalValue.ToString ());  			}  			CreatureTemplateUpdate update = new CreatureTemplateUpdate (guid.GetEntry ()' data);  			CreatureTemplateUpdateStorage.GetSingleton ().Add (update);  		}  		else {  		}  	}  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The following statement contains a magic number: foreach (var upVal in updates) {  	bool shouldOverride = false;  	int overrideVal = -1;  	Dictionary<string' string> overrideDict = new Dictionary<string' string> ();  	bool shouldOverrideDict = false;  	bool isTemplate = false;  	shouldCommit = true;  	isIntValue = true;  	flags = false;  	var idx = (UnitField)upVal.Key;  	var val = upVal.Value;  	switch (idx) {  	case UnitField.UNIT_CREATED_BY_SPELL:  	case UnitField.UNIT_FIELD_CREATEDBY:  	case UnitField.UNIT_FIELD_SUMMONEDBY: {  		shouldCommit = false;  		break;  	}  	case (UnitField)ObjectField.OBJECT_FIELD_SCALE_X: {  		fieldName = "scale";  		isIntValue = false;  		break;  	}  	case UnitField.UNIT_DYNAMIC_FLAGS: {  		fieldName = "dynamicflags";  		flags = true;  		break;  	}  	case UnitField.UNIT_NPC_FLAGS: {  		fieldName = "npcflag";  		flags = true;  		break;  	}  	case UnitField.UNIT_FIELD_FLAGS: {  		fieldName = "unit_flags";  		flags = true;  		break;  	}  	case UnitField.UNIT_FIELD_ATTACK_POWER: {  		fieldName = "attackpower";  		break;  	}  	case UnitField.UNIT_FIELD_BASEATTACKTIME: {  		fieldName = "baseattacktime";  		break;  	}  	case UnitField.UNIT_FIELD_LEVEL: {  		int lvl = val.Int32Value;  		uint entry = guid.GetEntry ();  		bool addMin = true;  		bool addMax = true;  		isTemplate = true;  		if (minLevels.ContainsKey (entry))  			if (lvl >= minLevels [entry])  				addMin = false;  		if (maxLevels.ContainsKey (entry))  			if (lvl <= maxLevels [entry])  				addMax = false;  		if (addMin) {  			overrideDict.Add ("minlevel"' lvl.ToString ());  			minLevels [entry] = lvl;  		}  		if (addMax) {  			overrideDict.Add ("maxlevel"' lvl.ToString ());  			maxLevels [entry] = lvl;  		}  		if (!addMin && !addMax)  			shouldCommit = false;  		shouldOverrideDict = true;  		break;  	}  	case UnitField.UNIT_FIELD_RANGED_ATTACK_POWER: {  		fieldName = "rangedattackpower";  		break;  	}  	case UnitField.UNIT_FIELD_RANGEDATTACKTIME: {  		fieldName = "rangeattacktime";  		break;  	}  	case UnitField.UNIT_FIELD_FACTIONTEMPLATE: {  		isTemplate = true;  		fieldName = "faction_A=" + val.Int32Value + "' faction_H";  		break;  	}  	case UnitField.UNIT_FIELD_BASE_HEALTH: {  		fieldName = "minhealth = " + val.Int32Value + "' maxhealth";  		break;  	}  	case UnitField.UNIT_FIELD_BASE_MANA: {  		fieldName = "minmana = " + val.Int32Value + "' maxmana";  		break;  	}  	case UnitField.UNIT_FIELD_BYTES_0: {  		fieldName = "unitclass";  		overrideVal = ((val.Int32Value & 0x00FF0000) >> 16);  		isTemplate = true;  		shouldOverride = true;  		break;  	}  	default: {  		shouldCommit = false;  		break;  	}  	}  	if (!shouldCommit)  		continue;  	var finalValue = shouldOverride ? (object)overrideVal : (isIntValue ? val.Int32Value : val.SingleValue);  	if (flags && finalValue is int)  		finalValue = "0x" + ((int)finalValue).ToString ("X8");  	if (isTemplate) {  		Dictionary<string' string> data;  		if (shouldOverrideDict)  			data = overrideDict;  		else {  			data = new Dictionary<string' string> ();  			data.Add (fieldName' finalValue.ToString ());  		}  		CreatureTemplateUpdate update = new CreatureTemplateUpdate (guid.GetEntry ()' data);  		CreatureTemplateUpdateStorage.GetSingleton ().Add (update);  	}  	else {  	}  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The following statement contains a magic number: switch (idx) {  case UnitField.UNIT_CREATED_BY_SPELL:  case UnitField.UNIT_FIELD_CREATEDBY:  case UnitField.UNIT_FIELD_SUMMONEDBY: {  	shouldCommit = false;  	break;  }  case (UnitField)ObjectField.OBJECT_FIELD_SCALE_X: {  	fieldName = "scale";  	isIntValue = false;  	break;  }  case UnitField.UNIT_DYNAMIC_FLAGS: {  	fieldName = "dynamicflags";  	flags = true;  	break;  }  case UnitField.UNIT_NPC_FLAGS: {  	fieldName = "npcflag";  	flags = true;  	break;  }  case UnitField.UNIT_FIELD_FLAGS: {  	fieldName = "unit_flags";  	flags = true;  	break;  }  case UnitField.UNIT_FIELD_ATTACK_POWER: {  	fieldName = "attackpower";  	break;  }  case UnitField.UNIT_FIELD_BASEATTACKTIME: {  	fieldName = "baseattacktime";  	break;  }  case UnitField.UNIT_FIELD_LEVEL: {  	int lvl = val.Int32Value;  	uint entry = guid.GetEntry ();  	bool addMin = true;  	bool addMax = true;  	isTemplate = true;  	if (minLevels.ContainsKey (entry))  		if (lvl >= minLevels [entry])  			addMin = false;  	if (maxLevels.ContainsKey (entry))  		if (lvl <= maxLevels [entry])  			addMax = false;  	if (addMin) {  		overrideDict.Add ("minlevel"' lvl.ToString ());  		minLevels [entry] = lvl;  	}  	if (addMax) {  		overrideDict.Add ("maxlevel"' lvl.ToString ());  		maxLevels [entry] = lvl;  	}  	if (!addMin && !addMax)  		shouldCommit = false;  	shouldOverrideDict = true;  	break;  }  case UnitField.UNIT_FIELD_RANGED_ATTACK_POWER: {  	fieldName = "rangedattackpower";  	break;  }  case UnitField.UNIT_FIELD_RANGEDATTACKTIME: {  	fieldName = "rangeattacktime";  	break;  }  case UnitField.UNIT_FIELD_FACTIONTEMPLATE: {  	isTemplate = true;  	fieldName = "faction_A=" + val.Int32Value + "' faction_H";  	break;  }  case UnitField.UNIT_FIELD_BASE_HEALTH: {  	fieldName = "minhealth = " + val.Int32Value + "' maxhealth";  	break;  }  case UnitField.UNIT_FIELD_BASE_MANA: {  	fieldName = "minmana = " + val.Int32Value + "' maxmana";  	break;  }  case UnitField.UNIT_FIELD_BYTES_0: {  	fieldName = "unitclass";  	overrideVal = ((val.Int32Value & 0x00FF0000) >> 16);  	isTemplate = true;  	shouldOverride = true;  	break;  }  default: {  	shouldCommit = false;  	break;  }  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateFieldChangedValues,The following statement contains a magic number: overrideVal = ((val.Int32Value & 0x00FF0000) >> 16);  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (flags.HasFlag (UpdateFlag.Living)) {  	moveInfo = MovementHandler.ReadMovementInfo (packet' guid);  	var moveFlags = moveInfo.Flags;  	for (var i = 0; i < 9; i++) {  		var j = (SpeedType)i;  		var speed = packet.ReadSingle ();  		Console.WriteLine (j + " Speed: " + speed);  		switch (j) {  		case SpeedType.Walk: {  			moveInfo.WalkSpeed = speed / 2.5f;  			break;  		}  		case SpeedType.Run: {  			moveInfo.RunSpeed = speed / 7.0f;  			break;  		}  		}  	}  	if (moveFlags.HasFlag (MoveFlag.SplineEnabled)) {  		var splineFlags = packet.ReadEnum<SplineFlag> ("Spline Flags");  		if (splineFlags.HasFlag (SplineFlag.FinalPoint))  			packet.ReadVector3 ("Final Spline Coords");  		if (splineFlags.HasFlag (SplineFlag.FinalTarget))  			packet.ReadGuid ("Final Spline Target GUID");  		if (splineFlags.HasFlag (SplineFlag.FinalOrientation))  			packet.ReadSingle ("Final Spline Orientation");  		packet.ReadInt32 ("Spline Time");  		packet.ReadInt32 ("Spline Full Time");  		packet.ReadInt32 ("Spline Unk Int32 1");  		packet.ReadSingle ("Spline Duration Multiplier");  		packet.ReadSingle ("Spline Unit Interval");  		packet.ReadSingle ("Spline Unk Float 2");  		packet.ReadInt32 ("Spline Height Time");  		var splineCount = packet.ReadInt32 ("Spline Count");  		for (var i = 0; i < splineCount; i++)  			packet.ReadVector3 ("Spline Waypoint " + i);  		packet.ReadEnum<SplineMode> ("Spline Mode");  		packet.ReadVector3 ("Spline Endpoint");  	}  }  else {  	if (flags.HasFlag (UpdateFlag.GOPosition)) {  		packet.ReadPackedGuid ("GO Position GUID");  		var gopos = packet.ReadVector3 ("GO Position");  		packet.ReadVector3 ("GO Transport Position");  		var goFacing = packet.ReadSingle ("GO Orientation");  		moveInfo.Position = gopos;  		moveInfo.Orientation = goFacing;  		packet.ReadSingle ("GO Transport Orientation");  	}  	else if (flags.HasFlag (UpdateFlag.StationaryObject))  		packet.ReadVector4 ("Stationary Position");  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: for (var i = 0; i < 9; i++) {  	var j = (SpeedType)i;  	var speed = packet.ReadSingle ();  	Console.WriteLine (j + " Speed: " + speed);  	switch (j) {  	case SpeedType.Walk: {  		moveInfo.WalkSpeed = speed / 2.5f;  		break;  	}  	case SpeedType.Run: {  		moveInfo.RunSpeed = speed / 7.0f;  		break;  	}  	}  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: if (flags.HasFlag (UpdateFlag.Unknown3)) {  	var count = packet.ReadByte ("Unk count");  	packet.ReadBytes (count * 4);  	// count ints  }  
Magic Number,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,The following statement contains a magic number: packet.ReadBytes (count * 4);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: for (byte rank = 0; rank < 10; rank++)  	packet.ReadCString ("Rank " + rank + " name");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: for (byte rank = 0; rank < 10; rank++)  	packet.ReadInt32 ("Rank " + rank + " real rank ID");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleGuildQueryResponse,The following statement contains a magic number: for (byte rank = 0; rank < 10; rank++)  	packet.ReadInt32 ();  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleNameQueryResponse,The following statement contains a magic number: for (var i = 0; i < 5; i++)  	packet.ReadCString ("Declined Name " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 7; i++) {  	packet.ReadString ();  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)  	c.DisplayIDs [i] = packet.ReadInt32 ("Display ID " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleCreatureQueryResponse,The following statement contains a magic number: for (var i = 0; i < 6; i++)  	c.QuestItems [i] = packet.ReadInt32 ("Quest Item " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,GameobjectQueryResponse,The following statement contains a magic number: for (var i = 0; i < 4; i++)  	go.Name [i] = packet.ReadCString ("Name " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,GameobjectQueryResponse,The following statement contains a magic number: for (var i = 0; i < 32; i++)  	go.Data [i] = packet.ReadInt32 ("Data " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,GameobjectQueryResponse,The following statement contains a magic number: for (var i = 0; i < 6; i++)  	go.QuestItems [i] = packet.ReadInt32 ("Quest Item " + i);  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	q.RewardItem [i] = packet.ReadInt32 ("RewardItem[" + i + "]");  	q.RewardItemCount [i] = packet.ReadInt32 ("RewardItemCount[" + i + "]");  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	q.RewardItemChoice [i] = packet.ReadInt32 ("RewardItemChoice[" + i + "]");  	q.RewardItemChoiceCount [i] = packet.ReadInt32 ("RewardItemChoiceCount[" + i + "]");  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 5; i++)  	q.RewardRepFactionID [i] = packet.ReadInt32 ("RewardRepFactionID[" + i + "]");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 5; i++)  	q.RewardRepValueID [i] = packet.ReadInt32 ("RewardRepValueID[" + i + "]");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 5; i++)  	q.RewardRepValue [i] = packet.ReadInt32 ("RewardRepValue[" + i + "]");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	q.RequiredCreatureOrGOID [i] = packet.ReadInt32 ("RequiredCreatureOrGOID[" + i + "]");  	q.RequiredCreatureOrGOCount [i] = packet.ReadInt32 ("RequiredCreatureOrGOCount[" + i + "]");  	q.ItemDropIntermediateID [i] = packet.ReadInt32 ("ItemDropIntermediateID[" + i + "]");  	q.ItemDropIntermediateCount [i] = packet.ReadInt32 ("ItemDropIntermediateCount[" + i + "]");  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	q.RequiredItemID [i] = packet.ReadInt32 ("RequiredItemID[" + i + "]");  	q.RequiredItemCount [i] = packet.ReadInt32 ("RequiredItemCount[" + i + "]");  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	q.ObjectiveTexts [i] = packet.ReadCString ("ObjectiveTexts[" + i + "]");  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	q.RewardCurrencyID [i] = packet.ReadInt32 ("RewardCurrencyID[" + i + "]");  	q.RewardCurrencyValue [i] = packet.ReadInt32 ("RewardCurrencyValue[" + i + "]");  }  
Magic Number,SilinoronParser.Parsing.Parsers,QueryHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\QueryHandler.cs,HandleQuestQueryResponse,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	q.RequiredCurrencyID [i] = packet.ReadInt32 ("RequiredCurrencyID[" + i + "]");  	q.RequiredCurrencyValue [i] = packet.ReadInt32 ("RequiredCurrencyValue[" + i + "]");  }  
Magic Number,SilinoronParser.SQLOutput,CreatureTemplateUpdate,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\SQLOutput\CreatureUpdateStorage.cs,ToSQL,The following statement contains a magic number: sql = sql.Substring (0' sql.Length - 2);  
Magic Number,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,GetEntry,The following statement contains a magic number: return (uint)((Full & 0x000FFFFF00000000) >> 32);  
Magic Number,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,GetHighType,The following statement contains a magic number: return (HighGuidType)((Full & 0x00F0000000000000) >> 52);  
Magic Number,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,GetHighMask,The following statement contains a magic number: return (HighGuidMask)((Full & 0xFF00000000000000) >> 56);  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadPackedGuid,The following statement contains a magic number: while (i < 8) {  	if ((mask & (1 << i)) != 0)  		res |= (ulong)ReadByte () << (i * 8);  	i++;  }  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadPackedGuid,The following statement contains a magic number: while (i < 8) {  	if ((mask & (1 << i)) != 0)  		res |= (ulong)ReadByte () << (i * 8);  	i++;  }  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadPackedGuid,The following statement contains a magic number: if ((mask & (1 << i)) != 0)  	res |= (ulong)ReadByte () << (i * 8);  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadPackedGuid,The following statement contains a magic number: res |= (ulong)ReadByte () << (i * 8);  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadMillisecondTime,The following statement contains a magic number: return Utilities.GetDateTimeFromUnixTime (ReadInt32 () / 1000);  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadBit,The following statement contains a magic number: if (_bitPos < 0) {  	_currentByte = ReadByte ();  	_bitPos = 7;  }  
Magic Number,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadBit,The following statement contains a magic number: _bitPos = 7;  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,GetDateTimeFromUnixTime,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0).AddSeconds (unixTime);  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,GetDateTimeFromUnixTime,The following statement contains a magic number: return new DateTime (1970' 1' 1' 0' 0' 0' 0).AddSeconds (unixTime);  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,HexStringToBinary,The following statement contains a magic number: for (var i = 0; i < data.Length; i += 2)  	bytes.Add (Byte.Parse (data.Substring (i' 2)' NumberStyles.HexNumber));  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,HexStringToBinary,The following statement contains a magic number: for (var i = 0; i < data.Length; i += 2)  	bytes.Add (Byte.Parse (data.Substring (i' 2)' NumberStyles.HexNumber));  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,HexStringToBinary,The following statement contains a magic number: i += 2
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,HexStringToBinary,The following statement contains a magic number: bytes.Add (Byte.Parse (data.Substring (i' 2)' NumberStyles.HexNumber));  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,GetDateTimeFromGameTime,The following statement contains a magic number: return new DateTime (year + 2000' month + 1' day + 1' hour' minute' 0);  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var i = 0; i < end; i += 16) {  	var text = new StringBuilder ();  	var hex = new StringBuilder ();  	hex.Append ("| ");  	for (var j = 0; j < 16; j++) {  		if (j + i < end) {  			var val = stream [j + i];  			hex.Append (stream [j + i].ToString ("X2"));  			hex.Append (" ");  			if (val >= 32 && val <= 127)  				text.Append ((char)val);  			else  				text.Append (".");  			text.Append (" ");  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("| ");  	hex.Append (text + "|");  	hex.Append (n);  	hexDump.Append (hex.ToString ());  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var i = 0; i < end; i += 16) {  	var text = new StringBuilder ();  	var hex = new StringBuilder ();  	hex.Append ("| ");  	for (var j = 0; j < 16; j++) {  		if (j + i < end) {  			var val = stream [j + i];  			hex.Append (stream [j + i].ToString ("X2"));  			hex.Append (" ");  			if (val >= 32 && val <= 127)  				text.Append ((char)val);  			else  				text.Append (".");  			text.Append (" ");  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("| ");  	hex.Append (text + "|");  	hex.Append (n);  	hexDump.Append (hex.ToString ());  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var i = 0; i < end; i += 16) {  	var text = new StringBuilder ();  	var hex = new StringBuilder ();  	hex.Append ("| ");  	for (var j = 0; j < 16; j++) {  		if (j + i < end) {  			var val = stream [j + i];  			hex.Append (stream [j + i].ToString ("X2"));  			hex.Append (" ");  			if (val >= 32 && val <= 127)  				text.Append ((char)val);  			else  				text.Append (".");  			text.Append (" ");  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("| ");  	hex.Append (text + "|");  	hex.Append (n);  	hexDump.Append (hex.ToString ());  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var i = 0; i < end; i += 16) {  	var text = new StringBuilder ();  	var hex = new StringBuilder ();  	hex.Append ("| ");  	for (var j = 0; j < 16; j++) {  		if (j + i < end) {  			var val = stream [j + i];  			hex.Append (stream [j + i].ToString ("X2"));  			hex.Append (" ");  			if (val >= 32 && val <= 127)  				text.Append ((char)val);  			else  				text.Append (".");  			text.Append (" ");  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("| ");  	hex.Append (text + "|");  	hex.Append (n);  	hexDump.Append (hex.ToString ());  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: i += 16
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var j = 0; j < 16; j++) {  	if (j + i < end) {  		var val = stream [j + i];  		hex.Append (stream [j + i].ToString ("X2"));  		hex.Append (" ");  		if (val >= 32 && val <= 127)  			text.Append ((char)val);  		else  			text.Append (".");  		text.Append (" ");  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var j = 0; j < 16; j++) {  	if (j + i < end) {  		var val = stream [j + i];  		hex.Append (stream [j + i].ToString ("X2"));  		hex.Append (" ");  		if (val >= 32 && val <= 127)  			text.Append ((char)val);  		else  			text.Append (".");  		text.Append (" ");  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: for (var j = 0; j < 16; j++) {  	if (j + i < end) {  		var val = stream [j + i];  		hex.Append (stream [j + i].ToString ("X2"));  		hex.Append (" ");  		if (val >= 32 && val <= 127)  			text.Append ((char)val);  		else  			text.Append (".");  		text.Append (" ");  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: if (j + i < end) {  	var val = stream [j + i];  	hex.Append (stream [j + i].ToString ("X2"));  	hex.Append (" ");  	if (val >= 32 && val <= 127)  		text.Append ((char)val);  	else  		text.Append (".");  	text.Append (" ");  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: if (j + i < end) {  	var val = stream [j + i];  	hex.Append (stream [j + i].ToString ("X2"));  	hex.Append (" ");  	if (val >= 32 && val <= 127)  		text.Append ((char)val);  	else  		text.Append (".");  	text.Append (" ");  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: if (val >= 32 && val <= 127)  	text.Append ((char)val);  else  	text.Append (".");  
Magic Number,SilinoronParser.Util,Utilities,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Utilities.cs,DumpPacketAsHex,The following statement contains a magic number: if (val >= 32 && val <= 127)  	text.Append ((char)val);  else  	text.Append (".");  
Magic Number,SilinoronParser.Util,Vector3,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Vector3.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Y.GetHashCode ();  
Magic Number,SilinoronParser.Util,Vector3,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Vector3.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Z.GetHashCode ();  
Missing Default,SilinoronParser.Parsing.Parsers,ChatHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ChatHandler.cs,HandleMessageChat,The following switch statement is missing a default case: switch (type) {  case ChatMessageType.Say:  case ChatMessageType.Yell:  case ChatMessageType.Party:  case ChatMessageType.PartyLeader:  case ChatMessageType.Raid:  case ChatMessageType.RaidLeader:  case ChatMessageType.RaidWarning:  case ChatMessageType.Guild:  case ChatMessageType.Officer:  case ChatMessageType.Emote:  case ChatMessageType.TextEmote:  case ChatMessageType.Whisper:  case ChatMessageType.WhisperInform:  case ChatMessageType.System:  case ChatMessageType.Channel:  case ChatMessageType.Battleground:  case ChatMessageType.BattlegroundNeutral:  case ChatMessageType.BattlegroundAlliance:  case ChatMessageType.BattlegroundHorde:  case ChatMessageType.BattlegroundLeader:  case ChatMessageType.Achievement:  case ChatMessageType.GuildAchievement: {  	if (type == ChatMessageType.Channel)  		packet.ReadCString ("Channel Name");  	packet.ReadGuid ("Sender GUID");  	break;  }  case ChatMessageType.MonsterSay:  case ChatMessageType.MonsterYell:  case ChatMessageType.MonsterParty:  case ChatMessageType.MonsterEmote:  case ChatMessageType.MonsterWhisper:  case ChatMessageType.RaidBossEmote:  case ChatMessageType.RaidBossWhisper:  case ChatMessageType.BattleNet: {  	packet.ReadInt32 ("Name Length");  	packet.ReadCString ("Name");  	var target = packet.ReadGuid ("Receiver GUID");  	break;  }  }  
Missing Default,SilinoronParser.Parsing.Parsers,MovementHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\MovementHandler.cs,ParseMonsterMovePackets,The following switch statement is missing a default case: switch (type) {  case SplineType.FacingSpot: {  	packet.ReadVector3 ("Facing Spot");  	break;  }  case SplineType.FacingTarget: {  	packet.ReadGuid ("Facing GUID");  	break;  }  case SplineType.FacingAngle: {  	packet.ReadSingle ("Facing Angle");  	break;  }  case SplineType.Stop: {  	return;  }  }  
Missing Default,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,HandleUpdateObject,The following switch statement is missing a default case: switch (type) {  case UpdateType.Values: {  	var guid = packet.ReadPackedGuid ("GUID");  	var updates = ReadValuesUpdateBlock (packet);  	WowObject obj;  	if (Objects.ContainsKey (map) && Objects [map].TryGetValue (guid' out obj))  		HandleUpdateFieldChangedValues (false' guid' obj.Type' updates' obj.Movement);  	break;  }  case UpdateType.Movement: {  	var guid = packet.ReadPackedGuid ("GUID");  	packet.ReadEnum<ObjectType> ("Object type");  	ReadMovementUpdateBlock (packet' guid);  	ReadValuesUpdateBlock (packet);  	break;  }  case UpdateType.CreateObject1:  case UpdateType.CreateObject2: {  	var guid = packet.ReadPackedGuid ("GUID");  	ReadCreateObjectBlock (packet' guid' map);  	break;  }  case UpdateType.FarObjects:  case UpdateType.NearObjects: {  	var objCount = packet.ReadInt32 ("Object Count");  	for (var j = 0; j < objCount; j++)  		packet.ReadPackedGuid ("Object GUID");  	break;  }  }  
Missing Default,SilinoronParser.Parsing.Parsers,ObjectHandler,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Parsing\Parsers\ObjectHandler.cs,ReadMovementUpdateBlock,The following switch statement is missing a default case: switch (j) {  case SpeedType.Walk: {  	moveInfo.WalkSpeed = speed / 2.5f;  	break;  }  case SpeedType.Run: {  	moveInfo.RunSpeed = speed / 7.0f;  	break;  }  }  
Missing Default,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,HasEntry,The following switch statement is missing a default case: switch (GetHighType ()) {  case HighGuidType.NoEntry1:  case HighGuidType.NoEntry2: {  	return false;  }  }  
Missing Default,SilinoronParser.Util,Guid,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Guid.cs,GetLow,The following switch statement is missing a default case: switch (GetHighType ()) {  case HighGuidType.NoEntry1:  case HighGuidType.NoEntry2: {  	return (Full & 0x000FFFFFFFFFFFFF) >> 0;  }  case HighGuidType.GameObject:  case HighGuidType.Transport:  case HighGuidType.MOTransport: {  	return (Full & 0x0000000000FFFFFF) >> 0;  }  }  
Missing Default,SilinoronParser.Util,Packet,C:\repos\AwkwardDev_StrawberryTools\Source\SilinoronParser\SilinoronParser\Util\Packet.cs,ReadEnum,The following switch statement is missing a default case: switch (code) {  case TypeCode.SByte:  	rawVal = ReadSByte ();  	break;  case TypeCode.Byte:  	rawVal = ReadByte ();  	break;  case TypeCode.Int16:  	rawVal = ReadInt16 ();  	break;  case TypeCode.UInt16:  	rawVal = ReadUInt16 ();  	break;  case TypeCode.Int32:  	rawVal = ReadInt32 ();  	break;  case TypeCode.UInt32:  	rawVal = ReadUInt32 ();  	break;  case TypeCode.Int64:  	rawVal = ReadInt64 ();  	break;  case TypeCode.UInt64:  	rawVal = (long)ReadUInt64 ();  	break;  case TypeCode.DBNull:  	rawVal = ReadBits (bitsCount);  	break;  }  
