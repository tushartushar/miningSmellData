Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,Cyclomatic complexity of the method is 26
Complex Method,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,listView1_MouseDoubleClick,Cyclomatic complexity of the method is 17
Complex Method,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,StringToCompType,Cyclomatic complexity of the method is 11
Complex Method,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,CreateColumns,Cyclomatic complexity of the method is 36
Complex Method,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,GetFieldsCount,Cyclomatic complexity of the method is 9
Complex Method,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,Cyclomatic complexity of the method is 9
Complex Method,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,Cyclomatic complexity of the method is 10
Complex Method,dbc2sql,DBCReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DBCReader.cs,DBCReader,Cyclomatic complexity of the method is 8
Long Statement,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,InitDefinitions,The length of the statement  "		var result = MessageBox.Show (this' "Create default definition?"' "Definition Missing!"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 172.
Long Statement,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,CreateColumns,The length of the statement  "			throw new ArgumentException (String.Format (CultureInfo.InvariantCulture' "Unknown field type {0}!"' field.Attributes ["type"].Value)); " is 135.
Long Statement,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,InitColumnsFilter,The length of the statement  "		var width = field.Attributes ["width"] != null ? Convert.ToInt32 (field.Attributes ["width"].Value' CultureInfo.InvariantCulture) : 100; " is 136.
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: switch (thisFmt.ToUpper (CultureInfo.InvariantCulture)) {  // Binary formatting.  case "B":  	baseNumber = 2;  	break;  case "O":  	baseNumber = 8;  	break;  case "H":  	baseNumber = 16;  	break;  // Handle unsupported format strings.  default:  	try {  		return HandleOtherFormats (format' arg);  	}  	catch (FormatException e) {  		throw new FormatException (String.Format (CultureInfo.InvariantCulture' "The format of '{0}' is invalid."' format)' e);  	}  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: switch (thisFmt.ToUpper (CultureInfo.InvariantCulture)) {  // Binary formatting.  case "B":  	baseNumber = 2;  	break;  case "O":  	baseNumber = 8;  	break;  case "H":  	baseNumber = 16;  	break;  // Handle unsupported format strings.  default:  	try {  		return HandleOtherFormats (format' arg);  	}  	catch (FormatException e) {  		throw new FormatException (String.Format (CultureInfo.InvariantCulture' "The format of '{0}' is invalid."' format)' e);  	}  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: switch (thisFmt.ToUpper (CultureInfo.InvariantCulture)) {  // Binary formatting.  case "B":  	baseNumber = 2;  	break;  case "O":  	baseNumber = 8;  	break;  case "H":  	baseNumber = 16;  	break;  // Handle unsupported format strings.  default:  	try {  		return HandleOtherFormats (format' arg);  	}  	catch (FormatException e) {  		throw new FormatException (String.Format (CultureInfo.InvariantCulture' "The format of '{0}' is invalid."' format)' e);  	}  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: baseNumber = 2;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: baseNumber = 8;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: baseNumber = 16;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: for (int ctr = bytes.GetUpperBound (0); ctr >= bytes.GetLowerBound (0); ctr--) {  	string byteString = Convert.ToString (bytes [ctr]' baseNumber);  	if (baseNumber == 2)  		byteString = new String ('0'' 8 - byteString.Length) + byteString;  	else if (baseNumber == 8)  		byteString = new String ('0'' 4 - byteString.Length) + byteString;  	// Base is 16.  	else  		byteString = new String ('0'' 2 - byteString.Length) + byteString;  	numericString += byteString + " ";  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: for (int ctr = bytes.GetUpperBound (0); ctr >= bytes.GetLowerBound (0); ctr--) {  	string byteString = Convert.ToString (bytes [ctr]' baseNumber);  	if (baseNumber == 2)  		byteString = new String ('0'' 8 - byteString.Length) + byteString;  	else if (baseNumber == 8)  		byteString = new String ('0'' 4 - byteString.Length) + byteString;  	// Base is 16.  	else  		byteString = new String ('0'' 2 - byteString.Length) + byteString;  	numericString += byteString + " ";  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: for (int ctr = bytes.GetUpperBound (0); ctr >= bytes.GetLowerBound (0); ctr--) {  	string byteString = Convert.ToString (bytes [ctr]' baseNumber);  	if (baseNumber == 2)  		byteString = new String ('0'' 8 - byteString.Length) + byteString;  	else if (baseNumber == 8)  		byteString = new String ('0'' 4 - byteString.Length) + byteString;  	// Base is 16.  	else  		byteString = new String ('0'' 2 - byteString.Length) + byteString;  	numericString += byteString + " ";  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: for (int ctr = bytes.GetUpperBound (0); ctr >= bytes.GetLowerBound (0); ctr--) {  	string byteString = Convert.ToString (bytes [ctr]' baseNumber);  	if (baseNumber == 2)  		byteString = new String ('0'' 8 - byteString.Length) + byteString;  	else if (baseNumber == 8)  		byteString = new String ('0'' 4 - byteString.Length) + byteString;  	// Base is 16.  	else  		byteString = new String ('0'' 2 - byteString.Length) + byteString;  	numericString += byteString + " ";  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: for (int ctr = bytes.GetUpperBound (0); ctr >= bytes.GetLowerBound (0); ctr--) {  	string byteString = Convert.ToString (bytes [ctr]' baseNumber);  	if (baseNumber == 2)  		byteString = new String ('0'' 8 - byteString.Length) + byteString;  	else if (baseNumber == 8)  		byteString = new String ('0'' 4 - byteString.Length) + byteString;  	// Base is 16.  	else  		byteString = new String ('0'' 2 - byteString.Length) + byteString;  	numericString += byteString + " ";  }  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 2)  	byteString = new String ('0'' 8 - byteString.Length) + byteString;  else if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 2)  	byteString = new String ('0'' 8 - byteString.Length) + byteString;  else if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 2)  	byteString = new String ('0'' 8 - byteString.Length) + byteString;  else if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 2)  	byteString = new String ('0'' 8 - byteString.Length) + byteString;  else if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 2)  	byteString = new String ('0'' 8 - byteString.Length) + byteString;  else if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: byteString = new String ('0'' 8 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: if (baseNumber == 8)  	byteString = new String ('0'' 4 - byteString.Length) + byteString;  // Base is 16.  else  	byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: byteString = new String ('0'' 4 - byteString.Length) + byteString;  
Magic Number,DBCViewer,BinaryFormatter,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryFormatter.cs,Format,The following statement contains a magic number: byteString = new String ('0'' 2 - byteString.Length) + byteString;  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,WriteXml,The following statement contains a magic number: foreach (ListViewItem item in listView1.Items) {  	if (item.SubItems [3].Text == "True") {  		XmlElement index = doc.CreateElement ("index");  		XmlNode primary = index.AppendChild (doc.CreateElement ("primary"));  		primary.InnerText = item.SubItems [1].Text;  		newnode.AppendChild (index);  	}  	XmlElement ele = doc.CreateElement ("field");  	ele.SetAttributeNode ("type"' "").Value = item.SubItems [2].Text;  	ele.SetAttributeNode ("name"' "").Value = item.SubItems [1].Text;  	newnode.AppendChild (ele);  }  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,WriteXml,The following statement contains a magic number: foreach (ListViewItem item in listView1.Items) {  	if (item.SubItems [3].Text == "True") {  		XmlElement index = doc.CreateElement ("index");  		XmlNode primary = index.AppendChild (doc.CreateElement ("primary"));  		primary.InnerText = item.SubItems [1].Text;  		newnode.AppendChild (index);  	}  	XmlElement ele = doc.CreateElement ("field");  	ele.SetAttributeNode ("type"' "").Value = item.SubItems [2].Text;  	ele.SetAttributeNode ("name"' "").Value = item.SubItems [1].Text;  	newnode.AppendChild (ele);  }  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,WriteXml,The following statement contains a magic number: if (item.SubItems [3].Text == "True") {  	XmlElement index = doc.CreateElement ("index");  	XmlNode primary = index.AppendChild (doc.CreateElement ("primary"));  	primary.InnerText = item.SubItems [1].Text;  	newnode.AppendChild (index);  }  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,WriteXml,The following statement contains a magic number: ele.SetAttributeNode ("type"' "").Value = item.SubItems [2].Text;  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,listView1_MouseDoubleClick,The following statement contains a magic number: switch (column) {  case 0:  	// index  	break;  case 1:  	// name  	ShowFakeControl (textBox2);  	break;  case 2:  	// type  	comboBox1.Items.Clear ();  	comboBox1.Items.AddRange (comboBoxItems1);  	ShowFakeControl (comboBox1);  	break;  case 3:  	// isIndex  	comboBox1.Items.Clear ();  	comboBox1.Items.AddRange (comboBoxItems2);  	ShowFakeControl (comboBox1);  	break;  default:  	break;  }  
Magic Number,DBCViewer,DefinitionEditor,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\DefinitionEditor.cs,listView1_MouseDoubleClick,The following statement contains a magic number: switch (column) {  case 0:  	// index  	break;  case 1:  	// name  	ShowFakeControl (textBox2);  	break;  case 2:  	// type  	comboBox1.Items.Clear ();  	comboBox1.Items.AddRange (comboBoxItems1);  	ShowFakeControl (comboBox1);  	break;  case 3:  	// isIndex  	comboBox1.Items.Clear ();  	comboBox1.Items.AddRange (comboBoxItems2);  	ShowFakeControl (comboBox1);  	break;  default:  	break;  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,button2_Click,The following statement contains a magic number: try {  	if (col.DataType.IsPrimitive && col.DataType != typeof(float) && col.DataType != typeof(double)) {  		if (val.StartsWith ("0x"' true' CultureInfo.InvariantCulture))  			val = Convert.ToUInt64 (val' 16).ToString ();  	}  	Convert.ChangeType (val' col.DataType' CultureInfo.InvariantCulture);  }  catch {  	MessageBox.Show ("Invalid filter!");  	return;  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,button2_Click,The following statement contains a magic number: if (col.DataType.IsPrimitive && col.DataType != typeof(float) && col.DataType != typeof(double)) {  	if (val.StartsWith ("0x"' true' CultureInfo.InvariantCulture))  		val = Convert.ToUInt64 (val' 16).ToString ();  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,button2_Click,The following statement contains a magic number: if (val.StartsWith ("0x"' true' CultureInfo.InvariantCulture))  	val = Convert.ToUInt64 (val' 16).ToString ();  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,button2_Click,The following statement contains a magic number: val = Convert.ToUInt64 (val' 16).ToString ();  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,SyncFilters,The following statement contains a magic number: for (var i = 0; i < listBox1.Items.Count; ++i) {  	string filter = (string)listBox1.Items [i];  	var args = filter.Split (delimiter' 3);  	if (args.Length != 3)  		throw new ArgumentException ("We got a trouble!");  	m_filters [i] = new FilterOptions (args [0]' StringToCompType (args [1])' args [2]);  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,SyncFilters,The following statement contains a magic number: for (var i = 0; i < listBox1.Items.Count; ++i) {  	string filter = (string)listBox1.Items [i];  	var args = filter.Split (delimiter' 3);  	if (args.Length != 3)  		throw new ArgumentException ("We got a trouble!");  	m_filters [i] = new FilterOptions (args [0]' StringToCompType (args [1])' args [2]);  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,SyncFilters,The following statement contains a magic number: for (var i = 0; i < listBox1.Items.Count; ++i) {  	string filter = (string)listBox1.Items [i];  	var args = filter.Split (delimiter' 3);  	if (args.Length != 3)  		throw new ArgumentException ("We got a trouble!");  	m_filters [i] = new FilterOptions (args [0]' StringToCompType (args [1])' args [2]);  }  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,SyncFilters,The following statement contains a magic number: if (args.Length != 3)  	throw new ArgumentException ("We got a trouble!");  
Magic Number,DBCViewer,FilterForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\FilterForm.cs,SyncFilters,The following statement contains a magic number: m_filters [i] = new FilterOptions (args [0]' StringToCompType (args [1])' args [2]);  
Magic Number,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,InitColumnsFilter,The following statement contains a magic number: foreach (XmlElement field in m_fields) {  	var colName = field.Attributes ["name"].Value;  	var type = field.Attributes ["type"].Value;  	var format = field.Attributes ["format"] != null ? field.Attributes ["format"].Value : String.Empty;  	var visible = field.Attributes ["visible"] != null ? field.Attributes ["visible"].Value == "true" : true;  	var width = field.Attributes ["width"] != null ? Convert.ToInt32 (field.Attributes ["width"].Value' CultureInfo.InvariantCulture) : 100;  	var item = new ToolStripMenuItem (colName);  	item.Click += new EventHandler (columnsFilterEventHandler);  	item.CheckOnClick = true;  	item.Name = colName;  	item.Checked = !visible;  	columnsFilterToolStripMenuItem.DropDownItems.Add (item);  	dataGridView1.Columns [colName].Visible = visible;  	dataGridView1.Columns [colName].Width = width;  	dataGridView1.Columns [colName].AutoSizeMode = GetColumnAutoSizeMode (type' format);  	dataGridView1.Columns [colName].SortMode = DataGridViewColumnSortMode.Automatic;  }  
Magic Number,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,GetFieldsCount,The following statement contains a magic number: foreach (XmlElement field in fields) {  	switch (field.Attributes ["type"].Value) {  	case "long":  	case "ulong":  	case "double":  		count += 2;  		break;  	default:  		count++;  		break;  	}  }  
Magic Number,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,GetFieldsCount,The following statement contains a magic number: switch (field.Attributes ["type"].Value) {  case "long":  case "ulong":  case "double":  	count += 2;  	break;  default:  	count++;  	break;  }  
Magic Number,DBCViewer,MainForm,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Forms\MainForm.cs,GetFieldsCount,The following statement contains a magic number: count += 2;  
Magic Number,dbc2sql,BinaryReaderExtensions,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryReaderExtensions.cs,ReadPackedGuid,The following statement contains a magic number: while (i < 9) {  	if ((mask & 1 << i) != 0)  		res += (ulong)reader.ReadByte () << (i * 8);  	i++;  }  
Magic Number,dbc2sql,BinaryReaderExtensions,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryReaderExtensions.cs,ReadPackedGuid,The following statement contains a magic number: while (i < 9) {  	if ((mask & 1 << i) != 0)  		res += (ulong)reader.ReadByte () << (i * 8);  	i++;  }  
Magic Number,dbc2sql,BinaryReaderExtensions,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryReaderExtensions.cs,ReadPackedGuid,The following statement contains a magic number: if ((mask & 1 << i) != 0)  	res += (ulong)reader.ReadByte () << (i * 8);  
Magic Number,dbc2sql,BinaryReaderExtensions,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\BinaryReaderExtensions.cs,ReadPackedGuid,The following statement contains a magic number: res += (ulong)reader.ReadByte () << (i * 8);  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	var signature = reader.ReadUInt32 ();  	if (signature != ADBFmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	// not fields count in WCH2  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WCH2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WCH2  	uint build = reader.ReadUInt32 ();  	// new field in WCH2  	int unk1 = reader.ReadInt32 ();  	// Unix time in WCH2  	int unk2 = reader.ReadInt32 ();  	// new field in WCH2  	int unk3 = reader.ReadInt32 ();  	// new field in WCH2 (index table?)  	int locale = reader.ReadInt32 ();  	// new field in WCH2  	int unk5 = reader.ReadInt32 ();  	// new field in WCH2  	if (unk3 != 0) {  		reader.ReadBytes (unk3 * 4 - HeaderSize);  		// an index for rows  		reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  		// a memory allocation bank  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	var signature = reader.ReadUInt32 ();  	if (signature != ADBFmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	// not fields count in WCH2  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WCH2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WCH2  	uint build = reader.ReadUInt32 ();  	// new field in WCH2  	int unk1 = reader.ReadInt32 ();  	// Unix time in WCH2  	int unk2 = reader.ReadInt32 ();  	// new field in WCH2  	int unk3 = reader.ReadInt32 ();  	// new field in WCH2 (index table?)  	int locale = reader.ReadInt32 ();  	// new field in WCH2  	int unk5 = reader.ReadInt32 ();  	// new field in WCH2  	if (unk3 != 0) {  		reader.ReadBytes (unk3 * 4 - HeaderSize);  		// an index for rows  		reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  		// a memory allocation bank  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	var signature = reader.ReadUInt32 ();  	if (signature != ADBFmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	// not fields count in WCH2  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WCH2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WCH2  	uint build = reader.ReadUInt32 ();  	// new field in WCH2  	int unk1 = reader.ReadInt32 ();  	// Unix time in WCH2  	int unk2 = reader.ReadInt32 ();  	// new field in WCH2  	int unk3 = reader.ReadInt32 ();  	// new field in WCH2 (index table?)  	int locale = reader.ReadInt32 ();  	// new field in WCH2  	int unk5 = reader.ReadInt32 ();  	// new field in WCH2  	if (unk3 != 0) {  		reader.ReadBytes (unk3 * 4 - HeaderSize);  		// an index for rows  		reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  		// a memory allocation bank  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: if (unk3 != 0) {  	reader.ReadBytes (unk3 * 4 - HeaderSize);  	// an index for rows  	reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  	// a memory allocation bank  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: if (unk3 != 0) {  	reader.ReadBytes (unk3 * 4 - HeaderSize);  	// an index for rows  	reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  	// a memory allocation bank  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: if (unk3 != 0) {  	reader.ReadBytes (unk3 * 4 - HeaderSize);  	// an index for rows  	reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  	// a memory allocation bank  }  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: reader.ReadBytes (unk3 * 4 - HeaderSize);  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  
Magic Number,dbc2sql,ADBReader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\ADBReader.cs,ADBReader,The following statement contains a magic number: reader.ReadBytes (unk3 * 2 - HeaderSize * 2);  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	if (reader.ReadUInt32 () != DB2FmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WDB2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WDB2  	uint build = reader.ReadUInt32 ();  	// new field in WDB2  	uint unk1 = reader.ReadUInt32 ();  	// new field in WDB2  	if (build > 12880)// new extended header  	 {  		int MinId = reader.ReadInt32 ();  		// new field in WDB2  		int MaxId = reader.ReadInt32 ();  		// new field in WDB2  		int locale = reader.ReadInt32 ();  		// new field in WDB2  		int unk5 = reader.ReadInt32 ();  		// new field in WDB2  		if (MaxId != 0) {  			var diff = MaxId - MinId + 1;  			// blizzard is weird people...  			reader.ReadBytes (diff * 4);  			// an index for rows  			reader.ReadBytes (diff * 2);  			// a memory allocation bank  		}  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	if (reader.ReadUInt32 () != DB2FmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WDB2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WDB2  	uint build = reader.ReadUInt32 ();  	// new field in WDB2  	uint unk1 = reader.ReadUInt32 ();  	// new field in WDB2  	if (build > 12880)// new extended header  	 {  		int MinId = reader.ReadInt32 ();  		// new field in WDB2  		int MaxId = reader.ReadInt32 ();  		// new field in WDB2  		int locale = reader.ReadInt32 ();  		// new field in WDB2  		int unk5 = reader.ReadInt32 ();  		// new field in WDB2  		if (MaxId != 0) {  			var diff = MaxId - MinId + 1;  			// blizzard is weird people...  			reader.ReadBytes (diff * 4);  			// an index for rows  			reader.ReadBytes (diff * 2);  			// a memory allocation bank  		}  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: using (var reader = BinaryReaderExtensions.FromFile (fileName)) {  	if (reader.BaseStream.Length < HeaderSize) {  		throw new InvalidDataException (String.Format ("File {0} is corrupted!"' fileName));  	}  	if (reader.ReadUInt32 () != DB2FmtSig) {  		throw new InvalidDataException (String.Format ("File {0} isn't valid DBC file!"' fileName));  	}  	RecordsCount = reader.ReadInt32 ();  	FieldsCount = reader.ReadInt32 ();  	RecordSize = reader.ReadInt32 ();  	StringTableSize = reader.ReadInt32 ();  	// WDB2 specific fields  	uint tableHash = reader.ReadUInt32 ();  	// new field in WDB2  	uint build = reader.ReadUInt32 ();  	// new field in WDB2  	uint unk1 = reader.ReadUInt32 ();  	// new field in WDB2  	if (build > 12880)// new extended header  	 {  		int MinId = reader.ReadInt32 ();  		// new field in WDB2  		int MaxId = reader.ReadInt32 ();  		// new field in WDB2  		int locale = reader.ReadInt32 ();  		// new field in WDB2  		int unk5 = reader.ReadInt32 ();  		// new field in WDB2  		if (MaxId != 0) {  			var diff = MaxId - MinId + 1;  			// blizzard is weird people...  			reader.ReadBytes (diff * 4);  			// an index for rows  			reader.ReadBytes (diff * 2);  			// a memory allocation bank  		}  	}  	m_rows = new byte[RecordsCount][];  	for (int i = 0; i < RecordsCount; i++)  		m_rows [i] = reader.ReadBytes (RecordSize);  	int stringTableStart = (int)reader.BaseStream.Position;  	StringTable = new StringTable ();  	while (reader.BaseStream.Position != reader.BaseStream.Length) {  		int index = (int)reader.BaseStream.Position - stringTableStart;  		StringTable [index] = reader.ReadStringNull ();  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: if (build > 12880)// new extended header   {  	int MinId = reader.ReadInt32 ();  	// new field in WDB2  	int MaxId = reader.ReadInt32 ();  	// new field in WDB2  	int locale = reader.ReadInt32 ();  	// new field in WDB2  	int unk5 = reader.ReadInt32 ();  	// new field in WDB2  	if (MaxId != 0) {  		var diff = MaxId - MinId + 1;  		// blizzard is weird people...  		reader.ReadBytes (diff * 4);  		// an index for rows  		reader.ReadBytes (diff * 2);  		// a memory allocation bank  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: if (build > 12880)// new extended header   {  	int MinId = reader.ReadInt32 ();  	// new field in WDB2  	int MaxId = reader.ReadInt32 ();  	// new field in WDB2  	int locale = reader.ReadInt32 ();  	// new field in WDB2  	int unk5 = reader.ReadInt32 ();  	// new field in WDB2  	if (MaxId != 0) {  		var diff = MaxId - MinId + 1;  		// blizzard is weird people...  		reader.ReadBytes (diff * 4);  		// an index for rows  		reader.ReadBytes (diff * 2);  		// a memory allocation bank  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: if (build > 12880)// new extended header   {  	int MinId = reader.ReadInt32 ();  	// new field in WDB2  	int MaxId = reader.ReadInt32 ();  	// new field in WDB2  	int locale = reader.ReadInt32 ();  	// new field in WDB2  	int unk5 = reader.ReadInt32 ();  	// new field in WDB2  	if (MaxId != 0) {  		var diff = MaxId - MinId + 1;  		// blizzard is weird people...  		reader.ReadBytes (diff * 4);  		// an index for rows  		reader.ReadBytes (diff * 2);  		// a memory allocation bank  	}  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: if (MaxId != 0) {  	var diff = MaxId - MinId + 1;  	// blizzard is weird people...  	reader.ReadBytes (diff * 4);  	// an index for rows  	reader.ReadBytes (diff * 2);  	// a memory allocation bank  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: if (MaxId != 0) {  	var diff = MaxId - MinId + 1;  	// blizzard is weird people...  	reader.ReadBytes (diff * 4);  	// an index for rows  	reader.ReadBytes (diff * 2);  	// a memory allocation bank  }  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: reader.ReadBytes (diff * 4);  
Magic Number,dbc2sql,DB2Reader,C:\repos\AwkwardDev_StrawberryTools\Source\DBC and DB2 Viewer\DBC Viewer\Readers\DB2Reader.cs,DB2Reader,The following statement contains a magic number: reader.ReadBytes (diff * 2);  
