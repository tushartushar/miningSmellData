Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The method has 152 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,The method has 85 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DisplayMainTab,The method has 113 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The method has 77 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeries,The method has 63 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_BookmarkAnime,The method has 66 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The method has 70 lines of code.
Long Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Cancel,The method has 67 lines of code.
Long Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The method has 193 lines of code.
Long Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,The method has 70 lines of code.
Long Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,Init,The method has 73 lines of code.
Long Method,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The method has 64 lines of code.
Long Method,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,SetRandomEpisode,The method has 66 lines of code.
Long Method,Shoko.Desktop.Forms,RandomSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomSeriesForm.xaml.cs,GetSeriesForGroupFilter,The method has 69 lines of code.
Long Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The method has 73 lines of code.
Long Method,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The method has 63 lines of code.
Long Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,FormatExceptionForUser,The method has 62 lines of code.
Long Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,SysInfoToString,The method has 64 lines of code.
Long Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,ExceptionToString,The method has 62 lines of code.
Long Method,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The method has 105 lines of code.
Long Method,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The method has 78 lines of code.
Long Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,SetNextEpisode,The method has 68 lines of code.
Long Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The method has 72 lines of code.
Long Method,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,ShowChildWrappers,The method has 84 lines of code.
Long Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,SetupClient,The method has 79 lines of code.
Long Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,GetServerSettings,The method has 92 lines of code.
Long Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,SaveServerSettings,The method has 103 lines of code.
Long Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The method has 70 lines of code.
Long Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,btnPlaylistAdd_Click,The method has 73 lines of code.
Long Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The method has 81 lines of code.
Long Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The method has 89 lines of code.
Long Method,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The method has 69 lines of code.
Long Method,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,The method has 63 lines of code.
Long Method,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,lbEpisodes_MouseDoubleClick,The method has 61 lines of code.
Long Method,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,MultipleFilesControl,The method has 132 lines of code.
Long Method,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The method has 62 lines of code.
Long Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The method has 110 lines of code.
Long Method,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The method has 75 lines of code.
Long Method,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,The method has 70 lines of code.
Long Method,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The method has 64 lines of code.
Long Method,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The method has 101 lines of code.
Long Method,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The method has 78 lines of code.
Long Method,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,DownloadImage,The method has 72 lines of code.
Complex Method,Shoko.Desktop.DataTemplateSelectors,BreadCrumbTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\BreadCrumbTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.DataTemplateSelectors,MainListTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop.DataTemplateSelectors,GroupsSeriesDataTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\GroupsSeriesDataTemplateSelector.cs,SelectTemplate,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,Cyclomatic complexity of the method is 30
Complex Method,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadLegacySettingsFromFile,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LocateLegacyConfigFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,btnSwitchUser_Click,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_Loaded,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,tabFileManager_SelectionChanged,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DisplayMainTab,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeriesOld,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeries,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,RefreshPinnedSeries,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,RefreshPlayList,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowDashMetroView,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_CreateSeriesFromAnime,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_AvdumpFile,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_BookmarkAnime,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Edit,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Save,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Delete,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Cancel,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,GroupFilterSortMoveUpDown,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeleteFilterSort,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeletePlaylistItem,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,lbGroupsSeries_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,HighlightMainListItem,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 52
Complex Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,Cyclomatic complexity of the method is 46
Complex Method,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,Init,Cyclomatic complexity of the method is 30
Complex Method,Shoko.Desktop.Forms,GroupFilterSortingForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterSortingForm.xaml.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.Forms,ManageCustomTags,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ManageCustomTags.xaml.cs,CommandBinding_DeleteCustomTag,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Forms,MoveSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MoveSeries.xaml.cs,btnOK_Click,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,SetRandomEpisode,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,GetSeriesForGroupFilter,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,GetSeriesForGroup,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.Forms,RandomSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomSeriesForm.xaml.cs,GetSeriesForGroupFilter,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,cboEpisodeType_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,cboEpisodeType_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,Cyclomatic complexity of the method is 35
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleSeriesName_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleSeriesOverview_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeTitle_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,Cyclomatic complexity of the method is 23
Complex Method,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,SysInfoToString,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,ExceptionToString,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,TakeScreenshotPrivate,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Utilities,UserCulture,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UserCulture.cs,GetClosestMatch,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.Utilities,ExtensionMethods,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\ExtensionMethods.cs,GetSortDescription,Cyclomatic complexity of the method is 44
Complex Method,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,Cyclomatic complexity of the method is 31
Complex Method,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,Cyclomatic complexity of the method is 22
Complex Method,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveSeries,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveEpisode,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,SetNextEpisode,Cyclomatic complexity of the method is 21
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,GetAllEpisodes,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,PopulatePlaylistObjects,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Desktop.ViewModel.Server,VM_GroupFilter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_GroupFilter.cs,GetDirectChildren,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.ViewModel,VM_FanartContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_FanartContainer.cs,VM_FanartContainer,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.ViewModel,VM_PosterContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_PosterContainer.cs,VM_PosterContainer,Cyclomatic complexity of the method is 24
Complex Method,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshData,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateAll,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateHeirarchy,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateHeirarchy,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,setRelationinExclusion,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveUpNamingLanguage,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveDownNamingLanguage,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RefreshNamingLanguages,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls,AnimeFolderSummaryControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeFolderSummaryControl.xaml.cs,RefreshRecords,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,playlistMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,Cyclomatic complexity of the method is 42
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,Cyclomatic complexity of the method is 43
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,CommandBinding_DeleteCustomTag,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnPlayNextEp_Click,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_PlayEpisode,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_PlayEpisode,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_DeleteFile,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,DisplayFiles,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,lbEpisodes_MouseDoubleClick,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,RefreshEpisodes,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,PopulateToolbars,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,HighlightEpisode,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,RefreshScripts,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,btnSearch_Click,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_RestoreFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_DeleteFile,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,SaveSettings,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls,MultipleFilesDetailControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesDetailControl.xaml.cs,CommandBinding_DeleteFile,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,SeriesSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\SeriesSearchControl.xaml.cs,cboSearchType_SelectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,communityWorker_DoWork,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,communityWorker_RunWorkerCompleted,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,DgVideos_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_IgnoreFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_DeleteFile,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RehashFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RescanFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,SetConfirmDetails,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,btnSave_Click,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,CommandBinding_DeleteUser,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Desktop.UserControls.Community,TraktSeriesData,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,CompareTraktLinks,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,HandleWebUIRequest,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,GetNowPlayingFile,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,Cyclomatic complexity of the method is 19
Complex Method,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,FindChangedFiles,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,GetAutoFileForEpisode,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Desktop.ViewModel.Helpers,GroupSearchFilterHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Helpers\GroupSearchFilterHelper.cs,EvaluateGroupTextSearch,Cyclomatic complexity of the method is 7
Complex Method,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,GetFileName,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,GetEntityID,Cyclomatic complexity of the method is 27
Long Parameter List,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The method has 4 parameters.
Long Parameter List,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The method has 4 parameters.
Long Parameter List,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The method has 5 parameters.
Long Parameter List,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The method has 5 parameters.
Long Parameter List,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The method has 6 parameters.
Long Parameter List,Shoko.Desktop.Forms,FolderBrowser,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FolderBrowser.xaml.cs,RecursiveAddFromDirectory,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.Forms,HTMLEscapedCharactersConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FeedForm.xaml.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.Forms,HTMLEscapedCharactersConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FeedForm.xaml.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.Forms,DialogInteger,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DialogInteger.xaml.cs,Init,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,LinkAniDBToMAL,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,Init,The method has 5 parameters.
Long Parameter List,Shoko.Desktop.Forms,SearchTvDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTvDBForm.xaml.cs,Init,The method has 5 parameters.
Long Parameter List,Shoko.Desktop.Forms,SelectMALStartForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectMALStartForm.xaml.cs,Init,The method has 6 parameters.
Long Parameter List,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,Init,The method has 10 parameters.
Long Parameter List,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,Init,The method has 10 parameters.
Long Parameter List,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The method has 5 parameters.
Long Parameter List,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,BitBlt,The method has 9 parameters.
Long Parameter List,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,RunBackgroundWork,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshData,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,ImageSourceConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\ImageSourceConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,ImageSourceConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\ImageSourceConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,InverseBooleanConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\InverseBooleanConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,InverseBooleanConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\InverseBooleanConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,InverseBooleanToVisibilityConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\InverseBooleanToVisibilityConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,InverseBooleanToVisibilityConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\InverseBooleanToVisibilityConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,StringFormatConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\StringFormatConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,StringFormatConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\StringFormatConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,UriToImageConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\UriToImageConverter.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.WPFHelpers,UriToImageConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\UriToImageConverter.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,ArithmeticConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,ArithmeticConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,HideAllConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls,HideAllConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,Shoko.Desktop.UserControls.Community,TraktWorkerStatusContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,TraktWorkerStatusContainer,The method has 4 parameters.
Long Identifier,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The length of the parameter successfullyParsedVideoDuration is 31.
Long Statement,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The length of the statement  "	return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100); " is 177.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (null' text' string.Empty' MessageBoxButtons.OK' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 138.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (owner' text' string.Empty' MessageBoxButtons.OK' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 139.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (null' text' caption' MessageBoxButtons.OK' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 133.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (owner' text' caption' MessageBoxButtons.OK' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 134.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (null' text' caption' buttons' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 120.
Long Statement,Shoko.Desktop,FlexibleMessageBox,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FlexibleMessageBox.cs,Show,The length of the statement  "	return FlexibleMessageBoxForm.Show (owner' text' caption' buttons' MessageBoxIcon.None' MessageBoxDefaultButton.Button1); " is 121.
Long Statement,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The length of the statement  "				jmmDesktopInstallLocation = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{AD24689F-020C-4C53-B649-99BB49ED6238}_is1"' "InstallLocation"' null); " is 210.
Long Statement,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Migration_LoadError + " " + ex' Shoko.Commons.Properties.Resources.Migration_LoadError); " is 140.
Long Statement,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadLegacySettingsFromFile,The length of the statement  "			string jmmDesktopInstallLocation = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{AD24689F-020C-4C53-B649-99BB49ED6238}_is1"' "InstallLocation"' null); " is 217.
Long Statement,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LocateLegacyConfigFile,The length of the statement  "	MessageBoxResult dr = MessageBox.Show (Shoko.Commons.Properties.Resources.LocateSettingsFileQuestion' Shoko.Commons.Properties.Resources.LocateSettingsFile' MessageBoxButton.YesNo); " is 181.
Long Statement,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,DebugSettingsToLog,The length of the statement  "	string screenSize = Screen.PrimaryScreen.Bounds.Width.ToString () + "x" + Screen.PrimaryScreen.Bounds.Height.ToString (); " is 121.
Long Statement,Shoko.Desktop,App,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\App.xaml.cs,MigrateProgramDataLocation,The length of the statement  "		string oldApplicationPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.CommonApplicationData)' "JMMDesktop"); " is 133.
Long Statement,Shoko.Desktop,App,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\App.xaml.cs,MigrateProgramDataLocation,The length of the statement  "		string newApplicationPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.CommonApplicationData)' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Name); " is 187.
Long Statement,Shoko.Desktop,App,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\App.xaml.cs,UninstallJMMDesktop,The length of the statement  "		string jmmDesktopUninstallPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{AD24689F-020C-4C53-B649-99BB49ED6238}_is1"' "UninstallString"' null); " is 215.
Long Statement,Shoko.Desktop,App,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\App.xaml.cs,UninstallJMMDesktop,The length of the statement  "			MessageBoxResult dr = MessageBox.Show (Shoko.Commons.Properties.Resources.DuplicateInstallDetectedQuestion' Shoko.Commons.Properties.Resources.DuplicateInstallDetected' MessageBoxButton.YesNo); " is 193.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,btnUpdateMediaInfo_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Main_ProcessRunning' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 167.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The length of the statement  "		verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel)); " is 133.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The length of the statement  "		verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100); " is 158.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,showDashboardWorker_DoWork,The length of the statement  "	VM_Dashboard.Instance.RefreshData (opt.RefreshContinueWatching' opt.RefreshRecentAdditions' opt.RefreshOtherWidgets' opt.RecentAdditionType); " is 141.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DisplayMainTab,The length of the statement  "					if (VM_Dashboard.Instance.EpsWatchNext_Recent.Count == 0 && VM_Dashboard.Instance.SeriesMissingEps.Count == 0 && VM_Dashboard.Instance.MiniCalendar.Count == 0 && VM_Dashboard.Instance.RecommendationsWatch.Count == 0 && VM_Dashboard.Instance.RecommendationsDownload.Count == 0) { " is 278.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DisplayMainTab,The length of the statement  "				if (VM_MainListHelper.Instance.AllSeriesDictionary == null || VM_MainListHelper.Instance.AllSeriesDictionary.Count == 0) " is 120.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,btnToolbarSort_Click,The length of the statement  "	VM_MainListHelper.Instance.ViewGroups.SortDescriptions.Add (sortType.GetSortDescription (GroupFilterSortDirection.Asc)); " is 120.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,SetCulture,The length of the statement  "			result = FlexibleMessageBox.Show (Shoko.Commons.Properties.Resources.Language_Info' Shoko.Commons.Properties.Resources.Language_Switch' System.Windows.Forms.MessageBoxButtons.OKCancel' System.Windows.Forms.MessageBoxIcon.Information); " is 234.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,toggleStatusWorker_DoWork,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,toggleStatusWorker_DoWork,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,toggleStatusWorker_DoWork,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "		CL_Response<CL_AnimeSeries_User> response = VM_ShokoServer.Instance.ShokoServices.MoveSeries (request.UpdatedSeries.AnimeSeriesID' request.UpdatedSeries.AnimeGroupID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 214.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "		/*Dictionary<int' JMMServerBinary.Contract_AnimeGroup> grpsDict = new Dictionary<int' JMMServerBinary.Contract_AnimeGroup>();" is 125.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "                List<JMMServerBinary.Contract_AnimeGroup> grps = VM_ShokoServer.Instance.clientBinaryHTTP.GetAllGroupsAboveGroupInclusive(request.UpdatedSeries.AnimeGroupID'" is 157.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,moveSeriesWorker_DoWork,The length of the statement  "                List<JMMServerBinary.Contract_AnimeGroup> grpsOld = VM_ShokoServer.Instance.clientBinaryHTTP.GetAllGroupsAboveGroupInclusive(request.OldAnimeGroupID'" is 149.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_TvDB_ImagePoster> posters = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBPosters (null).CastList<VM_TvDB_ImagePoster> (); " is 132.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_MovieDB_Poster> moviePosters = VM_ShokoServer.Instance.ShokoServices.GetAllMovieDBPosters (null).CastList<VM_MovieDB_Poster> (); " is 136.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_TvDB_ImageWideBanner> banners = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBWideBanners (null).CastList<VM_TvDB_ImageWideBanner> (); " is 144.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_TvDB_ImageFanart> fanarts = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBFanart (null).CastList<VM_TvDB_ImageFanart> (); " is 131.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_MovieDB_Fanart> movieFanarts = VM_ShokoServer.Instance.ShokoServices.GetAllMovieDBFanart (null).CastList<VM_MovieDB_Fanart> (); " is 135.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_TvDB_Episode> eps = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBEpisodes (null).CastList<VM_TvDB_Episode> (); " is 121.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_Trakt_ImagePoster> traktPosters = VM_ShokoServer.Instance.ShokoServices.GetAllTraktPosters (null).CastList<VM_Trakt_ImagePoster> (); " is 140.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_Trakt_ImageFanart> traktFanarts = VM_ShokoServer.Instance.ShokoServices.GetAllTraktFanart (null).CastList<VM_Trakt_ImageFanart> (); " is 139.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,downloadImagesWorker_DoWork,The length of the statement  "	List<VM_Trakt_Episode> traktEpisodes = VM_ShokoServer.Instance.ShokoServices.GetAllTraktEpisodes (null).CastList<VM_Trakt_Episode> (); " is 134.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_CreateSeriesFromAnime,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.ERROR_SeriesExists' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 158.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_ShowPinnedSeries,The length of the statement  "				ser = (VM_AnimeSeries_User)VM_ShokoServer.Instance.ShokoServices.GetSeries (valObjID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 133.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_ScanFolder,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Import_Running' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 162.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_Delete,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Filter_DeleteGroup' gf.GroupFilterName)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 225.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Filter_DeleteCondition' gfc.NiceDescription)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 230.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeleteFilterCondition,The length of the statement  "							if (gfc.ConditionOperator == gf.Obs_FilterConditions [i].ConditionOperator && gfc.ConditionParameter == gf.Obs_FilterConditions [i].ConditionParameter && gfc.ConditionType == gf.Obs_FilterConditions [i].ConditionType) { " is 219.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeleteFilterSort,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Filter_DeleteSort)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 204.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeletePlaylist,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Playlist_Delete' pl.PlaylistName)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 219.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DeletePlaylistItem,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Filter_PlaylistMissing' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 162.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_RunImport,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Import_Running' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 162.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_RemoveMissingFiles,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Main_RunProcess)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 202.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_RemoveMissingFiles,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Process_Running' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 163.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_SyncMyList,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Process_Running' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 163.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_SyncVotes,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Process_Running' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 163.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_SyncMALUp,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Process_Queued' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 162.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_SyncMALDown,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Process_Queued' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 162.
Long Statement,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,lbGroupsSeries_SelectionChanged,The length of the statement  "			VM_MainListHelper.Instance.LastGroupForGF [VM_MainListHelper.Instance.CurrentOpenGroupFilter] = lbGroupsSeries.SelectedIndex; " is 125.
Long Statement,Shoko.Desktop.Forms,ChangePasswordForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ChangePasswordForm.xaml.cs,btnSave_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.User_PasswordMatch' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 158.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,DeleteFilesForm_Closing,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.DeleteFiles_Wait' Shoko.Commons.Properties.Resources.Stop' MessageBoxButton.OK' MessageBoxImage.Information); " is 161.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,btnOK_Click,The length of the statement  "	MessageBoxResult res = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 138.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		dict = VM_ShokoServer.Instance.FolderProviders.ToDictionary (a => a.CloudID' a => new Tuple<string' BitmapImage> (a.Provider' a.Bitmap)); " is 137.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		vids = VM_ShokoServer.Instance.ShokoServices.GetFilesByGroupAndResolution (AnimeID' GroupVideoQuality.GroupName' GroupVideoQuality.Resolution' GroupVideoQuality.VideoSource' GroupVideoQuality.VideoBitDepth' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoDetailed> (); " is 284.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		dict = VM_ShokoServer.Instance.FolderProviders.ToDictionary (a => a.CloudID' a => new Tuple<string' BitmapImage> (a.Provider' a.Bitmap)); " is 137.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		vids = VM_ShokoServer.Instance.ShokoServices.GetFilesByGroup (AnimeID' GroupFileSummary.GroupName' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoDetailed> (); " is 176.
Long Statement,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,Init,The length of the statement  "		dict = VM_ShokoServer.Instance.FolderProviders.ToDictionary (a => a.CloudID' a => new Tuple<string' BitmapImage> (a.Provider' a.Bitmap)); " is 137.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_SelectDate' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_RatingValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 147.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.GroupFilter_IntegerOnly' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 151.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_DaysValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 145.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_GroupSelectionRequired' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 158.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 146.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,PopulateCustomTags,The length of the statement  "	foreach (CustomTag tag in VM_ShokoServer.Instance.AllCustomTags.OrderBy (a => a.TagName.ToLower (CultureInfo.InvariantCulture))) " is 128.
Long Statement,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,PopulateAnimeGroups,The length of the statement  "	List<VM_AnimeGroup_User> grpsRaw = VM_ShokoServer.Instance.ShokoServices.GetAllGroups (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeGroup_User> (); " is 166.
Long Statement,Shoko.Desktop.Forms,GroupFilterSortingForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterSortingForm.xaml.cs,btnConfirm_Click,The length of the statement  "	groupFilterSortingCriteria.SortType = Commons.Extensions.Models.GetEnumForText_Sorting (cboSortType.SelectedItem.ToString ()); " is 126.
Long Statement,Shoko.Desktop.Forms,GroupFilterSortingForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterSortingForm.xaml.cs,btnConfirm_Click,The length of the statement  "	groupFilterSortingCriteria.SortDirection = Commons.Extensions.Models.GetEnumForText_SortDirection (cboDirection.SelectedItem.ToString ()); " is 138.
Long Statement,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,ChkIsWatched_Checked,The length of the statement  "	if (!checkchange && importFldr.CloudID.HasValue && chkDropDestination.IsChecked.HasValue && chkDropDestination.IsChecked.Value) { " is 129.
Long Statement,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "		if (chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value) { " is 151.
Long Statement,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_DropSourceDestCheck' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 167.
Long Statement,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,btnSave_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_ImportFolderLocationCheck' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 173.
Long Statement,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,Init,The length of the statement  "				comboProvider.SelectedItem = VM_ShokoServer.Instance.FolderProviders.FirstOrDefault (a => a.CloudID == ifldr.CloudID.Value); " is 124.
Long Statement,Shoko.Desktop.Forms,ManageCustomTags,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ManageCustomTags.xaml.cs,btnAddCustomTag_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.CustomTag_EnterName' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 159.
Long Statement,Shoko.Desktop.Forms,MoveSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MoveSeries.xaml.cs,btnOK_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_GroupSelectionRequired' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 170.
Long Statement,Shoko.Desktop.Forms,MoveSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MoveSeries.xaml.cs,btnOK_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_GroupNameRequired' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 165.
Long Statement,Shoko.Desktop.Forms,MoveSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MoveSeries.xaml.cs,Init,The length of the statement  "	List<VM_AnimeGroup_User> grpsRaw = VM_ShokoServer.Instance.ShokoServices.GetAllGroups (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeGroup_User> (); " is 166.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnAnimeSearch_Click,The length of the statement  "		SearchResults.ReplaceRange (VM_ShokoServer.Instance.ShokoServices.OnlineAnimeTitleSearch (txtAnimeSearch.Text.Replace ("'"' "`").Trim ()).Cast<VM_AnimeSearch> ()); " is 163.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.NewSeries_SelectAnime' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 161.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_GroupSelectionRequired' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 170.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_GroupNameRequired' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 165.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "		CL_Response<CL_AnimeSeries_User> response = VM_ShokoServer.Instance.ShokoServices.CreateSeriesFromAnime (animeID' groupID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 170.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,btnConfirm_Click,The length of the statement  "			MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,Init,The length of the statement  "		List<VM_AnimeGroup_User> grpsRaw = VM_ShokoServer.Instance.ShokoServices.GetAllGroups (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeGroup_User> (); " is 166.
Long Statement,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,Init,The length of the statement  "		List<VM_AnimeGroup_User> grpsRaw = VM_ShokoServer.Instance.ShokoServices.GetAllGroups (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeGroup_User> (); " is 166.
Long Statement,Shoko.Desktop.Forms,PlayVideosForEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\PlayVideosForEpisodeForm.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.Forms,RandomEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RandomEpisodeForm.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.Forms,RateSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RateSeriesForm.xaml.cs,RateSeriesForm_DataContextChanged,The length of the statement  "	TraktLinkExists = ser.AniDBAnime.AniDBAnime != null && ser.AniDBAnime.AniDBAnime.AniDB_AnimeCrossRefs != null && ser.AniDBAnime.AniDBAnime.AniDB_AnimeCrossRefs.TraktCrossRefExists; " is 180.
Long Statement,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnUseThisExisting_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Search_InvalidMAL' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 157.
Long Statement,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnUseThisExisting_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Search_EnterTitle' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 157.
Long Statement,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnSearch_Click,The length of the statement  "		VM_CrossRef_AniDB_MAL_Response xref = (VM_CrossRef_AniDB_MAL_Response)VM_ShokoServer.Instance.ShokoServices.GetMALCrossRefWebCache (AnimeID); " is 141.
Long Statement,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnSearch_Click,The length of the statement  "		MALSearchResults = VM_ShokoServer.Instance.ShokoServices.SearchMAL (txtSearch.Text.Replace ("`"' "'").Trim ()).CastList<VM_MALAnime_Response> (); " is 145.
Long Statement,Shoko.Desktop.Forms,SearchMovieDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMovieDBForm.xaml.cs,btnUseThisExisting_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Search_InvalidMovieID' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 161.
Long Statement,Shoko.Desktop.Forms,SearchMovieDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMovieDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		CrossRef_AniDB_Other_Response = VM_ShokoServer.Instance.ShokoServices.GetOtherAnimeCrossRefWebCache (AnimeID' (int)CrossRefType.MovieDB); " is 137.
Long Statement,Shoko.Desktop.Forms,SearchMovieDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMovieDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		MovieDBSearchResults = VM_ShokoServer.Instance.ShokoServices.SearchTheMovieDB (txtSearch.Text.Replace ("`"' "'").Trim ()).CastList<VM_MovieDBMovieSearch_Response> (); " is 166.
Long Statement,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnUseThis_Click,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBTrakt (xref.AnimeID' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TraktID' xref.TraktSeasonNumber' xref.TraktStartEpisodeNumber' null); " is 206.
Long Statement,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnSearch_Click,The length of the statement  "		CrossRef_AniDB_TraktResult.ReplaceRange (VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefWebCache (AnimeID' false).Cast<VM_CrossRef_AniDB_TraktV2> ()); " is 157.
Long Statement,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnSearch_Click,The length of the statement  "		TraktSeriesSearchResults.ReplaceRange (VM_ShokoServer.Instance.ShokoServices.SearchTrakt (txtSearch.Text.Replace ("`"' "'").Trim ())); " is 134.
Long Statement,Shoko.Desktop.Forms,SearchTvDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTvDBForm.xaml.cs,btnUseThisExisting_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Search_InvalidTvDB' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 158.
Long Statement,Shoko.Desktop.Forms,SearchTvDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTvDBForm.xaml.cs,btnUseThis_Click,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBTvDB (xref.AnimeID' xref.AniDBStartEpisodeType' xref.AniDBStartEpisodeNumber' xref.TvDBID' xref.TvDBSeasonNumber' xref.TvDBStartEpisodeNumber' null); " is 202.
Long Statement,Shoko.Desktop.Forms,SearchTvDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTvDBForm.xaml.cs,CommandBinding_UseThis,The length of the statement  "			frm.Init (AnimeID' AnimeName' enEpisodeType.Episode' 1' searchResult.SeriesID' 1' 1' searchResult.SeriesName' Anime' null); " is 123.
Long Statement,Shoko.Desktop.Forms,SearchTvDBForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTvDBForm.xaml.cs,btnSearch_Click,The length of the statement  "		TVDBSeriesSearchResults = VM_ShokoServer.Instance.ShokoServices.SearchTheTvDB (txtSearch.Text.Replace ("`"' "'").Trim ()).CastList<VM_TVDB_Series_Search_Response> (); " is 166.
Long Statement,Shoko.Desktop.Forms,SelectGroupSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectGroupSeriesForm.xaml.cs,Init,The length of the statement  "		List<VM_AnimeGroup_User> grpsRaw = VM_MainListHelper.Instance.AllGroupsDictionary.Values.OrderBy (a => a.SortName).ToList (); " is 125.
Long Statement,Shoko.Desktop.Forms,SelectGroupSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectGroupSeriesForm.xaml.cs,Init,The length of the statement  "		List<VM_AnimeSeries_User> sersRaw = VM_MainListHelper.Instance.AllSeriesDictionary.Values.OrderBy (a => a.SortName).ToList (); " is 126.
Long Statement,Shoko.Desktop.Forms,SelectMALStartForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Select_ValidEpisode' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 159.
Long Statement,Shoko.Desktop.Forms,SelectMALStartForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBMALUpdated (AnimeID' MALID' MALTitle' OldEpType.Value' OldEpNumber.Value' epType' epNumber); " is 145.
Long Statement,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Trakt_NoSeasons' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 155.
Long Statement,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "		string res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBTrakt (AnimeID' AnimeEpisodeType' AnimeEpisodeNumber' TraktID' TraktSeason' TraktEpisodeNumber' CrossRef_AniDB_TraktV2ID); " is 182.
Long Statement,Shoko.Desktop.Forms,SelectTraktSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTraktSeasonForm.xaml.cs,Init,The length of the statement  "	foreach (VM_AniDB_Episode contract in VM_ShokoServer.Instance.ShokoServices.GetAniDBEpisodesForAnime (AnimeID).Cast<VM_AniDB_Episode> ()) { " is 139.
Long Statement,Shoko.Desktop.Forms,SelectTvDBEpisodeForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBEpisodeForm.xaml.cs,CommandBinding_UseThis,The length of the statement  "			string res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBTvDBEpisode (AnimeEpisode.AniDB_EpisodeID' tvEp.Id' AnimeID); " is 121.
Long Statement,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.TvDB_NoSeasons' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 154.
Long Statement,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.TvDB_NoAniDB' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 152.
Long Statement,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.TvDB_NoTvDB' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 151.
Long Statement,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,btnUpdate_Click,The length of the statement  "		string res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBTvDB (AnimeID' AnimeEpisodeType' AnimeEpisodeNumber' TvDBID' TvDBSeason' TvDBEpisodeNumber' CrossRef_AniDB_TvDBV2ID); " is 177.
Long Statement,Shoko.Desktop.Forms,SelectTvDBSeasonForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectTvDBSeasonForm.xaml.cs,Init,The length of the statement  "	foreach (VM_AniDB_Episode contract in VM_ShokoServer.Instance.ShokoServices.GetAniDBEpisodesForAnime (AnimeID).Cast<VM_AniDB_Episode> ()) { " is 139.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,EvaluateVisibility,The length of the statement  "	// If we have images path set to server path hide the button and hint text to prevent accidental presses (i.e. user error) " is 122.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnChangeLanguage_Click,The length of the statement  "		List<VM_TvDB_Language> languages = VM_ShokoServer.Instance.ShokoServices.GetTvDBLanguages ().CastList<VM_TvDB_Language> (); " is 123.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_TvDB_ImagePoster> posters = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBPosters (null).CastList<VM_TvDB_ImagePoster> (); " is 132.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_MovieDB_Poster> moviePosters = VM_ShokoServer.Instance.ShokoServices.GetAllMovieDBPosters (null).CastList<VM_MovieDB_Poster> (); " is 136.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_TvDB_ImageWideBanner> banners = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBWideBanners (null).CastList<VM_TvDB_ImageWideBanner> (); " is 144.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_TvDB_ImageFanart> fanarts = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBFanart (null).CastList<VM_TvDB_ImageFanart> (); " is 131.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_MovieDB_Fanart> movieFanarts = VM_ShokoServer.Instance.ShokoServices.GetAllMovieDBFanart (null).CastList<VM_MovieDB_Fanart> (); " is 135.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_TvDB_Episode> eps = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBEpisodes (null).CastList<VM_TvDB_Episode> (); " is 121.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_Trakt_ImagePoster> traktPosters = VM_ShokoServer.Instance.ShokoServices.GetAllTraktPosters (null).CastList<VM_Trakt_ImagePoster> (); " is 140.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_Trakt_ImageFanart> traktFanarts = VM_ShokoServer.Instance.ShokoServices.GetAllTraktFanart (null).CastList<VM_Trakt_ImageFanart> (); " is 139.
Long Statement,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,btnUpdateImages_Click,The length of the statement  "	List<VM_Trakt_Episode> traktEpisodes = VM_ShokoServer.Instance.ShokoServices.GetAllTraktEpisodes (null).CastList<VM_Trakt_Episode> (); " is 134.
Long Statement,Shoko.Desktop.UserControls.Settings,WebCacheBasicSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\WebCacheBasicSettings.xaml.cs,btnSave_Click,The length of the statement  "	MessageBox.Show (Shoko.Commons.Properties.Resources.Success' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 155.
Long Statement,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The length of the statement  "		VM_VideoDetailed vd = (VM_VideoDetailed)VM_ShokoServer.Instance.ShokoServices.GetVideoDetailed (info.VideoLocalId' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 162.
Long Statement,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The length of the statement  "		CL_AnimeEpisode_User ep = VM_ShokoServer.Instance.ShokoServices.GetEpisodeByAniDBEpisodeID (vd.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 158.
Long Statement,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.TraktScrobble (ep.AnimeEpisodeID' (int)ScrobblePlayingType.episode' (int)percentagePlayed' (int)scrobblePlayingStatus); " is 157.
Long Statement,Shoko.Desktop.Utilities,TrulyObservableCollection,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TrulyObservableCollection.cs,ItemPropertyChanged,The length of the statement  "	NotifyCollectionChangedEventArgs args = new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Replace' sender' sender' IndexOf ((T)sender)); " is 154.
Long Statement,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,AssemblyBuildDate,The length of the statement  "		dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2)); " is 126.
Long Statement,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,ExceptionToEventLog,The length of the statement  "		EventLog.WriteEntry (AppDomain.CurrentDomain.FriendlyName' Environment.NewLine + _strException' EventLogEntryType.Error); " is 121.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.AnimeNameEnglish' Models.Constants.FileRenameTag_Tag.AnimeNameEnglish)); " is 129.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.AnimeNameKanji' Models.Constants.FileRenameTag_Tag.AnimeNameKanji)); " is 125.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.AnimeNameRomaji' Models.Constants.FileRenameTag_Tag.AnimeNameRomaji)); " is 127.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.EpisodeNameEnglish' Models.Constants.FileRenameTag_Tag.EpisodeNameEnglish)); " is 133.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.EpisodeNameRomaji' Models.Constants.FileRenameTag_Tag.EpisodeNameRomaji)); " is 131.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.EpisodeNumber' Models.Constants.FileRenameTag_Tag.EpisodeNumber)); " is 123.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.GroupLongName' Models.Constants.FileRenameTag_Tag.GroupLongName)); " is 123.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.GroupShortName' Models.Constants.FileRenameTag_Tag.GroupShortName)); " is 125.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.VideoBitDepth' Models.Constants.FileRenameTag_Tag.VideoBitDepth)); " is 123.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTags,The length of the statement  "	allTags.Add (new RenameTag (Constants.FileRenameTag_Name.OriginalFileName' Models.Constants.FileRenameTag_Tag.OriginalFileName)); " is 129.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.AnimeType' Models.Constants.FileRenameTest_Test.AnimeType)); " is 120.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.DubLanguage' Models.Constants.FileRenameTest_Test.DubLanguage)); " is 124.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.EpisodeCount' Models.Constants.FileRenameTest_Test.EpisodeCount)); " is 126.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.EpisodeNumber' Models.Constants.FileRenameTest_Test.EpisodeNumber)); " is 128.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.FileVersion' Models.Constants.FileRenameTest_Test.FileVersion)); " is 124.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.RipSource' Models.Constants.FileRenameTest_Test.RipSource)); " is 120.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.SubLanguage' Models.Constants.FileRenameTest_Test.SubLanguage)); " is 124.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoBitDepth' Models.Constants.FileRenameTest_Test.VideoBitDepth)); " is 128.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoResolutionWidth' Models.Constants.FileRenameTest_Test.VideoResolutionWidth)); " is 142.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.VideoResolutionHeight' Models.Constants.FileRenameTest_Test.VideoResolutionHeight)); " is 144.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.ManuallyLinked' Models.Constants.FileRenameTest_Test.ManuallyLinked)); " is 130.
Long Statement,Shoko.Desktop.Utilities,RenameHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\RenameHelper.cs,GetAllTests,The length of the statement  "	allTests.Add (new RenameTest (Constants.FileRenameTest_Name.HasEpisodes' Models.Constants.FileRenameTest_Test.HasEpisodes)); " is 124.
Long Statement,Shoko.Desktop.Utilities,ShowSelectedInExplorer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\ShowSelectedInExplorer.cs,PathToFileSystemInfo,The length of the statement  "		if (fixedPath.EndsWith (Path.DirectorySeparatorChar.ToString ()) || fixedPath.EndsWith (Path.AltDirectorySeparatorChar.ToString ())) { " is 134.
Long Statement,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,GetScrollViewers,The length of the statement  "	for (DependencyObject element = control; element != null; element = System.Windows.Media.VisualTreeHelper.GetParent (element)) " is 126.
Long Statement,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,StartJMMServer,The length of the statement  "	string JMMServerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{0BA2D22B-A0B7-48F8-8AA1-BAAEFC2034CB}_is1"' "InstallLocation"' null); " is 205.
Long Statement,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,ShowErrorMessage,The length of the statement  "	FlexibleMessageBox.Show (ex.Message' Shoko.Commons.Properties.Resources.Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,GetFanartFilenames,The length of the statement  "	if (!string.IsNullOrEmpty (DefaultImageFanart.FullImagePathOnlyExisting) && File.Exists (DefaultImageFanart.FullImagePathOnlyExisting)) { " is 137.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,BestLevenshteinDistanceMatches,The length of the statement  "	List<VM_AniDB_Anime> animes = VM_ShokoServer.Instance.ShokoServices.GetAllAnime ().Cast<VM_AniDB_Anime> ().OrderBy (a => a.MainTitle).ToList (); " is 144.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,BestLevenshteinDistanceMatches,The length of the statement  "	List<VM_AniDB_Anime> ret = animes.Select (a => new Tuple<int' VM_AniDB_Anime> (a.LowestLevenshteinDistance (input)' a)).OrderBy (a => a.Item1).Take (maxResults).Select (a => a.Item2).ToList (); " is 193.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,BestLevenshteinDistanceMatchesCache,The length of the statement  "	List<VM_AniDB_Anime> newanimes = VM_ShokoServer.Instance.ShokoServices.GetAllAnime ().Cast<VM_AniDB_Anime> ().OrderBy (a => a.MainTitle).ToList (); " is 147.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,BestLevenshteinDistanceMatchesCache,The length of the statement  "	List<VM_AniDB_Anime> ret = animes.Select (a => new Tuple<int' VM_AniDB_Anime> (a.LowestLevenshteinDistance (input)' a)).OrderBy (a => a.Item1).Take (maxResults).Select (a => a.Item2).ToList (); " is 193.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == today.Day && WatchedDate.Value.Month == today.Month && WatchedDate.Value.Year == today.Year) { " is 123.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetLastWatchedDescription,The length of the statement  "		if (WatchedDate.Value.Day == yesterday.Day && WatchedDate.Value.Month == yesterday.Month && WatchedDate.Value.Year == yesterday.Year) { " is 135.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The length of the statement  "			List<VM_CrossRef_AniDB_TvDBV2> tvDBCrossRef = tvSummary.CrossRefTvDBV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList (); " is 132.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 161.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The length of the statement  "		List<VM_CrossRef_AniDB_TvDBV2> tvDBCrossRef = tvSummary.CrossRefTvDBV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList () ?? new List<VM_CrossRef_AniDB_TvDBV2> (); " is 173.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The length of the statement  "					int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 161.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The length of the statement  "			List<VM_CrossRef_AniDB_TraktV2> traktCrossRefs = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList (); " is 139.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The length of the statement  "					int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 164.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The length of the statement  "			List<VM_CrossRef_AniDB_TraktV2> traktCrossRef = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList () ?? new List<VM_CrossRef_AniDB_TraktV2> (); " is 180.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The length of the statement  "						int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1); " is 164.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,GetAllVideoLocals,The length of the statement  "		return VM_ShokoServer.Instance.ShokoServices.GetVideoLocalsForEpisode (AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoLocal> ().OrderBy (a => a.FileName).ToList (); " is 193.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,RefreshFilesForEpisode,The length of the statement  "		filesForEpisode = VM_ShokoServer.Instance.ShokoServices.GetFilesForEpisode (AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoDetailed> ().OrderByDescending (a => a.GetOverallVideoSourceRanking ()).ToList (); " is 234.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,PopulateSerieInfo,The length of the statement  "	AllSeries = new HashSet<int> (series.Values.Where (a => allgroups.Contains (a.AnimeGroupID)).Select (a => a.AnimeSeriesID)); " is 124.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,PopulateSerieInfo,The length of the statement  "	DirectSeries = new HashSet<int> (series.Values.Where (a => a.AnimeGroupID == AnimeGroupID).Select (a => a.AnimeSeriesID)); " is 122.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,RecursiveGetGroups,The length of the statement  "	List<VM_AnimeGroup_User> ls = groups.Values.Where (a => a.AnimeGroupParentID.HasValue && a.AnimeGroupParentID.Value == initialgrp.AnimeGroupID).ToList (); " is 154.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,GetPosterFilenames,The length of the statement  "	if (!string.IsNullOrEmpty (DefaultSeries.AniDBAnime.AniDBAnime.DefaultPosterPathNoBlanks) && File.Exists (DefaultSeries.AniDBAnime.AniDBAnime.DefaultPosterPathNoBlanks)) { " is 171.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,GetPosterFilenames,The length of the statement  "		if (!string.IsNullOrEmpty (ser.AniDBAnime.AniDBAnime.DefaultPosterPathNoBlanks) && File.Exists (ser.AniDBAnime.AniDBAnime.DefaultPosterPathNoBlanks)) " is 149.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,GetFanartFilenames,The length of the statement  "	if (!string.IsNullOrEmpty (DefaultSeries.AniDBAnime.AniDBAnime.DefaultImageFanart.FullImagePathOnlyExisting) && File.Exists (DefaultSeries.AniDBAnime.AniDBAnime.DefaultImageFanart.FullImagePathOnlyExisting)) { " is 209.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,GetDirectChildren,The length of the statement  "	if (VM_MainListHelper.Instance.CurrentGroupFilter != null && VM_MainListHelper.Instance.CurrentGroupFilter.IsApplyToSeries) { " is 125.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeGroup_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeGroup_User.cs,Save,The length of the statement  "		CL_Response<CL_AnimeGroup_User> response = VM_ShokoServer.Instance.ShokoServices.SaveGroup (ToRequest ()' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 153.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeSeries_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeSeries_User.cs,RefreshEpisodes,The length of the statement  "		List<VM_AnimeEpisode_User> eps = VM_ShokoServer.Instance.ShokoServices.GetEpisodesForSeries (AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 189.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeSeries_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeSeries_User.cs,RefreshEpisodes,The length of the statement  "		logger.Info ("Got episode data from service: {0} in {1} ms"' AniDBAnime.AniDBAnime.FormattedTitle' ts.TotalMilliseconds); " is 121.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_AnimeSeries_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeSeries_User.cs,Save,The length of the statement  "		CL_Response<CL_AnimeSeries_User> response = VM_ShokoServer.Instance.ShokoServices.SaveSeries (ToSaveRequest ()' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 159.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,PopulatePlaylistObjects,The length of the statement  "				ser = (VM_AnimeSeries_User)VM_ShokoServer.Instance.ShokoServices.GetSeries (objID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 130.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,PopulatePlaylistObjects,The length of the statement  "			VM_AnimeEpisode_User ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetEpisode (objID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 152.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_GroupFilter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_GroupFilter.cs,GetDirectChildren,The length of the statement  "		wrappers.AddRange (Childs.Where (a => VM_MainListHelper.Instance.AllGroupFiltersDictionary.ContainsKey (a)).Select (a => VM_MainListHelper.Instance.AllGroupFiltersDictionary [a]).Where (a => !a.IsLocked || (a.IsLocked && a.HasGroupChilds ())).OrderBy (a => a.GroupFilterName)); " is 277.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_GroupFilter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_GroupFilter.cs,GetDirectChildren,The length of the statement  "			foreach (VM_AnimeGroup_User grp in Groups [VM_ShokoServer.Instance.CurrentUser.JMMUserID].Select (a => VM_MainListHelper.Instance.AllGroupsDictionary [a])) { " is 157.
Long Statement,Shoko.Desktop.ViewModel.Server,VM_VideoLocal,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_VideoLocal.cs,GetEpisodes,The length of the statement  "		return VM_ShokoServer.Instance.ShokoServices.GetEpisodesForFile (VideoLocalID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 160.
Long Statement,Shoko.Desktop.ViewModel,VM_AvailableEpisodeTypeContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_AvailableEpisodeTypeContainer.cs,GetAll,The length of the statement  "		new VM_AvailableEpisodeTypeContainer (AvailableEpisodeType.Available' Shoko.Commons.Properties.Resources.Episodes_AvOnly)' " is 122.
Long Statement,Shoko.Desktop.ViewModel,VM_AvailableEpisodeTypeContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_AvailableEpisodeTypeContainer.cs,GetAll,The length of the statement  "		new VM_AvailableEpisodeTypeContainer (AvailableEpisodeType.NoFiles' Shoko.Commons.Properties.Resources.Episodes_AvMissing) " is 122.
Long Statement,Shoko.Desktop.ViewModel,VM_AnimeEpisodeType,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_AnimeEpisodeType.cs,GetDirectChildren,The length of the statement  "		return AnimeSeries.AllEpisodes.Where (a => a.EpisodeTypeEnum == EpisodeType).OrderBy (a => a.EpisodeNumber).CastList<IListWrapper> (); " is 134.
Long Statement,Shoko.Desktop.ViewModel,VM_TraktDetails,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_TraktDetails.cs,PopulateTraktEpisodes,The length of the statement  "		traktEpisodes = VM_ShokoServer.Instance.ShokoServices.GetAllTraktEpisodesByTraktID (TraktID).Cast<VM_Trakt_Episode> ().OrderBy (a => a.Season).ThenBy (a => a.EpisodeNumber).ToList (); " is 183.
Long Statement,Shoko.Desktop.ViewModel,VM_TraktSummary,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_TraktSummary.cs,PopulateCrossRefs,The length of the statement  "		crossRefTraktV2 = VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefV2 (AnimeID).CastList<VM_CrossRef_AniDB_TraktV2> (); " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_TvDBDetails,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_TvDBDetails.cs,PopulateTvDBEpisodes,The length of the statement  "		tvDBEpisodes = VM_ShokoServer.Instance.ShokoServices.GetAllTvDBEpisodes (TvDBID).CastList<VM_TvDB_Episode> ().OrderBy (a => a.SeasonNumber).ThenBy (a => a.EpisodeNumber).ToList (); " is 180.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,NavigateBack,The length of the statement  "		mainWdw.ShowDashMetroView (NavigationHistory [NavigationHistory.Count - 1].NavView' NavigationHistory [NavigationHistory.Count - 1].NavContent); " is 144.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The length of the statement  "		List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetContinueWatchingFilter (VM_ShokoServer.Instance.CurrentUser.JMMUserID' VM_UserSettings.Instance.DashMetro_WatchNext_Items).CastList<VM_AnimeEpisode_User> (); " is 239.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The length of the statement  "				var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AniDBAnime.FanartPath : ep.AniDBAnime.PosterPathWithRandoms; " is 146.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The length of the statement  "				var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ser.AniDBAnime.AniDBAnime.FanartPath : ser.AniDBAnime.AniDBAnime.PosterPathWithRandoms; " is 170.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The length of the statement  "		List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetEpisodesRecentlyAddedSummary (VM_UserSettings.Instance.DashMetro_NewEpisodes_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 247.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The length of the statement  "				var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AnimeSeries.AniDBAnime.AniDBAnime.FanartPath : ep.AnimeSeries.AniDBAnime.AniDBAnime.PosterPathWithRandoms; " is 192.
Long Statement,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The length of the statement  "				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshData,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentAdditions,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentAdditions,The length of the statement  "			List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetEpisodesRecentlyAdded (VM_UserSettings.Instance.Dash_RecentAdditions_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 239.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentAdditions,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentAdditions,The length of the statement  "			List<VM_AnimeSeries_User> serContracts = VM_ShokoServer.Instance.ShokoServices.GetSeriesRecentlyAdded (VM_UserSettings.Instance.Dash_RecentAdditions_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeSeries_User> (); " is 236.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentAdditions,The length of the statement  "			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsWatch,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsWatch,The length of the statement  "		List<VM_Recommendation> contracts = VM_ShokoServer.Instance.ShokoServices.GetRecommendations (VM_UserSettings.Instance.Dash_RecWatch_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID' (int)RecommendationType.Watch).CastList<VM_Recommendation> (); " is 249.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsWatch,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsDownload,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsDownload,The length of the statement  "		List<VM_Recommendation> contracts = VM_ShokoServer.Instance.ShokoServices.GetRecommendations (VM_UserSettings.Instance.Dash_RecDownload_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID' (int)RecommendationType.Download).CastList<VM_Recommendation> (); " is 255.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecommendationsDownload,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,GetMissingRecommendationsDownload,The length of the statement  "					System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Send' (Action)delegate { " is 122.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshSeriesMissingEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshSeriesMissingEps,The length of the statement  "		List<VM_AnimeSeries_User> epSeries = VM_ShokoServer.Instance.ShokoServices.GetSeriesWithMissingEpisodes (VM_UserSettings.Instance.Dash_MissingEps_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeSeries_User> (); " is 233.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshSeriesMissingEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetContinueWatchingFilter (VM_ShokoServer.Instance.CurrentUser.JMMUserID' VM_UserSettings.Instance.Dash_WatchNext_Items).CastList<VM_AnimeEpisode_User> (); " is 234.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshEpsWatchNext_Recent,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentlyWatchedEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentlyWatchedEps,The length of the statement  "		List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetEpisodesRecentlyWatched (VM_UserSettings.Instance.Dash_RecentlyWatchedEp_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 243.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshRecentlyWatchedEps,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshMiniCalendar,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshMiniCalendar,The length of the statement  "			ViewMiniCalendar.SortDescriptions.Add (VM_UserSettings.Instance.Dash_MiniCalendarUpcomingOnly ? new SortDescription ("AirDate"' ListSortDirection.Ascending) : new SortDescription ("AirDate"' ListSortDirection.Descending)); " is 222.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshMiniCalendar,The length of the statement  "		List<VM_AniDB_Anime> contracts = VM_ShokoServer.Instance.ShokoServices.GetMiniCalendar (VM_ShokoServer.Instance.CurrentUser.JMMUserID' VM_UserSettings.Instance.Dash_MiniCalendarDays).CastList<VM_AniDB_Anime> (); " is 211.
Long Statement,Shoko.Desktop.ViewModel,VM_Dashboard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_Dashboard.cs,RefreshMiniCalendar,The length of the statement  "		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate { " is 124.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,SeriesSearchFilter,The length of the statement  "	var passed = GroupSearchFilterHelper.EvaluateSeriesTextSearch (ser' SeriesSearchTextBox.Text.Replace ("'"' "`")' SerSearchType); " is 128.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,ShowChildWrappers,The length of the statement  "				foreach (VM_GroupFilter grpFilter in AllGroupFiltersDictionary.Values.Where (a => !a.ParentGroupFilterID.HasValue).OrderBy (a => a.GroupFilterName)) { " is 150.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,RefreshBookmarkedAnime,The length of the statement  "		List<VM_BookmarkedAnime> baRaw = VM_ShokoServer.Instance.ShokoServices.GetAllBookmarkedAnime ().CastList<VM_BookmarkedAnime> (); " is 128.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateAll,The length of the statement  "		CL_MainChanges changes = VM_ShokoServer.Instance.ShokoServices.GetAllChanges (LastChange' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 137.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateAnimeGroups,The length of the statement  "	CL_MainChanges changes = VM_ShokoServer.Instance.ShokoServices.GetAllChanges (LastChange' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 137.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,GetSeriesForVideo,The length of the statement  "		foreach (CL_AnimeEpisode_User epcontract in VM_ShokoServer.Instance.ShokoServices.GetEpisodesForFile (videoLocalID' VM_ShokoServer.Instance.CurrentUser.JMMUserID)) { " is 165.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,RefreshHeirarchy,The length of the statement  "		VM_AnimeEpisode_User contract = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetEpisode (ep.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 170.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateHeirarchy,The length of the statement  "						IEnumerable<VM_VideoDetailed> vids = VM_ShokoServer.Instance.ShokoServices.GetFilesForEpisode (ep.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoDetailed> (); " is 187.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateHeirarchy,The length of the statement  "		List<VM_AnimeEpisode_User> eps = VM_ShokoServer.Instance.ShokoServices.GetEpisodesForFile (vid.VideoLocalID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 190.
Long Statement,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,UpdateHeirarchy,The length of the statement  "						IEnumerable<VM_VideoDetailed> vids = VM_ShokoServer.Instance.ShokoServices.GetFilesForEpisode (ep.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoDetailed> (); " is 187.
Long Statement,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RefreshCloudAccounts,The length of the statement  "	FolderProviders = new ObservableCollection<VM_CloudAccount> (Instance.ShokoServices.GetCloudProviders ().Cast<VM_CloudAccount> ()); " is 131.
Long Statement,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,GetServerSettings,The length of the statement  "	Plex_Sections = string.IsNullOrEmpty (contract.Plex_Sections) ? new ObservableCollection<int> () : new ObservableCollection<int> (contract.Plex_Sections.Split (''').Select (int.Parse).ToList ()); " is 195.
Long Statement,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,AuthorizeTraktPIN,The length of the statement  "		MessageBox.Show (response' Shoko.Commons.Properties.Resources.ShokoServer_TraktAuth' MessageBoxButton.OK' MessageBoxImage.Information); " is 135.
Long Statement,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RenameAllGroups,The length of the statement  "			MessageBox.Show (Resources.Language_RenameComplete' Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 121.
Long Statement,Shoko.Desktop.ViewModel,VM_TvDBSummary,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_TvDBSummary.cs,PopulateCrossRefs,The length of the statement  "		crossRefTvDBV2 = VM_ShokoServer.Instance.ShokoServices.GetTVDBCrossRefV2 (AnimeID).CastList<VM_CrossRef_AniDB_TvDBV2> (); " is 121.
Long Statement,Shoko.Desktop.UserControls,AnimeFolderSummaryControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeFolderSummaryControl.xaml.cs,RefreshRecords,The length of the statement  "		VM_AnimeSeries_User serie = (VM_AnimeSeries_User)VM_ShokoServer.Instance.ShokoServices.GetSeriesForAnime (anime.AnimeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 168.
Long Statement,Shoko.Desktop.UserControls,PlayNextEpisodeControlV2,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlayNextEpisodeControlV2.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeFileSummaryControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeFileSummaryControl.xaml.cs,RefreshRecords,The length of the statement  "			List<CL_GroupVideoQuality> summ = VM_ShokoServer.Instance.ShokoServices.GetGroupVideoQualitySummary (anime.AnimeID).CastList<CL_GroupVideoQuality> (); " is 150.
Long Statement,Shoko.Desktop.UserControls,AnimeFileSummaryControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeFileSummaryControl.xaml.cs,RefreshRecords,The length of the statement  "			List<VM_GroupFileSummary> summ = VM_ShokoServer.Instance.ShokoServices.GetGroupFileSummary (anime.AnimeID).CastList<VM_GroupFileSummary> (); " is 140.
Long Statement,Shoko.Desktop.UserControls,AnimeGroupControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeGroupControl.xaml.cs,ShowNextEpisode,The length of the statement  "	VM_AnimeEpisode_User ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetNextUnwatchedEpisodeForGroup (grp.AnimeGroupID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 184.
Long Statement,Shoko.Desktop.UserControls,AnimeGroupControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeGroupControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.UserControls,AnimeGroupControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeGroupControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,AnimeGroupControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeGroupControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "	if (MainWindow.CurrentMainTabIndex == (int)MainWindow.TAB_MAIN.Collection || MainWindow.CurrentMainTabIndex == (int)MainWindow.TAB_MAIN.Pinned) " is 143.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,playlistMenuItem_Click,The length of the statement  "					MessageBox.Show (Commons.Properties.Resources.Anime_PlaylistMissing' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 149.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,playlistMenuItem_Click,The length of the statement  "				List<VM_AnimeEpisode_User> eps = ser.AllEpisodes.OrderBy (a => a.EpisodeType).ThenBy (a => a.EpisodeNumber).ThenBy (a => a.AniDB_AirDate.HasValue).ThenBy (a => a.AniDB_AirDate).ToList (); " is 187.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,btnEditSeriesFinish_Click,The length of the statement  "		MessageBoxResult res = MessageBox.Show (Commons.Properties.Resources.Anime_RenameParent' Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 177.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover); " is 135.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster); " is 141.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' anime.AnimeID' (int)ImageEntityType.AniDB_Cover); " is 122.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster); " is 140.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt); " is 136.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart); " is 141.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt); " is 140.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner); " is 138.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster); " is 175.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster); " is 181.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster); " is 162.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster); " is 180.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart); " is 176.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart); " is 181.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "				res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart); " is 180.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' banner.TvDB_ImageWideBannerID' (int)ImageEntityType.TvDB_Banner' (int)ImageSizeType.WideBanner); " is 182.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,RefreshImagesData,The length of the statement  "		AniDB_AnimeCrossRefs = (VM_AniDB_AnimeCrossRefs)VM_ShokoServer.Instance.ShokoServices.GetCrossRefDetails (ser.AniDB_ID); " is 120.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,CommandBinding_DeleteCustomTag,The length of the statement  "			res = VM_ShokoServer.Instance.ShokoServices.DeleteCustomTagCrossRef (tag.CustomTagID' (int)CustomTagCrossRefType.Anime' ser.AniDB_ID); " is 134.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,ShowNextEpisode,The length of the statement  "	VM_AnimeEpisode_User ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetNextUnwatchedEpisode (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 177.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 120.
Long Statement,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "			if (string.IsNullOrEmpty (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)) || (!File.Exists (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)))) { " is 191.
Long Statement,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "				tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_VideoMissing + " " + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) ?? string.Empty; " is 178.
Long Statement,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "			pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}"; " is 212.
Long Statement,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "				foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) { " is 127.
Long Statement,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The length of the statement  "			foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10)) " is 141.
Long Statement,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,workerAvdump_DoWork,The length of the statement  "	pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}"; " is 212.
Long Statement,Shoko.Desktop.UserControls,BookmarksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\BookmarksControl.xaml.cs,CommandBinding_DeleteBookmark,The length of the statement  "		MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.Bookmarks_Delete' ba.Anime.FormattedTitle)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 227.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,postCommentWorker_RunWorkerCompleted,The length of the statement  "	MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Anime_Message' MessageBoxButton.OK' MessageBoxImage.Information); " is 122.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,postCommentWorker_DoWork,The length of the statement  "		CL_Response<bool> r = VM_ShokoServer.Instance.ShokoServices.PostTraktCommentShow (comment.TraktID' comment.CommentText' comment.Spoiler); " is 137.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails == null || animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count == 0) { " is 148.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails != null && animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count > 1) { " is 147.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails != null && animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count == 1) { " is 148.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,txtCommentNew_GotFocus,The length of the statement  "	if (txtCommentNew.Text.Equals (Shoko.Commons.Properties.Resources.Anime_YourSay' StringComparison.InvariantCultureIgnoreCase)) " is 126.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "		if (MainWindow.CurrentMainTabIndex == (int)MainWindow.TAB_MAIN.Dashboard && mainwdw.tileContinueWatching.Visibility == Visibility.Visible) " is 138.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnPlayNextEp_Click,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnPlayNextEp_Click,The length of the statement  "				if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnPlayNextEp_Click,The length of the statement  "					if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,episodesWorker_DoWork,The length of the statement  "		List<VM_AnimeEpisode_User> rawEps = VM_ShokoServer.Instance.ShokoServices.GetAllUnwatchedEpisodes (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 199.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,episodesWorker_DoWork,The length of the statement  "		VM_AnimeEpisode_User rawLastEp = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetLastWatchedEpisodeForSeries (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 191.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,recsWorker_DoWork,The length of the statement  "		List<VM_AniDB_Anime_Similar> tempList = VM_ShokoServer.Instance.ShokoServices.GetSimilarAnimeLinks (ser.AniDB_ID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_AniDB_Anime_Similar> ().OrderByDescending (a => a.AnimeID).ToList (); " is 238.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,commentsWorker_DoWork,The length of the statement  "		List<VM_Trakt_CommentUser> rawComments = VM_ShokoServer.Instance.ShokoServices.GetTraktCommentsForAnime (ser.AniDB_ID).CastList<VM_Trakt_CommentUser> (); " is 153.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,commentsWorker_DoWork,The length of the statement  "		List<VM_AniDB_Recommendation> rawRecs = VM_ShokoServer.Instance.ShokoServices.GetAniDBRecommendations (ser.AniDB_ID).CastList<VM_AniDB_Recommendation> (); " is 154.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The length of the statement  "		List<VM_AniDB_Character> chars = VM_ShokoServer.Instance.ShokoServices.GetCharactersForAnime (ser.AniDB_ID).CastList<VM_AniDB_Character> (); " is 140.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The length of the statement  "		foreach (VM_AniDB_Character chr in chars.Where (x => x.CharType.Equals (Models.Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))) { " is 157.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The length of the statement  "		foreach (VM_AniDB_Character chr in chars.Where (x => !x.CharType.Equals (Models.Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))) { " is 158.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The length of the statement  "                        System.Windows.Application.Current.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate ()" is 124.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The length of the statement  "                        System.Windows.Application.Current.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate ()" is 124.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "				if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "						if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,videoHandler_VideoWatchedEvent,The length of the statement  "		if (MainWindow.CurrentMainTabIndex == (int)MainWindow.TAB_MAIN.Dashboard && mainwdw.dash.Visibility == Visibility.Visible) " is 122.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnExpandDashSeriesMissingEpisodes_Click,The length of the statement  "	VM_UserSettings.Instance.DashSeriesMissingEpisodesExpanded = !VM_UserSettings.Instance.DashSeriesMissingEpisodesExpanded; " is 121.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnExpandRecWatch_Click,The length of the statement  "	if (VM_UserSettings.Instance.DashRecommendationsWatchCollapsed && VM_Dashboard.Instance.RecommendationsWatch.Count == 0) " is 120.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnExpandRecDownload_Click,The length of the statement  "	if (VM_UserSettings.Instance.DashRecommendationsDownloadCollapsed && VM_Dashboard.Instance.RecommendationsDownload.Count == 0) " is 126.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnExpandRecDownload_Click,The length of the statement  "	VM_UserSettings.Instance.DashRecommendationsDownloadExpanded = !VM_UserSettings.Instance.DashRecommendationsDownloadExpanded; " is 125.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,refreshDataWorker_DoWork,The length of the statement  "		VM_Dashboard.Instance.RefreshData (opt.RefreshContinueWatching' opt.RefreshRecentAdditions' opt.RefreshOtherWidgets' opt.RecentAdditionType); " is 141.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnForceCalendarRefresh_Click,The length of the statement  "	MessageBox.Show (Shoko.Commons.Properties.Resources.ShokoServer_ProcessQueued' Shoko.Commons.Properties.Resources.ShokoServer_Running' MessageBoxButton.OK' MessageBoxImage.Information); " is 185.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_IgnoreAnimeWatch,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Watch' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 153.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_IgnoreAnimeDownload,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Download' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 156.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "				if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "						if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,CommandBinding_SyncVotes,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.ShokoServer_ProcessRunning' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 174.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The length of the statement  "	DashPos_SeriesMissingEpisodes = VM_UserSettings.Instance.GetDashboardWidgetPosition (DashboardWidgets.SeriesMissingEpisodes); " is 125.
Long Statement,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The length of the statement  "	DashPos_RecentlyWatchedEpisode = VM_UserSettings.Instance.GetDashboardWidgetPosition (DashboardWidgets.RecentlyWatchedEpisode); " is 127.
Long Statement,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	VM_UserSettings.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.ContinueWatching' ref posCont' ref visCont); " is 129.
Long Statement,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	VM_UserSettings.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.RandomSeries' ref posRSeries' ref visRSeries); " is 131.
Long Statement,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,SetSectionOrder,The length of the statement  "	VM_UserSettings.Instance.GetDashboardMetroSectionPosition (DashboardMetroProcessType.NewEpisodes' ref posNewEps' ref visNewEps); " is 128.
Long Statement,Shoko.Desktop.UserControls,DashboardEpisodeOverview,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardEpisodeOverview.xaml.cs,ImageBorder_Loaded,The length of the statement  "	if (border.ActualWidth <= borderThickness.Left + borderThickness.Right || border.ActualHeight <= borderThickness.Top + borderThickness.Bottom) { " is 144.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,RefreshDuplicateFiles,The length of the statement  "		List<VM_DuplicateFile> dfs = VM_ShokoServer.Instance.ShokoServices.GetAllDuplicateFiles ().CastList<VM_DuplicateFile> (); " is 121.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_OpenFolder1,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_OpenFolder2,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile1,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.DuplicateFiles_ConfirmDelete)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 214.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.DuplicateFiles_ConfirmDelete)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 214.
Long Statement,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFileDB,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.DuplicateFiles_DeleteEntry)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 213.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkRemove_Click,The length of the statement  "		VM_AnimeEpisode_User contract = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetEpisode (ep.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 170.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The length of the statement  "		if (ep.AniDBAnime == null || ep.AniDBAnime.TvSummary == null || ep.AniDBAnime.TvSummary.CrossRefTvDBV2 == null || ep.AniDBAnime.TvSummary.CrossRefTvDBV2.Count == 0) { " is 166.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The length of the statement  "			CL_AnimeEpisode_User contract = VM_ShokoServer.Instance.ShokoServices.GetEpisode (ep.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 148.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,playlistMenuItem_Click,The length of the statement  "					MessageBox.Show (Shoko.Commons.Properties.Resources.EpisodeDetail_PlaylistMissing' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 169.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (string.Format (Shoko.Commons.Properties.Resources.DeleteFile_Title' vid.GetFileName ())' Shoko.Commons.Properties.Resources.EpisodeDetail_ConfirmDelete + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' vid.Places); " is 273.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 168.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_ForceAddMyList,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.EpisodeDetail_CommandQueued' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 175.
Long Statement,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,CommandBinding_ForceUpdate,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.EpisodeDetail_CommandQueued' Shoko.Commons.Properties.Resources.Success' MessageBoxButton.OK' MessageBoxImage.Information); " is 175.
Long Statement,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,lbEpisodes_MouseDoubleClick,The length of the statement  "				if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,lbEpisodes_MouseDoubleClick,The length of the statement  "						if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,SetWatchedStatusOnSeries,The length of the statement  "		VM_ShokoServer.Instance.ShokoServices.SetWatchedStatusOnSeries (animeSeries.AnimeSeriesID' watchedStatus' maxEpisodeNumber' (int)epType.EpisodeType' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 196.
Long Statement,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The length of the statement  "					visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles && x.EpisodeNumber <= ep.EpisodeNumber); " is 145.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnDeleteScript_Click,The length of the statement  "		MessageBoxResult res = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 138.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,RefreshScripts,The length of the statement  "		List<VM_RenameScript> scripts = VM_ShokoServer.Instance.ShokoServices.GetAllRenameScripts ().Cast<VM_RenameScript> ().OrderBy (a => a.ScriptName).ToList (); " is 156.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,renameWorker_ProgressChanged,The length of the statement  "	WorkerStatus = string.Format (Shoko.Commons.Properties.Resources.Rename_Changed' status.CurrentFile' status.TotalFileCount); " is 124.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The length of the statement  "		VM_VideoLocal_Renamed raw = (VM_VideoLocal_Renamed)VM_ShokoServer.Instance.ShokoServices.RenameFile (ren.VideoLocalID' job.RenameScript); " is 137.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnRenameFiles_Click,The length of the statement  "	MessageBoxResult res = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 138.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,previewWorker_ProgressChanged,The length of the statement  "	WorkerStatus = string.Format (Shoko.Commons.Properties.Resources.Rename_Changed' status.CurrentFile' status.TotalFileCount); " is 124.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The length of the statement  "		VM_VideoLocal_Renamed raw = (VM_VideoLocal_Renamed)VM_ShokoServer.Instance.ShokoServices.RenameFilePreview (ren.VideoLocalID' job.RenameScript); " is 144.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "			rawVids = VM_ShokoServer.Instance.ShokoServices.RandomFileRenamePreview (udRandomFiles.Value.Value' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 174.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "			rawVids = VM_ShokoServer.Instance.ShokoServices.RandomFileRenamePreview (int.MaxValue' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 161.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "						rawVids.AddRange (VM_ShokoServer.Instance.ShokoServices.GetVideoLocalsForAnime (ser.AniDB_ID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoLocal> ()); " is 165.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "					rawVids.AddRange (VM_ShokoServer.Instance.ShokoServices.GetVideoLocalsForAnime (ser.AniDB_ID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_VideoLocal> ()); " is 165.
Long Statement,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnLoadFiles_Click,The length of the statement  "			rawVids = VM_ShokoServer.Instance.ShokoServices.SearchForFiles ((int)FileSearchCriteria.LastOneHundred' number.ToString ()' VM_ShokoServer.Instance.CurrentUser.JMMUserID).OrderByDescending (a => a.DateTimeCreated).CastList<VM_VideoLocal> (); " is 241.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,lbVideos_SelectionChanged,The length of the statement  "		VM_AnimeEpisode_User ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetEpisodesForFile (vid.VideoLocalID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).FirstOrDefault (); " is 189.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,btnSearch_Click,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.Seach_Criteria' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 154.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,btnSearch_Click,The length of the statement  "		List<VM_VideoLocal> rawVids = VM_ShokoServer.Instance.ShokoServices.SearchForFiles ((int)searchType' searchText' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 187.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' "Done"' MessageBoxButton.OK' MessageBoxImage.Information); " is 135.
Long Statement,Shoko.Desktop.UserControls,FileSearchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileSearchControl.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 168.
Long Statement,Shoko.Desktop.UserControls,IgnoredAnimeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredAnimeControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_IgnoreAnime> contractsTemp = VM_ShokoServer.Instance.ShokoServices.GetIgnoredAnime (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_IgnoreAnime> (); " is 167.
Long Statement,Shoko.Desktop.UserControls,IgnoredAnimeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredAnimeControl.xaml.cs,CommandBinding_DeleteIgnoredAnime,The length of the statement  "		if (MessageBox.Show (Shoko.Commons.Properties.Resources.IgnoredAnime_DeleteMessage' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question) == MessageBoxResult.Yes) { " is 204.
Long Statement,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (string.Format (Shoko.Commons.Properties.Resources.DeleteFile_Title' vid.FileName)' Shoko.Commons.Properties.Resources.Unrecognized_ConfirmDelete + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' vid.Places); " is 266.
Long Statement,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (Shoko.Commons.Properties.Resources.DeleteFile_Multiple' Shoko.Commons.Properties.Resources.Unrecognized_DeleteSelected + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' mv.VideoLocals.SelectMany (a => a.Places).ToList ()); " is 281.
Long Statement,Shoko.Desktop.UserControls,IgnoredFiles,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\IgnoredFiles.xaml.cs,RefreshIgnoredFiles,The length of the statement  "		List<VM_VideoLocal> vids = VM_ShokoServer.Instance.ShokoServices.GetIgnoredFiles (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 156.
Long Statement,Shoko.Desktop.UserControls,ImportFolderAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ImportFolderAdmin.xaml.cs,btnDeleteImportFolder_Click,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.ImportFolder_Delete' ns.ImportFolderLocation)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 231.
Long Statement,Shoko.Desktop.UserControls,ImportFolderAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ImportFolderAdmin.xaml.cs,btnDeleteImportFolder_Click,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.ShokoServer_ProcessRunning' Shoko.Commons.Properties.Resources.ShokoServer_Running' MessageBoxButton.OK' MessageBoxImage.Information); " is 186.
Long Statement,Shoko.Desktop.UserControls,ManuallyLinkedFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ManuallyLinkedFilesControl.xaml.cs,btnRescan_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Unrecognized_AniDBScan' Shoko.Commons.Properties.Resources.Complete' MessageBoxButton.OK' MessageBoxImage.Information); " is 171.
Long Statement,Shoko.Desktop.UserControls,ManuallyLinkedFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ManuallyLinkedFilesControl.xaml.cs,RefreshLinkedFiles,The length of the statement  "		List<VM_VideoLocal> vids = VM_ShokoServer.Instance.ShokoServices.GetAllManuallyLinkedFiles (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 166.
Long Statement,Shoko.Desktop.UserControls,ManuallyLinkedFilesDetailControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ManuallyLinkedFilesDetailControl.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 168.
Long Statement,Shoko.Desktop.UserControls,ManuallyLinkedFilesDetailControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ManuallyLinkedFilesDetailControl.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_MissingEpisode> contractsTemp = VM_ShokoServer.Instance.ShokoServices.GetMissingEpisodes (VM_ShokoServer.Instance.CurrentUser.JMMUserID' wr.MyGroupsOnly' wr.RegularEpisodesOnly' (int)wr.AiringFilter).CastList<VM_MissingEpisode> (); " is 239.
Long Statement,Shoko.Desktop.UserControls,MissingMyListFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingMyListFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_MissingFile> contractsTemp = VM_ShokoServer.Instance.ShokoServices.GetMyListFilesForRemoval (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_MissingFile> (); " is 176.
Long Statement,Shoko.Desktop.UserControls,MissingMyListFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingMyListFilesControl.xaml.cs,btnDelete_Click,The length of the statement  "	MessageBoxResult res = MessageBox.Show (string.Format ("Are you sure you want to delete all these files from your AniDB list?")' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 190.
Long Statement,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_AnimeEpisode_User> eps = VM_ShokoServer.Instance.ShokoServices.GetAllEpisodesWithMultipleFiles (VM_ShokoServer.Instance.CurrentUser.JMMUserID' opt.OnlyFinishedSeries' opt.IgnoreVariations).CastList<VM_AnimeEpisode_User> (); " is 231.
Long Statement,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,btnDeleteFilesWithPreferences_Click,The length of the statement  "	List<VM_VideoDetailed> list = VM_ShokoServer.Instance.ShokoServices.GetMultipleFilesForDeletionByPreferences (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoDetailed> (); " is 187.
Long Statement,Shoko.Desktop.UserControls,MultipleFilesDetailControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesDetailControl.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (string.Format (Shoko.Commons.Properties.Resources.DeleteFile_Title' vid.GetFileName ())' Shoko.Commons.Properties.Resources.MultipleFiles_ConfirmDelete + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' vid.Places); " is 273.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "				ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetNextUnwatchedEpisode (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 156.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "				if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "						if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (vid.VideoLocalID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 142.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "			CL_Response<CL_AnimeEpisode_User> response = VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnEpisode (ep.AnimeEpisodeID' newStatus' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 190.
Long Statement,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,CommandBinding_ToggleWatchedStatus,The length of the statement  "				MessageBox.Show (response.ErrorMessage' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Shoko.Desktop.UserControls,PlayNextEpisodeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlayNextEpisodeControl.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,PlayNextEpisodeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlayNextEpisodeControl.xaml.cs,CommandBinding_PlayEpisode,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,RankingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RankingsControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_AnimeRating> rawRatings = VM_ShokoServer.Instance.ShokoServices.GetAnimeRatings ((int)opt.CollectionState' (int)opt.WatchedState' (int)opt.VotedState' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeRating> (); " is 234.
Long Statement,Shoko.Desktop.UserControls,RelatedAnimeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RelatedAnimeControl.xaml.cs,RefreshData,The length of the statement  "		List<VM_AniDB_Anime_Relation> tempList = VM_ShokoServer.Instance.ShokoServices.GetRelatedAnimeLinks (anime.AnimeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AniDB_Anime_Relation> ().OrderBy (a => a.SortPriority).ToList (); " is 240.
Long Statement,Shoko.Desktop.UserControls,SeriesWithoutFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\SeriesWithoutFilesControl.xaml.cs,workerFiles_DoWork,The length of the statement  "		List<VM_AnimeSeries_User> contractsTemp = VM_ShokoServer.Instance.ShokoServices.GetSeriesWithoutAnyFiles (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeSeries_User> (); " is 186.
Long Statement,Shoko.Desktop.UserControls,SimilarAnimeControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\SimilarAnimeControl.xaml.cs,RefreshData,The length of the statement  "		List<VM_AniDB_Anime_Similar> tempList = VM_ShokoServer.Instance.ShokoServices.GetSimilarAnimeLinks (anime.AnimeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_AniDB_Anime_Similar> ().OrderByDescending (a => a.ApprovalPercentage).ToList (); " is 250.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,postCommentWorker_DoWork,The length of the statement  "		CL_Response<bool> resp = VM_ShokoServer.Instance.ShokoServices.PostTraktCommentShow (comment.TraktID' comment.CommentText' comment.Spoiler); " is 140.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		Utils.ShowErrorMessage ("You have not authorized JMM to use your Trakt account' for more info go to 'Settings - Community Sites - Trakt TV'"); " is 142.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails == null || animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count == 0) { " is 148.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails != null && animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count > 1) { " is 147.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The length of the statement  "		if (animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails != null && animeSeries.AniDBAnime.AniDBAnime.traktSummary.traktDetails.Count == 1) { " is 148.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,refreshDataWorker_DoWork,The length of the statement  "		foreach (VM_Trakt_CommentUser contract in VM_ShokoServer.Instance.ShokoServices.GetTraktCommentsForAnime (animeSeries.AniDB_ID).Cast<VM_Trakt_CommentUser> ()) { " is 160.
Long Statement,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,refreshDataWorker_DoWork,The length of the statement  "		foreach (VM_AniDB_Recommendation rec in VM_ShokoServer.Instance.ShokoServices.GetAniDBRecommendations (animeSeries.AniDB_ID).Cast<VM_AniDB_Recommendation> ()) { " is 160.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,commTvDBMenuItem_Click,The length of the statement  "					MessageBox.Show (Shoko.Commons.Properties.Resources.CommunityLinks_NoLinks' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 162.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,commTraktMenuItem_Click,The length of the statement  "					MessageBox.Show (Shoko.Commons.Properties.Resources.CommunityLinks_NoLinks' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 162.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,communityWorker_DoWork,The length of the statement  "			List<Azure_CrossRef_AniDB_TvDB> xrefs = VM_ShokoServer.Instance.ShokoServices.GetTVDBCrossRefWebCache (crit.AnimeID' true).CastList<Azure_CrossRef_AniDB_TvDB> (); " is 162.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,communityWorker_DoWork,The length of the statement  "			List<Azure_CrossRef_AniDB_Trakt> xrefs = VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefWebCache (crit.AnimeID' true); " is 125.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_EditMALLink,The length of the statement  "			frm.Init (malLink.AnimeID' anime.FormattedTitle' malLink.MALTitle' malLink.MALID' malLink.StartEpisodeType' malLink.StartEpisodeNumber); " is 136.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteMALLink,The length of the statement  "			MessageBoxResult result = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 141.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteMALLink,The length of the statement  "				string res = VM_ShokoServer.Instance.ShokoServices.RemoveLinkAniDBMAL (anime.AnimeID' malLink.StartEpisodeType' malLink.StartEpisodeNumber); " is 140.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteTraktLink,The length of the statement  "			MessageBoxResult result = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 141.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteTraktLink,The length of the statement  "				string res = VM_ShokoServer.Instance.ShokoServices.RemoveLinkAniDBTrakt (link.AnimeID' link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TraktID' link.TraktSeasonNumber' link.TraktStartEpisodeNumber); " is 213.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_EditTraktLink,The length of the statement  "			frm.Init (anime.AnimeID' anime.FormattedTitle' (enEpisodeType)link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TraktID' link.TraktSeasonNumber' link.TraktStartEpisodeNumber' link.TraktTitle' anime' link.CrossRef_AniDB_TraktV2ID); " is 243.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_UpdateTraktLink,The length of the statement  "			VM_AnimeSeries_User ser = VM_MainListHelper.Instance.AllSeriesDictionary.Values.FirstOrDefault (a => a.AniDB_ID == anime.AnimeID); " is 130.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_SyncTraktLink,The length of the statement  "				MessageBox.Show (Shoko.Commons.Properties.Resources.CommunityLinks_CommandQueued' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 173.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_EditTvDBLink,The length of the statement  "			frm.Init (anime.AnimeID' anime.FormattedTitle' (enEpisodeType)link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TvDBID' link.TvDBSeasonNumber' link.TvDBStartEpisodeNumber' link.TvDBTitle' anime' link.CrossRef_AniDB_TvDBV2ID); " is 238.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteTvDBLink,The length of the statement  "			MessageBoxResult result = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 141.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteTvDBLink,The length of the statement  "				string res = VM_ShokoServer.Instance.ShokoServices.RemoveLinkAniDBTvDB (link.AnimeID' link.AniDBStartEpisodeType' link.AniDBStartEpisodeNumber' link.TvDBID' link.TvDBSeasonNumber' link.TvDBStartEpisodeNumber); " is 209.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_UpdateTvDBLink,The length of the statement  "			VM_AnimeSeries_User ser = VM_MainListHelper.Instance.AllSeriesDictionary.Values.FirstOrDefault (a => a.AniDB_ID == anime.AnimeID); " is 130.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,CommandBinding_DeleteMovieDBLink,The length of the statement  "		MessageBoxResult result = MessageBox.Show (msg' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 141.
Long Statement,Shoko.Desktop.UserControls,TvDBAndOtherLinks,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TvDBAndOtherLinks.xaml.cs,RefreshData,The length of the statement  "		AniDB_AnimeCrossRefs = (VM_AniDB_AnimeCrossRefs)VM_ShokoServer.Instance.ShokoServices.GetCrossRefDetails (anime.AnimeID); " is 121.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnRehash_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Unrecognized_AniDBQueue' Shoko.Commons.Properties.Resources.Complete' MessageBoxButton.OK' MessageBoxImage.Information); " is 172.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnRescan_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.Unrecognized_AniDBScan' Shoko.Commons.Properties.Resources.Complete' MessageBoxButton.OK' MessageBoxImage.Information); " is 171.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "					MessageBoxResult res = MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_InvalidEpGetAnime' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.YesNo' MessageBoxImage.Exclamation); " is 197.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "								MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_InvalidEp' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Exclamation); " is 163.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "				result = VM_ShokoServer.Instance.ShokoServices.AssociateSingleFileWithMultipleEpisodes (vid.VideoLocalID' series.AnimeSeriesID' startEpNum' endEpNum); " is 150.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "				MessageBoxResult res = MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_InvalidEpGetAnime' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.YesNo' MessageBoxImage.Exclamation); " is 197.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "							MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_InvalidEp' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Exclamation); " is 163.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The length of the statement  "			string msg = VM_ShokoServer.Instance.ShokoServices.AssociateMultipleFiles (vidIDs' series.AnimeSeriesID' startEpNum' MultipleTypeSingle); " is 137.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_OpenFolder,The length of the statement  "			MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_ERR_FileNotFound' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 160.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_PlayVideo,The length of the statement  "			if (MainWindow.videoHandler.DefaultPlayer.Player.ToString () != Enum.GetName (typeof(VideoPlayer)' VideoPlayer.WindowsDefault)) { " is 129.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (string.Format (Shoko.Commons.Properties.Resources.DeleteFile_Title' vid.FileName)' Shoko.Commons.Properties.Resources.Unrecognized_ConfirmDelete + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' vid.Places); " is 266.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_DeleteFile,The length of the statement  "			AskDeleteFile dlg = new AskDeleteFile (Shoko.Commons.Properties.Resources.DeleteFile_Multiple' Shoko.Commons.Properties.Resources.Unrecognized_DeleteSelected + "\r\n\r\n" + Shoko.Commons.Properties.Resources.DeleteFile_Confirm' mv.VideoLocals.SelectMany (a => a.Places).ToList ()); " is 281.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RehashFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 168.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,CommandBinding_RescanFile,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.MSG_INFO_AddedQueueCmds' Shoko.Commons.Properties.Resources.Done' MessageBoxButton.OK' MessageBoxImage.Information); " is 168.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,lbSeries_SelectionChanged,The length of the statement  "		List<VM_AnimeEpisode_User> eps = series.AllEpisodes.OrderBy (a => a.EpisodeType).ThenBy (a => a.EpisodeNumber).ToList (); " is 121.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,RefreshUnrecognisedFiles,The length of the statement  "		List<VM_VideoLocal> vids = VM_ShokoServer.Instance.ShokoServices.GetUnrecognisedFiles (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_VideoLocal> (); " is 161.
Long Statement,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,RefreshSeries,The length of the statement  "		foreach (VM_AnimeSeries_User ser in VM_ShokoServer.Instance.ShokoServices.GetAllSeries (VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_AnimeSeries_User> ()) { " is 166.
Long Statement,Shoko.Desktop.UserControls,UpdateAniDBDataControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UpdateAniDBDataControl.xaml.cs,btnEstimate_Click,The length of the statement  "		int filesQueued = VM_ShokoServer.Instance.ShokoServices.UpdateAniDBFileData (chkMissingInfo.IsChecked.Value' chkOutofDate.IsChecked.Value' true); " is 145.
Long Statement,Shoko.Desktop.UserControls,UpdateAniDBDataControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UpdateAniDBDataControl.xaml.cs,btnEstimate_Click,The length of the statement  "		MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.UpdateAniDB_QueueCount' filesQueued)' Shoko.Commons.Properties.Resources.UpdateAniDB_UpdateAniDB' MessageBoxButton.OK' MessageBoxImage.Information); " is 215.
Long Statement,Shoko.Desktop.UserControls,UpdateAniDBDataControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UpdateAniDBDataControl.xaml.cs,btnQueueCommands_Click,The length of the statement  "		int filesQueued = VM_ShokoServer.Instance.ShokoServices.UpdateAniDBFileData (chkMissingInfo.IsChecked.Value' chkOutofDate.IsChecked.Value' false); " is 146.
Long Statement,Shoko.Desktop.UserControls,UpdateAniDBDataControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UpdateAniDBDataControl.xaml.cs,btnQueueCommands_Click,The length of the statement  "		MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.UpdateAniDB_QueueActual' filesQueued)' Shoko.Commons.Properties.Resources.UpdateAniDB_UpdateAniDB' MessageBoxButton.OK' MessageBoxImage.Information); " is 216.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,btnSave_Click,The length of the statement  "		MessageBox.Show (Shoko.Commons.Properties.Resources.User_EnterUsername' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 158.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,btnSave_Click,The length of the statement  "							MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.User_PlexAssigned' n.Trim ()' us.Username)' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 197.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,btnSave_Click,The length of the statement  "	SelectedUser.HideCategories = string.Join ("'"' new HashSet<string> (txtTags.Text.Split (''').Select (a => a.Trim ()).Where (a => !string.IsNullOrEmpty (a)))); " is 159.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,btnSave_Click,The length of the statement  "	SelectedUser.PlexUsers = string.Join ("'"' new HashSet<string> (txtPlexUsers.Text.Split (''').Select (a => a.Trim ()).Where (a => !string.IsNullOrEmpty (a)))); " is 159.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,CommandBinding_DeleteUser,The length of the statement  "			MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.User_Delete' user.Username)' "Confirm"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 180.
Long Statement,Shoko.Desktop.UserControls,UserAdminControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UserAdminControl.xaml.cs,CommandBinding_DeleteUser,The length of the statement  "						MessageBox.Show (Shoko.Commons.Properties.Resources.User_DeleteError' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error); " is 156.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_ProgressChanged,The length of the statement  "	WorkerStatus = string.Format (Shoko.Commons.Properties.Resources.Community_TraktProgress' status.CurrentAction' status.CurrentSeries' status.TotalSeriesCount' status.CurrentSeriesString); " is 187.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,CommandBinding_RefreshSeries,The length of the statement  "		List<VM_CrossRef_AniDB_TraktV2> links = VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefV2 (traktSer.AnimeID).CastList<VM_CrossRef_AniDB_TraktV2> (); " is 155.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The length of the statement  "	List<VM_AnimeSeries_User> allSeries = VM_ShokoServer.Instance.ShokoServices.GetAllSeries (VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeSeries_User> ().OrderBy (a => a.SeriesName).ToList (); " is 208.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The length of the statement  "	List<VM_CrossRef_AniDB_TraktV2> allTraktCrossRefs = VM_ShokoServer.Instance.ShokoServices.GetAllTraktCrossRefs ().CastList<VM_CrossRef_AniDB_TraktV2> (); " is 153.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The length of the statement  "		dataWorker.ReportProgress (0' new TraktWorkerStatusContainer (Shoko.Commons.Properties.Resources.Community_TraktPopulating' allSeries.Count' counter' ser.SeriesName)); " is 167.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The length of the statement  "		dataWorker.ReportProgress (0' new TraktWorkerStatusContainer (Shoko.Commons.Properties.Resources.Community_TraktSeriesCheck' job.TraktData.Count' curFile' data.SeriesName)); " is 173.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityMaint,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,dataWorker_DoWork,The length of the statement  "			List<Azure_CrossRef_AniDB_Trakt> xrefs = VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefWebCache (data.AnimeID' false); " is 126.
Long Statement,Shoko.Desktop.UserControls.Community,TraktSeriesData,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,CompareTraktLinks,The length of the statement  "					if (xrefAzure.TraktID == userRef.TraktID && xrefAzure.TraktSeasonNumber == userRef.TraktSeasonNumber && xrefAzure.TraktStartEpisodeNumber == userRef.TraktStartEpisodeNumber && xrefAzure.AniDBStartEpisodeType == userRef.AniDBStartEpisodeType && xrefAzure.AniDBStartEpisodeNumber == userRef.AniDBStartEpisodeNumber) { " is 315.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityLinksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityLinksControl.xaml.cs,HideScriptErrors,The length of the statement  "	FieldInfo fiComWebBrowser = typeof(WebBrowser).GetField ("_axIWebBrowser2"' BindingFlags.Instance | BindingFlags.NonPublic); " is 124.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityLinksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityLinksControl.xaml.cs,searchTvDBWorker_DoWork,The length of the statement  "			List<Azure_CrossRef_AniDB_TvDB> xrefs = VM_ShokoServer.Instance.ShokoServices.GetTVDBCrossRefWebCache (crit.AnimeID' true); " is 123.
Long Statement,Shoko.Desktop.UserControls.Community,CommunityLinksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityLinksControl.xaml.cs,searchTraktWorker_DoWork,The length of the statement  "			List<Azure_CrossRef_AniDB_Trakt> xrefs = VM_ShokoServer.Instance.ShokoServices.GetTraktCrossRefWebCache (crit.AnimeID' true); " is 125.
Long Statement,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,StartWatcher,The length of the statement  "				System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () { " is 127.
Long Statement,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,Init,The length of the statement  "		PlayerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\PotPlayer64"' "DisplayIcon"' null); " is 148.
Long Statement,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,Init,The length of the statement  "		PlayerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\PotPlayer"' "DisplayIcon"' null); " is 158.
Long Statement,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The length of the statement  "			if (foundSectionStart && !foundSectionEnd && !line.ToLower ().Contains ("[rememberfiles]") && !string.IsNullOrEmpty (line)) " is 123.
Long Statement,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,The length of the statement  "		@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\Combined Community Codec Pack_is1"' " is 120.
Long Statement,Shoko.Desktop.VideoPlayers,ExternalMPVVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ExternalMPVVideoPlayer.cs,Init,The length of the statement  "		PlayerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Applications\mpv.exe\shell\open\command"' ""' null); " is 130.
Long Statement,Shoko.Desktop.VideoPlayers,VideoInfo,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoInfo.cs,Change,The length of the statement  "	VM_ShokoServer.Instance.ShokoServices.SetResumePosition (VideoLocalId' ResumePosition' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 134.
Long Statement,Shoko.Desktop.VideoPlayers,VideoInfo,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoInfo.cs,ForceChange,The length of the statement  "	VM_ShokoServer.Instance.ShokoServices.SetResumePosition (VideoLocalId' position' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 128.
Long Statement,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Init,The length of the statement  "		PlayerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\VLC media player"' "DisplayIcon"' null); " is 153.
Long Statement,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Init,The length of the statement  "		PlayerPath = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\VLC media player"' "DisplayIcon"' null); " is 165.
Long Statement,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,Init,The length of the statement  "		string installDir = (string)Registry.GetValue (@"HKEY_CURRENT_USER\Software\VirtuaMedia\ZoomPlayer"' "InstallDirectory"' null); " is 127.
Long Statement,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The length of the statement  "					if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) { " is 194.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The length of the statement  "		string vlcrcpath = Path.Combine (Environment.GetFolderPath ((Environment.SpecialFolder.ApplicationData))' "vlc"' "vlcrc"); " is 122.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,PlayVideo,The length of the statement  "			throw new Exception ("Streaming is not supported from Windows default player' please select one of the supported ones from settings"); " is 134.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,MayUpdateWatchStatus,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.ToggleWatchedStatusOnVideo (v.VideoLocalId' true' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 135.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,FindChangedFiles,The length of the statement  "				if (VM_ShokoServer.Instance.Trakt_IsEnabled && !string.IsNullOrEmpty (VM_ShokoServer.Instance.Trakt_AuthToken) && !scrobbleLock) { " is 130.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,PlayAllUnwatchedEpisodes,The length of the statement  "		List<VM_AnimeEpisode_User> episodes = VM_ShokoServer.Instance.ShokoServices.GetAllUnwatchedEpisodes (animeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> (); " is 197.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,GenerateTemporaryPlayList,The length of the statement  "			if (string.IsNullOrEmpty (vids [i - 1].GetFullPath ()) && vids [i - 1].Media != null && vids [i - 1].Media.Parts != null && vids [i - 1].Media.Parts.Count > 0) " is 159.
Long Statement,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,GetAutoFileForEpisode,The length of the statement  "		VM_AnimeEpisode_User raw = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetPreviousEpisodeForUnwatched (ep.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 184.
Long Statement,Shoko.Desktop.UserControls.Downloads,DownloadRecommendationsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Downloads\DownloadRecommendationsControl.xaml.cs,CommandBinding_IgnoreAnimeDownload,The length of the statement  "			VM_ShokoServer.Instance.ShokoServices.IgnoreAnime (rec.RecommendedAnimeID' (int)RecommendationType.Download' VM_ShokoServer.Instance.CurrentUser.JMMUserID); " is 156.
Long Statement,Shoko.Desktop.UserControls.Downloads,DownloadRecommendationsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Downloads\DownloadRecommendationsControl.xaml.cs,RefreshData,The length of the statement  "		List<VM_Recommendation> contracts = VM_ShokoServer.Instance.ShokoServices.GetRecommendations (VM_UserSettings.Instance.DownloadsRecItems' VM_ShokoServer.Instance.CurrentUser.JMMUserID' (int)RecommendationType.Download).CastList<VM_Recommendation> (); " is 250.
Complex Conditional,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DisplayMainTab,The conditional expression  "VM_Dashboard.Instance.EpsWatchNext_Recent.Count == 0 && VM_Dashboard.Instance.SeriesMissingEps.Count == 0 && VM_Dashboard.Instance.MiniCalendar.Count == 0 && VM_Dashboard.Instance.RecommendationsWatch.Count == 0 && VM_Dashboard.Instance.RecommendationsDownload.Count == 0"  is complex.
Complex Conditional,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,ChkIsWatched_Checked,The conditional expression  "!checkchange && importFldr.CloudID.HasValue && chkDropDestination.IsChecked.HasValue && chkDropDestination.IsChecked.Value"  is complex.
Complex Conditional,Shoko.Desktop.Forms,ImportFolder,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\ImportFolder.xaml.cs,btnSave_Click,The conditional expression  "chkDropDestination.IsChecked.HasValue && chkDropSource.IsChecked.HasValue && chkDropDestination.IsChecked.Value && chkDropSource.IsChecked.Value"  is complex.
Complex Conditional,Shoko.Desktop.UserControls,ContentAwareScrollViewer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeGroupControl.xaml.cs,OnMouseWheel,The conditional expression  "(e.Delta > 0 && VerticalOffset == 0) || (e.Delta < 0 && VerticalOffset == ScrollableHeight)"  is complex.
Complex Conditional,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,btnTvDBLinkAdd_Click,The conditional expression  "ep.AniDBAnime == null || ep.AniDBAnime.TvSummary == null || ep.AniDBAnime.TvSummary.CrossRefTvDBV2 == null || ep.AniDBAnime.TvSummary.CrossRefTvDBV2.Count == 0"  is complex.
Complex Conditional,Shoko.Desktop.UserControls,UnrecognisedVideos,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\UnrecognisedVideos.xaml.cs,btnConfirm_Click,The conditional expression  "series.LatestRegularEpisodeNumber < endEpNum || startEpNum <= 0 && endEpNum <= 0 && endEpNum <= startEpNum"  is complex.
Complex Conditional,Shoko.Desktop.UserControls.Community,TraktSeriesData,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,CompareTraktLinks,The conditional expression  "xrefAzure.TraktID == userRef.TraktID && xrefAzure.TraktSeasonNumber == userRef.TraktSeasonNumber && xrefAzure.TraktStartEpisodeNumber == userRef.TraktStartEpisodeNumber && xrefAzure.AniDBStartEpisodeType == userRef.AniDBStartEpisodeType && xrefAzure.AniDBStartEpisodeNumber == userRef.AniDBStartEpisodeNumber"  is complex.
Complex Conditional,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The conditional expression  "foundSectionStart && !foundSectionEnd && !line.ToLower ().Contains ("[rememberfiles]") && !string.IsNullOrEmpty (line)"  is complex.
Complex Conditional,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The conditional expression  "string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")"  is complex.
Complex Conditional,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,GenerateTemporaryPlayList,The conditional expression  "string.IsNullOrEmpty (vids [i - 1].GetFullPath ()) && vids [i - 1].Media != null && vids [i - 1].Media.Parts != null && vids [i - 1].Media.Parts.Count > 0"  is complex.
Empty Catch Block,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,btnDiscord_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,DeleteAvatarImages,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.Forms,FolderBrowser,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\FolderBrowser.xaml.cs,Item_Expanded,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.Forms,NewSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\NewSeries.xaml.cs,SetAnimeDisplay,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls.Settings,RelationSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\RelationSettings.xaml.cs,btnRecreateGroups_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,GenericExceptionHandler,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.Utilities,ExtensionMethods,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\ExtensionMethods.cs,Clone,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,StartJMMServer,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,Init,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,serverStatusTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesContainerControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesContainerControl.xaml.cs,AnimeSeriesContainerControl_DataContextChanged,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,AnimeSeries_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,btnManageTags_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,btnAddCustomTag_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbComments_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,grdMain_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,videoHandler_VideoWatchedEvent,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,videoHandler_VideoWatchedEvent,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,ScrollerDashMetroDX_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,LayoutRoot_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,ArithmeticConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,Convert,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,LbEpisodes_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnAddTag_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,btnAddTest_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,LbGroups_PreviewMouseWheel,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,HyperLinkStandard,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\HyperLinkStandard.xaml.cs,hlURL_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,MultipleFilesControl,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,btnPreferred_SubGroups_Remove_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,btnRequired_Types_Remove_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.UserControls,MultipleFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MultipleFilesControl.xaml.cs,btnRequired_SubGroups_Remove_Click,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.VideoPlayers,Extensions,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\Extensions.cs,GetInfoFromMedia,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The method has an empty catch block.
Empty Catch Block,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The method has an empty catch block.
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: if (numbers.Length != 4)  	return 0;  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.AutoUpdates,ShokoAutoUpdatesHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AutoUpdates\ShokoAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return (int.Parse (numbers [3]) * 100) + (int.Parse (numbers [2]) * 100 * 100) + (int.Parse (numbers [1]) * 100 * 100 * 100) + (int.Parse (numbers [0]) * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop.DataTemplateSelectors,MainListTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: if (element != null && item != null) {  	if (item.GetType () == typeof(VM_GroupFilter)) {  		return element.FindResource ("MainList_GroupFilterTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(VM_AnimeGroup_User)) {  		switch (AppSettings.DisplayStyle_GroupList) {  		case 1:  			return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  		case 2:  			return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  		default:  			return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  		}  	}  	if (item.GetType () == typeof(VM_AnimeSeries_User)) {  		return element.FindResource ("MainList_AnimeSeriesTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(VM_AnimeEpisodeType)) {  		return element.FindResource ("MainList_AnimeEpisodeTypeTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(VM_AnimeEpisode_User)) {  		return element.FindResource ("MainList_AnimeEpisodeTemplate") as DataTemplate;  	}  	if (item.GetType () == typeof(VM_VideoDetailed)) {  		return element.FindResource ("MainList_VideoDetailedTemplate") as DataTemplate;  	}  }  
Magic Number,Shoko.Desktop.DataTemplateSelectors,MainListTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: if (item.GetType () == typeof(VM_AnimeGroup_User)) {  	switch (AppSettings.DisplayStyle_GroupList) {  	case 1:  		return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  	case 2:  		return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  	default:  		return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  	}  }  
Magic Number,Shoko.Desktop.DataTemplateSelectors,MainListTemplateSelector,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\DataTemplateSelectors\MainListTemplateSelector.cs,SelectTemplate,The following statement contains a magic number: switch (AppSettings.DisplayStyle_GroupList) {  case 1:  	return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  case 2:  	return element.FindResource ("MainList_AnimeGroupSimpleTemplate") as DataTemplate;  default:  	return element.FindResource ("MainList_AnimeGroupTemplate") as DataTemplate;  }  
Magic Number,Shoko.Desktop,MigrationDirectory,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MigrationDirectory.cs,RecursiveDirSize,The following statement contains a magic number: size += 2048;  
Magic Number,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The following statement contains a magic number: try {  	try {  		var target = (FileTarget)LogManager.Configuration.FindTargetByName ("file");  		target.FileName = ApplicationPath + "/logs/${shortdate}.txt";  		LogManager.ReconfigExistingLoggers ();  		bool startedWithFreshConfig = false;  		disabledSave = true;  		string programlocation = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		List<MigrationDirectory> migrationdirs = new List<MigrationDirectory> ();  		if (!string.IsNullOrEmpty (programlocation) && !string.IsNullOrEmpty (ApplicationPath)) {  			migrationdirs.Add (new MigrationDirectory {  				From = Path.Combine (programlocation' "logs")'  				To = Path.Combine (ApplicationPath' "logs")  			});  		}  		string jmmDesktopInstallLocation = "";  		try {  			jmmDesktopInstallLocation = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{AD24689F-020C-4C53-B649-99BB49ED6238}_is1"' "InstallLocation"' null);  		} catch (Exception ex) {  			logger.Log (LogLevel.Error' "Error occured in LoadSettings() during jmmDesktopInstallLocation readout: " + ex.Message);  		}  		if (!string.IsNullOrEmpty (ApplicationPath)) {  			if (Directory.Exists (ApplicationPath)) {  				if (!Utils.IsDirectoryWritable (ApplicationPath)) {  					try {  						Utils.GrantAccess (ApplicationPath);  					} catch (Exception) {  					}  				}  			}  			if (!string.IsNullOrEmpty (jmmDesktopInstallLocation) && !string.IsNullOrEmpty (ApplicationPath)) {  				migrationdirs.Add (new MigrationDirectory {  					From = Path.Combine (jmmDesktopInstallLocation' "logs")'  					To = Path.Combine (ApplicationPath' "logs")  				});  			}  		}  		string path = Path.Combine (ApplicationPath' "settings.json");  		if (File.Exists (path)) {  			appSettings = JsonConvert.DeserializeObject<Dictionary<string' string>> (File.ReadAllText (path));  		} else {  			startedWithFreshConfig = true;  			LoadLegacySettingsFromFile (true);  		}  		Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo (Culture);  		if (BaseImagesPathIsDefault || !Directory.Exists (BaseImagesPath)) {  			if (!string.IsNullOrEmpty (programlocation)) {  				migrationdirs.Add (new MigrationDirectory {  					From = Path.Combine (programlocation' "images")'  					To = DefaultImagePath  				});  			}  			if (!string.IsNullOrEmpty (jmmDesktopInstallLocation)) {  				migrationdirs.Add (new MigrationDirectory {  					From = Path.Combine (jmmDesktopInstallLocation' "images")'  					To = DefaultImagePath  				});  			}  		} else if (Directory.Exists (BaseImagesPath)) {  			ImagesPath = BaseImagesPath;  		}  		bool migrate = false;  		if (!string.IsNullOrEmpty (ApplicationPath) && !string.IsNullOrEmpty (programlocation)) {  			migrate = !Directory.Exists (ApplicationPath) || File.Exists (Path.Combine (programlocation' "AnimeEpisodes.txt"));  		}  		foreach (MigrationDirectory m in migrationdirs) {  			if (m.ShouldMigrate) {  				migrate = true;  				break;  			}  		}  		if (migrate) {  			if (!Utils.IsAdministrator ()) {  				logger.Info ("Needed to migrate but user wasn't admin' restarting as admin.");  				Utils.RestartAsAdmin ();  				return;  			}  			logger.Info ("User is admin so starting migration.");  			Migration m = null;  			try {  				m = new Migration ();  				m.Show ();  				if (!Directory.Exists (ApplicationPath)) {  					Directory.CreateDirectory (ApplicationPath);  				}  				logger.Info ("Setting up programdata permissions.");  				Utils.GrantAccess (ApplicationPath);  				logger.Info ("Completed setup of programdata permissions.");  				disabledSave = false;  				SaveSettings ();  				foreach (MigrationDirectory md in migrationdirs) {  					if (!md.SafeMigrate ()) {  						break;  					}  				}  				if (!string.IsNullOrEmpty (programlocation)) {  					if (File.Exists (Path.Combine (programlocation' "AnimeEpisodes.txt"))) {  						File.Move (Path.Combine (programlocation' "AnimeEpisodes.txt")' AnimeEpisodesText);  					}  				}  			} catch (Exception e) {  				MessageBox.Show (Shoko.Commons.Properties.Resources.Migration_Error + " "' e.ToString ());  				logger.Error (e' "Error occured during LoadSettings: {0}"' e.ToString ());  			}  			m.Close ();  			Thread.Sleep (5000);  			Application.Current.Shutdown ();  			return;  		}  		disabledSave = false;  		if (Directory.Exists (BaseImagesPath) && string.IsNullOrEmpty (ImagesPath)) {  			ImagesPath = BaseImagesPath;  		}  		if (string.IsNullOrEmpty (ImagesPath)) {  			if (string.IsNullOrEmpty (JMMServerImagePath))  				ImagesPath = DefaultImagePath;  			else  				ImagesPath = JMMServerImagePath;  		}  		SaveSettings ();  		if (startedWithFreshConfig && !Utils.IsAdministrator ()) {  			logger.Info ("User has fresh config' restarting once as admin.");  			Utils.RestartAsAdmin ();  		}  	} catch (UnauthorizedAccessException ex) {  		logger.Error (ex);  		var message = "Failed to set folder permissions' do you want to automatically retry as admin?";  		if (!Utils.IsAdministrator ())  			message = "Failed to set folder permissions' do you want to try and reset folder permissions?";  		DialogResult dr = FlexibleMessageBox.Show (message' "Failed to set folder permissions"' MessageBoxButtons.YesNo);  		switch (dr) {  		case DialogResult.Yes:  			try {  				Utils.GrantAccess (ApplicationPath);  			} catch (Exception) {  			}  			Utils.RestartAsAdmin ();  			break;  		case DialogResult.No:  			Application.Current.Shutdown ();  			Environment.Exit (0);  			break;  		}  	}  } catch (Exception ex) {  	logger.Error (ex);  	MessageBox.Show (Shoko.Commons.Properties.Resources.Migration_LoadError + " " + ex' Shoko.Commons.Properties.Resources.Migration_LoadError);  	Application.Current.Shutdown ();  	return;  }  
Magic Number,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The following statement contains a magic number: try {  	var target = (FileTarget)LogManager.Configuration.FindTargetByName ("file");  	target.FileName = ApplicationPath + "/logs/${shortdate}.txt";  	LogManager.ReconfigExistingLoggers ();  	bool startedWithFreshConfig = false;  	disabledSave = true;  	string programlocation = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	List<MigrationDirectory> migrationdirs = new List<MigrationDirectory> ();  	if (!string.IsNullOrEmpty (programlocation) && !string.IsNullOrEmpty (ApplicationPath)) {  		migrationdirs.Add (new MigrationDirectory {  			From = Path.Combine (programlocation' "logs")'  			To = Path.Combine (ApplicationPath' "logs")  		});  	}  	string jmmDesktopInstallLocation = "";  	try {  		jmmDesktopInstallLocation = (string)Registry.GetValue (@"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{AD24689F-020C-4C53-B649-99BB49ED6238}_is1"' "InstallLocation"' null);  	} catch (Exception ex) {  		logger.Log (LogLevel.Error' "Error occured in LoadSettings() during jmmDesktopInstallLocation readout: " + ex.Message);  	}  	if (!string.IsNullOrEmpty (ApplicationPath)) {  		if (Directory.Exists (ApplicationPath)) {  			if (!Utils.IsDirectoryWritable (ApplicationPath)) {  				try {  					Utils.GrantAccess (ApplicationPath);  				} catch (Exception) {  				}  			}  		}  		if (!string.IsNullOrEmpty (jmmDesktopInstallLocation) && !string.IsNullOrEmpty (ApplicationPath)) {  			migrationdirs.Add (new MigrationDirectory {  				From = Path.Combine (jmmDesktopInstallLocation' "logs")'  				To = Path.Combine (ApplicationPath' "logs")  			});  		}  	}  	string path = Path.Combine (ApplicationPath' "settings.json");  	if (File.Exists (path)) {  		appSettings = JsonConvert.DeserializeObject<Dictionary<string' string>> (File.ReadAllText (path));  	} else {  		startedWithFreshConfig = true;  		LoadLegacySettingsFromFile (true);  	}  	Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo (Culture);  	if (BaseImagesPathIsDefault || !Directory.Exists (BaseImagesPath)) {  		if (!string.IsNullOrEmpty (programlocation)) {  			migrationdirs.Add (new MigrationDirectory {  				From = Path.Combine (programlocation' "images")'  				To = DefaultImagePath  			});  		}  		if (!string.IsNullOrEmpty (jmmDesktopInstallLocation)) {  			migrationdirs.Add (new MigrationDirectory {  				From = Path.Combine (jmmDesktopInstallLocation' "images")'  				To = DefaultImagePath  			});  		}  	} else if (Directory.Exists (BaseImagesPath)) {  		ImagesPath = BaseImagesPath;  	}  	bool migrate = false;  	if (!string.IsNullOrEmpty (ApplicationPath) && !string.IsNullOrEmpty (programlocation)) {  		migrate = !Directory.Exists (ApplicationPath) || File.Exists (Path.Combine (programlocation' "AnimeEpisodes.txt"));  	}  	foreach (MigrationDirectory m in migrationdirs) {  		if (m.ShouldMigrate) {  			migrate = true;  			break;  		}  	}  	if (migrate) {  		if (!Utils.IsAdministrator ()) {  			logger.Info ("Needed to migrate but user wasn't admin' restarting as admin.");  			Utils.RestartAsAdmin ();  			return;  		}  		logger.Info ("User is admin so starting migration.");  		Migration m = null;  		try {  			m = new Migration ();  			m.Show ();  			if (!Directory.Exists (ApplicationPath)) {  				Directory.CreateDirectory (ApplicationPath);  			}  			logger.Info ("Setting up programdata permissions.");  			Utils.GrantAccess (ApplicationPath);  			logger.Info ("Completed setup of programdata permissions.");  			disabledSave = false;  			SaveSettings ();  			foreach (MigrationDirectory md in migrationdirs) {  				if (!md.SafeMigrate ()) {  					break;  				}  			}  			if (!string.IsNullOrEmpty (programlocation)) {  				if (File.Exists (Path.Combine (programlocation' "AnimeEpisodes.txt"))) {  					File.Move (Path.Combine (programlocation' "AnimeEpisodes.txt")' AnimeEpisodesText);  				}  			}  		} catch (Exception e) {  			MessageBox.Show (Shoko.Commons.Properties.Resources.Migration_Error + " "' e.ToString ());  			logger.Error (e' "Error occured during LoadSettings: {0}"' e.ToString ());  		}  		m.Close ();  		Thread.Sleep (5000);  		Application.Current.Shutdown ();  		return;  	}  	disabledSave = false;  	if (Directory.Exists (BaseImagesPath) && string.IsNullOrEmpty (ImagesPath)) {  		ImagesPath = BaseImagesPath;  	}  	if (string.IsNullOrEmpty (ImagesPath)) {  		if (string.IsNullOrEmpty (JMMServerImagePath))  			ImagesPath = DefaultImagePath;  		else  			ImagesPath = JMMServerImagePath;  	}  	SaveSettings ();  	if (startedWithFreshConfig && !Utils.IsAdministrator ()) {  		logger.Info ("User has fresh config' restarting once as admin.");  		Utils.RestartAsAdmin ();  	}  } catch (UnauthorizedAccessException ex) {  	logger.Error (ex);  	var message = "Failed to set folder permissions' do you want to automatically retry as admin?";  	if (!Utils.IsAdministrator ())  		message = "Failed to set folder permissions' do you want to try and reset folder permissions?";  	DialogResult dr = FlexibleMessageBox.Show (message' "Failed to set folder permissions"' MessageBoxButtons.YesNo);  	switch (dr) {  	case DialogResult.Yes:  		try {  			Utils.GrantAccess (ApplicationPath);  		} catch (Exception) {  		}  		Utils.RestartAsAdmin ();  		break;  	case DialogResult.No:  		Application.Current.Shutdown ();  		Environment.Exit (0);  		break;  	}  }  
Magic Number,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The following statement contains a magic number: if (migrate) {  	if (!Utils.IsAdministrator ()) {  		logger.Info ("Needed to migrate but user wasn't admin' restarting as admin.");  		Utils.RestartAsAdmin ();  		return;  	}  	logger.Info ("User is admin so starting migration.");  	Migration m = null;  	try {  		m = new Migration ();  		m.Show ();  		if (!Directory.Exists (ApplicationPath)) {  			Directory.CreateDirectory (ApplicationPath);  		}  		logger.Info ("Setting up programdata permissions.");  		Utils.GrantAccess (ApplicationPath);  		logger.Info ("Completed setup of programdata permissions.");  		disabledSave = false;  		SaveSettings ();  		foreach (MigrationDirectory md in migrationdirs) {  			if (!md.SafeMigrate ()) {  				break;  			}  		}  		if (!string.IsNullOrEmpty (programlocation)) {  			if (File.Exists (Path.Combine (programlocation' "AnimeEpisodes.txt"))) {  				File.Move (Path.Combine (programlocation' "AnimeEpisodes.txt")' AnimeEpisodesText);  			}  		}  	} catch (Exception e) {  		MessageBox.Show (Shoko.Commons.Properties.Resources.Migration_Error + " "' e.ToString ());  		logger.Error (e' "Error occured during LoadSettings: {0}"' e.ToString ());  	}  	m.Close ();  	Thread.Sleep (5000);  	Application.Current.Shutdown ();  	return;  }  
Magic Number,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: try {  	UnhandledExceptionManager.AddHandler ();  	//AppSettings.DebugSettingsToLog();  	if (AppSettings.AutoStartLocalJMMServer)  		Utils.StartJMMServer ();  	Closing += (o' args) => ImageDownloader.Stopping = true;  	lbGroupsSeries.MouseDoubleClick += new MouseButtonEventHandler (lbGroupsSeries_MouseDoubleClick);  	lbGroupsSeries.SelectionChanged += new SelectionChangedEventHandler (lbGroupsSeries_SelectionChanged);  	grdMain.LayoutUpdated += new EventHandler (grdMain_LayoutUpdated);  	LayoutUpdated += new EventHandler (MainWindow_LayoutUpdated);  	lbPlaylists.SelectionChanged += new SelectionChangedEventHandler (lbPlaylists_SelectionChanged);  	showChildWrappersWorker.DoWork += new DoWorkEventHandler (showChildWrappersWorker_DoWork);  	showChildWrappersWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showChildWrappersWorker_RunWorkerCompleted);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	refreshGroupsWorker.DoWork += new DoWorkEventHandler (refreshGroupsWorker_DoWork);  	refreshGroupsWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (refreshGroupsWorker_RunWorkerCompleted);  	toggleStatusWorker.DoWork += new DoWorkEventHandler (toggleStatusWorker_DoWork);  	toggleStatusWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (toggleStatusWorker_RunWorkerCompleted);  	moveSeriesWorker.DoWork += new DoWorkEventHandler (moveSeriesWorker_DoWork);  	moveSeriesWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (moveSeriesWorker_RunWorkerCompleted);  	txtGroupSearch.TextChanged += new TextChangedEventHandler (txtGroupSearch_TextChanged);  	showDashboardWorker.DoWork += new DoWorkEventHandler (showDashboardWorker_DoWork);  	showDashboardWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showDashboardWorker_RunWorkerCompleted);  	showDashboardWorker.WorkerSupportsCancellation = true;  	VM_MainListHelper.Instance.ViewGroups.Filter = GroupSearchFilter;  	cboLanguages.SelectionChanged += new SelectionChangedEventHandler (cboLanguages_SelectionChanged);  	if (VM_MainListHelper.Instance.SeriesSearchTextBox == null)  		VM_MainListHelper.Instance.SeriesSearchTextBox = seriesSearch.txtSeriesSearch;  	//grdSplitEps.DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(grdSplitEps_DragCompleted);  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	videoHandler.Init ();  	//videoHandler.HandleFileChange(AppSettings.MPCFolder + "\\mpc-hc.ini");  	InitCulture ();  	Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo (AppSettings.Culture);  	imageHelper.QueueUpdateEvent += new ImageDownloader.QueueUpdateEventHandler (imageHelper_QueueUpdateEvent);  	cboGroupSort.Items.Clear ();  	foreach (string sType in Commons.Extensions.Models.GetAllSortTypes ())  		cboGroupSort.Items.Add (sType);  	cboGroupSort.SelectedIndex = 0;  	btnToolbarSort.Click += new RoutedEventHandler (btnToolbarSort_Click);  	tabControl1.SelectionChanged += new SelectionChangedEventHandler (tabControl1_SelectionChanged);  	tabFileManager.SelectionChanged += new SelectionChangedEventHandler (tabFileManager_SelectionChanged);  	tabSettingsChild.SelectionChanged += new SelectionChangedEventHandler (tabSettingsChild_SelectionChanged);  	Loaded += new RoutedEventHandler (MainWindow_Loaded);  	StateChanged += new EventHandler (MainWindow_StateChanged);  	// Have commented this out because it is no good when Desktop and Server are sharing  	// the same base image path  	//DeleteAvatarImages();  	AddHandler (CloseableTabItem.CloseTabEvent' new RoutedEventHandler (CloseTab));  	btnUpdateMediaInfo.Click += new RoutedEventHandler (btnUpdateMediaInfo_Click);  	btnFeed.Click += new RoutedEventHandler (btnFeed_Click);  	btnDiscord.Click += new RoutedEventHandler (btnDiscord_Click);  	btnAbout.Click += new RoutedEventHandler (btnAbout_Click);  	btnClearHasherQueue.Click += new RoutedEventHandler (btnClearHasherQueue_Click);  	btnClearGeneralQueue.Click += new RoutedEventHandler (btnClearGeneralQueue_Click);  	btnClearServerImageQueue.Click += new RoutedEventHandler (btnClearServerImageQueue_Click);  	btnAdminMessages.Click += new RoutedEventHandler (btnAdminMessages_Click);  	VM_ShokoServer.Instance.BaseImagePath = Utils.GetBaseImagesPath ();  	// timer for automatic updates  	postStartTimer = new System.Timers.Timer ();  	postStartTimer.AutoReset = false;  	postStartTimer.Interval = 5 * 1000;  	// 15 seconds  	postStartTimer.Elapsed += new System.Timers.ElapsedEventHandler (postStartTimer_Elapsed);  	btnSwitchUser.Click += new RoutedEventHandler (btnSwitchUser_Click);  	//videoHandler.HandleFileChange(@"C:\Program Files (x86)\Combined Community Codec Pack\MPC\mpc-hc.ini");  	videoHandler.VideoWatchedEvent += new VideoHandler.VideoWatchedEventHandler (videoHandler_VideoWatchedEvent);  	if (AppSettings.DashboardType == DashboardType.Normal)  		dash.Visibility = Visibility.Visible;  	else  		dashMetro.Visibility = Visibility.Visible;  	VM_UserSettings.Instance.SetDashMetro_Image_Width ();  	VM_MainListHelper.Instance.Refreshed += Instance_Refreshed;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: try {  	UnhandledExceptionManager.AddHandler ();  	//AppSettings.DebugSettingsToLog();  	if (AppSettings.AutoStartLocalJMMServer)  		Utils.StartJMMServer ();  	Closing += (o' args) => ImageDownloader.Stopping = true;  	lbGroupsSeries.MouseDoubleClick += new MouseButtonEventHandler (lbGroupsSeries_MouseDoubleClick);  	lbGroupsSeries.SelectionChanged += new SelectionChangedEventHandler (lbGroupsSeries_SelectionChanged);  	grdMain.LayoutUpdated += new EventHandler (grdMain_LayoutUpdated);  	LayoutUpdated += new EventHandler (MainWindow_LayoutUpdated);  	lbPlaylists.SelectionChanged += new SelectionChangedEventHandler (lbPlaylists_SelectionChanged);  	showChildWrappersWorker.DoWork += new DoWorkEventHandler (showChildWrappersWorker_DoWork);  	showChildWrappersWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showChildWrappersWorker_RunWorkerCompleted);  	downloadImagesWorker.DoWork += new DoWorkEventHandler (downloadImagesWorker_DoWork);  	refreshGroupsWorker.DoWork += new DoWorkEventHandler (refreshGroupsWorker_DoWork);  	refreshGroupsWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (refreshGroupsWorker_RunWorkerCompleted);  	toggleStatusWorker.DoWork += new DoWorkEventHandler (toggleStatusWorker_DoWork);  	toggleStatusWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (toggleStatusWorker_RunWorkerCompleted);  	moveSeriesWorker.DoWork += new DoWorkEventHandler (moveSeriesWorker_DoWork);  	moveSeriesWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (moveSeriesWorker_RunWorkerCompleted);  	txtGroupSearch.TextChanged += new TextChangedEventHandler (txtGroupSearch_TextChanged);  	showDashboardWorker.DoWork += new DoWorkEventHandler (showDashboardWorker_DoWork);  	showDashboardWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler (showDashboardWorker_RunWorkerCompleted);  	showDashboardWorker.WorkerSupportsCancellation = true;  	VM_MainListHelper.Instance.ViewGroups.Filter = GroupSearchFilter;  	cboLanguages.SelectionChanged += new SelectionChangedEventHandler (cboLanguages_SelectionChanged);  	if (VM_MainListHelper.Instance.SeriesSearchTextBox == null)  		VM_MainListHelper.Instance.SeriesSearchTextBox = seriesSearch.txtSeriesSearch;  	//grdSplitEps.DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(grdSplitEps_DragCompleted);  	imageHelper = new ImageDownloader ();  	imageHelper.Init ();  	videoHandler.Init ();  	//videoHandler.HandleFileChange(AppSettings.MPCFolder + "\\mpc-hc.ini");  	InitCulture ();  	Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo (AppSettings.Culture);  	imageHelper.QueueUpdateEvent += new ImageDownloader.QueueUpdateEventHandler (imageHelper_QueueUpdateEvent);  	cboGroupSort.Items.Clear ();  	foreach (string sType in Commons.Extensions.Models.GetAllSortTypes ())  		cboGroupSort.Items.Add (sType);  	cboGroupSort.SelectedIndex = 0;  	btnToolbarSort.Click += new RoutedEventHandler (btnToolbarSort_Click);  	tabControl1.SelectionChanged += new SelectionChangedEventHandler (tabControl1_SelectionChanged);  	tabFileManager.SelectionChanged += new SelectionChangedEventHandler (tabFileManager_SelectionChanged);  	tabSettingsChild.SelectionChanged += new SelectionChangedEventHandler (tabSettingsChild_SelectionChanged);  	Loaded += new RoutedEventHandler (MainWindow_Loaded);  	StateChanged += new EventHandler (MainWindow_StateChanged);  	// Have commented this out because it is no good when Desktop and Server are sharing  	// the same base image path  	//DeleteAvatarImages();  	AddHandler (CloseableTabItem.CloseTabEvent' new RoutedEventHandler (CloseTab));  	btnUpdateMediaInfo.Click += new RoutedEventHandler (btnUpdateMediaInfo_Click);  	btnFeed.Click += new RoutedEventHandler (btnFeed_Click);  	btnDiscord.Click += new RoutedEventHandler (btnDiscord_Click);  	btnAbout.Click += new RoutedEventHandler (btnAbout_Click);  	btnClearHasherQueue.Click += new RoutedEventHandler (btnClearHasherQueue_Click);  	btnClearGeneralQueue.Click += new RoutedEventHandler (btnClearGeneralQueue_Click);  	btnClearServerImageQueue.Click += new RoutedEventHandler (btnClearServerImageQueue_Click);  	btnAdminMessages.Click += new RoutedEventHandler (btnAdminMessages_Click);  	VM_ShokoServer.Instance.BaseImagePath = Utils.GetBaseImagesPath ();  	// timer for automatic updates  	postStartTimer = new System.Timers.Timer ();  	postStartTimer.AutoReset = false;  	postStartTimer.Interval = 5 * 1000;  	// 15 seconds  	postStartTimer.Elapsed += new System.Timers.ElapsedEventHandler (postStartTimer_Elapsed);  	btnSwitchUser.Click += new RoutedEventHandler (btnSwitchUser_Click);  	//videoHandler.HandleFileChange(@"C:\Program Files (x86)\Combined Community Codec Pack\MPC\mpc-hc.ini");  	videoHandler.VideoWatchedEvent += new VideoHandler.VideoWatchedEventHandler (videoHandler_VideoWatchedEvent);  	if (AppSettings.DashboardType == DashboardType.Normal)  		dash.Visibility = Visibility.Visible;  	else  		dashMetro.Visibility = Visibility.Visible;  	VM_UserSettings.Instance.SetDashMetro_Image_Width ();  	VM_MainListHelper.Instance.Refreshed += Instance_Refreshed;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: postStartTimer.Interval = 5 * 1000;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: postStartTimer.Interval = 5 * 1000;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: try {  	long verCurrent = 0;  	long verNew = 0;  	// get the user's version  	System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly ();  	if (a == null) {  		logger.Error ("Could not get current version");  		return;  	}  	System.Reflection.AssemblyName an = a.GetName ();  	verNew = ShokoAutoUpdatesHelper.ConvertToAbsoluteVersion (ShokoAutoUpdatesHelper.GetLatestVersionNumber (AppSettings.UpdateChannel));  	//verNew = verInfo.versions.DesktopVersionAbs;  	verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  	if (forceShowForm || verNew > verCurrent) {  		UpdateForm frm = new UpdateForm ();  		frm.Owner = this;  		frm.ShowDialog ();  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = (an.Version.Revision * 100) + (an.Version.Build * 100 * 100) + (an.Version.Minor * 100 * 100 * 100) + (an.Version.Major * 100 * 100 * 100 * 100);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		VM_MainListHelper.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		VM_MainListHelper.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ccPlaylist.ActualWidth - 8;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.PlaylistWidth = tempWidth;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.DownloadRecScrollerWidth = tempWidth;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		VM_MainListHelper.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		VM_MainListHelper.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ccPlaylist.ActualWidth - 8;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.PlaylistWidth = tempWidth;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.DownloadRecScrollerWidth = tempWidth;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		VM_MainListHelper.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		VM_MainListHelper.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ccPlaylist.ActualWidth - 8;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.PlaylistWidth = tempWidth;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.DownloadRecScrollerWidth = tempWidth;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		VM_MainListHelper.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		VM_MainListHelper.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ccPlaylist.ActualWidth - 8;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.PlaylistWidth = tempWidth;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.DownloadRecScrollerWidth = tempWidth;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: try {  	//Debug.Print("Scroller width = {0}"' Scroller.ActualWidth);  	//Debug.Print("Scroller ViewportWidth = {0}"' Scroller.ViewportWidth);  	double tempWidth = ccDetail.ActualWidth - 8;  	double tempHeight = ccDetail.ActualHeight - 8;  	if (tempWidth > 0) {  		VM_MainListHelper.Instance.MainScrollerWidth = tempWidth;  	}  	tempWidth = tabControl1.ActualWidth - 20;  	//tempWidth = tabControl1.ActualWidth - 300;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.FullScrollerWidth = tempWidth;  	tempHeight = tabControl1.ActualHeight - 50;  	if (tempHeight > 0)  		VM_MainListHelper.Instance.FullScrollerHeight = tempHeight;  	tempWidth = ccPlaylist.ActualWidth - 8;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.PlaylistWidth = tempWidth;  	if (tempWidth > 0)  		VM_MainListHelper.Instance.DownloadRecScrollerWidth = tempWidth;  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempWidth = tabControl1.ActualWidth - 20;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempHeight = tabControl1.ActualHeight - 50;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,MainWindow_LayoutUpdated,The following statement contains a magic number: tempWidth = ccPlaylist.ActualWidth - 8;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeriesOld,The following statement contains a magic number: if (tabHeader.Length > 30)  	tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeriesOld,The following statement contains a magic number: if (tabHeader.Length > 30)  	tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeriesOld,The following statement contains a magic number: tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeries,The following statement contains a magic number: if (tabHeader.Length > 30)  	tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeries,The following statement contains a magic number: if (tabHeader.Length > 30)  	tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowPinnedSeries,The following statement contains a magic number: tabHeader = tabHeader.Substring (0' 30) + "...";  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: try {  	if (obj.GetType () == typeof(VM_GroupFilterSortingCriteria)) {  		VM_GroupFilterSortingCriteria gfsc = (VM_GroupFilterSortingCriteria)obj;  		GroupFilterSortMoveUpDown (gfsc' 2);  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: if (obj.GetType () == typeof(VM_GroupFilterSortingCriteria)) {  	VM_GroupFilterSortingCriteria gfsc = (VM_GroupFilterSortingCriteria)obj;  	GroupFilterSortMoveUpDown (gfsc' 2);  }  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_MoveDownFilterSort,The following statement contains a magic number: GroupFilterSortMoveUpDown (gfsc' 2);  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_IncrementSeriesImageSize,The following statement contains a magic number: VM_UserSettings.Instance.SeriesGroup_Image_Height = VM_UserSettings.Instance.SeriesGroup_Image_Height + 10;  
Magic Number,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,CommandBinding_DecrementSeriesImageSize,The following statement contains a magic number: VM_UserSettings.Instance.SeriesGroup_Image_Height = VM_UserSettings.Instance.SeriesGroup_Image_Height - 10;  
Magic Number,Shoko.Desktop.Forms,LinkPlexForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\LinkPlexForm.xaml.cs,LinkPlexForm,The following statement contains a magic number: _timer = new Timer {  	Interval = 10 * 1000  };  
Magic Number,Shoko.Desktop.Forms,LinkPlexForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\LinkPlexForm.xaml.cs,LinkPlexForm,The following statement contains a magic number: _timer = new Timer {  	Interval = 10 * 1000  };  
Magic Number,Shoko.Desktop.Forms,AskDeleteFile,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\AskDeleteFile.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,AskDeleteFile,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\AskDeleteFile.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,AskDeleteFile,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\AskDeleteFile.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,AskDeleteFile,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\AskDeleteFile.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,AskDeleteFile,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\AskDeleteFile.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,deleteFilesWorker_DoWork,The following statement contains a magic number: deleteFilesWorker.ReportProgress (100' Shoko.Commons.Properties.Resources.Done);  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,DeleteFilesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\DeleteFilesForm.xaml.cs,InitImportFolders,The following statement contains a magic number: foreach (string s in types.Keys) {  	StackPanel st = new StackPanel {  		Orientation = Orientation.Horizontal'  		Margin = new Thickness (0' 0' 10' 0)  	};  	Image im = new Image {  		Height = 24'  		Width = 24'  		Source = types [s]'  		VerticalAlignment = VerticalAlignment.Center'  		Margin = new Thickness (0' 0' 5' 0)  	};  	TextBlock tx = new TextBlock {  		Margin = new Thickness (0' 0' 5' 0)'  		Text = s'  		VerticalAlignment = VerticalAlignment.Center'  		FontWeight = FontWeights.DemiBold  	};  	CheckBox chk = new CheckBox {  		VerticalAlignment = VerticalAlignment.Center'  		IsChecked = true  	};  	chk.Checked += (a' b) => {  		chks [s] = chk.IsChecked.Value;  	};  	st.Children.Add (im);  	st.Children.Add (tx);  	st.Children.Add (chk);  	WrapPanel.Children.Add (st);  }  
Magic Number,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The following statement contains a magic number: if (IsParameterRating) {  	if (txtParameter.Text.Trim ().Length == 0) {  		MessageBox.Show (Commons.Properties.Resources.MSG_ERR_EnterValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  		txtParameter.Focus ();  		return;  	}  	decimal dRating = -1;  	decimal.TryParse (txtParameter.Text' style' culture' out dRating);  	if (dRating <= 0 || dRating > 10) {  		MessageBox.Show (Commons.Properties.Resources.MSG_ERR_RatingValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  		txtParameter.Focus ();  		return;  	}  	groupFilterCondition.ConditionParameter = txtParameter.Text.Trim ();  }  
Magic Number,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,btnConfirm_Click,The following statement contains a magic number: if (dRating <= 0 || dRating > 10) {  	MessageBox.Show (Commons.Properties.Resources.MSG_ERR_RatingValue' Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  	txtParameter.Focus ();  	return;  }  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: if (columns.Length != 8)  	return;  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkEpisodeNumber.IsChecked = columns [2] == "1";  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkEpisodeID.IsChecked = columns [3] == "1";  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkFileSummary.IsChecked = columns [4] == "1";  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkGroupSummary.IsChecked = columns [5] == "1";  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkLinktoAnime.IsChecked = columns [6] == "1";  
Magic Number,Shoko.Desktop.Forms,MissingEpsColumnsForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\MissingEpsColumnsForm.xaml.cs,MissingEpsColumnsForm,The following statement contains a magic number: chkLinktoEpisode.IsChecked = columns [7] == "1";  
Magic Number,Shoko.Desktop.Forms,RateSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (cboVoteType.SelectedItem.ToString () == Shoko.Commons.Properties.Resources.VoteTypeAnimeTemporary)  		voteType = 2;  	if (cboVoteType.SelectedItem.ToString () == Shoko.Commons.Properties.Resources.VoteTypeAnimePermanent)  		voteType = 1;  	VM_ShokoServer.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	VM_MainListHelper.Instance.UpdateHeirarchy (ser);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.Forms,RateSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (cboVoteType.SelectedItem.ToString () == Shoko.Commons.Properties.Resources.VoteTypeAnimeTemporary)  	voteType = 2;  
Magic Number,Shoko.Desktop.Forms,RateSeriesForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\RateSeriesForm.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: host.Width = 475;  
Magic Number,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: host.Height = 190;  
Magic Number,Shoko.Desktop.Forms,SearchMALForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchMALForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: OP.Margin = new Thickness (5);  
Magic Number,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: host.Width = 630;  
Magic Number,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: host.Height = 240;  
Magic Number,Shoko.Desktop.Forms,SearchTraktForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SearchTraktForm.xaml.cs,btnChkCred_Click,The following statement contains a magic number: OP.Margin = new Thickness (5);  
Magic Number,Shoko.Desktop.Forms,SelectMALStartForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The following statement contains a magic number: try {  	Cursor = Cursors.Wait;  	string selType = cboEpisodeType.SelectedItem.ToString ();  	int epType = (int)EnumTranslator.EpisodeTypeTranslatedReverse (selType);  	int epNumber = 0;  	int.TryParse (txtEpNumber.Text' out epNumber);  	if (epNumber <= 0 || epNumber > 2500) {  		MessageBox.Show (Shoko.Commons.Properties.Resources.Select_ValidEpisode' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  		txtEpNumber.Focus ();  		return;  	}  	string res = "";  	if (OldEpType.HasValue && OldEpNumber.HasValue)  		res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBMALUpdated (AnimeID' MALID' MALTitle' OldEpType.Value' OldEpNumber.Value' epType' epNumber);  	else  		res = VM_ShokoServer.Instance.ShokoServices.LinkAniDBMAL (AnimeID' MALID' MALTitle' epType' epNumber);  	if (res.Length > 0)  		MessageBox.Show (res' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  	else {  		DialogResult = true;  		Close ();  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  } finally {  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.Forms,SelectMALStartForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\SelectMALStartForm.xaml.cs,btnUpdate_Click,The following statement contains a magic number: if (epNumber <= 0 || epNumber > 2500) {  	MessageBox.Show (Shoko.Commons.Properties.Resources.Select_ValidEpisode' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  	txtEpNumber.Focus ();  	return;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.DisplayStyle_GroupList) {  case 1:  	cboStyleGroupList.SelectedIndex = 0;  	break;  case 2:  	cboStyleGroupList.SelectedIndex = 1;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: switch (AppSettings.EpisodeImageOverviewStyle) {  case 1:  	cboStyleEpisodeDetail.SelectedIndex = 0;  	break;  case 2:  	cboStyleEpisodeDetail.SelectedIndex = 1;  	break;  case 3:  	cboStyleEpisodeDetail.SelectedIndex = 2;  	break;  default:  	cboStyleGroupList.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following statement contains a magic number: cboStyleEpisodeDetail.SelectedIndex = 2;  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: switch (cboStyleEpisodeDetail.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  case 1:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 2;  	break;  case 2:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 3;  	break;  default:  	VM_UserSettings.Instance.EpisodeImageOverviewStyle = 1;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: VM_UserSettings.Instance.EpisodeImageOverviewStyle = 2;  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleEpisodeDetail_SelectionChanged,The following statement contains a magic number: VM_UserSettings.Instance.EpisodeImageOverviewStyle = 3;  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,The following statement contains a magic number: switch (cboStyleGroupList.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DisplayStyle_GroupList = 1;  	break;  case 1:  	VM_UserSettings.Instance.DisplayStyle_GroupList = 2;  	break;  default:  	VM_UserSettings.Instance.DisplayStyle_GroupList = 1;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,cboStyleGroupList_SelectionChanged,The following statement contains a magic number: VM_UserSettings.Instance.DisplayStyle_GroupList = 2;  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: switch (VM_ShokoServer.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: switch (VM_ShokoServer.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 2;  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following statement contains a magic number: cboUpdateFrequency.SelectedIndex = 3;  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: switch (AppSettings.DefaultPlayer_GroupList) {  case (int)VideoPlayer.MPV:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  case (int)VideoPlayer.MPC:  	cboDefaultPlayer.SelectedIndex = 1;  	break;  case (int)VideoPlayer.VLC:  	cboDefaultPlayer.SelectedIndex = 2;  	break;  case (int)VideoPlayer.ZoomPlayer:  	cboDefaultPlayer.SelectedIndex = 3;  	break;  case 4:  	// Not handled' placeholder  	return;  case (int)VideoPlayer.ExternalMPV:  	cboDefaultPlayer.SelectedIndex = 5;  	break;  case (int)VideoPlayer.PotPlayer:  	cboDefaultPlayer.SelectedIndex = 6;  	break;  case (int)VideoPlayer.WindowsDefault:  	cboDefaultPlayer.SelectedIndex = 7;  	break;  default:  	cboDefaultPlayer.SelectedIndex = 0;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: cboDefaultPlayer.SelectedIndex = 2;  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: cboDefaultPlayer.SelectedIndex = 3;  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: cboDefaultPlayer.SelectedIndex = 5;  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: cboDefaultPlayer.SelectedIndex = 6;  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,VideoPlayerSettingsControl,The following statement contains a magic number: cboDefaultPlayer.SelectedIndex = 7;  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following statement contains a magic number: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following statement contains a magic number: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Magic Number,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The following statement contains a magic number: try {  	VM_VideoDetailed vd = (VM_VideoDetailed)VM_ShokoServer.Instance.ShokoServices.GetVideoDetailed (info.VideoLocalId' VM_ShokoServer.Instance.CurrentUser.JMMUserID);  	if (vd == null) {  		if (logOutput)  			logger.Debug ("Trakt scrobbling video detail = null");  		return;  	}  	CL_AnimeEpisode_User ep = VM_ShokoServer.Instance.ShokoServices.GetEpisodeByAniDBEpisodeID (vd.AnimeEpisodeID' VM_ShokoServer.Instance.CurrentUser.JMMUserID);  	if (ep != null) {  		double percentagePlayed = (int)Math.Round ((double)(100 * position) / duration);  		if (logOutput) {  			logger.Debug ("Trakt is scrobbling for anime episode id: " + ep.AnimeEpisodeID);  			logger.Debug ("Trakt is scrobbling with played percentage: " + (int)percentagePlayed);  		}  		VM_ShokoServer.Instance.ShokoServices.TraktScrobble (ep.AnimeEpisodeID' (int)ScrobblePlayingType.episode' (int)percentagePlayed' (int)scrobblePlayingStatus);  	}  	if (logOutput)  		logger.Debug ("Trakt scrobbling has finished scrobbling");  } catch (Exception e) {  	if (logOutput)  		logger.Debug ("Error in VideoHandler.TraktScrobble: {0}"' e.ToString ());  }  
Magic Number,Shoko.Desktop.Utilities,TraktHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\TraktHelper.cs,TraktScrobble,The following statement contains a magic number: if (ep != null) {  	double percentagePlayed = (int)Math.Round ((double)(100 * position) / duration);  	if (logOutput) {  		logger.Debug ("Trakt is scrobbling for anime episode id: " + ep.AnimeEpisodeID);  		logger.Debug ("Trakt is scrobbling with played percentage: " + (int)percentagePlayed);  	}  	VM_ShokoServer.Instance.ShokoServices.TraktScrobble (ep.AnimeEpisodeID' (int)ScrobblePlayingType.episode' (int)percentagePlayed' (int)scrobblePlayingStatus);  }  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  } else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (blnForceFileDate) {  	dtBuild = AssemblyFileTime (objAssembly);  } else {  	//dtBuild = ((DateTime)"01/01/2000").AddDays(objVersion.Build).AddSeconds(objVersion.Revision * 2);  	dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  	if (TimeZone.IsDaylightSavingTime (DateTime.Now' TimeZone.CurrentTimeZone.GetDaylightChanges (DateTime.Now.Year))) {  		dtBuild = dtBuild.AddHours (1);  	}  	if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  		dtBuild = AssemblyFileTime (objAssembly);  	}  }  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: dtBuild = Convert.ToDateTime ("01/01/2000").AddDays ((double)objVersion.Build).AddSeconds ((double)(objVersion.Revision * 2));  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,AssemblyBuildDate,The following statement contains a magic number: if (dtBuild > DateTime.Now | objVersion.Build < 730 | objVersion.Revision == 0) {  	dtBuild = AssemblyFileTime (objAssembly);  }  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: switch (strFormatExtension) {  case "jpeg":  	BitmapToJPEG (objBitmap' strFilename' 80);  	break;  default:  	objBitmap.Save (strFilename' _ScreenshotImageFormat);  	break;  }  
Magic Number,Shoko.Desktop.Utilities,UnhandledExceptionManager,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\UnhandledExceptionManager.cs,TakeScreenshotPrivate,The following statement contains a magic number: BitmapToJPEG (objBitmap' strFilename' 80);  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: switch (curFrequency) {  case ScheduledUpdateFrequency.HoursSix:  	cbo.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cbo.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.Daily:  	cbo.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.WeekOne:  	cbo.SelectedIndex = 3;  	break;  case ScheduledUpdateFrequency.MonthOne:  	cbo.SelectedIndex = 4;  	break;  case ScheduledUpdateFrequency.Never:  	cbo.SelectedIndex = 5;  	break;  }  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: switch (curFrequency) {  case ScheduledUpdateFrequency.HoursSix:  	cbo.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cbo.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.Daily:  	cbo.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.WeekOne:  	cbo.SelectedIndex = 3;  	break;  case ScheduledUpdateFrequency.MonthOne:  	cbo.SelectedIndex = 4;  	break;  case ScheduledUpdateFrequency.Never:  	cbo.SelectedIndex = 5;  	break;  }  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: switch (curFrequency) {  case ScheduledUpdateFrequency.HoursSix:  	cbo.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cbo.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.Daily:  	cbo.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.WeekOne:  	cbo.SelectedIndex = 3;  	break;  case ScheduledUpdateFrequency.MonthOne:  	cbo.SelectedIndex = 4;  	break;  case ScheduledUpdateFrequency.Never:  	cbo.SelectedIndex = 5;  	break;  }  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: switch (curFrequency) {  case ScheduledUpdateFrequency.HoursSix:  	cbo.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cbo.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.Daily:  	cbo.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.WeekOne:  	cbo.SelectedIndex = 3;  	break;  case ScheduledUpdateFrequency.MonthOne:  	cbo.SelectedIndex = 4;  	break;  case ScheduledUpdateFrequency.Never:  	cbo.SelectedIndex = 5;  	break;  }  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: cbo.SelectedIndex = 2;  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: cbo.SelectedIndex = 3;  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: cbo.SelectedIndex = 4;  
Magic Number,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following statement contains a magic number: cbo.SelectedIndex = 5;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,ToSearchParameters,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AniDB_Anime,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AniDB_Anime.cs,ToSearchParameters,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (EpisodeTypeEnum == enEpisodeType.Episode) {  	if (tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		List<VM_CrossRef_AniDB_TvDBV2> tvDBCrossRef = tvSummary.CrossRefTvDBV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList ();  		bool foundStartingPoint = false;  		VM_CrossRef_AniDB_TvDBV2 xrefBase = null;  		foreach (VM_CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  			if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  				continue;  			if (EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTV;  				break;  			}  		}  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  			foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  					EpisodeOverviewLoading = string.IsNullOrEmpty (tvep.Overview) ? "Episode Overview Not Available" : tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  						EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  						ShowEpisodeImageInDashboard = false;  					} else  						EpisodeImageLoading = tvep.FullImagePath;  					if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	List<VM_CrossRef_AniDB_TvDBV2> tvDBCrossRef = tvSummary.CrossRefTvDBV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList ();  	bool foundStartingPoint = false;  	VM_CrossRef_AniDB_TvDBV2 xrefBase = null;  	foreach (VM_CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  			continue;  		if (EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  		foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  				EpisodeOverviewLoading = string.IsNullOrEmpty (tvep.Overview) ? "Episode Overview Not Available" : tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  					EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  					ShowEpisodeImageInDashboard = false;  				} else  					EpisodeImageLoading = tvep.FullImagePath;  				if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  	foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  			EpisodeOverviewLoading = string.IsNullOrEmpty (tvep.Overview) ? "Episode Overview Not Available" : tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  				EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  				ShowEpisodeImageInDashboard = false;  			} else  				EpisodeImageLoading = tvep.FullImagePath;  			if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  		EpisodeOverviewLoading = string.IsNullOrEmpty (tvep.Overview) ? "Episode Overview Not Available" : tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  			EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  			ShowEpisodeImageInDashboard = false;  		} else  			EpisodeImageLoading = tvep.FullImagePath;  		if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (EpisodeTypeEnum == enEpisodeType.Special) {  	List<VM_CrossRef_AniDB_TvDBV2> tvDBCrossRef = tvSummary.CrossRefTvDBV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList () ?? new List<VM_CrossRef_AniDB_TvDBV2> ();  	bool foundStartingPoint = false;  	VM_CrossRef_AniDB_TvDBV2 xrefBase = null;  	foreach (VM_CrossRef_AniDB_TvDBV2 xrefTV in tvDBCrossRef) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Special)  			continue;  		if (EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  		if (foundStartingPoint) {  			Dictionary<int' int> dictTvDBSeasons = null;  			Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  			foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  				if (det.TvDBID == xrefBase.TvDBID) {  					dictTvDBSeasons = det.DictTvDBSeasons;  					dictTvDBEpisodes = det.DictTvDBEpisodes;  					break;  				}  			}  			if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  				int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  					VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  					EpisodeOverviewLoading = tvep.Overview;  					if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  						EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  						ShowEpisodeImageInDashboard = false;  					} else  						EpisodeImageLoading = tvep.FullImagePath;  					if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  						EpisodeName = tvep.EpisodeName;  				}  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (tvSummary.CrossRefTvDBV2 != null && tvSummary.CrossRefTvDBV2.Count > 0) {  	if (foundStartingPoint) {  		Dictionary<int' int> dictTvDBSeasons = null;  		Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  		foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  			if (det.TvDBID == xrefBase.TvDBID) {  				dictTvDBSeasons = det.DictTvDBSeasons;  				dictTvDBEpisodes = det.DictTvDBEpisodes;  				break;  			}  		}  		if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  			int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  				VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  				EpisodeOverviewLoading = tvep.Overview;  				if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  					EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  					ShowEpisodeImageInDashboard = false;  				} else  					EpisodeImageLoading = tvep.FullImagePath;  				if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  					EpisodeName = tvep.EpisodeName;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTvDBSeasons = null;  	Dictionary<int' VM_TvDB_Episode> dictTvDBEpisodes = null;  	foreach (VM_TvDBDetails det in tvSummary.TvDetails.Values) {  		if (det.TvDBID == xrefBase.TvDBID) {  			dictTvDBSeasons = det.DictTvDBSeasons;  			dictTvDBEpisodes = det.DictTvDBEpisodes;  			break;  		}  	}  	if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  		int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  			VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  			EpisodeOverviewLoading = tvep.Overview;  			if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  				EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  				ShowEpisodeImageInDashboard = false;  			} else  				EpisodeImageLoading = tvep.FullImagePath;  			if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  				EpisodeName = tvep.EpisodeName;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTvDBInfo,The following statement contains a magic number: if (dictTvDBSeasons != null && dictTvDBSeasons.ContainsKey (xrefBase.TvDBSeasonNumber)) {  	int episodeNumber = dictTvDBSeasons [xrefBase.TvDBSeasonNumber] + (EpisodeNumber + xrefBase.TvDBStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTvDBEpisodes.ContainsKey (episodeNumber)) {  		VM_TvDB_Episode tvep = dictTvDBEpisodes [episodeNumber];  		EpisodeOverviewLoading = tvep.Overview;  		if (string.IsNullOrEmpty (tvep.FullImagePathPlain) || !File.Exists (tvep.FullImagePath)) {  			EpisodeImageLoading = @"/Images/EpisodeThumb_NotFound.png";  			ShowEpisodeImageInDashboard = false;  		} else  			EpisodeImageLoading = tvep.FullImagePath;  		if (VM_ShokoServer.Instance.EpisodeTitleSource == DataSourceType.TheTvDB && !string.IsNullOrEmpty (tvep.EpisodeName))  			EpisodeName = tvep.EpisodeName;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (EpisodeTypeEnum == enEpisodeType.Episode) {  	if (traktSummary.CrossRefTraktV2 != null && traktSummary.CrossRefTraktV2.Count > 0) {  		List<VM_CrossRef_AniDB_TraktV2> traktCrossRefs = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList ();  		bool foundStartingPoint = false;  		VM_CrossRef_AniDB_TraktV2 xrefBase = null;  		foreach (VM_CrossRef_AniDB_TraktV2 xrefTV in traktCrossRefs) {  			if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  				continue;  			if (EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTV;  				break;  			}  		}  		if (foundStartingPoint) {  			Dictionary<int' int> dictTraktSeasons = null;  			Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  			foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  				if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  					dictTraktSeasons = det.DictTraktSeasons;  					dictTraktEpisodes = det.DictTraktEpisodes;  					break;  				}  			}  			if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  				int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  					VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  					TraktLinkExists = true;  					TraktLinkMissing = false;  					TraktEpisodeURL = traktEp.URL;  				}  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (traktSummary.CrossRefTraktV2 != null && traktSummary.CrossRefTraktV2.Count > 0) {  	List<VM_CrossRef_AniDB_TraktV2> traktCrossRefs = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList ();  	bool foundStartingPoint = false;  	VM_CrossRef_AniDB_TraktV2 xrefBase = null;  	foreach (VM_CrossRef_AniDB_TraktV2 xrefTV in traktCrossRefs) {  		if (xrefTV.AniDBStartEpisodeType != (int)enEpisodeType.Episode)  			continue;  		if (EpisodeNumber >= xrefTV.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTV;  			break;  		}  	}  	if (foundStartingPoint) {  		Dictionary<int' int> dictTraktSeasons = null;  		Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  		foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  			if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  				dictTraktSeasons = det.DictTraktSeasons;  				dictTraktEpisodes = det.DictTraktEpisodes;  				break;  			}  		}  		if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  			int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  				VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  				TraktLinkExists = true;  				TraktLinkMissing = false;  				TraktEpisodeURL = traktEp.URL;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTraktSeasons = null;  	Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  	foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  		if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  			dictTraktSeasons = det.DictTraktSeasons;  			dictTraktEpisodes = det.DictTraktEpisodes;  			break;  		}  	}  	if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  		int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  			VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  			TraktLinkExists = true;  			TraktLinkMissing = false;  			TraktEpisodeURL = traktEp.URL;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  	int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  		VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  		TraktLinkExists = true;  		TraktLinkMissing = false;  		TraktEpisodeURL = traktEp.URL;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (EpisodeTypeEnum == enEpisodeType.Special) {  	if (traktSummary != null) {  		List<VM_CrossRef_AniDB_TraktV2> traktCrossRef = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList () ?? new List<VM_CrossRef_AniDB_TraktV2> ();  		bool foundStartingPoint = false;  		VM_CrossRef_AniDB_TraktV2 xrefBase = null;  		foreach (VM_CrossRef_AniDB_TraktV2 xrefTrakt in traktCrossRef) {  			if (xrefTrakt.AniDBStartEpisodeType != (int)enEpisodeType.Special)  				continue;  			if (EpisodeNumber >= xrefTrakt.AniDBStartEpisodeNumber) {  				foundStartingPoint = true;  				xrefBase = xrefTrakt;  				break;  			}  		}  		if (traktSummary.CrossRefTraktV2 != null && traktSummary.CrossRefTraktV2.Count > 0) {  			if (foundStartingPoint) {  				Dictionary<int' int> dictTraktSeasons = null;  				Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  				foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  					if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  						dictTraktSeasons = det.DictTraktSeasons;  						dictTraktEpisodes = det.DictTraktEpisodes;  						break;  					}  				}  				if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  					int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  					if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  						VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  						TraktLinkExists = true;  						TraktLinkMissing = false;  						TraktEpisodeURL = traktEp.URL;  					}  				}  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (traktSummary != null) {  	List<VM_CrossRef_AniDB_TraktV2> traktCrossRef = traktSummary.CrossRefTraktV2.OrderByDescending (a => a.AniDBStartEpisodeNumber).ToList () ?? new List<VM_CrossRef_AniDB_TraktV2> ();  	bool foundStartingPoint = false;  	VM_CrossRef_AniDB_TraktV2 xrefBase = null;  	foreach (VM_CrossRef_AniDB_TraktV2 xrefTrakt in traktCrossRef) {  		if (xrefTrakt.AniDBStartEpisodeType != (int)enEpisodeType.Special)  			continue;  		if (EpisodeNumber >= xrefTrakt.AniDBStartEpisodeNumber) {  			foundStartingPoint = true;  			xrefBase = xrefTrakt;  			break;  		}  	}  	if (traktSummary.CrossRefTraktV2 != null && traktSummary.CrossRefTraktV2.Count > 0) {  		if (foundStartingPoint) {  			Dictionary<int' int> dictTraktSeasons = null;  			Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  			foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  				if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  					dictTraktSeasons = det.DictTraktSeasons;  					dictTraktEpisodes = det.DictTraktEpisodes;  					break;  				}  			}  			if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  				int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  				if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  					VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  					TraktLinkExists = true;  					TraktLinkMissing = false;  					TraktEpisodeURL = traktEp.URL;  				}  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (traktSummary.CrossRefTraktV2 != null && traktSummary.CrossRefTraktV2.Count > 0) {  	if (foundStartingPoint) {  		Dictionary<int' int> dictTraktSeasons = null;  		Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  		foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  			if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  				dictTraktSeasons = det.DictTraktSeasons;  				dictTraktEpisodes = det.DictTraktEpisodes;  				break;  			}  		}  		if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  			int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  			if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  				VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  				TraktLinkExists = true;  				TraktLinkMissing = false;  				TraktEpisodeURL = traktEp.URL;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (foundStartingPoint) {  	Dictionary<int' int> dictTraktSeasons = null;  	Dictionary<int' VM_Trakt_Episode> dictTraktEpisodes = null;  	foreach (VM_TraktDetails det in traktSummary.traktDetails.Values) {  		if (det.TraktID.Equals (xrefBase.TraktID' StringComparison.InvariantCultureIgnoreCase)) {  			dictTraktSeasons = det.DictTraktSeasons;  			dictTraktEpisodes = det.DictTraktEpisodes;  			break;  		}  	}  	if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  		int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  		if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  			VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  			TraktLinkExists = true;  			TraktLinkMissing = false;  			TraktEpisodeURL = traktEp.URL;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The following statement contains a magic number: if (dictTraktSeasons != null && dictTraktSeasons.ContainsKey (xrefBase.TraktSeasonNumber)) {  	int episodeNumber = dictTraktSeasons [xrefBase.TraktSeasonNumber] + (EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) - (xrefBase.AniDBStartEpisodeNumber - 1);  	if (dictTraktEpisodes.ContainsKey (episodeNumber)) {  		VM_Trakt_Episode traktEp = dictTraktEpisodes [episodeNumber];  		TraktLinkExists = true;  		TraktLinkMissing = false;  		TraktEpisodeURL = traktEp.URL;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndName.Length > 60)  	EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndName.Length > 60)  	EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: EpisodeNumberAndNameTruncated = EpisodeNumberAndName.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndNameWithTypeTruncated.Length > 60)  	EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: if (EpisodeNumberAndNameWithTypeTruncated.Length > 60)  	EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following statement contains a magic number: EpisodeNumberAndNameWithTypeTruncated = EpisodeNumberAndNameWithType.Substring (0' 60) + "...";  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,ToSearchParameters,The following statement contains a magic number: foreach (string s in titles) {  	i++;  	parms.Add (s.Trim ());  	if (i == 2)  		break;  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,ToSearchParameters,The following statement contains a magic number: if (i == 2)  	break;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,ToSearchParameters,The following statement contains a magic number: parms.Add (EpisodeNumber.ToString ().PadLeft (2' '0'));  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveSeries,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)PlaylistItemType.AnimeSeries && objID == animeSeriesID) {  	} else {  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += ;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveSeries,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveEpisode,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)PlaylistItemType.Episode && objID == animeEpisodeID) {  	} else {  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += ;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,RemoveEpisode,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,IsAlreadyInPlaylist,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == (int)pType && objID == id)  		return true;  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,IsAlreadyInPlaylist,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,PopulatePlaylistObjects,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if ((PlaylistItemType)objType == PlaylistItemType.AnimeSeries) {  		VM_AnimeSeries_User ser;  		if (VM_MainListHelper.Instance.AllSeriesDictionary.TryGetValue (objID' out ser) == false) {  			ser = (VM_AnimeSeries_User)VM_ShokoServer.Instance.ShokoServices.GetSeries (objID' VM_ShokoServer.Instance.CurrentUser.JMMUserID);  			if (ser != null) {  				VM_MainListHelper.Instance.AllSeriesDictionary [objID] = ser;  			}  		}  		if (ser != null)  			PlaylistObjects.Add (new VM_PlaylistItem (PlaylistID' PlaylistItemType.AnimeSeries' ser));  	} else {  		VM_AnimeEpisode_User ep = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetEpisode (objID' VM_ShokoServer.Instance.CurrentUser.JMMUserID);  		if (ep != null) {  			PlaylistObjects.Add (new VM_PlaylistItem (PlaylistID' PlaylistItemType.Episode' ep));  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,PopulatePlaylistObjects,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	if (!int.TryParse (parms [0]' out objType))  		continue;  	if (!int.TryParse (parms [1]' out objID))  		continue;  	if (objType == iType && objID == objIDOld) {  	} else {  		if (newItemList.Length > 0)  			newItemList += "|";  		newItemList += ;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The following statement contains a magic number: if (string.IsNullOrEmpty (newItemList)) {  	PlaylistItems += ;  } else {  	foreach (string pitem in items) {  		string[] parms = pitem.Split (';');  		if (parms.Length != 2)  			continue;  		int objType;  		int objID;  		int.TryParse (parms [0]' out objType);  		int.TryParse (parms [1]' out objID);  		if (curPos == dropInfo.InsertIndex) {  			if (PlaylistItems.Length > 0)  				PlaylistItems += "|";  			PlaylistItems += ;  		}  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += ;  		curPos++;  	}  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The following statement contains a magic number: foreach (string pitem in items) {  	string[] parms = pitem.Split (';');  	if (parms.Length != 2)  		continue;  	int objType;  	int objID;  	int.TryParse (parms [0]' out objType);  	int.TryParse (parms [1]' out objID);  	if (curPos == dropInfo.InsertIndex) {  		if (PlaylistItems.Length > 0)  			PlaylistItems += "|";  		PlaylistItems += ;  	}  	if (PlaylistItems.Length > 0)  		PlaylistItems += "|";  	PlaylistItems += ;  	curPos++;  }  
Magic Number,Shoko.Desktop.ViewModel.Server,VM_Playlist,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_Playlist.cs,Drop,The following statement contains a magic number: if (parms.Length != 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		ContinueWatching.Clear ();  	});  	DateTime start = DateTime.Now;  	List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetContinueWatchingFilter (VM_ShokoServer.Instance.CurrentUser.JMMUserID' VM_UserSettings.Instance.DashMetro_WatchNext_Items).CastList<VM_AnimeEpisode_User> ();  	TimeSpan ts = DateTime.Now - start;  	logger.Trace ("Dashboard Time: RefreshEpsWatchNext_Recent: contracts: {0}"' ts.TotalMilliseconds);  	start = DateTime.Now;  	List<VM_AnimeEpisode_User> epList = new List<VM_AnimeEpisode_User> ();  	foreach (VM_AnimeEpisode_User ep in epContracts) {  		ep.RefreshAnime ();  		if (ep.AniDBAnime == null)  			ep.RefreshAnime (true);  		epList.Add (ep);  	}  	ts = DateTime.Now - start;  	logger.Trace ("Dashboard Time: RefreshEpsWatchNext_Recent: episode details: {0}"' ts.TotalMilliseconds);  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		foreach (VM_AnimeEpisode_User ep in epList) {  			var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AniDBAnime.FanartPath : ep.AniDBAnime.PosterPathWithRandoms;  			ContinueWatching.Add (new ContinueWatchingTile () {  				EpisodeDetails = ep.EpisodeNumberAndName'  				AnimeName = ep.AnimeSeries.SeriesName'  				Picture = imageName'  				AnimeSeries = ep.AnimeSeries'  				UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  				TileSize = "Large"'  				Height = 100  			});  		}  		ViewContinueWatching.Refresh ();  	});  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.ContinueWatching));  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  	foreach (VM_AnimeEpisode_User ep in epList) {  		var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AniDBAnime.FanartPath : ep.AniDBAnime.PosterPathWithRandoms;  		ContinueWatching.Add (new ContinueWatchingTile () {  			EpisodeDetails = ep.EpisodeNumberAndName'  			AnimeName = ep.AnimeSeries.SeriesName'  			Picture = imageName'  			AnimeSeries = ep.AnimeSeries'  			UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  			TileSize = "Large"'  			Height = 100  		});  	}  	ViewContinueWatching.Refresh ();  });  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The following statement contains a magic number: foreach (VM_AnimeEpisode_User ep in epList) {  	var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AniDBAnime.FanartPath : ep.AniDBAnime.PosterPathWithRandoms;  	ContinueWatching.Add (new ContinueWatchingTile () {  		EpisodeDetails = ep.EpisodeNumberAndName'  		AnimeName = ep.AnimeSeries.SeriesName'  		Picture = imageName'  		AnimeSeries = ep.AnimeSeries'  		UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  		TileSize = "Large"'  		Height = 100  	});  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshContinueWatching,The following statement contains a magic number: ContinueWatching.Add (new ContinueWatchingTile () {  	EpisodeDetails = ep.EpisodeNumberAndName'  	AnimeName = ep.AnimeSeries.SeriesName'  	Picture = imageName'  	AnimeSeries = ep.AnimeSeries'  	UnwatchedEpisodes = ep.AnimeSeries.UnwatchedEpisodeCount'  	TileSize = "Large"'  	Height = 100  });  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The following statement contains a magic number: try {  	logger.Trace ("XXX1 RefreshRandomSeries");  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		RandomSeries.Clear ();  	});  	logger.Trace ("XXX2 RefreshRandomSeries");  	List<VM_AnimeSeries_User> serList = new List<VM_AnimeSeries_User> ();  	logger.Trace ("XXX3 RefreshRandomSeries");  	foreach (VM_AnimeGroup_User grp in VM_MainListHelper.Instance.AllGroupsDictionary.Values) {  		if (grp.AnimeGroupParentID.HasValue)  			continue;  		foreach (VM_AnimeSeries_User ser in grp.AllAnimeSeries) {  			if (!ser.IsComplete)  				continue;  			if (ser.AllFilesWatched)  				continue;  			if (!VM_ShokoServer.Instance.CurrentUser.EvaluateSeries (ser))  				continue;  			serList.Add (ser);  		}  	}  	DateTime start = DateTime.Now;  	logger.Trace ("XXX4 RefreshRandomSeries");  	var serShuffledList = serList.OrderBy (a => Guid.NewGuid ());  	TimeSpan ts = DateTime.Now - start;  	logger.Trace ();  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		foreach (VM_AnimeSeries_User ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  			var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ser.AniDBAnime.AniDBAnime.FanartPath : ser.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  			RandomSeries.Add (new RandomSeriesTile () {  				Details = ""'  				AnimeName = ser.SeriesName'  				Picture = imageName'  				AnimeSeries = ser'  				TileSize = "Large"'  				Height = 100  			});  		}  		ViewRandomSeries.Refresh ();  	});  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.RandomSeries));  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  	foreach (VM_AnimeSeries_User ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  		var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ser.AniDBAnime.AniDBAnime.FanartPath : ser.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  		RandomSeries.Add (new RandomSeriesTile () {  			Details = ""'  			AnimeName = ser.SeriesName'  			Picture = imageName'  			AnimeSeries = ser'  			TileSize = "Large"'  			Height = 100  		});  	}  	ViewRandomSeries.Refresh ();  });  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The following statement contains a magic number: foreach (VM_AnimeSeries_User ser in serShuffledList.Take (AppSettings.DashMetro_RandomSeries_Items)) {  	var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ser.AniDBAnime.AniDBAnime.FanartPath : ser.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  	RandomSeries.Add (new RandomSeriesTile () {  		Details = ""'  		AnimeName = ser.SeriesName'  		Picture = imageName'  		AnimeSeries = ser'  		TileSize = "Large"'  		Height = 100  	});  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshRandomSeries,The following statement contains a magic number: RandomSeries.Add (new RandomSeriesTile () {  	Details = ""'  	AnimeName = ser.SeriesName'  	Picture = imageName'  	AnimeSeries = ser'  	TileSize = "Large"'  	Height = 100  });  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The following statement contains a magic number: try {  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		NewEpisodes.Clear ();  	});  	List<VM_AnimeEpisode_User> epContracts = VM_ShokoServer.Instance.ShokoServices.GetEpisodesRecentlyAddedSummary (VM_UserSettings.Instance.DashMetro_NewEpisodes_Items' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> ();  	foreach (VM_AnimeEpisode_User ep in epContracts) {  		ep.RefreshAnime ();  		if (ep.AniDBAnime == null)  			ep.RefreshAnime (true);  		if (ep.AniDBAnime != null) {  			var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AnimeSeries.AniDBAnime.AniDBAnime.FanartPath : ep.AnimeSeries.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  			NewEpisodeTile tile = new NewEpisodeTile () {  				EpisodeDetails = ep.EpisodeNumberAndName'  				AnimeName = ep.AnimeSeries.SeriesName'  				Picture = imageName'  				AnimeSeries = ep.AnimeSeries'  				TileSize = "Large"'  				Height = 100  			};  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  				NewEpisodes.Add (tile);  			});  		}  	}  	OnFinishedProcess (new FinishedProcessEventArgs (DashboardMetroProcessType.NewEpisodes));  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The following statement contains a magic number: foreach (VM_AnimeEpisode_User ep in epContracts) {  	ep.RefreshAnime ();  	if (ep.AniDBAnime == null)  		ep.RefreshAnime (true);  	if (ep.AniDBAnime != null) {  		var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AnimeSeries.AniDBAnime.AniDBAnime.FanartPath : ep.AnimeSeries.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  		NewEpisodeTile tile = new NewEpisodeTile () {  			EpisodeDetails = ep.EpisodeNumberAndName'  			AnimeName = ep.AnimeSeries.SeriesName'  			Picture = imageName'  			AnimeSeries = ep.AnimeSeries'  			TileSize = "Large"'  			Height = 100  		};  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  			NewEpisodes.Add (tile);  		});  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_DashboardMetro,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_DashboardMetro.cs,RefreshNewEpisodes,The following statement contains a magic number: if (ep.AniDBAnime != null) {  	var imageName = AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart ? ep.AnimeSeries.AniDBAnime.AniDBAnime.FanartPath : ep.AnimeSeries.AniDBAnime.AniDBAnime.PosterPathWithRandoms;  	NewEpisodeTile tile = new NewEpisodeTile () {  		EpisodeDetails = ep.EpisodeNumberAndName'  		AnimeName = ep.AnimeSeries.SeriesName'  		Picture = imageName'  		AnimeSeries = ep.AnimeSeries'  		TileSize = "Large"'  		Height = 100  	};  	System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate {  		NewEpisodes.Add (tile);  	});  }  
Magic Number,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,SearchTextBox_TextChanged,The following statement contains a magic number: searchTimer = new Timer {  	AutoReset = false'  	Interval = 500  };  
Magic Number,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,SeriesSearchFilter,The following statement contains a magic number: if (SearchResultCount > 100)  	return false;  
Magic Number,Shoko.Desktop.ViewModel,VM_MainListHelper,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_MainListHelper.cs,MoveBackUpHeirarchy,The following statement contains a magic number: try {  	IListWrapper wrapper = BreadCrumbs [BreadCrumbs.Count - 2];  	ShowChildWrappers (wrapper);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,SaveServerSettingsAsync,The following statement contains a magic number: saveTimer.Interval = 1 * 1000;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,Init,The following statement contains a magic number: serverStatusTimer.Interval = 4 * 1000;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	CL_ServerStatus status = Instance.ShokoServices.GetServerStatus ();  	CL_AppVersions appv = null;  	if (ts.TotalMinutes > 180) {  		//appv = VM_ShokoServer.Instance.clientBinaryHTTP.GetAppVersions();  		lastVersionCheck = DateTime.Now;  		// check for admin messages  		AdminMessages.Clear ();  		List<Azure_AdminMessage> msgs = Instance.ShokoServices.GetAdminMessages ();  		if (msgs != null) {  			foreach (Azure_AdminMessage msg in msgs) {  				AdminMessages.Add (msg);  			}  		}  		AdminMessagesAvailable = AdminMessages.Count > 0;  		// check if this user is allowed to admin the web cache  		ShowCommunity = Instance.ShokoServices.IsWebCacheAdmin ();  	}  	Application.Current.Dispatcher.Invoke (DispatcherPriority.Normal' (Action)delegate {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		QueueStateStruct queueState = new QueueStateStruct {  			queueState = (QueueStateEnum)status.HashQueueStateId'  			extraParams = status.HashQueueStateParams.ToArray ()  		};  		HasherQueueState = queueState.formatMessage ();  		HasherQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		HasherQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.GeneralQueueStateId;  		queueState.extraParams = status.GeneralQueueStateParams.ToArray ();  		GeneralQueueState = queueState.formatMessage ();  		GeneralQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		GeneralQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.ImagesQueueStateId;  		queueState.extraParams = status.ImagesQueueStateParams.ToArray ();  		ServerImageQueueState = queueState.formatMessage ();  		ServerImageQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		ServerImageQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor;  			string curMajor;  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			} else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  } catch {  	// ignored  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	CL_ServerStatus status = Instance.ShokoServices.GetServerStatus ();  	CL_AppVersions appv = null;  	if (ts.TotalMinutes > 180) {  		//appv = VM_ShokoServer.Instance.clientBinaryHTTP.GetAppVersions();  		lastVersionCheck = DateTime.Now;  		// check for admin messages  		AdminMessages.Clear ();  		List<Azure_AdminMessage> msgs = Instance.ShokoServices.GetAdminMessages ();  		if (msgs != null) {  			foreach (Azure_AdminMessage msg in msgs) {  				AdminMessages.Add (msg);  			}  		}  		AdminMessagesAvailable = AdminMessages.Count > 0;  		// check if this user is allowed to admin the web cache  		ShowCommunity = Instance.ShokoServices.IsWebCacheAdmin ();  	}  	Application.Current.Dispatcher.Invoke (DispatcherPriority.Normal' (Action)delegate {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		QueueStateStruct queueState = new QueueStateStruct {  			queueState = (QueueStateEnum)status.HashQueueStateId'  			extraParams = status.HashQueueStateParams.ToArray ()  		};  		HasherQueueState = queueState.formatMessage ();  		HasherQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		HasherQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.GeneralQueueStateId;  		queueState.extraParams = status.GeneralQueueStateParams.ToArray ();  		GeneralQueueState = queueState.formatMessage ();  		GeneralQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		GeneralQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.ImagesQueueStateId;  		queueState.extraParams = status.ImagesQueueStateParams.ToArray ();  		ServerImageQueueState = queueState.formatMessage ();  		ServerImageQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		ServerImageQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor;  			string curMajor;  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			} else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  } catch {  	// ignored  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: try {  	TimeSpan ts = DateTime.Now - lastVersionCheck;  	CL_ServerStatus status = Instance.ShokoServices.GetServerStatus ();  	CL_AppVersions appv = null;  	if (ts.TotalMinutes > 180) {  		//appv = VM_ShokoServer.Instance.clientBinaryHTTP.GetAppVersions();  		lastVersionCheck = DateTime.Now;  		// check for admin messages  		AdminMessages.Clear ();  		List<Azure_AdminMessage> msgs = Instance.ShokoServices.GetAdminMessages ();  		if (msgs != null) {  			foreach (Azure_AdminMessage msg in msgs) {  				AdminMessages.Add (msg);  			}  		}  		AdminMessagesAvailable = AdminMessages.Count > 0;  		// check if this user is allowed to admin the web cache  		ShowCommunity = Instance.ShokoServices.IsWebCacheAdmin ();  	}  	Application.Current.Dispatcher.Invoke (DispatcherPriority.Normal' (Action)delegate {  		HasherQueueCount = status.HashQueueCount;  		GeneralQueueCount = status.GeneralQueueCount;  		ServerImageQueueCount = status.ImagesQueueCount;  		QueueStateStruct queueState = new QueueStateStruct {  			queueState = (QueueStateEnum)status.HashQueueStateId'  			extraParams = status.HashQueueStateParams.ToArray ()  		};  		HasherQueueState = queueState.formatMessage ();  		HasherQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		HasherQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.GeneralQueueStateId;  		queueState.extraParams = status.GeneralQueueStateParams.ToArray ();  		GeneralQueueState = queueState.formatMessage ();  		GeneralQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		GeneralQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		queueState.queueState = (QueueStateEnum)status.ImagesQueueStateId;  		queueState.extraParams = status.ImagesQueueStateParams.ToArray ();  		ServerImageQueueState = queueState.formatMessage ();  		ServerImageQueuePaused = queueState.queueState == QueueStateEnum.Paused;  		ServerImageQueueRunning = queueState.queueState != QueueStateEnum.Paused;  		IsBanned = status.IsBanned;  		BanReason = status.BanReason;  		BanOrigin = status.BanOrigin;  		if (appv != null) {  			string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  			string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  			string[] curNumbers = curVersion.Split ('.');  			string latestMajor;  			string curMajor;  			decimal lmajor = decimal.Parse (latestMajor);  			decimal cmajor = decimal.Parse (curMajor);  			NewVersionAvailable = false;  			if (lmajor > cmajor) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			} else if (lmajor == cmajor) {  				if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  					NewVersionAvailable = true;  					NewVersionDownloadLink = appv.JMMDesktopDownload;  					NewVersionNumber = appv.JMMDesktopVersion;  				}  			}  		}  	});  } catch {  	// ignored  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (ts.TotalMinutes > 180) {  	//appv = VM_ShokoServer.Instance.clientBinaryHTTP.GetAppVersions();  	lastVersionCheck = DateTime.Now;  	// check for admin messages  	AdminMessages.Clear ();  	List<Azure_AdminMessage> msgs = Instance.ShokoServices.GetAdminMessages ();  	if (msgs != null) {  		foreach (Azure_AdminMessage msg in msgs) {  			AdminMessages.Add (msg);  		}  	}  	AdminMessagesAvailable = AdminMessages.Count > 0;  	// check if this user is allowed to admin the web cache  	ShowCommunity = Instance.ShokoServices.IsWebCacheAdmin ();  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: Application.Current.Dispatcher.Invoke (DispatcherPriority.Normal' (Action)delegate {  	HasherQueueCount = status.HashQueueCount;  	GeneralQueueCount = status.GeneralQueueCount;  	ServerImageQueueCount = status.ImagesQueueCount;  	QueueStateStruct queueState = new QueueStateStruct {  		queueState = (QueueStateEnum)status.HashQueueStateId'  		extraParams = status.HashQueueStateParams.ToArray ()  	};  	HasherQueueState = queueState.formatMessage ();  	HasherQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	HasherQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	queueState.queueState = (QueueStateEnum)status.GeneralQueueStateId;  	queueState.extraParams = status.GeneralQueueStateParams.ToArray ();  	GeneralQueueState = queueState.formatMessage ();  	GeneralQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	GeneralQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	queueState.queueState = (QueueStateEnum)status.ImagesQueueStateId;  	queueState.extraParams = status.ImagesQueueStateParams.ToArray ();  	ServerImageQueueState = queueState.formatMessage ();  	ServerImageQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	ServerImageQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	IsBanned = status.IsBanned;  	BanReason = status.BanReason;  	BanOrigin = status.BanOrigin;  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor;  		string curMajor;  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		NewVersionAvailable = false;  		if (lmajor > cmajor) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		} else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  		}  	}  });  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: Application.Current.Dispatcher.Invoke (DispatcherPriority.Normal' (Action)delegate {  	HasherQueueCount = status.HashQueueCount;  	GeneralQueueCount = status.GeneralQueueCount;  	ServerImageQueueCount = status.ImagesQueueCount;  	QueueStateStruct queueState = new QueueStateStruct {  		queueState = (QueueStateEnum)status.HashQueueStateId'  		extraParams = status.HashQueueStateParams.ToArray ()  	};  	HasherQueueState = queueState.formatMessage ();  	HasherQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	HasherQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	queueState.queueState = (QueueStateEnum)status.GeneralQueueStateId;  	queueState.extraParams = status.GeneralQueueStateParams.ToArray ();  	GeneralQueueState = queueState.formatMessage ();  	GeneralQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	GeneralQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	queueState.queueState = (QueueStateEnum)status.ImagesQueueStateId;  	queueState.extraParams = status.ImagesQueueStateParams.ToArray ();  	ServerImageQueueState = queueState.formatMessage ();  	ServerImageQueuePaused = queueState.queueState == QueueStateEnum.Paused;  	ServerImageQueueRunning = queueState.queueState != QueueStateEnum.Paused;  	IsBanned = status.IsBanned;  	BanReason = status.BanReason;  	BanOrigin = status.BanOrigin;  	if (appv != null) {  		string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  		string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  		string[] curNumbers = curVersion.Split ('.');  		string latestMajor;  		string curMajor;  		decimal lmajor = decimal.Parse (latestMajor);  		decimal cmajor = decimal.Parse (curMajor);  		NewVersionAvailable = false;  		if (lmajor > cmajor) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		} else if (lmajor == cmajor) {  			if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  				NewVersionAvailable = true;  				NewVersionDownloadLink = appv.JMMDesktopDownload;  				NewVersionNumber = appv.JMMDesktopVersion;  			}  		}  	}  });  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor;  	string curMajor;  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	NewVersionAvailable = false;  	if (lmajor > cmajor) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	} else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (appv != null) {  	string curVersion = Utils.GetApplicationVersion (Assembly.GetExecutingAssembly ());  	string[] latestNumbers = appv.JMMDesktopVersion.Split ('.');  	string[] curNumbers = curVersion.Split ('.');  	string latestMajor;  	string curMajor;  	decimal lmajor = decimal.Parse (latestMajor);  	decimal cmajor = decimal.Parse (curMajor);  	NewVersionAvailable = false;  	if (lmajor > cmajor) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	} else if (lmajor == cmajor) {  		if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  			NewVersionAvailable = true;  			NewVersionDownloadLink = appv.JMMDesktopDownload;  			NewVersionNumber = appv.JMMDesktopVersion;  		}  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (lmajor > cmajor) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  } else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (lmajor > cmajor) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  } else if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (lmajor == cmajor) {  	if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  		NewVersionAvailable = true;  		NewVersionDownloadLink = appv.JMMDesktopDownload;  		NewVersionNumber = appv.JMMDesktopVersion;  	}  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,updateServerStatus,The following statement contains a magic number: if (int.Parse (latestNumbers [2]) > int.Parse (curNumbers [2])) {  	NewVersionAvailable = true;  	NewVersionDownloadLink = appv.JMMDesktopDownload;  	NewVersionNumber = appv.JMMDesktopVersion;  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RemoveNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	if (lan.Trim ().ToUpper () == oldLan.Trim ().ToUpper ())  		continue;  	if (!string.IsNullOrEmpty (LanguagePreference))  		LanguagePreference += "'";  	LanguagePreference += lan;  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RemoveNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveUpNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	languages.Add (lan);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveUpNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveDownNamingLanguage,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	languages.Add (lan);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,MoveDownNamingLanguage,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RefreshNamingLanguages,The following statement contains a magic number: try {  	string[] lans = LanguagePreference.Split (''');  	foreach (string lan in lans) {  		if (string.IsNullOrEmpty (lan))  			continue;  		if (lan.Trim ().Length < 2)  			continue;  		NamingLanguage selLan = new NamingLanguage (lan);  		SelectedLanguages.Add (selLan);  	}  	foreach (NamingLanguage nlan in Languages.AllNamingLanguages) {  		bool inSelected = false;  		foreach (NamingLanguage selLan in SelectedLanguages) {  			if (nlan.Language.Trim ().ToUpper () == selLan.Language.Trim ().ToUpper ()) {  				inSelected = true;  				break;  			}  		}  		if (!inSelected)  			UnselectedLanguages.Add (nlan);  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RefreshNamingLanguages,The following statement contains a magic number: foreach (string lan in lans) {  	if (string.IsNullOrEmpty (lan))  		continue;  	if (lan.Trim ().Length < 2)  		continue;  	NamingLanguage selLan = new NamingLanguage (lan);  	SelectedLanguages.Add (selLan);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_ShokoServer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_ShokoServer.cs,RefreshNamingLanguages,The following statement contains a magic number: if (lan.Trim ().Length < 2)  	continue;  
Magic Number,Shoko.Desktop.ViewModel,VM_UserSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_UserSettings.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)(DashMetro_Image_Height * 1.777777777777778);  } else {  	DashMetro_Image_Width = (int)(DashMetro_Image_Height * 0.68);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_UserSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_UserSettings.cs,SetDashMetro_Image_Width,The following statement contains a magic number: if (AppSettings.DashMetroImageType == DashboardMetroImageType.Fanart) {  	DashMetro_Image_Width = (int)(DashMetro_Image_Height * 1.777777777777778);  } else {  	DashMetro_Image_Width = (int)(DashMetro_Image_Height * 0.68);  }  
Magic Number,Shoko.Desktop.ViewModel,VM_UserSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_UserSettings.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_Width = (int)(DashMetro_Image_Height * 1.777777777777778);  
Magic Number,Shoko.Desktop.ViewModel,VM_UserSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_UserSettings.cs,SetDashMetro_Image_Width,The following statement contains a magic number: DashMetro_Image_Width = (int)(DashMetro_Image_Height * 0.68);  
Magic Number,Shoko.Desktop.WPFHelpers,UriToImageConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\UriToImageConverter.cs,Convert,The following statement contains a magic number: if (value is Uri) {  	BitmapImage bi = new BitmapImage ();  	bi.BeginInit ();  	bi.DecodePixelWidth = 200;  	//bi.DecodePixelHeight = 60;                  	bi.UriSource = (Uri)value;  	bi.EndInit ();  	return bi;  }  
Magic Number,Shoko.Desktop.WPFHelpers,UriToImageConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\WPFHelpers\UriToImageConverter.cs,Convert,The following statement contains a magic number: bi.DecodePixelWidth = 200;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,AnimeSeries_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,AnimeSeries_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,AnimeSeries_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_PlayNextEpisode = VM_UserSettings.Instance.GetSeriesWidgetPosition (SeriesWidgets.PlayNextEpisode) + 4;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_TvDBLinks = VM_UserSettings.Instance.GetSeriesWidgetPosition (SeriesWidgets.TvDBLinks) + 4;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_Titles = VM_UserSettings.Instance.GetSeriesWidgetPosition (SeriesWidgets.Titles) + 4;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_Tags = VM_UserSettings.Instance.GetSeriesWidgetPosition (SeriesWidgets.Tags) + 4;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetSeriesWidgetOrder,The following statement contains a magic number: SeriesPos_CustomTags = VM_UserSettings.Instance.GetSeriesWidgetPosition (SeriesWidgets.CustomTags) + 4;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	} else if (tab.SelectedIndex == 3)// related and similar  	 {  		Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		Cursor = Cursors.Wait;  		ucTraktShouts.RefreshComments ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 5)// files  	 {  		Cursor = Cursors.Wait;  		ShowFileSummary ();  		Cursor = Cursors.Arrow;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	} else if (tab.SelectedIndex == 3)// related and similar  	 {  		Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		Cursor = Cursors.Wait;  		ucTraktShouts.RefreshComments ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 5)// files  	 {  		Cursor = Cursors.Wait;  		ShowFileSummary ();  		Cursor = Cursors.Arrow;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	} else if (tab.SelectedIndex == 3)// related and similar  	 {  		Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		Cursor = Cursors.Wait;  		ucTraktShouts.RefreshComments ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 5)// files  	 {  		Cursor = Cursors.Wait;  		ShowFileSummary ();  		Cursor = Cursors.Arrow;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (e.Source is TabControl) {  	TabControl tab = e.Source as TabControl;  	if (tab.SelectedIndex == 1)// episodes  	 {  		Cursor = Cursors.Wait;  		epListMain.PopulateToolbars ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 2)// images  	 {  		RefreshImagesData ();  	} else if (tab.SelectedIndex == 3)// related and similar  	 {  		Cursor = Cursors.Wait;  		ucSimilarAnime.RefreshData ();  		ucRelatedAnime.RefreshData ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 4)// trakt shouts  	 {  		Cursor = Cursors.Wait;  		ucTraktShouts.RefreshComments ();  		Cursor = Cursors.Arrow;  	} else if (tab.SelectedIndex == 5)// files  	 {  		Cursor = Cursors.Wait;  		ShowFileSummary ();  		Cursor = Cursors.Arrow;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 1)// episodes   {  	Cursor = Cursors.Wait;  	epListMain.PopulateToolbars ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,tabContainer_SelectionChanged,The following statement contains a magic number: if (tab.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  } else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  } else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  } else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 1)// episodes   {  	epListMain.PopulateToolbars ();  } else if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 2)// images   {  	RefreshImagesData ();  } else if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 3)// related and similar   {  	Cursor = Cursors.Wait;  	ucSimilarAnime.RefreshData ();  	ucRelatedAnime.RefreshData ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 4)// trakt shouts   {  	Cursor = Cursors.Wait;  	ucTraktShouts.RefreshComments ();  	Cursor = Cursors.Arrow;  } else if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,LoadSeries,The following statement contains a magic number: if (tabContainer.SelectedIndex == 5)// files   {  	Cursor = Cursors.Wait;  	ShowFileSummary ();  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,ShowFileSummary,The following statement contains a magic number: if (tabContainer.SelectedIndex == 5) {  	VM_AnimeSeries_User ser = DataContext as VM_AnimeSeries_User;  	if (ser == null)  		return;  	ucFileSummary.DataContext = ser.AniDBAnime.AniDBAnime;  	ucFolderSummary.DataContext = ser.AniDBAnime.AniDBAnime;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (cboVoteType.SelectedItem.ToString () == Commons.Properties.Resources.VoteTypeAnimeTemporary)  		voteType = 2;  	if (cboVoteType.SelectedItem.ToString () == Commons.Properties.Resources.VoteTypeAnimePermanent)  		voteType = 1;  	VM_ShokoServer.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	//ser.RefreshBase();  	//ser.AniDB_Anime.Detail.RefreshBase();  	VM_MainListHelper.Instance.UpdateHeirarchy (ser);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (cboVoteType.SelectedItem.ToString () == Commons.Properties.Resources.VoteTypeAnimeTemporary)  	voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: try {  	foreach (VM_AVDump dump in filesToDump) {  		if (stopDump)  			return;  		// get the record from main VM  		VM_AVDump tempDump = null;  		foreach (VM_AVDump dm in VM_MainListHelper.Instance.AVDumpFiles) {  			if (dm.FullPath == dump.FullPath) {  				tempDump = dm;  				break;  			}  		}  		if (tempDump == null)  			continue;  		tempDump.IsBeingDumped = true;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Processing;  		//Create process  		System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  		//strCommand is path and file name of command to run  		string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		string filePath = Path.Combine (appPath' "AVDump2CL.exe");  		if (!File.Exists (filePath)) {  			tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_Missing + " " + filePath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  			continue;  		}  		if (string.IsNullOrEmpty (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)) || (!File.Exists (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)))) {  			tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_VideoMissing + " " + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) ?? string.Empty;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  			return;  		}  		pProcess.StartInfo.FileName = filePath;  		//strCommandParameters are parameters to pass to program  		string fileName = (char)34 + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) + (char)34;  		pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}";  		pProcess.StartInfo.UseShellExecute = false;  		pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  		pProcess.StartInfo.RedirectStandardOutput = true;  		pProcess.StartInfo.CreateNoWindow = true;  		pProcess.Start ();  		string strOutput = pProcess.StandardOutput.ReadToEnd ();  		//Wait for process to finish  		pProcess.WaitForExit ();  		tempDump.AVDumpFullResult = strOutput;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  		} else {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Complete;  			tempDump.HasBeenDumped = true;  		}  	}  } catch (Exception) {  	//Utils.ShowErrorMessage(ex);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: try {  	foreach (VM_AVDump dump in filesToDump) {  		if (stopDump)  			return;  		// get the record from main VM  		VM_AVDump tempDump = null;  		foreach (VM_AVDump dm in VM_MainListHelper.Instance.AVDumpFiles) {  			if (dm.FullPath == dump.FullPath) {  				tempDump = dm;  				break;  			}  		}  		if (tempDump == null)  			continue;  		tempDump.IsBeingDumped = true;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Processing;  		//Create process  		System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  		//strCommand is path and file name of command to run  		string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		string filePath = Path.Combine (appPath' "AVDump2CL.exe");  		if (!File.Exists (filePath)) {  			tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_Missing + " " + filePath;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  			continue;  		}  		if (string.IsNullOrEmpty (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)) || (!File.Exists (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)))) {  			tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_VideoMissing + " " + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) ?? string.Empty;  			tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  			return;  		}  		pProcess.StartInfo.FileName = filePath;  		//strCommandParameters are parameters to pass to program  		string fileName = (char)34 + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) + (char)34;  		pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}";  		pProcess.StartInfo.UseShellExecute = false;  		pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  		pProcess.StartInfo.RedirectStandardOutput = true;  		pProcess.StartInfo.CreateNoWindow = true;  		pProcess.Start ();  		string strOutput = pProcess.StandardOutput.ReadToEnd ();  		//Wait for process to finish  		pProcess.WaitForExit ();  		tempDump.AVDumpFullResult = strOutput;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  			tempDump.HasBeenDumped = false;  		} else {  			tempDump.IsBeingDumped = false;  			tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Complete;  			tempDump.HasBeenDumped = true;  		}  	}  } catch (Exception) {  	//Utils.ShowErrorMessage(ex);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: foreach (VM_AVDump dump in filesToDump) {  	if (stopDump)  		return;  	// get the record from main VM  	VM_AVDump tempDump = null;  	foreach (VM_AVDump dm in VM_MainListHelper.Instance.AVDumpFiles) {  		if (dm.FullPath == dump.FullPath) {  			tempDump = dm;  			break;  		}  	}  	if (tempDump == null)  		continue;  	tempDump.IsBeingDumped = true;  	tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Processing;  	//Create process  	System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  	//strCommand is path and file name of command to run  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string filePath = Path.Combine (appPath' "AVDump2CL.exe");  	if (!File.Exists (filePath)) {  		tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_Missing + " " + filePath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  		continue;  	}  	if (string.IsNullOrEmpty (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)) || (!File.Exists (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)))) {  		tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_VideoMissing + " " + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) ?? string.Empty;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  		return;  	}  	pProcess.StartInfo.FileName = filePath;  	//strCommandParameters are parameters to pass to program  	string fileName = (char)34 + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) + (char)34;  	pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}";  	pProcess.StartInfo.UseShellExecute = false;  	pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	pProcess.StartInfo.RedirectStandardOutput = true;  	pProcess.StartInfo.CreateNoWindow = true;  	pProcess.Start ();  	string strOutput = pProcess.StandardOutput.ReadToEnd ();  	//Wait for process to finish  	pProcess.WaitForExit ();  	tempDump.AVDumpFullResult = strOutput;  	tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  	if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  	} else {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Complete;  		tempDump.HasBeenDumped = true;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpBatchControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpBatchControl.xaml.cs,workerAvdump_DoWork,The following statement contains a magic number: foreach (VM_AVDump dump in filesToDump) {  	if (stopDump)  		return;  	// get the record from main VM  	VM_AVDump tempDump = null;  	foreach (VM_AVDump dm in VM_MainListHelper.Instance.AVDumpFiles) {  		if (dm.FullPath == dump.FullPath) {  			tempDump = dm;  			break;  		}  	}  	if (tempDump == null)  		continue;  	tempDump.IsBeingDumped = true;  	tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Processing;  	//Create process  	System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();  	//strCommand is path and file name of command to run  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string filePath = Path.Combine (appPath' "AVDump2CL.exe");  	if (!File.Exists (filePath)) {  		tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_Missing + " " + filePath;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  		continue;  	}  	if (string.IsNullOrEmpty (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)) || (!File.Exists (Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal)))) {  		tempDump.AVDumpFullResult = Shoko.Commons.Properties.Resources.AVDump_VideoMissing + " " + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) ?? string.Empty;  		tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  		return;  	}  	pProcess.StartInfo.FileName = filePath;  	//strCommandParameters are parameters to pass to program  	string fileName = (char)34 + Commons.Extensions.Models.GetLocalFileSystemFullPath (dump.VideoLocal) + (char)34;  	pProcess.StartInfo.Arguments = @" --Auth={VM_ShokoServer.Instance.AniDB_Username}:{VM_ShokoServer.Instance.AniDB_AVDumpKey} --LPort={VM_ShokoServer.Instance.AniDB_AVDumpClientPort} --PrintEd2kLink -t {fileName}";  	pProcess.StartInfo.UseShellExecute = false;  	pProcess.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;  	pProcess.StartInfo.RedirectStandardOutput = true;  	pProcess.StartInfo.CreateNoWindow = true;  	pProcess.Start ();  	string strOutput = pProcess.StandardOutput.ReadToEnd ();  	//Wait for process to finish  	pProcess.WaitForExit ();  	tempDump.AVDumpFullResult = strOutput;  	tempDump.ED2KDump = Utils.GetED2KDump (tempDump.AVDumpFullResult);  	if (string.IsNullOrEmpty (tempDump.ED2KDump)) {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Error;  		tempDump.HasBeenDumped = false;  	} else {  		tempDump.IsBeingDumped = false;  		tempDump.DumpStatus = Shoko.Commons.Properties.Resources.AVDump_Complete;  		tempDump.HasBeenDumped = true;  	}  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: try {  	DumpSingle = false;  	DumpMultiple = false;  	if (DataContext == null)  		return;  	if (DataContext.GetType () == typeof(VM_AVDump)) {  		VM_AVDump dump = DataContext as VM_AVDump;  		if (dump != null) {  			AllAnime.Clear ();  			foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  				AllAnime.Add (anime);  			}  			if (AllAnime.Count > 0)  				lbAnime.SelectedIndex = 0;  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			SetED2KDump (dump.ED2KDump);  		}  		DumpSingle = true;  	}  	if (DataContext.GetType () == typeof(MultipleAvdumps)) {  		MultipleAvdumps dumpList = DataContext as MultipleAvdumps;  		AllAnime.Clear ();  		foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  			AllAnime.Add (anime);  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		string massAvDump = "";  		if (dumpList != null) {  			foreach (VM_AVDump dump in dumpList.AVDumps) {  				if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  					string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  					dump.AVDumpFullResult = ed2kDump;  				}  				dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  				massAvDump += dump.ED2KDump + Environment.NewLine;  			}  		}  		SetED2KDump (massAvDump);  		DumpMultiple = true;  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: try {  	DumpSingle = false;  	DumpMultiple = false;  	if (DataContext == null)  		return;  	if (DataContext.GetType () == typeof(VM_AVDump)) {  		VM_AVDump dump = DataContext as VM_AVDump;  		if (dump != null) {  			AllAnime.Clear ();  			foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  				AllAnime.Add (anime);  			}  			if (AllAnime.Count > 0)  				lbAnime.SelectedIndex = 0;  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			SetED2KDump (dump.ED2KDump);  		}  		DumpSingle = true;  	}  	if (DataContext.GetType () == typeof(MultipleAvdumps)) {  		MultipleAvdumps dumpList = DataContext as MultipleAvdumps;  		AllAnime.Clear ();  		foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  			AllAnime.Add (anime);  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		string massAvDump = "";  		if (dumpList != null) {  			foreach (VM_AVDump dump in dumpList.AVDumps) {  				if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  					string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  					ed2kDump += "---------------------------" + Environment.NewLine;  					ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  					dump.AVDumpFullResult = ed2kDump;  				}  				dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  				massAvDump += dump.ED2KDump + Environment.NewLine;  			}  		}  		SetED2KDump (massAvDump);  		DumpMultiple = true;  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (DataContext.GetType () == typeof(VM_AVDump)) {  	VM_AVDump dump = DataContext as VM_AVDump;  	if (dump != null) {  		AllAnime.Clear ();  		foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  			AllAnime.Add (anime);  		}  		if (AllAnime.Count > 0)  			lbAnime.SelectedIndex = 0;  		if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  			string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  			ed2kDump += "---------------------------" + Environment.NewLine;  			ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  			ed2kDump += "---------------------------" + Environment.NewLine;  			ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  			dump.AVDumpFullResult = ed2kDump;  		}  		dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  		SetED2KDump (dump.ED2KDump);  	}  	DumpSingle = true;  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (dump != null) {  	AllAnime.Clear ();  	foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  		AllAnime.Add (anime);  	}  	if (AllAnime.Count > 0)  		lbAnime.SelectedIndex = 0;  	if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  		string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  		ed2kDump += "---------------------------" + Environment.NewLine;  		ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  		ed2kDump += "---------------------------" + Environment.NewLine;  		ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  		dump.AVDumpFullResult = ed2kDump;  	}  	dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  	SetED2KDump (dump.ED2KDump);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dump.VideoLocal.ClosestAnimeMatchString' 10)) {  	AllAnime.Add (anime);  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: if (DataContext.GetType () == typeof(MultipleAvdumps)) {  	MultipleAvdumps dumpList = DataContext as MultipleAvdumps;  	AllAnime.Clear ();  	foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  		AllAnime.Add (anime);  	if (AllAnime.Count > 0)  		lbAnime.SelectedIndex = 0;  	string massAvDump = "";  	if (dumpList != null) {  		foreach (VM_AVDump dump in dumpList.AVDumps) {  			if (string.IsNullOrEmpty (dump.AVDumpFullResult)) {  				string ed2kDump = "Pre-calculated ED2K Dump string" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += "This does not mean the data has been uploaded to AniDB yet" + Environment.NewLine;  				ed2kDump += "---------------------------" + Environment.NewLine;  				ed2kDump += @"ed2k://|file|{dump.FileName}|{dump.FileSize}|{dump.VideoLocal.Hash}|/" + Environment.NewLine;  				dump.AVDumpFullResult = ed2kDump;  			}  			dump.ED2KDump = Utils.GetED2KDump (dump.AVDumpFullResult);  			massAvDump += dump.ED2KDump + Environment.NewLine;  		}  	}  	SetED2KDump (massAvDump);  	DumpMultiple = true;  }  
Magic Number,Shoko.Desktop.UserControls,AvdumpFileControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AvdumpFileControl.xaml.cs,AvdumpFileControl_DataContextChanged,The following statement contains a magic number: foreach (VM_AniDB_Anime anime in VM_AniDB_Anime.BestLevenshteinDistanceMatches (dumpList.AVDumps [0].VideoLocal.ClosestAnimeMatchString' 10))  	AllAnime.Add (anime);  
Magic Number,Shoko.Desktop.UserControls,BookmarksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\BookmarksControl.xaml.cs,CommandBinding_EditPriority,The following statement contains a magic number: try {  	object obj = e.Parameter;  	if (obj == null)  		return;  	VM_BookmarkedAnime ba = obj as VM_BookmarkedAnime;  	if (ba == null)  		return;  	DialogInteger dlg = new DialogInteger ();  	dlg.Init (Shoko.Commons.Properties.Resources.Bookmarks_Priority + " "' ba.Priority' 1' 100);  	dlg.Owner = Window.GetWindow (this);  	bool? res = dlg.ShowDialog ();  	if (res.HasValue && res.Value) {  		ba.Priority = dlg.EnteredInteger;  		ba.Save ();  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,BookmarksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\BookmarksControl.xaml.cs,CommandBinding_EditPriority,The following statement contains a magic number: dlg.Init (Shoko.Commons.Properties.Resources.Bookmarks_Priority + " "' ba.Priority' 1' 100);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbComments_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbComments_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbComments_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,lbEpisodes_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,grdMain_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,grdMain_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,grdMain_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (ser.AniDBAnime.AniDBAnime.FinishedAiring)  		voteType = 2;  	VM_ShokoServer.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	VM_MainListHelper.Instance.UpdateHeirarchy (ser);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (ser.AniDBAnime.AniDBAnime.FinishedAiring)  	voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,btnSubmitComment_Click,The following statement contains a magic number: if (commentText.Length > 2000) {  	Utils.ShowErrorMessage (string.Format (Shoko.Commons.Properties.Resources.Anime_CommentText' commentText.Length));  	txtCommentNew.Focus ();  	return;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,txtCommentNew_LostFocus,The following statement contains a magic number: txtCommentNew.Height = 30;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,txtCommentNew_GotFocus,The following statement contains a magic number: txtCommentNew.Height = 150;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: try {  	VM_AnimeSeries_User ser = e.Argument as VM_AnimeSeries_User;  	List<VM_AnimeEpisode_User> rawEps = VM_ShokoServer.Instance.ShokoServices.GetAllUnwatchedEpisodes (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).CastList<VM_AnimeEpisode_User> ();  	// find the last watched episode  	VM_AnimeEpisode_User rawLastEp = (VM_AnimeEpisode_User)VM_ShokoServer.Instance.ShokoServices.GetLastWatchedEpisodeForSeries (ser.AnimeSeriesID' VM_ShokoServer.Instance.CurrentUser.JMMUserID);  	if (rawLastEp != null) {  		rawLastEp.SetTvDBInfo ();  		//if (VM_ShokoServer.Instance.Trakt_IsEnabled)  		//    ep.SetTraktInfo();  		rawLastEp.EpisodeOrder = 0;  		Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			UnwatchedEpisodes.Add (rawLastEp);  		});  	}  	int i = 0;  	foreach (VM_AnimeEpisode_User raw in rawEps) {  		i++;  		raw.SetTvDBInfo ();  		//if (i == 1 && VM_ShokoServer.Instance.Trakt_IsEnabled) ep.SetTraktInfo();  		raw.EpisodeOrder = i;  		Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			UnwatchedEpisodes.Add (raw);  		});  		if (i == 5)  			break;  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: foreach (VM_AnimeEpisode_User raw in rawEps) {  	i++;  	raw.SetTvDBInfo ();  	//if (i == 1 && VM_ShokoServer.Instance.Trakt_IsEnabled) ep.SetTraktInfo();  	raw.EpisodeOrder = i;  	Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		UnwatchedEpisodes.Add (raw);  	});  	if (i == 5)  		break;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,episodesWorker_DoWork,The following statement contains a magic number: if (i == 5)  	break;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: try {  	VM_AnimeSeries_User ser = e.Argument as VM_AnimeSeries_User;  	Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		Recommendations.Clear ();  	});  	List<VM_AniDB_Anime_Similar> tempList = VM_ShokoServer.Instance.ShokoServices.GetSimilarAnimeLinks (ser.AniDB_ID' VM_ShokoServer.Instance.CurrentUser.JMMUserID).Cast<VM_AniDB_Anime_Similar> ().OrderByDescending (a => a.AnimeID).ToList ();  	foreach (VM_AniDB_Anime_Similar sim in tempList) {  		if (!sim.AnimeInfoExists) {  			string result = VM_ShokoServer.Instance.ShokoServices.UpdateAnimeData (sim.SimilarAnimeID);  			if (string.IsNullOrEmpty (result)) {  				sim.PopulateAnime ((VM_AniDB_Anime)VM_ShokoServer.Instance.ShokoServices.GetAnime (sim.SimilarAnimeID));  			}  		}  		Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			Recommendations.Add (new RecommendationTile () {  				Details = ""'  				AnimeName = sim.DisplayName'  				Picture = sim.PosterPath'  				AnimeSeries = sim.AnimeSeries'  				TileSize = "Large"'  				Height = 100'  				Source = "AniDB"'  				AnimeID = sim.AnimeID'  				URL = sim.AniDB_SiteURL'  				SimilarAnimeID = sim.SimilarAnimeID'  				HasSeries = sim.LocalSeriesExists  			});  		});  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: foreach (VM_AniDB_Anime_Similar sim in tempList) {  	if (!sim.AnimeInfoExists) {  		string result = VM_ShokoServer.Instance.ShokoServices.UpdateAnimeData (sim.SimilarAnimeID);  		if (string.IsNullOrEmpty (result)) {  			sim.PopulateAnime ((VM_AniDB_Anime)VM_ShokoServer.Instance.ShokoServices.GetAnime (sim.SimilarAnimeID));  		}  	}  	Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		Recommendations.Add (new RecommendationTile () {  			Details = ""'  			AnimeName = sim.DisplayName'  			Picture = sim.PosterPath'  			AnimeSeries = sim.AnimeSeries'  			TileSize = "Large"'  			Height = 100'  			Source = "AniDB"'  			AnimeID = sim.AnimeID'  			URL = sim.AniDB_SiteURL'  			SimilarAnimeID = sim.SimilarAnimeID'  			HasSeries = sim.LocalSeriesExists  		});  	});  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  	Recommendations.Add (new RecommendationTile () {  		Details = ""'  		AnimeName = sim.DisplayName'  		Picture = sim.PosterPath'  		AnimeSeries = sim.AnimeSeries'  		TileSize = "Large"'  		Height = 100'  		Source = "AniDB"'  		AnimeID = sim.AnimeID'  		URL = sim.AniDB_SiteURL'  		SimilarAnimeID = sim.SimilarAnimeID'  		HasSeries = sim.LocalSeriesExists  	});  });  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,recsWorker_DoWork,The following statement contains a magic number: Recommendations.Add (new RecommendationTile () {  	Details = ""'  	AnimeName = sim.DisplayName'  	Picture = sim.PosterPath'  	AnimeSeries = sim.AnimeSeries'  	TileSize = "Large"'  	Height = 100'  	Source = "AniDB"'  	AnimeID = sim.AnimeID'  	URL = sim.AniDB_SiteURL'  	SimilarAnimeID = sim.SimilarAnimeID'  	HasSeries = sim.LocalSeriesExists  });  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The following statement contains a magic number: try {  	VM_AnimeSeries_User ser = e.Argument as VM_AnimeSeries_User;  	List<VM_AniDB_Character> chars = VM_ShokoServer.Instance.ShokoServices.GetCharactersForAnime (ser.AniDB_ID).CastList<VM_AniDB_Character> ();  	List<VM_AniDB_Character> chrsToAdd = new List<VM_AniDB_Character> ();  	// first add all the main characters  	foreach (VM_AniDB_Character chr in chars.Where (x => x.CharType.Equals (Models.Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))) {  		chrsToAdd.Add (chr);  	}  	// now add all the character types  	int i = 0;  	foreach (VM_AniDB_Character chr in chars.Where (x => !x.CharType.Equals (Models.Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))) {  		chrsToAdd.Add (chr);  		i++;  		if (i == 25)  			break;  	}  	Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  		foreach (VM_AniDB_Character chr in chrsToAdd)  			Characters.Add (chr);  	});  	/*                 // first add all the main characters                 foreach (JMMServerBinary.Contract_AniDB_Character chr in chars)                 {                     if (chr.CharType.Equals(Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))                     {                         System.Windows.Application.Current.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate ()                         {                             Characters.Add(new VM_AniDB_Character(chr));                         });                     }                 }                  // now add all the character types                 foreach (JMMServerBinary.Contract_AniDB_Character chr in chars)                 {                     if (!chr.CharType.Equals(Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))                     {                         System.Windows.Application.Current.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate ()                         {                             Characters.Add(new VM_AniDB_Character(chr));                         });                     }                 }*/} catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The following statement contains a magic number: foreach (VM_AniDB_Character chr in chars.Where (x => !x.CharType.Equals (Models.Constants.CharacterType.MAIN' StringComparison.InvariantCultureIgnoreCase))) {  	chrsToAdd.Add (chr);  	i++;  	if (i == 25)  		break;  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,charWorker_DoWork,The following statement contains a magic number: if (i == 25)  	break;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: try {  	PosterWidth = 180;  	if (ser.AniDBAnime.AniDBAnime.UsePosterOnSeries) {  		string imgName = ser.AniDBAnime.AniDBAnime.FanartPathThenPosterPath;  		if (File.Exists (imgName)) {  			BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  			BitmapFrame frame = decoder.Frames [0];  			PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  		}  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: try {  	PosterWidth = 180;  	if (ser.AniDBAnime.AniDBAnime.UsePosterOnSeries) {  		string imgName = ser.AniDBAnime.AniDBAnime.FanartPathThenPosterPath;  		if (File.Exists (imgName)) {  			BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  			BitmapFrame frame = decoder.Frames [0];  			PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  		}  	}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: PosterWidth = 180;  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: if (ser.AniDBAnime.AniDBAnime.UsePosterOnSeries) {  	string imgName = ser.AniDBAnime.AniDBAnime.FanartPathThenPosterPath;  	if (File.Exists (imgName)) {  		BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  		BitmapFrame frame = decoder.Frames [0];  		PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  	}  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: if (File.Exists (imgName)) {  	BitmapDecoder decoder = BitmapDecoder.Create (new Uri (imgName)' BitmapCreateOptions.None' BitmapCacheOption.None);  	BitmapFrame frame = decoder.Frames [0];  	PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  }  
Magic Number,Shoko.Desktop.UserControls,AnimeSeriesSimplifiedControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeriesSimplifiedControl.xaml.cs,AnimeSeriesSimplifiedControl_DataContextChanged,The following statement contains a magic number: PosterWidth = (double)250 * ((double)frame.PixelWidth / (double)frame.PixelHeight);  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnWatchNextReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_WatchNext_Height = VM_UserSettings.Instance.Dash_WatchNext_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnWatchNextIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_WatchNext_Height = VM_UserSettings.Instance.Dash_WatchNext_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecentAdditionsReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecentAdditions_Height = VM_UserSettings.Instance.Dash_RecentAdditions_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecentAdditionsIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecentAdditions_Height = VM_UserSettings.Instance.Dash_RecentAdditions_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecentEpisodesReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecentlyWatchedEp_Height = VM_UserSettings.Instance.Dash_RecentlyWatchedEp_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecentEpisodesIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecentlyWatchedEp_Height = VM_UserSettings.Instance.Dash_RecentlyWatchedEp_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnMissingEpsReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_MissingEps_Height = VM_UserSettings.Instance.Dash_MissingEps_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnMissingEpsIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_MissingEps_Height = VM_UserSettings.Instance.Dash_MissingEps_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnMiniCalendarReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_MiniCalendar_Height = VM_UserSettings.Instance.Dash_MiniCalendar_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnMiniCalendarIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_MiniCalendar_Height = VM_UserSettings.Instance.Dash_MiniCalendar_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecWatchReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecWatch_Height = VM_UserSettings.Instance.Dash_RecWatch_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecWatchIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecWatch_Height = VM_UserSettings.Instance.Dash_RecWatch_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecDownloadReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecDownload_Height = VM_UserSettings.Instance.Dash_RecDownload_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,btnRecDownloadIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.Dash_RecDownload_Height = VM_UserSettings.Instance.Dash_RecDownload_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_WatchNextEpisode = DashPos_WatchNextEpisode * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_SeriesMissingEpisodes = DashPos_SeriesMissingEpisodes * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_MiniCalendar = DashPos_MiniCalendar * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecWatch = DashPos_RecWatch * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecDownload = DashPos_RecDownload * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecentlyWatchedEpisode = DashPos_RecentlyWatchedEpisode * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardControl.xaml.cs,SetWidgetOrder,The following statement contains a magic number: DashPos_RecentAdditions = DashPos_RecentAdditions * 2;  
Magic Number,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,btnContinueWatchingReduce_Click,The following statement contains a magic number: VM_UserSettings.Instance.DashMetro_Image_Height = VM_UserSettings.Instance.DashMetro_Image_Height - 7;  
Magic Number,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,btnContinueWatchingIncrease_Click,The following statement contains a magic number: VM_UserSettings.Instance.DashMetro_Image_Height = VM_UserSettings.Instance.DashMetro_Image_Height + 7;  
Magic Number,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: try {  	if (obj.GetType () == typeof(VM_DuplicateFile)) {  		VM_DuplicateFile df = obj as VM_DuplicateFile;  		MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.DuplicateFiles_ConfirmDelete)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning);  		if (res == MessageBoxResult.Yes) {  			Cursor = Cursors.Wait;  			string result = VM_ShokoServer.Instance.ShokoServices.DeleteDuplicateFile (df.DuplicateFileID' 2);  			if (result.Length > 0)  				MessageBox.Show (result' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  			else {  				DuplicateFilesCollection.Remove (df);  				FileCount = DuplicateFilesCollection.Count;  				//RefreshDuplicateFiles();  			}  		}  	}  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  } finally {  	Cursor = Cursors.Arrow;  }  
Magic Number,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: if (obj.GetType () == typeof(VM_DuplicateFile)) {  	VM_DuplicateFile df = obj as VM_DuplicateFile;  	MessageBoxResult res = MessageBox.Show (string.Format (Shoko.Commons.Properties.Resources.DuplicateFiles_ConfirmDelete)' Shoko.Commons.Properties.Resources.Confirm' MessageBoxButton.YesNo' MessageBoxImage.Warning);  	if (res == MessageBoxResult.Yes) {  		Cursor = Cursors.Wait;  		string result = VM_ShokoServer.Instance.ShokoServices.DeleteDuplicateFile (df.DuplicateFileID' 2);  		if (result.Length > 0)  			MessageBox.Show (result' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  		else {  			DuplicateFilesCollection.Remove (df);  			FileCount = DuplicateFilesCollection.Count;  			//RefreshDuplicateFiles();  		}  	}  }  
Magic Number,Shoko.Desktop.UserControls,DuplicateFilesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DuplicateFilesControl.xaml.cs,CommandBinding_DeleteFile2,The following statement contains a magic number: if (res == MessageBoxResult.Yes) {  	Cursor = Cursors.Wait;  	string result = VM_ShokoServer.Instance.ShokoServices.DeleteDuplicateFile (df.DuplicateFileID' 2);  	if (result.Length > 0)  		MessageBox.Show (result' Shoko.Commons.Properties.Resources.Error' MessageBoxButton.OK' MessageBoxImage.Error);  	else {  		DuplicateFilesCollection.Remove (df);  		FileCount = DuplicateFilesCollection.Count;  		//RefreshDuplicateFiles();  	}  }  
Magic Number,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,EpisodeDetail_Loaded,The following statement contains a magic number: while (parentObject != null) {  	parentObject = VisualTreeHelper.GetParent (parentObject);  	AnimeSeries seriesControl = parentObject as AnimeSeries;  	if (seriesControl != null) {  		SetBinding (WidthProperty' new Binding ("ActualWidth") {  			Source = seriesControl'  			Converter = ArithmeticConverter.Instance'  			ConverterParameter = 40'  			IsAsync = true  		});  		return;  	}  }  
Magic Number,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,EpisodeDetail_Loaded,The following statement contains a magic number: if (seriesControl != null) {  	SetBinding (WidthProperty' new Binding ("ActualWidth") {  		Source = seriesControl'  		Converter = ArithmeticConverter.Instance'  		ConverterParameter = 40'  		IsAsync = true  	});  	return;  }  
Magic Number,Shoko.Desktop.UserControls,EpisodeDetail,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeDetail.xaml.cs,EpisodeDetail_Loaded,The following statement contains a magic number: SetBinding (WidthProperty' new Binding ("ActualWidth") {  	Source = seriesControl'  	Converter = ArithmeticConverter.Instance'  	ConverterParameter = 40'  	IsAsync = true  });  
Magic Number,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,LbEpisodes_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,LbEpisodes_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,EpisodeList,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,LbEpisodes_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The following statement contains a magic number: try {  	var selType = values [0] as VM_AnimeEpisodeType;  	var ser = values [1] as VM_AnimeSeries_User;  	if (selType == null || ser == null)  		return Visibility.Collapsed;  	bool visible;  	var strParameter = System.Convert.ToString (parameter);  	if (strParameter == "1")  		visible = ser.AllEpisodes.Any (x => x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles);  	else if (strParameter == "2")  		visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles);  	else if (strParameter == "3") {  		var ep = values [2] as VM_AnimeEpisode_User;  		if (ep == null)  			visible = false;  		else {  			if (ep.EpisodeTypeEnum == enEpisodeType.Episode)  				visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles && x.EpisodeNumber <= ep.EpisodeNumber);  			else  				visible = false;  		}  	} else  		visible = false;  	return visible ? Visibility.Visible : Visibility.Collapsed;  } catch (Exception) {  	return Visibility.Visible;  }  
Magic Number,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The following statement contains a magic number: if (strParameter == "1")  	visible = ser.AllEpisodes.Any (x => x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles);  else if (strParameter == "2")  	visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles);  else if (strParameter == "3") {  	var ep = values [2] as VM_AnimeEpisode_User;  	if (ep == null)  		visible = false;  	else {  		if (ep.EpisodeTypeEnum == enEpisodeType.Episode)  			visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles && x.EpisodeNumber <= ep.EpisodeNumber);  		else  			visible = false;  	}  } else  	visible = false;  
Magic Number,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The following statement contains a magic number: if (strParameter == "2")  	visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles);  else if (strParameter == "3") {  	var ep = values [2] as VM_AnimeEpisode_User;  	if (ep == null)  		visible = false;  	else {  		if (ep.EpisodeTypeEnum == enEpisodeType.Episode)  			visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles && x.EpisodeNumber <= ep.EpisodeNumber);  		else  			visible = false;  	}  } else  	visible = false;  
Magic Number,Shoko.Desktop.UserControls,HideMassWatchedConverter,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\EpisodeList.xaml.cs,Convert,The following statement contains a magic number: if (strParameter == "3") {  	var ep = values [2] as VM_AnimeEpisode_User;  	if (ep == null)  		visible = false;  	else {  		if (ep.EpisodeTypeEnum == enEpisodeType.Episode)  			visible = ser.AllEpisodes.Any (x => !x.Watched && x.EpisodeTypeEnum == selType.EpisodeType && x.HasFiles && x.EpisodeNumber <= ep.EpisodeNumber);  		else  			visible = false;  	}  } else  	visible = false;  
Magic Number,Shoko.Desktop.UserControls,ExternalAnimeLinksControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\ExternalAnimeLinksControl.xaml.cs,linkTypeChangedCallback,The following statement contains a magic number: input.IsDiscussionLink = linkType == 2;  
Magic Number,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The following statement contains a magic number: foreach (VM_VideoLocal_Renamed ren in job.FileResults) {  	if (stopWorker)  		return;  	curFile++;  	delay++;  	VM_VideoLocal_Renamed raw = (VM_VideoLocal_Renamed)VM_ShokoServer.Instance.ShokoServices.RenameFile (ren.VideoLocalID' job.RenameScript);  	ren.NewFileName = raw.NewFileName;  	ren.Success = raw.Success;  	// do this so we don't lock the UI  	if (delay == 20) {  		renameWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  		delay = 0;  	}  }  
Magic Number,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,renameWorker_DoWork,The following statement contains a magic number: if (delay == 20) {  	renameWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  	delay = 0;  }  
Magic Number,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The following statement contains a magic number: foreach (VM_VideoLocal_Renamed ren in job.FileResults) {  	if (stopWorker)  		return;  	curFile++;  	delay++;  	VM_VideoLocal_Renamed raw = (VM_VideoLocal_Renamed)VM_ShokoServer.Instance.ShokoServices.RenameFilePreview (ren.VideoLocalID' job.RenameScript);  	ren.NewFileName = raw.NewFileName;  	ren.Success = raw.Success;  	// do this so we don't lock the UI  	if (delay == 20) {  		previewWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  		delay = 0;  	}  }  
Magic Number,Shoko.Desktop.UserControls,FileRenameControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\FileRenameControl.xaml.cs,previewWorker_DoWork,The following statement contains a magic number: if (delay == 20) {  	previewWorker.ReportProgress (0' new WorkerStatusContainer (job.FileResults.Count' curFile));  	delay = 0;  }  
Magic Number,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,LbGroups_PreviewMouseWheel,The following statement contains a magic number: try {  	foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  		sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  } catch {  }  
Magic Number,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,LbGroups_PreviewMouseWheel,The following statement contains a magic number: foreach (ScrollViewer sv in Utils.GetScrollViewers (this))  	sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,LbGroups_PreviewMouseWheel,The following statement contains a magic number: sv.ScrollToVerticalOffset (sv.VerticalOffset - e.Delta / 3);  
Magic Number,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,cboBaseConditionEditing_SelectionChanged,The following statement contains a magic number: if (cboBaseConditionEditing.SelectedIndex == 0)  	gf.BaseCondition = 1;  else  	gf.BaseCondition = 2;  
Magic Number,Shoko.Desktop.UserControls,GroupFilterAdmin,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\GroupFilterAdmin.xaml.cs,cboBaseConditionEditing_SelectionChanged,The following statement contains a magic number: gf.BaseCondition = 2;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: try {  	IsLoading = true;  	btnRefresh.IsEnabled = false;  	btnExport.IsEnabled = false;  	ReadyToExport = false;  	Cursor = Cursors.Wait;  	StatusMessage = Shoko.Commons.Properties.Resources.Exporting;  	string appPath = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	string logName = Path.Combine (appPath' "AnimeEpisodes.txt");  	string export = "";  	foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  		string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  		for (int i = 0; i < columns.Length; i++) {  			if (i == 0 && columns [i] == "1")  				export += ;  			if (i == 1 && columns [i] == "1")  				export += ;  			if (i == 2 && columns [i] == "1")  				export += ;  			if (i == 3 && columns [i] == "1")  				export += ;  			if (i == 4 && columns [i] == "1")  				export += ;  			if (i == 5 && columns [i] == "1")  				export += ;  			if (i == 6 && columns [i] == "1")  				export += ;  			if (i == 7 && columns [i] == "1")  				export += ;  		}  		export += Environment.NewLine;  	}  	StreamWriter Tex = new StreamWriter (logName);  	Tex.Write (export);  	Tex.Flush ();  	Tex.Close ();  	Process.Start (logName);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: foreach (VM_MissingEpisode missingEp in MissingEpisodesCollection) {  	string[] columns = AppSettings.MissingEpsExportColumns.Split (';');  	for (int i = 0; i < columns.Length; i++) {  		if (i == 0 && columns [i] == "1")  			export += ;  		if (i == 1 && columns [i] == "1")  			export += ;  		if (i == 2 && columns [i] == "1")  			export += ;  		if (i == 3 && columns [i] == "1")  			export += ;  		if (i == 4 && columns [i] == "1")  			export += ;  		if (i == 5 && columns [i] == "1")  			export += ;  		if (i == 6 && columns [i] == "1")  			export += ;  		if (i == 7 && columns [i] == "1")  			export += ;  	}  	export += Environment.NewLine;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: for (int i = 0; i < columns.Length; i++) {  	if (i == 0 && columns [i] == "1")  		export += ;  	if (i == 1 && columns [i] == "1")  		export += ;  	if (i == 2 && columns [i] == "1")  		export += ;  	if (i == 3 && columns [i] == "1")  		export += ;  	if (i == 4 && columns [i] == "1")  		export += ;  	if (i == 5 && columns [i] == "1")  		export += ;  	if (i == 6 && columns [i] == "1")  		export += ;  	if (i == 7 && columns [i] == "1")  		export += ;  }  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 2 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 3 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 4 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 5 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 6 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,MissingEpisodesControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\MissingEpisodesControl.xaml.cs,btnExport_Click,The following statement contains a magic number: if (i == 7 && columns [i] == "1")  	export += ;  
Magic Number,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,btnDecreaseHeaderImageSize_Click,The following statement contains a magic number: VM_UserSettings.Instance.PlaylistHeader_Image_Height = VM_UserSettings.Instance.PlaylistHeader_Image_Height - 10;  
Magic Number,Shoko.Desktop.UserControls,PlaylistControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\PlaylistControl.xaml.cs,btnIncreaseHeaderImageSize_Click,The following statement contains a magic number: VM_UserSettings.Instance.PlaylistHeader_Image_Height = VM_UserSettings.Instance.PlaylistHeader_Image_Height + 10;  
Magic Number,Shoko.Desktop.UserControls,RankingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: try {  	decimal rating = (decimal)ev.RatingValue;  	int voteType = 1;  	if (ser.AniDBAnime.AniDBAnime.FinishedAiring)  		voteType = 2;  	animeRating.UserRating = rating;  	VM_ShokoServer.Instance.VoteAnime (ser.AniDB_ID' rating' voteType);  	// refresh the data  	VM_MainListHelper.Instance.UpdateHeirarchy (ser);  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,RankingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: if (ser.AniDBAnime.AniDBAnime.FinishedAiring)  	voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,RankingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RankingsControl.xaml.cs,cRating_OnRatingValueChangedEvent,The following statement contains a magic number: voteType = 2;  
Magic Number,Shoko.Desktop.UserControls,RatingControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RatingControl.xaml.cs,RatingValueChanged,The following statement contains a magic number: try {  	NumberStyles style = NumberStyles.Number;  	CultureInfo culture = CultureInfo.CreateSpecificCulture (AppSettings.Culture);  	double ratingValue = -1;  	double.TryParse (e.NewValue.ToString ()' style' culture' out ratingValue);  	int numberOfButtonsToHighlight = (int)(2 * ratingValue);  	UIElementCollection children = ((StackPanel)(parent.Content)).Children;  	ToggleButton button = null;  	for (int i = 0; i < numberOfButtonsToHighlight; i++) {  		button = children [i] as ToggleButton;  		if (button != null)  			button.IsChecked = true;  	}  	for (int i = numberOfButtonsToHighlight; i < children.Count; i++) {  		button = children [i] as ToggleButton;  		if (button != null)  			button.IsChecked = false;  	}  } catch (Exception ex) {  	Console.Write (ex.ToString ());  }  
Magic Number,Shoko.Desktop.UserControls,RatingControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\RatingControl.xaml.cs,RatingButtonClickEventHandler,The following statement contains a magic number: if (RatingValue == newRating && newRating == 0.5) {  	RatingValue = 0.0;  } else {  	RatingValue = newRating;  }  
Magic Number,Shoko.Desktop.UserControls,TraktCommentsShowControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\TraktShoutsShowControl.xaml.cs,btnSubmitComment_Click,The following statement contains a magic number: if (commentText.Length > 2000) {  	Utils.ShowErrorMessage ();  	txtCommentNew.Focus ();  	return;  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: try {  	string packUriFullStar;  	string packUriHalfStar;  	string packUriStarOff;  	VisualRating input = (VisualRating)d;  	decimal rating = decimal.Parse (e.NewValue.ToString ());  	// first star  	if (rating > (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)0.5 && rating <= (decimal)1.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)0.5)  		input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// second star  	if (rating > (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)2.5 && rating <= (decimal)3.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)2.5)  		input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// third star  	if (rating > (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)4.5 && rating <= (decimal)5.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)4.5)  		input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fourth star  	if (rating > (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)6.5 && rating <= (decimal)7.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)6.5)  		input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  	// fifth star  	if (rating > (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  	if (rating > (decimal)8.5 && rating <= (decimal)9.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  	if (rating <= (decimal)8.5)  		input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)0.5 && rating <= (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)0.5 && rating <= (decimal)1.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)0.5)  	input.imgStar1.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)2.5 && rating <= (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)2.5 && rating <= (decimal)3.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)2.5)  	input.imgStar2.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)4.5 && rating <= (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)4.5 && rating <= (decimal)5.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)4.5)  	input.imgStar3.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)6.5 && rating <= (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)6.5 && rating <= (decimal)7.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)6.5)  	input.imgStar4.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriFullStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)8.5 && rating <= (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating > (decimal)8.5 && rating <= (decimal)9.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriHalfStar) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls,VisualRating,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\VisualRating.xaml.cs,ratingChangedCallback,The following statement contains a magic number: if (rating <= (decimal)8.5)  	input.imgStar5.Source = new ImageSourceConverter ().ConvertFromString (packUriStarOff) as ImageSource;  
Magic Number,Shoko.Desktop.UserControls.Community,TraktWorkerJob,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Community\CommunityMaint.xaml.cs,TraktWorkerJob,The following statement contains a magic number: MaxProblems = 20;  
Magic Number,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,StartWatcher,The following statement contains a magic number: if (!string.IsNullOrEmpty (path) && Directory.Exists (path)) {  	watcher = new FileSystemWatcher (path' "*.ini");  	watcher.IncludeSubdirectories = false;  	watcher.Changed += (a' e) => {  		// delay by 200ms since player will update the file multiple times in quick succession  		// and also the delay allows us access to the file  		iniPath = e.FullPath;  		handleTimer.Stop ();  		handleTimer = new System.Timers.Timer ();  		handleTimer.AutoReset = false;  		handleTimer.Interval = 200;  		// 200 ms  		handleTimer.Elapsed += (aq' b) => {  			System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  				FileChangeEvent (iniPath);  			});  		};  		handleTimer.Enabled = true;  	};  	watcher.EnableRaisingEvents = true;  }  
Magic Number,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,StartWatcher,The following statement contains a magic number: watcher.Changed += (a' e) => {  	// delay by 200ms since player will update the file multiple times in quick succession  	// and also the delay allows us access to the file  	iniPath = e.FullPath;  	handleTimer.Stop ();  	handleTimer = new System.Timers.Timer ();  	handleTimer.AutoReset = false;  	handleTimer.Interval = 200;  	// 200 ms  	handleTimer.Elapsed += (aq' b) => {  		System.Windows.Application.Current.Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.Normal' (Action)delegate () {  			FileChangeEvent (iniPath);  		});  	};  	handleTimer.Enabled = true;  };  
Magic Number,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,StartWatcher,The following statement contains a magic number: handleTimer.Interval = 200;  
Magic Number,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,PlaybackStopped,The following statement contains a magic number: if (TraktEnabled ()) {  	// Wait 1s in case of old commands  	Thread.Sleep (1000);  	traktHelper.TraktScrobble (TraktHelper.ScrobblePlayingStatus.Stop' info' (int)position' (int)info.Duration);  }  
Magic Number,Shoko.Desktop.VideoPlayers,BaseVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\BaseVideoPlayer.cs,PlaybackStopped,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFiles = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	bool foundSectionStart = false;  	bool foundSectionEnd = false;  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.ToLower ().Contains ("[rememberfiles]"))  			foundSectionStart = true;  		if (foundSectionStart && line.Trim ().ToLower ().StartsWith ("[") && !line.ToLower ().Contains ("[rememberfiles]"))  			foundSectionEnd = true;  		if (foundSectionStart && !foundSectionEnd && !line.ToLower ().Contains ("[rememberfiles]") && !string.IsNullOrEmpty (line))  			allFiles.Add (i);  	}  	if (allFiles.Count == 0)  		return;  	Dictionary<string' long> filePositions = new Dictionary<string' long> ();  	foreach (int lineNumber in allFiles) {  		string fileNameLine = lines [lineNumber];  		int iPos1 = fileNameLine.IndexOf ("=");  		int iPos2 = fileNameLine.IndexOf ("="' iPos1 + 1);  		if (iPos1 <= 0 || iPos2 <= 0)  			continue;  		string position = fileNameLine.Substring (iPos1 + 1' iPos2 - iPos1 - 1);  		string fileName = fileNameLine.Substring (iPos2 + 1' fileNameLine.Length - iPos2 - 1);  		long mpcPos = 0;  		long.TryParse (position' out mpcPos);  		if (mpcPos == 0)  			mpcPos = (long)100;  		filePositions [fileName] = mpcPos;  	}  	OnPositionChangeEvent (filePositions);  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: foreach (int lineNumber in allFiles) {  	string fileNameLine = lines [lineNumber];  	int iPos1 = fileNameLine.IndexOf ("=");  	int iPos2 = fileNameLine.IndexOf ("="' iPos1 + 1);  	if (iPos1 <= 0 || iPos2 <= 0)  		continue;  	string position = fileNameLine.Substring (iPos1 + 1' iPos2 - iPos1 - 1);  	string fileName = fileNameLine.Substring (iPos2 + 1' fileNameLine.Length - iPos2 - 1);  	long mpcPos = 0;  	long.TryParse (position' out mpcPos);  	if (mpcPos == 0)  		mpcPos = (long)100;  	filePositions [fileName] = mpcPos;  }  
Magic Number,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: if (mpcPos == 0)  	mpcPos = (long)100;  
Magic Number,Shoko.Desktop.VideoPlayers,PotVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\PotVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: mpcPos = (long)100;  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,The following statement contains a magic number: if (string.IsNullOrEmpty (PlayerPath)) {  	for (int x = 0; x < registryplaces.Length; x += 2) {  		string path = (string)Registry.GetValue (registryplaces [x]' registryplaces [x + 1]' null);  		if (!string.IsNullOrEmpty (path)) {  			foreach (string subdir in subdirs) {  				string subdirpath = (!string.IsNullOrEmpty (subdir)) ? Path.Combine (path' subdir) : path;  				foreach (string pname in playersexenames) {  					string npath = Path.Combine (subdirpath' pname);  					if (File.Exists (npath)) {  						PlayerPath = npath;  						break;  					}  				}  				if (!string.IsNullOrEmpty (PlayerPath))  					break;  			}  		}  		if (!string.IsNullOrEmpty (PlayerPath))  			break;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,The following statement contains a magic number: for (int x = 0; x < registryplaces.Length; x += 2) {  	string path = (string)Registry.GetValue (registryplaces [x]' registryplaces [x + 1]' null);  	if (!string.IsNullOrEmpty (path)) {  		foreach (string subdir in subdirs) {  			string subdirpath = (!string.IsNullOrEmpty (subdir)) ? Path.Combine (path' subdir) : path;  			foreach (string pname in playersexenames) {  				string npath = Path.Combine (subdirpath' pname);  				if (File.Exists (npath)) {  					PlayerPath = npath;  					break;  				}  			}  			if (!string.IsNullOrEmpty (PlayerPath))  				break;  		}  	}  	if (!string.IsNullOrEmpty (PlayerPath))  		break;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,Init,The following statement contains a magic number: x += 2
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,StartWatcher,The following statement contains a magic number: if (AppSettings.MPCWebUiIntegration) {  	playerWebUiTimer = new System.Timers.Timer ();  	playerWebUiTimer.Elapsed += HandleWebUIRequest;  	playerWebUiTimer.Interval = 1000;  	playerWebUiTimer.Enabled = true;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,StartWatcher,The following statement contains a magic number: playerWebUiTimer.Interval = 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' long> filePositions = new Dictionary<string' long> ();  	foreach (int lineNumber in allFilesHeaders) {  		string fileNameLine = lines [lineNumber];  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		long mpcPos = 0;  		long.TryParse (position' out mpcPos);  		filePositions [fileName] = mpcPos / 10000;  		currentPosition = mpcPos / 10000;  	}  	OnPositionChangeEvent (filePositions);  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' long> filePositions = new Dictionary<string' long> ();  	foreach (int lineNumber in allFilesHeaders) {  		string fileNameLine = lines [lineNumber];  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		long mpcPos = 0;  		long.TryParse (position' out mpcPos);  		filePositions [fileName] = mpcPos / 10000;  		currentPosition = mpcPos / 10000;  	}  	OnPositionChangeEvent (filePositions);  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' long> filePositions = new Dictionary<string' long> ();  	foreach (int lineNumber in allFilesHeaders) {  		string fileNameLine = lines [lineNumber];  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		long mpcPos = 0;  		long.TryParse (position' out mpcPos);  		filePositions [fileName] = mpcPos / 10000;  		currentPosition = mpcPos / 10000;  	}  	OnPositionChangeEvent (filePositions);  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: try {  	if (!AppSettings.VideoAutoSetWatched)  		return;  	List<int> allFilesHeaders = new List<int> ();  	List<int> allFilesPositions = new List<int> ();  	string[] lines = File.ReadAllLines (filePath);  	string prefixHeader = string.Format ("File Name ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  			allFilesHeaders.Add (i);  		if (allFilesHeaders.Count == 20)  			break;  	}  	if (allFilesHeaders.Count == 0)  		return;  	string prefixPos = string.Format ("File Position ");  	for (int i = 0; i < lines.Length; i++) {  		string line = lines [i];  		if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  			allFilesPositions.Add (i);  		if (allFilesPositions.Count == 20)  			break;  	}  	Dictionary<string' long> filePositions = new Dictionary<string' long> ();  	foreach (int lineNumber in allFilesHeaders) {  		string fileNameLine = lines [lineNumber];  		string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  		int iPosTemp = temp.IndexOf ("=");  		if (iPosTemp < 0)  			continue;  		string fileNumber = temp.Substring (0' iPosTemp);  		string properPosLine = string.Empty;  		foreach (int lineNumberPos in allFilesPositions) {  			string filePosLineTemp = lines [lineNumberPos];  			string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  			int iPosTemp2 = temp2.IndexOf ("=");  			if (iPosTemp2 < 0)  				continue;  			string fileNumber2 = temp2.Substring (0' iPosTemp2);  			if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  				properPosLine = filePosLineTemp;  				break;  			}  		}  		if (string.IsNullOrEmpty (properPosLine))  			continue;  		int iPos1 = fileNameLine.IndexOf ("=");  		if (iPos1 < 0)  			continue;  		int iPos2 = properPosLine.IndexOf ("=");  		string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  		string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  		long mpcPos = 0;  		long.TryParse (position' out mpcPos);  		filePositions [fileName] = mpcPos / 10000;  		currentPosition = mpcPos / 10000;  	}  	OnPositionChangeEvent (filePositions);  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++) {  	string line = lines [i];  	if (line.StartsWith (prefixHeader' StringComparison.InvariantCultureIgnoreCase))  		allFilesHeaders.Add (i);  	if (allFilesHeaders.Count == 20)  		break;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: if (allFilesHeaders.Count == 20)  	break;  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: for (int i = 0; i < lines.Length; i++) {  	string line = lines [i];  	if (line.StartsWith (prefixPos' StringComparison.InvariantCultureIgnoreCase))  		allFilesPositions.Add (i);  	if (allFilesPositions.Count == 20)  		break;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: if (allFilesPositions.Count == 20)  	break;  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: foreach (int lineNumber in allFilesHeaders) {  	string fileNameLine = lines [lineNumber];  	string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  	int iPosTemp = temp.IndexOf ("=");  	if (iPosTemp < 0)  		continue;  	string fileNumber = temp.Substring (0' iPosTemp);  	string properPosLine = string.Empty;  	foreach (int lineNumberPos in allFilesPositions) {  		string filePosLineTemp = lines [lineNumberPos];  		string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  		int iPosTemp2 = temp2.IndexOf ("=");  		if (iPosTemp2 < 0)  			continue;  		string fileNumber2 = temp2.Substring (0' iPosTemp2);  		if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  			properPosLine = filePosLineTemp;  			break;  		}  	}  	if (string.IsNullOrEmpty (properPosLine))  		continue;  	int iPos1 = fileNameLine.IndexOf ("=");  	if (iPos1 < 0)  		continue;  	int iPos2 = properPosLine.IndexOf ("=");  	string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  	string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  	long mpcPos = 0;  	long.TryParse (position' out mpcPos);  	filePositions [fileName] = mpcPos / 10000;  	currentPosition = mpcPos / 10000;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: foreach (int lineNumber in allFilesHeaders) {  	string fileNameLine = lines [lineNumber];  	string temp = fileNameLine.Trim ().Replace (prefixHeader' "");  	int iPosTemp = temp.IndexOf ("=");  	if (iPosTemp < 0)  		continue;  	string fileNumber = temp.Substring (0' iPosTemp);  	string properPosLine = string.Empty;  	foreach (int lineNumberPos in allFilesPositions) {  		string filePosLineTemp = lines [lineNumberPos];  		string temp2 = filePosLineTemp.Trim ().Replace (prefixPos' "");  		int iPosTemp2 = temp2.IndexOf ("=");  		if (iPosTemp2 < 0)  			continue;  		string fileNumber2 = temp2.Substring (0' iPosTemp2);  		if (fileNumber.Equals (fileNumber2' StringComparison.InvariantCultureIgnoreCase)) {  			properPosLine = filePosLineTemp;  			break;  		}  	}  	if (string.IsNullOrEmpty (properPosLine))  		continue;  	int iPos1 = fileNameLine.IndexOf ("=");  	if (iPos1 < 0)  		continue;  	int iPos2 = properPosLine.IndexOf ("=");  	string fileName = fileNameLine.Substring (iPos1 + 1' fileNameLine.Length - iPos1 - 1);  	string position = properPosLine.Substring (iPos2 + 1' properPosLine.Length - iPos2 - 1);  	long mpcPos = 0;  	long.TryParse (position' out mpcPos);  	filePositions [fileName] = mpcPos / 10000;  	currentPosition = mpcPos / 10000;  }  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: filePositions [fileName] = mpcPos / 10000;  
Magic Number,Shoko.Desktop.VideoPlayers,MPCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\MPCVideoPlayer.cs,FileChangeEvent,The following statement contains a magic number: currentPosition = mpcPos / 10000;  
Magic Number,Shoko.Desktop.VideoPlayers,ExternalMPVVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ExternalMPVVideoPlayer.cs,Play,The following statement contains a magic number: Task.Factory.StartNew (() => {  	Process process;  	if (video.IsPlaylist)  		process = Process.Start (PlayerPath' '"' + video.Uri + '"');  	else {  		string init = '"' + video.Uri + '"';  		if (video.ResumePosition > 0) {  			double n = video.ResumePosition;  			n /= 1000;  			init += " --start=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  		}  		if (video.SubtitlePaths != null && video.SubtitlePaths.Count > 0) {  			foreach (string s in video.SubtitlePaths) {  				init += " --sub-file=\"" + s + "\"";  			}  		}  		process = Process.Start (PlayerPath' init);  	}  	if (process != null) {  		IsPlaying = true;  		process.WaitForExit ();  		IsPlaying = false;  	}  });  
Magic Number,Shoko.Desktop.VideoPlayers,ExternalMPVVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ExternalMPVVideoPlayer.cs,Play,The following statement contains a magic number: if (video.IsPlaylist)  	process = Process.Start (PlayerPath' '"' + video.Uri + '"');  else {  	string init = '"' + video.Uri + '"';  	if (video.ResumePosition > 0) {  		double n = video.ResumePosition;  		n /= 1000;  		init += " --start=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  	}  	if (video.SubtitlePaths != null && video.SubtitlePaths.Count > 0) {  		foreach (string s in video.SubtitlePaths) {  			init += " --sub-file=\"" + s + "\"";  		}  	}  	process = Process.Start (PlayerPath' init);  }  
Magic Number,Shoko.Desktop.VideoPlayers,ExternalMPVVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ExternalMPVVideoPlayer.cs,Play,The following statement contains a magic number: if (video.ResumePosition > 0) {  	double n = video.ResumePosition;  	n /= 1000;  	init += " --start=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  }  
Magic Number,Shoko.Desktop.VideoPlayers,ExternalMPVVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ExternalMPVVideoPlayer.cs,Play,The following statement contains a magic number: n /= 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Play,The following statement contains a magic number: Task.Factory.StartNew (() => {  	Process process;  	string webUIParams;  	if (video.IsPlaylist)  		process = Process.Start (PlayerPath);  	else {  		string init;  		if (video.ResumePosition > 0) {  			double n = video.ResumePosition;  			n /= 1000;  			init += " --start-time=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  		}  		if (video.SubtitlePaths != null && video.SubtitlePaths.Count > 0) {  			foreach (string s in video.SubtitlePaths) {  				init += " --sub-file=\"" + s + "\"";  			}  		}  		process = Process.Start (PlayerPath' init);  	}  	if (process != null) {  		IsPlaying = true;  		StartWatcher ("");  		process.WaitForExit ();  		StopWatcher ();  		IsPlaying = false;  		if (video != null)  			PlaybackStopped (video' (long)currentPosition);  	}  });  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Play,The following statement contains a magic number: if (video.IsPlaylist)  	process = Process.Start (PlayerPath);  else {  	string init;  	if (video.ResumePosition > 0) {  		double n = video.ResumePosition;  		n /= 1000;  		init += " --start-time=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  	}  	if (video.SubtitlePaths != null && video.SubtitlePaths.Count > 0) {  		foreach (string s in video.SubtitlePaths) {  			init += " --sub-file=\"" + s + "\"";  		}  	}  	process = Process.Start (PlayerPath' init);  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Play,The following statement contains a magic number: if (video.ResumePosition > 0) {  	double n = video.ResumePosition;  	n /= 1000;  	init += " --start-time=\"" + n.ToString (CultureInfo.InvariantCulture) + "\"";  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,Play,The following statement contains a magic number: n /= 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,StartWatcher,The following statement contains a magic number: playerWebUiTimer.Interval = 2500;  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: try {  	HttpClient client = new HttpClient ();  	var byteArray = Encoding.ASCII.GetBytes (":" + webUIPassword);  	var header = new AuthenticationHeaderValue ("Basic"' Convert.ToBase64String (byteArray));  	client.DefaultRequestHeaders.Authorization = header;  	using (HttpResponseMessage response = await client.GetAsync (VLCUIStatusUrl))  		using (HttpContent content = response.Content) {  			if (response.StatusCode == System.Net.HttpStatusCode.OK) {  				responseString = await content.ReadAsStringAsync ();  				if (responseString != null) {  					nowPlayingFile = await GetNowPlayingFile ();  					if (!string.IsNullOrEmpty (nowPlayingFile)) {  						nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  						nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  						double webPosition;  						double webDuration;  						bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  						bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  						double filePosition;  						double fileDuration;  						if (isDoublePosition) {  							filePosition = webPosition * 1000;  							if (isDoubleDuration)  								fileDuration = webDuration * 1000;  							Dictionary<string' long> pos = new Dictionary<string' long> ();  							pos.Add (nowPlayingFile' (long)filePosition);  							OnPositionChangeEvent (pos);  							currentPosition = (long)filePosition;  						}  					}  				}  			}  			playerWebUiTimer.Start ();  		}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  	playerWebUiTimer.Start ();  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: try {  	HttpClient client = new HttpClient ();  	var byteArray = Encoding.ASCII.GetBytes (":" + webUIPassword);  	var header = new AuthenticationHeaderValue ("Basic"' Convert.ToBase64String (byteArray));  	client.DefaultRequestHeaders.Authorization = header;  	using (HttpResponseMessage response = await client.GetAsync (VLCUIStatusUrl))  		using (HttpContent content = response.Content) {  			if (response.StatusCode == System.Net.HttpStatusCode.OK) {  				responseString = await content.ReadAsStringAsync ();  				if (responseString != null) {  					nowPlayingFile = await GetNowPlayingFile ();  					if (!string.IsNullOrEmpty (nowPlayingFile)) {  						nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  						nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  						double webPosition;  						double webDuration;  						bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  						bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  						double filePosition;  						double fileDuration;  						if (isDoublePosition) {  							filePosition = webPosition * 1000;  							if (isDoubleDuration)  								fileDuration = webDuration * 1000;  							Dictionary<string' long> pos = new Dictionary<string' long> ();  							pos.Add (nowPlayingFile' (long)filePosition);  							OnPositionChangeEvent (pos);  							currentPosition = (long)filePosition;  						}  					}  				}  			}  			playerWebUiTimer.Start ();  		}  } catch (Exception ex) {  	logger.Error (ex' ex.ToString ());  	playerWebUiTimer.Start ();  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: using (HttpResponseMessage response = await client.GetAsync (VLCUIStatusUrl))  	using (HttpContent content = response.Content) {  		if (response.StatusCode == System.Net.HttpStatusCode.OK) {  			responseString = await content.ReadAsStringAsync ();  			if (responseString != null) {  				nowPlayingFile = await GetNowPlayingFile ();  				if (!string.IsNullOrEmpty (nowPlayingFile)) {  					nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  					nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  					double webPosition;  					double webDuration;  					bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  					bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  					double filePosition;  					double fileDuration;  					if (isDoublePosition) {  						filePosition = webPosition * 1000;  						if (isDoubleDuration)  							fileDuration = webDuration * 1000;  						Dictionary<string' long> pos = new Dictionary<string' long> ();  						pos.Add (nowPlayingFile' (long)filePosition);  						OnPositionChangeEvent (pos);  						currentPosition = (long)filePosition;  					}  				}  			}  		}  		playerWebUiTimer.Start ();  	}  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: using (HttpResponseMessage response = await client.GetAsync (VLCUIStatusUrl))  	using (HttpContent content = response.Content) {  		if (response.StatusCode == System.Net.HttpStatusCode.OK) {  			responseString = await content.ReadAsStringAsync ();  			if (responseString != null) {  				nowPlayingFile = await GetNowPlayingFile ();  				if (!string.IsNullOrEmpty (nowPlayingFile)) {  					nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  					nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  					double webPosition;  					double webDuration;  					bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  					bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  					double filePosition;  					double fileDuration;  					if (isDoublePosition) {  						filePosition = webPosition * 1000;  						if (isDoubleDuration)  							fileDuration = webDuration * 1000;  						Dictionary<string' long> pos = new Dictionary<string' long> ();  						pos.Add (nowPlayingFile' (long)filePosition);  						OnPositionChangeEvent (pos);  						currentPosition = (long)filePosition;  					}  				}  			}  		}  		playerWebUiTimer.Start ();  	}  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: using (HttpContent content = response.Content) {  	if (response.StatusCode == System.Net.HttpStatusCode.OK) {  		responseString = await content.ReadAsStringAsync ();  		if (responseString != null) {  			nowPlayingFile = await GetNowPlayingFile ();  			if (!string.IsNullOrEmpty (nowPlayingFile)) {  				nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  				nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  				double webPosition;  				double webDuration;  				bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  				bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  				double filePosition;  				double fileDuration;  				if (isDoublePosition) {  					filePosition = webPosition * 1000;  					if (isDoubleDuration)  						fileDuration = webDuration * 1000;  					Dictionary<string' long> pos = new Dictionary<string' long> ();  					pos.Add (nowPlayingFile' (long)filePosition);  					OnPositionChangeEvent (pos);  					currentPosition = (long)filePosition;  				}  			}  		}  	}  	playerWebUiTimer.Start ();  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: using (HttpContent content = response.Content) {  	if (response.StatusCode == System.Net.HttpStatusCode.OK) {  		responseString = await content.ReadAsStringAsync ();  		if (responseString != null) {  			nowPlayingFile = await GetNowPlayingFile ();  			if (!string.IsNullOrEmpty (nowPlayingFile)) {  				nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  				nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  				double webPosition;  				double webDuration;  				bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  				bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  				double filePosition;  				double fileDuration;  				if (isDoublePosition) {  					filePosition = webPosition * 1000;  					if (isDoubleDuration)  						fileDuration = webDuration * 1000;  					Dictionary<string' long> pos = new Dictionary<string' long> ();  					pos.Add (nowPlayingFile' (long)filePosition);  					OnPositionChangeEvent (pos);  					currentPosition = (long)filePosition;  				}  			}  		}  	}  	playerWebUiTimer.Start ();  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (response.StatusCode == System.Net.HttpStatusCode.OK) {  	responseString = await content.ReadAsStringAsync ();  	if (responseString != null) {  		nowPlayingFile = await GetNowPlayingFile ();  		if (!string.IsNullOrEmpty (nowPlayingFile)) {  			nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  			nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  			double webPosition;  			double webDuration;  			bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  			bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  			double filePosition;  			double fileDuration;  			if (isDoublePosition) {  				filePosition = webPosition * 1000;  				if (isDoubleDuration)  					fileDuration = webDuration * 1000;  				Dictionary<string' long> pos = new Dictionary<string' long> ();  				pos.Add (nowPlayingFile' (long)filePosition);  				OnPositionChangeEvent (pos);  				currentPosition = (long)filePosition;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (response.StatusCode == System.Net.HttpStatusCode.OK) {  	responseString = await content.ReadAsStringAsync ();  	if (responseString != null) {  		nowPlayingFile = await GetNowPlayingFile ();  		if (!string.IsNullOrEmpty (nowPlayingFile)) {  			nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  			nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  			double webPosition;  			double webDuration;  			bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  			bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  			double filePosition;  			double fileDuration;  			if (isDoublePosition) {  				filePosition = webPosition * 1000;  				if (isDoubleDuration)  					fileDuration = webDuration * 1000;  				Dictionary<string' long> pos = new Dictionary<string' long> ();  				pos.Add (nowPlayingFile' (long)filePosition);  				OnPositionChangeEvent (pos);  				currentPosition = (long)filePosition;  			}  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (responseString != null) {  	nowPlayingFile = await GetNowPlayingFile ();  	if (!string.IsNullOrEmpty (nowPlayingFile)) {  		nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  		nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  		double webPosition;  		double webDuration;  		bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  		bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  		double filePosition;  		double fileDuration;  		if (isDoublePosition) {  			filePosition = webPosition * 1000;  			if (isDoubleDuration)  				fileDuration = webDuration * 1000;  			Dictionary<string' long> pos = new Dictionary<string' long> ();  			pos.Add (nowPlayingFile' (long)filePosition);  			OnPositionChangeEvent (pos);  			currentPosition = (long)filePosition;  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (responseString != null) {  	nowPlayingFile = await GetNowPlayingFile ();  	if (!string.IsNullOrEmpty (nowPlayingFile)) {  		nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  		nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  		double webPosition;  		double webDuration;  		bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  		bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  		double filePosition;  		double fileDuration;  		if (isDoublePosition) {  			filePosition = webPosition * 1000;  			if (isDoubleDuration)  				fileDuration = webDuration * 1000;  			Dictionary<string' long> pos = new Dictionary<string' long> ();  			pos.Add (nowPlayingFile' (long)filePosition);  			OnPositionChangeEvent (pos);  			currentPosition = (long)filePosition;  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty (nowPlayingFile)) {  	nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  	nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  	double webPosition;  	double webDuration;  	bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  	bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  	double filePosition;  	double fileDuration;  	if (isDoublePosition) {  		filePosition = webPosition * 1000;  		if (isDoubleDuration)  			fileDuration = webDuration * 1000;  		Dictionary<string' long> pos = new Dictionary<string' long> ();  		pos.Add (nowPlayingFile' (long)filePosition);  		OnPositionChangeEvent (pos);  		currentPosition = (long)filePosition;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty (nowPlayingFile)) {  	nowPlayingFilePosition = filePositionRegex.Match (responseString).Groups [1].ToString ();  	nowPlayingFileDuration = fileDurationRegex.Match (responseString).Groups [1].ToString ();  	double webPosition;  	double webDuration;  	bool isDoublePosition = double.TryParse (nowPlayingFilePosition' out webPosition);  	bool isDoubleDuration = double.TryParse (nowPlayingFilePosition' out webDuration);  	double filePosition;  	double fileDuration;  	if (isDoublePosition) {  		filePosition = webPosition * 1000;  		if (isDoubleDuration)  			fileDuration = webDuration * 1000;  		Dictionary<string' long> pos = new Dictionary<string' long> ();  		pos.Add (nowPlayingFile' (long)filePosition);  		OnPositionChangeEvent (pos);  		currentPosition = (long)filePosition;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (isDoublePosition) {  	filePosition = webPosition * 1000;  	if (isDoubleDuration)  		fileDuration = webDuration * 1000;  	Dictionary<string' long> pos = new Dictionary<string' long> ();  	pos.Add (nowPlayingFile' (long)filePosition);  	OnPositionChangeEvent (pos);  	currentPosition = (long)filePosition;  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (isDoublePosition) {  	filePosition = webPosition * 1000;  	if (isDoubleDuration)  		fileDuration = webDuration * 1000;  	Dictionary<string' long> pos = new Dictionary<string' long> ();  	pos.Add (nowPlayingFile' (long)filePosition);  	OnPositionChangeEvent (pos);  	currentPosition = (long)filePosition;  }  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: filePosition = webPosition * 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: if (isDoubleDuration)  	fileDuration = webDuration * 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,VLCVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VLCVideoPlayer.cs,HandleWebUIRequest,The following statement contains a magic number: fileDuration = webDuration * 1000;  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,Play,The following statement contains a magic number: Task.Factory.StartNew (() => {  	;  	string tcpControlParam;  	Process process;  	if (video.IsPlaylist)  		process = Process.Start (PlayerPath);  	else {  		string init = '"' + video.Uri + '"';  		if (video.ResumePosition > 0) {  			string resumeTimeSpan = TimeSpan.FromSeconds (video.ResumePosition / 1000).ToString (@"hh\:mm\:ss");  			init += " /Seek:" + resumeTimeSpan;  			init += tcpControlParam;  		}  		process = Process.Start (PlayerPath' init);  	}  	if (process != null) {  		IsPlaying = true;  		Thread t = new Thread (() => StartPlayPositionRetrieval (video.Uri' true' TraktEnabled ()));  		t.IsBackground = true;  		t.Start ();  		process.WaitForExit ();  		IsPlaying = false;  		PlaybackStopped (video' currentPosition);  	}  });  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,Play,The following statement contains a magic number: if (video.IsPlaylist)  	process = Process.Start (PlayerPath);  else {  	string init = '"' + video.Uri + '"';  	if (video.ResumePosition > 0) {  		string resumeTimeSpan = TimeSpan.FromSeconds (video.ResumePosition / 1000).ToString (@"hh\:mm\:ss");  		init += " /Seek:" + resumeTimeSpan;  		init += tcpControlParam;  	}  	process = Process.Start (PlayerPath' init);  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,Play,The following statement contains a magic number: if (video.ResumePosition > 0) {  	string resumeTimeSpan = TimeSpan.FromSeconds (video.ResumePosition / 1000).ToString (@"hh\:mm\:ss");  	init += " /Seek:" + resumeTimeSpan;  	init += tcpControlParam;  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	if (firstStart) {  		var startupDelay = TimeSpan.FromSeconds (5);  		Thread.Sleep (startupDelay);  		if (!IsPlaying) {  			Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  			return;  		}  	}  	var tc = new ZPConnection ("localhost"' _tcpControlPort);  	var playerInactive = false;  	char[] charSeparator =  {  		' '  	};  	var videoDuration = "";  	if (tc.IsConnected) {  		tc.Write ("1100 0" + Environment.NewLine);  	} else {  		Debug.WriteLine ("Zoom player - No connection could be made to zoom player API using port 4769 to store time code!");  		return;  	}  	while (tc.IsConnected && IsPlaying) {  		try {  			tc.Write ("1000" + Environment.NewLine);  			var playing = tc.Read ();  			if (playing.StartsWith ("1000 ")) {  				if (playing.Contains (" ")) {  					var playingSplit = playing.Split (charSeparator);  					playing = playingSplit [1].Trim ();  					if (playing != "3") {  						playerInactive = true;  					} else {  						playerInactive = false;  					}  				}  			}  			Thread.Sleep (100);  			if (!playerInactive) {  				tc.Write ("1110" + Environment.NewLine);  				videoDuration = tc.Read ();  				if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  					continue;  				}  				Thread.Sleep (100);  				tc.Write ("1120" + Environment.NewLine);  				var timecode = tc.Read ();  				if (timecode.StartsWith ("1120 ")) {  					try {  						if (videoDuration.Contains (" ")) {  							var videoDurationSplit = videoDuration.Split (charSeparator);  							var timeCodeSplit = timecode.Split (charSeparator);  							videoDuration = videoDurationSplit [1].Trim ();  							timecode = timeCodeSplit [1].Trim ();  							double videoDurationMS = 0;  							var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  							var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  							if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  								tc.Write ("1800" + Environment.NewLine);  								var videoFilenameRetrieved = tc.Read ();  								if (videoFilenameRetrieved.StartsWith ("1800 ")) {  									var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  									if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  										Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  										return;  									}  								}  							}  						}  					} catch (Exception) {  					}  				}  			}  		} catch (Exception e) {  			Thread.Sleep (1000);  			if (!IsPlaying) {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  				UpdateFilePosition (fileName' postitionTimeCodeMs);  			} else {  				Thread.Sleep (250);  				Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  				Debug.WriteLine (e.Message);  				StartPlayPositionRetrieval (fileName);  			}  		}  		if (scrobbleEnabled) {  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		}  	}  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } catch (Exception) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		StartPlayPositionRetrieval (fileName' false' scrobbleEnabled);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: if (firstStart) {  	var startupDelay = TimeSpan.FromSeconds (5);  	Thread.Sleep (startupDelay);  	if (!IsPlaying) {  		Debug.WriteLine ("Zoom player - After waiting 5 seconds ZP was no longer running' stopping playback record.");  		return;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: while (tc.IsConnected && IsPlaying) {  	try {  		tc.Write ("1000" + Environment.NewLine);  		var playing = tc.Read ();  		if (playing.StartsWith ("1000 ")) {  			if (playing.Contains (" ")) {  				var playingSplit = playing.Split (charSeparator);  				playing = playingSplit [1].Trim ();  				if (playing != "3") {  					playerInactive = true;  				} else {  					playerInactive = false;  				}  			}  		}  		Thread.Sleep (100);  		if (!playerInactive) {  			tc.Write ("1110" + Environment.NewLine);  			videoDuration = tc.Read ();  			if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  				continue;  			}  			Thread.Sleep (100);  			tc.Write ("1120" + Environment.NewLine);  			var timecode = tc.Read ();  			if (timecode.StartsWith ("1120 ")) {  				try {  					if (videoDuration.Contains (" ")) {  						var videoDurationSplit = videoDuration.Split (charSeparator);  						var timeCodeSplit = timecode.Split (charSeparator);  						videoDuration = videoDurationSplit [1].Trim ();  						timecode = timeCodeSplit [1].Trim ();  						double videoDurationMS = 0;  						var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  						var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  						if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  							tc.Write ("1800" + Environment.NewLine);  							var videoFilenameRetrieved = tc.Read ();  							if (videoFilenameRetrieved.StartsWith ("1800 ")) {  								var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  								if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  									Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  									return;  								}  							}  						}  					}  				} catch (Exception) {  				}  			}  		}  	} catch (Exception e) {  		Thread.Sleep (1000);  		if (!IsPlaying) {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		} else {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  			Debug.WriteLine (e.Message);  			StartPlayPositionRetrieval (fileName);  		}  	}  	if (scrobbleEnabled) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: while (tc.IsConnected && IsPlaying) {  	try {  		tc.Write ("1000" + Environment.NewLine);  		var playing = tc.Read ();  		if (playing.StartsWith ("1000 ")) {  			if (playing.Contains (" ")) {  				var playingSplit = playing.Split (charSeparator);  				playing = playingSplit [1].Trim ();  				if (playing != "3") {  					playerInactive = true;  				} else {  					playerInactive = false;  				}  			}  		}  		Thread.Sleep (100);  		if (!playerInactive) {  			tc.Write ("1110" + Environment.NewLine);  			videoDuration = tc.Read ();  			if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  				continue;  			}  			Thread.Sleep (100);  			tc.Write ("1120" + Environment.NewLine);  			var timecode = tc.Read ();  			if (timecode.StartsWith ("1120 ")) {  				try {  					if (videoDuration.Contains (" ")) {  						var videoDurationSplit = videoDuration.Split (charSeparator);  						var timeCodeSplit = timecode.Split (charSeparator);  						videoDuration = videoDurationSplit [1].Trim ();  						timecode = timeCodeSplit [1].Trim ();  						double videoDurationMS = 0;  						var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  						var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  						if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  							tc.Write ("1800" + Environment.NewLine);  							var videoFilenameRetrieved = tc.Read ();  							if (videoFilenameRetrieved.StartsWith ("1800 ")) {  								var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  								if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  									Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  									return;  								}  							}  						}  					}  				} catch (Exception) {  				}  			}  		}  	} catch (Exception e) {  		Thread.Sleep (1000);  		if (!IsPlaying) {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		} else {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  			Debug.WriteLine (e.Message);  			StartPlayPositionRetrieval (fileName);  		}  	}  	if (scrobbleEnabled) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: while (tc.IsConnected && IsPlaying) {  	try {  		tc.Write ("1000" + Environment.NewLine);  		var playing = tc.Read ();  		if (playing.StartsWith ("1000 ")) {  			if (playing.Contains (" ")) {  				var playingSplit = playing.Split (charSeparator);  				playing = playingSplit [1].Trim ();  				if (playing != "3") {  					playerInactive = true;  				} else {  					playerInactive = false;  				}  			}  		}  		Thread.Sleep (100);  		if (!playerInactive) {  			tc.Write ("1110" + Environment.NewLine);  			videoDuration = tc.Read ();  			if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  				continue;  			}  			Thread.Sleep (100);  			tc.Write ("1120" + Environment.NewLine);  			var timecode = tc.Read ();  			if (timecode.StartsWith ("1120 ")) {  				try {  					if (videoDuration.Contains (" ")) {  						var videoDurationSplit = videoDuration.Split (charSeparator);  						var timeCodeSplit = timecode.Split (charSeparator);  						videoDuration = videoDurationSplit [1].Trim ();  						timecode = timeCodeSplit [1].Trim ();  						double videoDurationMS = 0;  						var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  						var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  						if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  							tc.Write ("1800" + Environment.NewLine);  							var videoFilenameRetrieved = tc.Read ();  							if (videoFilenameRetrieved.StartsWith ("1800 ")) {  								var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  								if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  									Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  									return;  								}  							}  						}  					}  				} catch (Exception) {  				}  			}  		}  	} catch (Exception e) {  		Thread.Sleep (1000);  		if (!IsPlaying) {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		} else {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  			Debug.WriteLine (e.Message);  			StartPlayPositionRetrieval (fileName);  		}  	}  	if (scrobbleEnabled) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: while (tc.IsConnected && IsPlaying) {  	try {  		tc.Write ("1000" + Environment.NewLine);  		var playing = tc.Read ();  		if (playing.StartsWith ("1000 ")) {  			if (playing.Contains (" ")) {  				var playingSplit = playing.Split (charSeparator);  				playing = playingSplit [1].Trim ();  				if (playing != "3") {  					playerInactive = true;  				} else {  					playerInactive = false;  				}  			}  		}  		Thread.Sleep (100);  		if (!playerInactive) {  			tc.Write ("1110" + Environment.NewLine);  			videoDuration = tc.Read ();  			if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  				continue;  			}  			Thread.Sleep (100);  			tc.Write ("1120" + Environment.NewLine);  			var timecode = tc.Read ();  			if (timecode.StartsWith ("1120 ")) {  				try {  					if (videoDuration.Contains (" ")) {  						var videoDurationSplit = videoDuration.Split (charSeparator);  						var timeCodeSplit = timecode.Split (charSeparator);  						videoDuration = videoDurationSplit [1].Trim ();  						timecode = timeCodeSplit [1].Trim ();  						double videoDurationMS = 0;  						var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  						var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  						if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  							tc.Write ("1800" + Environment.NewLine);  							var videoFilenameRetrieved = tc.Read ();  							if (videoFilenameRetrieved.StartsWith ("1800 ")) {  								var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  								if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  									Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  									return;  								}  							}  						}  					}  				} catch (Exception) {  				}  			}  		}  	} catch (Exception e) {  		Thread.Sleep (1000);  		if (!IsPlaying) {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		} else {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  			Debug.WriteLine (e.Message);  			StartPlayPositionRetrieval (fileName);  		}  	}  	if (scrobbleEnabled) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: while (tc.IsConnected && IsPlaying) {  	try {  		tc.Write ("1000" + Environment.NewLine);  		var playing = tc.Read ();  		if (playing.StartsWith ("1000 ")) {  			if (playing.Contains (" ")) {  				var playingSplit = playing.Split (charSeparator);  				playing = playingSplit [1].Trim ();  				if (playing != "3") {  					playerInactive = true;  				} else {  					playerInactive = false;  				}  			}  		}  		Thread.Sleep (100);  		if (!playerInactive) {  			tc.Write ("1110" + Environment.NewLine);  			videoDuration = tc.Read ();  			if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  				continue;  			}  			Thread.Sleep (100);  			tc.Write ("1120" + Environment.NewLine);  			var timecode = tc.Read ();  			if (timecode.StartsWith ("1120 ")) {  				try {  					if (videoDuration.Contains (" ")) {  						var videoDurationSplit = videoDuration.Split (charSeparator);  						var timeCodeSplit = timecode.Split (charSeparator);  						videoDuration = videoDurationSplit [1].Trim ();  						timecode = timeCodeSplit [1].Trim ();  						double videoDurationMS = 0;  						var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  						var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  						if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  							tc.Write ("1800" + Environment.NewLine);  							var videoFilenameRetrieved = tc.Read ();  							if (videoFilenameRetrieved.StartsWith ("1800 ")) {  								var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  								if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  									Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  									return;  								}  							}  						}  					}  				} catch (Exception) {  				}  			}  		}  	} catch (Exception e) {  		Thread.Sleep (1000);  		if (!IsPlaying) {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  			UpdateFilePosition (fileName' postitionTimeCodeMs);  		} else {  			Thread.Sleep (250);  			Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  			Debug.WriteLine (e.Message);  			StartPlayPositionRetrieval (fileName);  		}  	}  	if (scrobbleEnabled) {  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	tc.Write ("1000" + Environment.NewLine);  	var playing = tc.Read ();  	if (playing.StartsWith ("1000 ")) {  		if (playing.Contains (" ")) {  			var playingSplit = playing.Split (charSeparator);  			playing = playingSplit [1].Trim ();  			if (playing != "3") {  				playerInactive = true;  			} else {  				playerInactive = false;  			}  		}  	}  	Thread.Sleep (100);  	if (!playerInactive) {  		tc.Write ("1110" + Environment.NewLine);  		videoDuration = tc.Read ();  		if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  			continue;  		}  		Thread.Sleep (100);  		tc.Write ("1120" + Environment.NewLine);  		var timecode = tc.Read ();  		if (timecode.StartsWith ("1120 ")) {  			try {  				if (videoDuration.Contains (" ")) {  					var videoDurationSplit = videoDuration.Split (charSeparator);  					var timeCodeSplit = timecode.Split (charSeparator);  					videoDuration = videoDurationSplit [1].Trim ();  					timecode = timeCodeSplit [1].Trim ();  					double videoDurationMS = 0;  					var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  					var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  					if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  						tc.Write ("1800" + Environment.NewLine);  						var videoFilenameRetrieved = tc.Read ();  						if (videoFilenameRetrieved.StartsWith ("1800 ")) {  							var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  							if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  								Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  								return;  							}  						}  					}  				}  			} catch (Exception) {  			}  		}  	}  } catch (Exception e) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  		Debug.WriteLine (e.Message);  		StartPlayPositionRetrieval (fileName);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	tc.Write ("1000" + Environment.NewLine);  	var playing = tc.Read ();  	if (playing.StartsWith ("1000 ")) {  		if (playing.Contains (" ")) {  			var playingSplit = playing.Split (charSeparator);  			playing = playingSplit [1].Trim ();  			if (playing != "3") {  				playerInactive = true;  			} else {  				playerInactive = false;  			}  		}  	}  	Thread.Sleep (100);  	if (!playerInactive) {  		tc.Write ("1110" + Environment.NewLine);  		videoDuration = tc.Read ();  		if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  			continue;  		}  		Thread.Sleep (100);  		tc.Write ("1120" + Environment.NewLine);  		var timecode = tc.Read ();  		if (timecode.StartsWith ("1120 ")) {  			try {  				if (videoDuration.Contains (" ")) {  					var videoDurationSplit = videoDuration.Split (charSeparator);  					var timeCodeSplit = timecode.Split (charSeparator);  					videoDuration = videoDurationSplit [1].Trim ();  					timecode = timeCodeSplit [1].Trim ();  					double videoDurationMS = 0;  					var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  					var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  					if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  						tc.Write ("1800" + Environment.NewLine);  						var videoFilenameRetrieved = tc.Read ();  						if (videoFilenameRetrieved.StartsWith ("1800 ")) {  							var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  							if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  								Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  								return;  							}  						}  					}  				}  			} catch (Exception) {  			}  		}  	}  } catch (Exception e) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  		Debug.WriteLine (e.Message);  		StartPlayPositionRetrieval (fileName);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	tc.Write ("1000" + Environment.NewLine);  	var playing = tc.Read ();  	if (playing.StartsWith ("1000 ")) {  		if (playing.Contains (" ")) {  			var playingSplit = playing.Split (charSeparator);  			playing = playingSplit [1].Trim ();  			if (playing != "3") {  				playerInactive = true;  			} else {  				playerInactive = false;  			}  		}  	}  	Thread.Sleep (100);  	if (!playerInactive) {  		tc.Write ("1110" + Environment.NewLine);  		videoDuration = tc.Read ();  		if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  			continue;  		}  		Thread.Sleep (100);  		tc.Write ("1120" + Environment.NewLine);  		var timecode = tc.Read ();  		if (timecode.StartsWith ("1120 ")) {  			try {  				if (videoDuration.Contains (" ")) {  					var videoDurationSplit = videoDuration.Split (charSeparator);  					var timeCodeSplit = timecode.Split (charSeparator);  					videoDuration = videoDurationSplit [1].Trim ();  					timecode = timeCodeSplit [1].Trim ();  					double videoDurationMS = 0;  					var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  					var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  					if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  						tc.Write ("1800" + Environment.NewLine);  						var videoFilenameRetrieved = tc.Read ();  						if (videoFilenameRetrieved.StartsWith ("1800 ")) {  							var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  							if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  								Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  								return;  							}  						}  					}  				}  			} catch (Exception) {  			}  		}  	}  } catch (Exception e) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  		Debug.WriteLine (e.Message);  		StartPlayPositionRetrieval (fileName);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	tc.Write ("1000" + Environment.NewLine);  	var playing = tc.Read ();  	if (playing.StartsWith ("1000 ")) {  		if (playing.Contains (" ")) {  			var playingSplit = playing.Split (charSeparator);  			playing = playingSplit [1].Trim ();  			if (playing != "3") {  				playerInactive = true;  			} else {  				playerInactive = false;  			}  		}  	}  	Thread.Sleep (100);  	if (!playerInactive) {  		tc.Write ("1110" + Environment.NewLine);  		videoDuration = tc.Read ();  		if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  			continue;  		}  		Thread.Sleep (100);  		tc.Write ("1120" + Environment.NewLine);  		var timecode = tc.Read ();  		if (timecode.StartsWith ("1120 ")) {  			try {  				if (videoDuration.Contains (" ")) {  					var videoDurationSplit = videoDuration.Split (charSeparator);  					var timeCodeSplit = timecode.Split (charSeparator);  					videoDuration = videoDurationSplit [1].Trim ();  					timecode = timeCodeSplit [1].Trim ();  					double videoDurationMS = 0;  					var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  					var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  					if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  						tc.Write ("1800" + Environment.NewLine);  						var videoFilenameRetrieved = tc.Read ();  						if (videoFilenameRetrieved.StartsWith ("1800 ")) {  							var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  							if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  								Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  								return;  							}  						}  					}  				}  			} catch (Exception) {  			}  		}  	}  } catch (Exception e) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  		Debug.WriteLine (e.Message);  		StartPlayPositionRetrieval (fileName);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: try {  	tc.Write ("1000" + Environment.NewLine);  	var playing = tc.Read ();  	if (playing.StartsWith ("1000 ")) {  		if (playing.Contains (" ")) {  			var playingSplit = playing.Split (charSeparator);  			playing = playingSplit [1].Trim ();  			if (playing != "3") {  				playerInactive = true;  			} else {  				playerInactive = false;  			}  		}  	}  	Thread.Sleep (100);  	if (!playerInactive) {  		tc.Write ("1110" + Environment.NewLine);  		videoDuration = tc.Read ();  		if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  			continue;  		}  		Thread.Sleep (100);  		tc.Write ("1120" + Environment.NewLine);  		var timecode = tc.Read ();  		if (timecode.StartsWith ("1120 ")) {  			try {  				if (videoDuration.Contains (" ")) {  					var videoDurationSplit = videoDuration.Split (charSeparator);  					var timeCodeSplit = timecode.Split (charSeparator);  					videoDuration = videoDurationSplit [1].Trim ();  					timecode = timeCodeSplit [1].Trim ();  					double videoDurationMS = 0;  					var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  					var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  					if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  						tc.Write ("1800" + Environment.NewLine);  						var videoFilenameRetrieved = tc.Read ();  						if (videoFilenameRetrieved.StartsWith ("1800 ")) {  							var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  							if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  								Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  								return;  							}  						}  					}  				}  			} catch (Exception) {  			}  		}  	}  } catch (Exception e) {  	Thread.Sleep (1000);  	if (!IsPlaying) {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  		UpdateFilePosition (fileName' postitionTimeCodeMs);  	} else {  		Thread.Sleep (250);  		Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  		Debug.WriteLine (e.Message);  		StartPlayPositionRetrieval (fileName);  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: if (!playerInactive) {  	tc.Write ("1110" + Environment.NewLine);  	videoDuration = tc.Read ();  	if (string.IsNullOrEmpty (videoDuration.Trim ()) || videoDuration.ToLower ().Contains ("seek") || videoDuration.ToLower ().StartsWith ("2200") || videoDuration.ToLower ().Contains ("derived")) {  		continue;  	}  	Thread.Sleep (100);  	tc.Write ("1120" + Environment.NewLine);  	var timecode = tc.Read ();  	if (timecode.StartsWith ("1120 ")) {  		try {  			if (videoDuration.Contains (" ")) {  				var videoDurationSplit = videoDuration.Split (charSeparator);  				var timeCodeSplit = timecode.Split (charSeparator);  				videoDuration = videoDurationSplit [1].Trim ();  				timecode = timeCodeSplit [1].Trim ();  				double videoDurationMS = 0;  				var successfullyParsedVideoDuration = double.TryParse (videoDuration' out videoDurationMS);  				var successfullyParsedTimeCode = double.TryParse (timecode' out postitionTimeCodeMs);  				if (successfullyParsedVideoDuration && successfullyParsedTimeCode) {  					tc.Write ("1800" + Environment.NewLine);  					var videoFilenameRetrieved = tc.Read ();  					if (videoFilenameRetrieved.StartsWith ("1800 ")) {  						var videoFilenameReadOut = videoFilenameRetrieved.Replace ("1800 "' string.Empty).Trim ();  						if (!string.IsNullOrEmpty (videoFilenameReadOut) && videoFilenameReadOut.ToLower () != fileName.ToLower ()) {  							Debug.WriteLine ("Zoom player - Video filename didn't match original: " + videoFilenameReadOut);  							return;  						}  					}  				}  			}  		} catch (Exception) {  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: if (!IsPlaying) {  	Thread.Sleep (250);  	Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } else {  	Thread.Sleep (250);  	Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  	Debug.WriteLine (e.Message);  	StartPlayPositionRetrieval (fileName);  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: if (!IsPlaying) {  	Thread.Sleep (250);  	Debug.WriteLine ("[Position retrieval] Zoom player - no longer running");  	UpdateFilePosition (fileName' postitionTimeCodeMs);  } else {  	Thread.Sleep (250);  	Debug.WriteLine ("[Position retrieval] Zoom player - error occured");  	Debug.WriteLine (e.Message);  	StartPlayPositionRetrieval (fileName);  }  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,Shoko.Desktop.VideoPlayers,ZoomPlayerVideoPlayer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\ZoomPlayerVideoPlayer.cs,StartPlayPositionRetrieval,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: try {  	RegistryKey k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\GNU\ffdshow"' true);  	if (k != null) {  		string org = (string)k.GetValue ("subSearchDir"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("subSearchDir"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\GNU\ffdshow64"' true);  	if (k != null) {  		string org = (string)k.GetValue ("subSearchDir"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("subSearchDir"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\Gabest\VSFilter\DefTextPathes"' true);  	if (k != null) {  		for (int x = 0; x < 10; x++) {  			string val = (string)k.GetValue ("Path" + x' null);  			if (val != null && val == path)  				break;  			if (val == null) {  				k.SetValue ("Path" + x' path);  				break;  			}  		}  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\MPC-HC\MPC-HC\Settings"' true);  	if (k != null) {  		string org = (string)k.GetValue ("SubtitlePaths"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("SubtitlePaths"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\Daum\PotPlayerMini\CaptionFolderList"' true);  	if (k != null) {  		for (int x = 0; x < 10; x++) {  			string val = (string)k.GetValue (x.ToString ()' null);  			if (val != null && val == path)  				break;  			if (val == null) {  				k.SetValue (x.ToString ()' path);  				break;  			}  		}  	}  	string vlcrcpath = Path.Combine (Environment.GetFolderPath ((Environment.SpecialFolder.ApplicationData))' "vlc"' "vlcrc");  	try {  		if (File.Exists (vlcrcpath)) {  			string[] lines = File.ReadAllLines (vlcrcpath);  			for (int x = 0; x < lines.Length; x++) {  				string s = lines [x];  				if (s.StartsWith ("#sub-autodetect-path=") || s.StartsWith ("sub-autodetect-path=")) {  					if (!s.Contains (path)) {  						s += "' " + path;  						if (s.StartsWith ("#"))  							s = s.Substring (1);  						lines [x] = s;  						File.WriteAllLines (vlcrcpath' lines);  						break;  					}  				}  			}  		}  	} catch (Exception) {  	}  } catch (Exception) {  }  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: try {  	RegistryKey k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\GNU\ffdshow"' true);  	if (k != null) {  		string org = (string)k.GetValue ("subSearchDir"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("subSearchDir"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\GNU\ffdshow64"' true);  	if (k != null) {  		string org = (string)k.GetValue ("subSearchDir"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("subSearchDir"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\Gabest\VSFilter\DefTextPathes"' true);  	if (k != null) {  		for (int x = 0; x < 10; x++) {  			string val = (string)k.GetValue ("Path" + x' null);  			if (val != null && val == path)  				break;  			if (val == null) {  				k.SetValue ("Path" + x' path);  				break;  			}  		}  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\MPC-HC\MPC-HC\Settings"' true);  	if (k != null) {  		string org = (string)k.GetValue ("SubtitlePaths"' null);  		if (string.IsNullOrEmpty (org))  			org = path;  		else if (!org.Contains (path))  			org += ";" + path;  		k.SetValue ("SubtitlePaths"' org);  	}  	k = Registry.CurrentUser.OpenSubKey (@"SOFTWARE\Daum\PotPlayerMini\CaptionFolderList"' true);  	if (k != null) {  		for (int x = 0; x < 10; x++) {  			string val = (string)k.GetValue (x.ToString ()' null);  			if (val != null && val == path)  				break;  			if (val == null) {  				k.SetValue (x.ToString ()' path);  				break;  			}  		}  	}  	string vlcrcpath = Path.Combine (Environment.GetFolderPath ((Environment.SpecialFolder.ApplicationData))' "vlc"' "vlcrc");  	try {  		if (File.Exists (vlcrcpath)) {  			string[] lines = File.ReadAllLines (vlcrcpath);  			for (int x = 0; x < lines.Length; x++) {  				string s = lines [x];  				if (s.StartsWith ("#sub-autodetect-path=") || s.StartsWith ("sub-autodetect-path=")) {  					if (!s.Contains (path)) {  						s += "' " + path;  						if (s.StartsWith ("#"))  							s = s.Substring (1);  						lines [x] = s;  						File.WriteAllLines (vlcrcpath' lines);  						break;  					}  				}  			}  		}  	} catch (Exception) {  	}  } catch (Exception) {  }  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: if (k != null) {  	for (int x = 0; x < 10; x++) {  		string val = (string)k.GetValue ("Path" + x' null);  		if (val != null && val == path)  			break;  		if (val == null) {  			k.SetValue ("Path" + x' path);  			break;  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	string val = (string)k.GetValue ("Path" + x' null);  	if (val != null && val == path)  		break;  	if (val == null) {  		k.SetValue ("Path" + x' path);  		break;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: if (k != null) {  	for (int x = 0; x < 10; x++) {  		string val = (string)k.GetValue (x.ToString ()' null);  		if (val != null && val == path)  			break;  		if (val == null) {  			k.SetValue (x.ToString ()' path);  			break;  		}  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers,VideoHandler,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\VideoHandler.cs,AddTempPathToSubtilePaths,The following statement contains a magic number: for (int x = 0; x < 10; x++) {  	string val = (string)k.GetValue (x.ToString ()' null);  	if (val != null && val == path)  		break;  	if (val == null) {  		k.SetValue (x.ToString ()' path);  		break;  	}  }  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,PlayerForm,The following statement contains a magic number: Player.PositionChanged += position => {  	_vinfo.ChangePosition (position * 1000);  };  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,PlayerForm,The following statement contains a magic number: _vinfo.ChangePosition (position * 1000);  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,Stop,The following statement contains a magic number: _vinfo.ForceChange ((long)(Player.Time * 1000));  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,Stop,The following statement contains a magic number: FilePosition.Invoke (_vinfo' (long)(Player.Time * 1000));  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,Quit,The following statement contains a magic number: _vinfo.ForceChange ((long)(Player.Time * 1000));  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,Quit,The following statement contains a magic number: FilePosition.Invoke (_vinfo' (long)(Player.Time * 1000));  
Magic Number,Shoko.Desktop.VideoPlayers.mpv,PlayerForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\VideoPlayers\mpv\PlayerForm.xaml.cs,Play,The following statement contains a magic number: r.ResumePosition = info.ResumePosition / 1000;  
Magic Number,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,DownloadAniDBCover,The following statement contains a magic number: try {  	if (anime.AnimeID == 8580)  		Console.Write ("");  	string url = string.Format (Models.Constants.URLS.AniDB_Images' anime.Picname);  	string filename = anime.PosterPathNoDefault;  	ImageDownloadRequest req = new ImageDownloadRequest (ImageEntityType.AniDB_Cover' anime' forceDownload);  	if (!req.ForceDownload) {  		if (!File.Exists (anime.PosterPath)) {  			imagesToDownload.Enqueue (req);  			OnQueueUpdateEvent (new QueueUpdateEventArgs (QueueCount));  			return;  		}  		return;  	}  	imagesToDownload.Enqueue (req);  	OnQueueUpdateEvent (new QueueUpdateEventArgs (QueueCount));  } catch (Exception ex) {  	Utils.ShowErrorMessage (ex);  }  
Magic Number,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,DownloadAniDBCover,The following statement contains a magic number: if (anime.AnimeID == 8580)  	Console.Write ("");  
Magic Number,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,ProcessImages,The following statement contains a magic number: while (!Stopping) {  	while (!imagesToDownload.IsEmpty) {  		ImageDownloadRequest req;  		if (imagesToDownload.TryDequeue (out req)) {  			try {  				DownloadImage (req);  			} catch (Exception ex) {  				logger.Error (ex' ex.ToString ());  			}  			OnQueueUpdateEvent (new QueueUpdateEventArgs (QueueCount));  		}  	}  	Thread.Sleep (100);  }  
Magic Number,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,ProcessImages,The following statement contains a magic number: Thread.Sleep (100);  
Duplicate Code,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetTraktInfo,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 39)' (55' 76))
Duplicate Code,Shoko.Desktop.ImageDownload,ImageDownloader,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ImageDownload\ImageDownloader.cs,DownloadImage,The method contains a code clone-set at the following line numbers (starting from the method definition): ((8' 34)' (40' 66))
Missing Default,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LoadSettings,The following switch statement is missing a default case: switch (dr) {  case DialogResult.Yes:  	try {  		Utils.GrantAccess (ApplicationPath);  	} catch (Exception) {  	}  	Utils.RestartAsAdmin ();  	break;  case DialogResult.No:  	Application.Current.Shutdown ();  	Environment.Exit (0);  	break;  }  
Missing Default,Shoko.Desktop,AppSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\AppSettings.cs,LocateLegacyConfigFile,The following switch statement is missing a default case: switch (dr) {  case MessageBoxResult.Yes:  	OpenFileDialog openFileDialog = new OpenFileDialog ();  	openFileDialog.Filter = "JMM config|JMMDesktop.exe.config;settings.json";  	DialogResult browseFile = openFileDialog.ShowDialog ();  	if (browseFile == DialogResult.OK && !string.IsNullOrEmpty (openFileDialog.FileName.Trim ())) {  		configPath = openFileDialog.FileName;  	}  	break;  }  
Missing Default,Shoko.Desktop,MainWindow,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\MainWindow.xaml.cs,ShowDashMetroView,The following switch statement is missing a default case: switch (viewType) {  case MetroViews.MainNormal:  	dash.Visibility = Visibility.Visible;  	DisplayMainTab ((int)TAB_MAIN.Dashboard);  	AppSettings.DashboardType = DashboardType.Normal;  	break;  case MetroViews.MainMetro:  	dashMetro.Visibility = Visibility.Visible;  	DisplayMainTab ((int)TAB_MAIN.Dashboard);  	AppSettings.DashboardType = DashboardType.Metro;  	break;  case MetroViews.ContinueWatching:  	tileContinueWatching.Visibility = Visibility.Visible;  	tileContinueWatching.DataContext = data;  	break;  }  
Missing Default,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,EvaluateConditionsAndOperators,The following switch statement is missing a default case: switch (conditionType) {  case GroupFilterConditionType.AirDate:  case GroupFilterConditionType.SeriesCreatedDate:  case GroupFilterConditionType.EpisodeAddedDate:  case GroupFilterConditionType.EpisodeWatchedDate:  case GroupFilterConditionType.LatestEpisodeAirDate:  	if (opType == GroupFilterOperator.LastXDays) {  		IsParameterLastXDays = true;  		IsParameterText = true;  	} else  		IsParameterDate = true;  	break;  case GroupFilterConditionType.AnimeGroup:  	IsParameterAnimeGroup = true;  	break;  case GroupFilterConditionType.AnimeType:  	IsParameterAnimeType = true;  	break;  case GroupFilterConditionType.Tag:  	IsParameterInNotIn = true;  	IsParameterTag = true;  	break;  case GroupFilterConditionType.CustomTags:  	IsParameterInNotIn = true;  	IsParameterCustomTag = true;  	break;  case GroupFilterConditionType.AudioLanguage:  	IsParameterInNotIn = true;  	IsParameterAudioLanguage = true;  	break;  case GroupFilterConditionType.SubtitleLanguage:  	IsParameterInNotIn = true;  	IsParameterSubtitleLanguage = true;  	break;  case GroupFilterConditionType.Year:  	IsParameterInNotIn = true;  	break;  case GroupFilterConditionType.VideoQuality:  	IsParameterInNotIn = true;  	IsParameterVideoQuality = true;  	break;  case GroupFilterConditionType.AniDBRating:  case GroupFilterConditionType.UserRating:  	IsParameterText = true;  	IsParameterRating = true;  	break;  case GroupFilterConditionType.EpisodeCount:  	IsParameterText = true;  	IsParameterInteger = true;  	break;  }  
Missing Default,Shoko.Desktop.Forms,GroupFilterConditionForm,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Forms\GroupFilterConditionForm.xaml.cs,Init,The following switch statement is missing a default case: switch (conditionType) {  case GroupFilterConditionType.AirDate:  case GroupFilterConditionType.SeriesCreatedDate:  case GroupFilterConditionType.EpisodeAddedDate:  case GroupFilterConditionType.EpisodeWatchedDate:  case GroupFilterConditionType.LatestEpisodeAirDate:  	if (opType == GroupFilterOperator.LastXDays)  		txtParameter.Text = gfc.ConditionParameter;  	else {  		DateTime airDate = gfc.ConditionParameter.GetDateFromString ();  		dpDate.SelectedDate = airDate;  	}  	break;  case GroupFilterConditionType.AnimeGroup:  	// don't display anything  	break;  case GroupFilterConditionType.AnimeType:  case GroupFilterConditionType.Tag:  case GroupFilterConditionType.CustomTags:  case GroupFilterConditionType.VideoQuality:  case GroupFilterConditionType.AniDBRating:  case GroupFilterConditionType.UserRating:  case GroupFilterConditionType.AudioLanguage:  case GroupFilterConditionType.SubtitleLanguage:  case GroupFilterConditionType.Year:  	txtParameter.Text = gfc.ConditionParameter;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAniDBFiles_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyAniDBFiles.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_File_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyListStats_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyMyListStats.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyListStats_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyMyList_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyMyList.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_MyList_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyAnime_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyAnime.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Anime_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,AniDBScheduledUpdates,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\AniDBScheduledUpdates.xaml.cs,cboUpdateFrequencyCalendar_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequencyCalendar.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.AniDB_Calendar_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (VM_ShokoServer.Instance.EpisodeTitleSource) {  case DataSourceType.AniDB:  	cboStyleEpisodeTitle.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleEpisodeTitle.SelectedIndex = 1;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (VM_ShokoServer.Instance.SeriesDescriptionSource) {  case DataSourceType.AniDB:  	cboStyleSeriesOverview.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleSeriesOverview.SelectedIndex = 1;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,DisplayStyleSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\DisplayStyleSettings.xaml.cs,DisplayStyleSettings,The following switch statement is missing a default case: switch (VM_ShokoServer.Instance.SeriesNameSource) {  case DataSourceType.AniDB:  	cboStyleSeriesName.SelectedIndex = 0;  	break;  case DataSourceType.TheTvDB:  	cboStyleSeriesName.SelectedIndex = 1;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,MALSettings,The following switch statement is missing a default case: switch (VM_ShokoServer.Instance.MAL_UpdateFrequency) {  case ScheduledUpdateFrequency.Daily:  	cboUpdateFrequency.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cboUpdateFrequency.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.HoursSix:  	cboUpdateFrequency.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.Never:  	cboUpdateFrequency.SelectedIndex = 3;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,MALSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\MALSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 1:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 3:  	VM_ShokoServer.Instance.MAL_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,VideoPlayerSettingsControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\VideoPlayerSettingsControl.xaml.cs,cboDefaultPlayer_SelectionChanged,The following switch statement is missing a default case: switch (cboDefaultPlayer.SelectedIndex) {  case 0:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPV;  	break;  case 1:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.MPC;  	break;  case 2:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.VLC;  	break;  case 3:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ZoomPlayer;  	break;  case 4:  	cboDefaultPlayer.SelectedIndex = cboDefaultPlayer.SelectedIndex + 1;  	return;  case 5:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.ExternalMPV;  	break;  case 6:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.PotPlayer;  	break;  case 7:  	VM_UserSettings.Instance.DefaultPlayer_GroupList = (int)VideoPlayer.WindowsDefault;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,TraktSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TraktSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.Trakt_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.UserControls.Settings,TvDBSettings,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\Settings\TvDBSettings.xaml.cs,cboUpdateFrequency_SelectionChanged,The following switch statement is missing a default case: switch (cboUpdateFrequency.SelectedIndex) {  case 0:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursSix;  	break;  case 1:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.HoursTwelve;  	break;  case 2:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Daily;  	break;  case 3:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.WeekOne;  	break;  case 4:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.MonthOne;  	break;  case 5:  	VM_ShokoServer.Instance.TvDB_UpdateFrequency = ScheduledUpdateFrequency.Never;  	break;  }  
Missing Default,Shoko.Desktop.Utilities,Utils,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\Utilities\Utils.cs,PopulateScheduledComboBox,The following switch statement is missing a default case: switch (curFrequency) {  case ScheduledUpdateFrequency.HoursSix:  	cbo.SelectedIndex = 0;  	break;  case ScheduledUpdateFrequency.HoursTwelve:  	cbo.SelectedIndex = 1;  	break;  case ScheduledUpdateFrequency.Daily:  	cbo.SelectedIndex = 2;  	break;  case ScheduledUpdateFrequency.WeekOne:  	cbo.SelectedIndex = 3;  	break;  case ScheduledUpdateFrequency.MonthOne:  	cbo.SelectedIndex = 4;  	break;  case ScheduledUpdateFrequency.Never:  	cbo.SelectedIndex = 5;  	break;  }  
Missing Default,Shoko.Desktop.ViewModel.Server,VM_AnimeEpisode_User,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\Server\VM_AnimeEpisode_User.cs,SetEpisodeNameVariants,The following switch statement is missing a default case: switch (EpisodeTypeEnum) {  case enEpisodeType.Credits:  	shortType = "C";  	break;  case enEpisodeType.Episode:  	shortType = "";  	break;  case enEpisodeType.Other:  	shortType = "O";  	break;  case enEpisodeType.Parody:  	shortType = "P";  	break;  case enEpisodeType.Special:  	shortType = "S";  	break;  case enEpisodeType.Trailer:  	shortType = "T";  	break;  }  
Missing Default,Shoko.Desktop.ViewModel,VM_FanartContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_FanartContainer.cs,VM_FanartContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.TvDB_FanArt:  	VM_TvDB_ImageFanart tvFanart = (VM_TvDB_ImageFanart)FanartObject;  	IsImageEnabled = tvFanart.IsImageEnabled;  	IsImageDefault = tvFanart.IsImageDefault;  	FanartSource = "TvDB";  	break;  case ImageEntityType.MovieDB_FanArt:  	VM_MovieDB_Fanart movieFanart = (VM_MovieDB_Fanart)FanartObject;  	IsImageEnabled = movieFanart.IsImageEnabled;  	IsImageDefault = movieFanart.IsImageDefault;  	FanartSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Fanart:  	VM_Trakt_ImageFanart traktFanart = (VM_Trakt_ImageFanart)FanartObject;  	IsImageEnabled = traktFanart.IsImageEnabled;  	IsImageDefault = traktFanart.IsImageDefault;  	FanartSource = "Trakt";  	break;  }  
Missing Default,Shoko.Desktop.ViewModel,VM_PosterContainer,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\ViewModel\VM_PosterContainer.cs,VM_PosterContainer,The following switch statement is missing a default case: switch (ImageType) {  case ImageEntityType.AniDB_Cover:  	VM_AniDB_Anime anime = (VM_AniDB_Anime)PosterObject;  	IsImageEnabled = anime.IsImageEnabled;  	IsImageDefault = anime.IsImageDefault;  	PosterSource = "AniDB";  	break;  case ImageEntityType.TvDB_Cover:  	VM_TvDB_ImagePoster tvPoster = (VM_TvDB_ImagePoster)PosterObject;  	IsImageEnabled = tvPoster.IsImageEnabled;  	IsImageDefault = tvPoster.IsImageDefault;  	PosterSource = "TvDB";  	break;  case ImageEntityType.MovieDB_Poster:  	VM_MovieDB_Poster moviePoster = (VM_MovieDB_Poster)PosterObject;  	IsImageEnabled = moviePoster.IsImageEnabled;  	IsImageDefault = moviePoster.IsImageDefault;  	PosterSource = "MovieDB";  	break;  case ImageEntityType.Trakt_Poster:  	VM_Trakt_ImagePoster traktPoster = (VM_Trakt_ImagePoster)PosterObject;  	IsImageEnabled = traktPoster.IsImageEnabled;  	IsImageDefault = traktPoster.IsImageDefault;  	PosterSource = "Trakt";  	break;  }  
Missing Default,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	VM_TvDB_ImagePoster tvPoster = poster.PosterObject as VM_TvDB_ImagePoster;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover);  	tvPoster.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.Trakt_Poster:  	VM_Trakt_ImagePoster traktPoster = poster.PosterObject as VM_Trakt_ImagePoster;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster);  	traktPoster.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.AniDB_Cover:  	VM_AniDB_Anime anime = poster.PosterObject as VM_AniDB_Anime;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' anime.AnimeID' (int)ImageEntityType.AniDB_Cover);  	anime.ImageEnabled = enabled ? 1 : 0;  	break;  case ImageEntityType.MovieDB_Poster:  	VM_MovieDB_Poster moviePoster = poster.PosterObject as VM_MovieDB_Poster;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster);  	moviePoster.Enabled = enabled ? 1 : 0;  	break;  }  
Missing Default,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,EnableDisableImage,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	VM_TvDB_ImageFanart tvFanart = fanart.FanartObject as VM_TvDB_ImageFanart;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt);  	tvFanart.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.Trakt_Fanart:  	VM_Trakt_ImageFanart traktFanart = fanart.FanartObject as VM_Trakt_ImageFanart;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart);  	traktFanart.Enabled = enabled ? 1 : 0;  	break;  case ImageEntityType.MovieDB_FanArt:  	VM_MovieDB_Fanart movieFanart = fanart.FanartObject as VM_MovieDB_Fanart;  	res = VM_ShokoServer.Instance.ShokoServices.EnableDisableImage (enabled' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt);  	movieFanart.Enabled = enabled ? 1 : 0;  	break;  }  
Missing Default,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The following switch statement is missing a default case: switch (poster.ImageType) {  case ImageEntityType.TvDB_Cover:  	VM_TvDB_ImagePoster tvPoster = poster.PosterObject as VM_TvDB_ImagePoster;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' tvPoster.TvDB_ImagePosterID' (int)ImageEntityType.TvDB_Cover' (int)ImageSizeType.Poster);  	tvPoster.IsImageDefault = isDefault;  	break;  case ImageEntityType.Trakt_Poster:  	VM_Trakt_ImagePoster traktPoster = poster.PosterObject as VM_Trakt_ImagePoster;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' traktPoster.Trakt_ImagePosterID' (int)ImageEntityType.Trakt_Poster' (int)ImageSizeType.Poster);  	traktPoster.IsImageDefault = isDefault;  	break;  case ImageEntityType.AniDB_Cover:  	VM_AniDB_Anime anime = poster.PosterObject as VM_AniDB_Anime;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' anime.AnimeID' (int)ImageEntityType.AniDB_Cover' (int)ImageSizeType.Poster);  	anime.IsImageDefault = isDefault;  	break;  case ImageEntityType.MovieDB_Poster:  	VM_MovieDB_Poster moviePoster = poster.PosterObject as VM_MovieDB_Poster;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' moviePoster.MovieDB_PosterID' (int)ImageEntityType.MovieDB_Poster' (int)ImageSizeType.Poster);  	moviePoster.IsImageDefault = isDefault;  	break;  }  
Missing Default,Shoko.Desktop.UserControls,AnimeSeries,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\AnimeSeries.xaml.cs,SetDefaultImage,The following switch statement is missing a default case: switch (fanart.ImageType) {  case ImageEntityType.TvDB_FanArt:  	VM_TvDB_ImageFanart tvFanart = fanart.FanartObject as VM_TvDB_ImageFanart;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' tvFanart.TvDB_ImageFanartID' (int)ImageEntityType.TvDB_FanArt' (int)ImageSizeType.Fanart);  	tvFanart.IsImageDefault = isDefault;  	break;  case ImageEntityType.Trakt_Fanart:  	VM_Trakt_ImageFanart traktFanart = fanart.FanartObject as VM_Trakt_ImageFanart;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' traktFanart.Trakt_ImageFanartID' (int)ImageEntityType.Trakt_Fanart' (int)ImageSizeType.Fanart);  	traktFanart.IsImageDefault = isDefault;  	break;  case ImageEntityType.MovieDB_FanArt:  	VM_MovieDB_Fanart movieFanart = fanart.FanartObject as VM_MovieDB_Fanart;  	res = VM_ShokoServer.Instance.ShokoServices.SetDefaultImage (isDefault' ser.AniDB_ID' movieFanart.MovieDB_FanartID' (int)ImageEntityType.MovieDB_FanArt' (int)ImageSizeType.Fanart);  	movieFanart.IsImageDefault = isDefault;  	break;  }  
Missing Default,Shoko.Desktop.UserControls,DashboardMetroDXControl,D:\newReposJune17\japanesemediamanager_jmmclient\Shoko.Desktop\UserControls\DashboardMetroDXControl.xaml.cs,Instance_OnFinishedProcessEvent,The following switch statement is missing a default case: switch (ev.ProcessType) {  case DashboardMetroProcessType.ContinueWatching:  	IsLoadingContinueWatching = false;  	break;  case DashboardMetroProcessType.RandomSeries:  	IsLoadingRandomSeries = false;  	break;  case DashboardMetroProcessType.NewEpisodes:  	IsLoadingNewEpisodes = false;  	break;  }  
