Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Molecules.Core.Tests,AtomCreationTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\AtomCreationTests.cs,FuncWithInput,The following statement contains a magic number: _signature.Func(1).Returns(2);
Magic Number,Molecules.Core.Tests,AtomCreationTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\AtomCreationTests.cs,FuncWithInput,The following statement contains a magic number: Assert.Equal(2' await Atom.Func<int' int>(i => _signature.Func(i.Input)).AsReceivable().Of<int>().Charge(1));
Magic Number,Molecules.Core.Tests,AtomCreationTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\AtomCreationTests.cs,AsyncFuncWithInput,The following statement contains a magic number: _signature.AsyncFunc(1).Returns(Task.FromResult(2));
Magic Number,Molecules.Core.Tests,AtomCreationTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\AtomCreationTests.cs,AsyncFuncWithInput,The following statement contains a magic number: Assert.Equal(2' await Atom.Func<int' int>(i => _signature.AsyncFunc(i.Input)).AsReceivable().Of<int>().Charge(1));
Magic Number,Molecules.Core.Tests,IntegrationTest,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\IntegrationTest.cs,IntegrationTest,The following statement contains a magic number: _workflow =                  (                      from profile in Atom.Func<string' Profile>(s => _api.LoadProfile(s.Input))                      from tweets in Atom.Func(() => _api.RecentTweets(profile.TwitterHandle))                          .Map(tweet => _api.PsychologicalAssessment(tweet.Input.Text))                          .If(                              modes => modes.Count(mode => mode == Mode.Aggravated) >= 5'                              Atom.Func(() => _api.RecentlyAcquiredMedication(profile.MedicareNumber))'                              Atom.Func(() => Prescription.NotRequired))                      select Tuple.Create(profile' tweets)                  )                  .AsReceivable()                  .Of<string>();
Magic Number,Molecules.Core.Tests,IntegrationTest,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\IntegrationTest.cs,ReturnsOnlyProfileWithPositivePsychologicalAssessment,The following statement contains a magic number: _api.RecentTweets(null)                  .ReturnsForAnyArgs(Enumerable.Range(0' 5)                  .Select(i => new Tweet()));
Magic Number,Molecules.Core.Tests,IntegrationTest,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\IntegrationTest.cs,ReturnsRecentlyAcquiredMedicationForProfileWithNegetivePsychologicalAssessment,The following statement contains a magic number: _api.RecentTweets(null)                  .ReturnsForAnyArgs(Enumerable.Range(0' 5)                  .Select(i => new Tweet()));
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: var r = await Atom.Func(() => new[] { 1' 2' 3 }              .AsEnumerable())              .Map(i => i.Input * 2)              .AsInvocable()              .Charge();
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: var r = await Atom.Func(() => new[] { 1' 2' 3 }              .AsEnumerable())              .Map(i => i.Input * 2)              .AsInvocable()              .Charge();
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: var r = await Atom.Func(() => new[] { 1' 2' 3 }              .AsEnumerable())              .Map(i => i.Input * 2)              .AsInvocable()              .Charge();
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: Assert.Equal(new [] { 2' 4' 6}' r);
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: Assert.Equal(new [] { 2' 4' 6}' r);
Magic Number,Molecules.Core.Tests,MapTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\MapTests.cs,MapsSourceToDestination,The following statement contains a magic number: Assert.Equal(new [] { 2' 4' 6}' r);
Magic Number,Molecules.Core.Tests,RepeatTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\RepeatTests.cs,ShouldRepeatSpecifiedNumberOfTimes,The following statement contains a magic number: Assert.Equal(new[] {1' 1' 1}'                   await Atom.Func<int' int>(i => i.Input).Repeat(3).AsReceivable().Of<int>().Charge(1));
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,FailsAfterReachingRetryCount,The following statement contains a magic number: _signature.Received(2).Action();
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,ReturnsTheSpecifiedValueAfterFailure,The following statement contains a magic number: var a = Atom.Action(() => _signature.Action()).Catch().Return(3).AsReceivable().Of<int>();
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,ReturnsTheSpecifiedValueAfterFailure,The following statement contains a magic number: Assert.Equal(3' await a.Charge(1));
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,RecoveringAtomsAreNotRetried,The following statement contains a magic number: var a = Atom.Func<int' int>(i => _signature.Func(i.Input)).Catch().Retry(2).AsReceivable().Of<int>();
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,RecoveringAtomsAreNotRetried,The following statement contains a magic number: _signature.Received(2).Func(1);
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,ShouldWaitBeforeRetrying,The following statement contains a magic number: await Atom.Action(() => q.Dequeue()())                  .Catch()                  .Wait(2)                  .Seconds                  .AsInvocable()                                  .Charge();
Magic Number,Molecules.Core.Tests,CatchTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\CatchTests.cs,ShouldWaitBeforeRetrying,The following statement contains a magic number: Assert.True(watch.Elapsed >= TimeSpan.FromSeconds(2));
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: _api.Call(1).Returns(2);
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: _api.Call(2).Returns(3);
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: _api.Call(2).Returns(3);
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: _api.Call(3).Returns(4);
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: _api.Call(3).Returns(4);
Magic Number,Molecules.Core.Tests,SelectManyTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\SelectManyTests.cs,StandardQueryOperator,The following statement contains a magic number: Assert.Equal(9' result);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldPipeFirstAtomsOutputToNext,The following statement contains a magic number: _signature.Func(1).Returns(2);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldPipeFirstAtomsOutputToNext,The following statement contains a magic number: _signature.Func(2).Returns(3);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldPipeFirstAtomsOutputToNext,The following statement contains a magic number: _signature.Func(2).Returns(3);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldPipeFirstAtomsOutputToNext,The following statement contains a magic number: Assert.Equal(3'                  await Atom.Func<int' int>(i => _signature.Func(i.Input))                      .Then(i => _signature.Func(i.Input))                      .AsReceivable()                      .Of<int>()                      .Charge(1));
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldPipeFirstAtomsOutputToNext,The following statement contains a magic number: _signature.Received(1).Action(2);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldIgnoreFirstOutputIfNextDoesNotRequireInput,The following statement contains a magic number: _signature.Func(1).Returns(2);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldIgnoreFirstOutputIfNextDoesNotRequireInput,The following statement contains a magic number: _signature.Func().Returns(3);
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldIgnoreFirstOutputIfNextDoesNotRequireInput,The following statement contains a magic number: Assert.Equal(3'                  await Atom.Func<int' int>(i => _signature.Func(i.Input))                      .Then(() => _signature.Func())                      .AsReceivable()                      .Of<int>()                      .Charge(1));
Magic Number,Molecules.Core.Tests,ThenTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\ThenTests.cs,ShouldConnectMultipleActions,The following statement contains a magic number: _signature.Received(2).Action();
Magic Number,Molecules.Core.Tests,WhileTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\WhileTests.cs,ShouldRepeatBodyUntilTestPasess,The following statement contains a magic number: var q = new Queue<int>(new[] {0' 1' 2});
Magic Number,Molecules.Core.Tests,WhileTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\WhileTests.cs,ShouldRepeatBodyUntilTestPasess,The following statement contains a magic number: var a = Atom.Func(() => q.Dequeue())                  .While(k => k < 2)                  .Do(i => _signature.Func(i.Input))                  .AsReceivable()                  .Of<int>();
Magic Number,Molecules.Core.Tests,WhileTests,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\WhileTests.cs,ShouldRepeatBodyUntilTestPasess,The following statement contains a magic number: _signature.ReceivedWithAnyArgs(2).Func(0);
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
Magic Number,Molecules.Core.Tests.Samples,PizzaDeliveryWorkflow,D:\research\architectureSmells\repos\GeeksDiary_dependable\tests\Molecules.Core.Tests\Samples\PizzaDeliveryWorkflow.cs,Build,The following statement contains a magic number: return (                  from order in Atom.With<Order>()                  from paymentStatus in                      Atom.Func(c => c.Resolve<IPaymentService>().TakePayment(order.Payment))                          .Catch().Wait(20).Seconds.Retry(3).Return(PaymentStatus.Failed)                  from status in                      paymentStatus == PaymentStatus.Success                          ? Atom.Func(c =>                              c.Resolve<IStore>().DispatchToStore(order.Store' order.Delivery))                          : Atom.Return(InStoreStatus.DidNotReceive)                  from polledStatus in                      status == InStoreStatus.DidNotReceive                          ? Atom.Func(c => c.Resolve<IPaymentService>().Refund(order.Payment))                              .Catch().Wait(20).Seconds.Retry(3).Return(status)                          : Atom.Func(c =>                              c.Resolve<IStore>()                                  .CheckStatus(order.Id))                              .Catch()                              .Wait(30)                              .Seconds.Retry(3)                              .While(s => s != InStoreStatus.OnItsWay)                              .Do(c => c.Resolve<ICustomer>().Notify(c.Input))                  select order)                  .AsReceivable()                  .Of<Order>();
