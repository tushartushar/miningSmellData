Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,Cyclomatic complexity of the method is 9
Complex Method,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,Cyclomatic complexity of the method is 11
Complex Method,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimOutline,Cyclomatic complexity of the method is 8
Complex Method,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,Cyclomatic complexity of the method is 11
Long Parameter List,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,RepeatBrep,The method has 5 parameters.
Long Parameter List,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,RepeatBrep,The method has 5 parameters.
Long Parameter List,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,RepeatBrep,The method has 7 parameters.
Long Parameter List,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,RepeatBrep,The method has 7 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText3d,The method has 5 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText3d,The method has 6 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText,The method has 5 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTextSimple,The method has 6 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTextSimple,The method has 9 parameters.
Long Parameter List,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The method has 12 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTree2DBranch,The method has 5 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWindowLight,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetFrame2d,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoof,The method has 10 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The method has 5 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The method has 11 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The method has 13 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTextCurve,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTextBrep,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The method has 13 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The method has 18 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The method has 13 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The method has 14 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The method has 9 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The method has 5 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The method has 5 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrel,The method has 9 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrel,The method has 12 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrelUpsidedown,The method has 9 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrelUpsidedown,The method has 12 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassSimple,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassSimple,The method has 8 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The method has 12 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsSolid,The method has 5 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsSimple,The method has 6 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsBasic,The method has 9 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The method has 7 parameters.
Long Parameter List,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The method has 8 parameters.
Long Statement,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,RepeatBrep,The length of the statement  "					Result [i * CountX * CountY * Origin.GetLength (0) + j * CountX * Origin.GetLength (0) + k * Origin.GetLength (0) + l] = tempBrep; " is 130.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The length of the statement  "	pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (0' 0' 1)' Point3d.Origin)); " is 145.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The length of the statement  "	pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (1' 0' 0)' Point3d.Origin)); " is 145.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddColorPaper,The length of the statement  "	Brep paper = Brep.CreatePlanarBreps (new Rectangle3d (new Plane (new Point3d (point.X' -0.5' point.Y)' Vector3d.XAxis' Vector3d.ZAxis)' width' height).ToNurbsCurve ()) [0]; " is 172.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddPhoto,The length of the statement  "	Brep paper = Brep.CreatePlanarBreps (new Rectangle3d (new Plane (new Point3d (0' 0' 0)' Vector3d.XAxis' Vector3d.ZAxis)' new Point3d (-bmp.Width / dpi * inchToMm / 2.0' 0' 0)' new Point3d (bmp.Width / dpi * inchToMm / 2.0' 0' -bmp.Height / dpi * inchToMm)).ToNurbsCurve ()) [0]; " is 278.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTextSimple,The length of the statement  "	Brep paper = Brep.CreatePlanarBreps (new Rectangle3d (new Plane (new Point3d (point.X - pwidth / scale / 2.0' -1.0' point.Y - pheight / scale / 2.0)' Vector3d.XAxis' Vector3d.ZAxis)' pwidth / scale' pheight / scale).ToNurbsCurve ()) [0]; " is 237.
Long Statement,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The length of the statement  "	g.DrawString (text' font' Brushes.Black' new PointF ((float)(scale * height)' (float)((scale * height - font.GetHeight (72)) / 2.0))); " is 134.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The length of the statement  "	GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0); " is 137.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The length of the statement  "			//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) }); " is 246.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The length of the statement  "			GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation)); " is 174.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The length of the statement  "			TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0)); " is 125.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The length of the statement  "				GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted); " is 156.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygonTower,The length of the statement  "	Brep result = Brep.CreateFromSurface (Surface.CreateExtrusion (GetRegularPolygon (c' Radius)' new Vector3d (0' 0' height))); " is 124.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygon,The length of the statement  "		pl.Add (Math.Cos (Math.PI * (double)i / (double)c * 2.0) * Radius' Math.Sin (Math.PI * (double)i / (double)c * 2.0) * Radius' 0); " is 129.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The length of the statement  "	for (; CurrentPositonBottom <= LengthBottom / 2.0 - RafterSpaceBottom; CurrentPositonBottom += RafterSpaceBottom' CurrentPositonTop += RafterSpaceTop) { " is 152.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The length of the statement  "		Lafters.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (TempCurve1' PointBottom - PointTop)).CapPlanarHoles (Height / 100.0)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "		Handrail.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius2))' TopRailCurve)' true' Space / 1000) [0]); " is 174.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "	for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) { " is 121.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "		Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0)); " is 173.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "			Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop))); " is 227.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "					Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom))); " is 211.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "					Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth))); " is 205.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "					Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop))); " is 226.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "					Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop))); " is 254.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The length of the statement  "		Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (BaseCurve.PointAtLength (Length - EndSpace)' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0)); " is 210.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The length of the statement  "			Brep Temp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (FrameSizeHorizontal' Dist - FrameSizeHorizontal)' new Interval (0' 5)' new Interval (FrameSizeBottom' Height - FrameSizeTop))); " is 197.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetPipeSimple,The length of the statement  "	return Brep.CreateFromRevSurface (RevSurface.Create (GetHeightMap (Distance' Radius)' new Line (0' 0' 0' 1' 0' 0))' false' false); " is 130.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetPipeHalf,The length of the statement  "	return Brep.CreateFromRevSurface (RevSurface.Create (RevBase' new Line (0' 0' 0' 1' 0' 0)' Math.PI * 0' Math.PI)' true' true); " is 126.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHeightMap,The length of the statement  "		intcrv.Add ((new Line (Distance [Distance.GetLength (0) - 1]' Radius [Radius.GetLength (0) - 1]' 0' Distance [Distance.GetLength (0) - 1]' 0' 0)).ToNurbsCurve ()); " is 163.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetPipeHead,The length of the statement  "	return Brep.CreateFromRevSurface (RevSurface.Create (intcrv' new Line (0' 0' 0' 1' 0' 0)' 0' Math.PI * 2.0)' true' true); " is 121.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "		TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "			Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i)); " is 475.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "		(new Arc (new Circle (new Plane (new Point3d (Frame.Min * Radius' -BaseThick' 0)' new Vector3d (0' 0' 1))' Frame.Length * Radius)' new Interval (-Math.PI / 2.0' 0))).ToNurbsCurve ()' " is 182.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "		new Line (Frame.Min * Radius' -BaseThick' 0' Frame.Min * Radius' -BaseThick - Frame.Length * Radius' 0).ToNurbsCurve ()' " is 120.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Frame.Length * Radius - BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * Frame.Min)' GlassThick)' true' true) " is 188.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * CenterRad)' -TextThick * 2.0 - HandsThick * 4.0)' true' true) " is 189.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTextBrep,The length of the statement  "	return GeneralHelper.CreateExtrusionCaped (GetTextCurve (TextContent' Height' FontName' Bold' Italic' RhinoDocument)' new Vector3d (0' 0' Thickness)); " is 150.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "	GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast); " is 171.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "	Brep TieBase = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-TieWidth / 2.0' TieWidth / 2.0)' new Interval (-TieLength / 2.0' TieLength / 2.0)' new Interval (0' TieHeight))); " is 187.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "			TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0)); " is 129.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "			ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6)); " is 137.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "			TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0)); " is 121.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The length of the statement  "			ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800)); " is 126.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	GetTowerClaneHead (out RetBody' out RetHandrail' out RetWall' out RetGlass' out RetPole' out ClaneWorkSpace' AngleClane' out RedBody' out WhiteBody' out ClaneLadderRed' out ClaneLadderWhite' out ClaneClaneWorkSpace' 20000' out Wire); " is 233.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadHouseWall = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetWall' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 154.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadHouseGlass = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetGlass' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 156.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadBody = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 149.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadHandrail = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetHandrail' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 157.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadPole = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetPole' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 149.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadPoleWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 165.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneBodyRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RedBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 157.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneBodyWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (WhiteBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 161.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneLadderRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderRed' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 166.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneLadderWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderWhite' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 170.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 171.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The length of the statement  "	HeadClaneWire = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (Wire' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1)); " is 151.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "	ResultBody [0].AddRange (GeneralHelper.RotateBreps (GetTowerClaneClaneUnit (Width1' Width2' Length' Space' Radius1' Radius2)' Angle' new Vector3d (0' 1' 0))); " is 158.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "		ResultBody [i % 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GetTowerClaneClaneUnit (Width2' Width2' Length' Space' Radius1' Radius2)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0))); " is 226.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "	Brep[] LadderBase = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.RotateBreps (GetLadderSimple (Length)' Math.PI / 2.0' new Vector3d (0' 0' 1))' new Vector3d (Width1 / 2.0' 0' 0))' Math.PI / 2.0' new Vector3d (0' 1' 0)); " is 245.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "		ResultBody [i % 2 + 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.DuplicateBreps (LadderBase)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0))); " is 199.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "		ResultBody [i % 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GetTowerClaneClaneUnit (Width2' Width1' Length' Space' Radius1' Radius2)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0))); " is 226.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The length of the statement  "		WorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.RotateBreps (WorkSpaceTemp' WSAngle' new Vector3d (0' 1' 0))' new Vector3d (Length * Count + Width1 * Math.Sin (WSAngle)' 0' -Width1))' Angle' new Vector3d (0' 1' 0)); " is 250.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "	Brep BaseParts1 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]); " is 192.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0); " is 154.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0); " is 203.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]); " is 192.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0); " is 203.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0); " is 184.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The length of the statement  "		Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]); " is 192.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)' " is 161.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true) " is 160.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "	Curve BaseArc = NurbsCurve.CreateFromArc (new Arc (new Circle (new Plane (new Point3d (0' 0' 0)' new Vector3d (1' 0' 0))' CableRadius)' new Interval (0' Math.PI))); " is 164.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "	for (double CurrentLength = -Width / 2.0 + Thickness + (Width / 2.0 - Thickness) % (CableRadius * 2); CurrentLength < Width / 2.0 - Thickness; CurrentLength += CableRadius) { " is 174.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "	Brep TempCable = Brep.CreateFromRevSurface (RevSurface.Create (Curve.JoinCurves (Arcs) [0]' new Line (new Point3d (0' 0' 0)' new Point3d (0' 1' 0)))' false' false); " is 164.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The length of the statement  "	CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2); " is 124.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)' " is 161.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true) " is 160.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The length of the statement  "		Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0 + Thickness' Radius2)' new Vector3d (0' 1' 0))' Radius1)' Width - Thickness * 2)' false' false) " is 186.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The length of the statement  "	CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2); " is 124.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The length of the statement  "	Result.Add (Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length / 2.0' Length / 2.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (-Thickness' 0)))); " is 174.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The length of the statement  "		Brep TempBrep = (Brep.CreateFromSurface (Surface.CreateExtrusion (BasePoly.ToNurbsCurve ()' new Vector3d (0' 0' Height))).CapPlanarHoles (0)); " is 142.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The length of the statement  "		Brep TempBrep = (Brep.CreateFromSurface (Surface.CreateExtrusion (BasePoly.ToNurbsCurve ()' new Vector3d (-Length + Size1' 0' Height))).CapPlanarHoles (0)); " is 156.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The length of the statement  "		Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0)))); " is 247.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The length of the statement  "	Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500)); " is 150.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The length of the statement  "	WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100)); " is 154.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The length of the statement  "		GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5); " is 151.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The length of the statement  "			Brep WireBase = (Brep.CreateFromSweep (RailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (WireRadius))' RailCurve)' true' 0.1) [0]).CapPlanarHoles (0); " is 184.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The length of the statement  "			Brep WireBase = (Brep.CreateFromSweep (RailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (WireRadius))' RailCurve)' true' 0.1) [0]).CapPlanarHoles (0); " is 184.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The length of the statement  "	GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass); " is 120.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The length of the statement  "		Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness))) " is 165.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		Parts1PL.Add (BottomLength + (TopLength - BottomLength) * (BarHeight + FrameWidth) / Height' 0' (BarHeight + FrameWidth)); " is 122.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' -WallThickness' 0))).CapPlanarHoles (0)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' WallThickness' 0))).CapPlanarHoles (0)); " is 131.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' -WallThickness' 0))).CapPlanarHoles (0)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' WallThickness' 0))).CapPlanarHoles (0)); " is 131.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' FrameWidth' 0))).CapPlanarHoles (0)); " is 128.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		Parts1PL.Add (BottomLength + (TopLength - BottomLength) * (BarHeight + FrameWidth) / Height' 0' (BarHeight + FrameWidth)); " is 122.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		Parts1PL.Add (BottomLength + (TopLength - BottomLength) * (BarHeight + FrameWidth) / Height - WallThickness' 0' (BarHeight + FrameWidth)); " is 138.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' Width + WallThickness' 0))).CapPlanarHoles (0)); " is 139.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetWall.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' Width + WallThickness' 0))).CapPlanarHoles (0)); " is 139.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetGlass.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' Width' 0))).CapPlanarHoles (0)); " is 124.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetGlass.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' WallThickness' 0))).CapPlanarHoles (0)); " is 132.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The length of the statement  "		RetGlass.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (Part1Curve' new Vector3d (0' -WallThickness' 0))).CapPlanarHoles (0)); " is 133.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The length of the statement  "		Result.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius2))' TopRailCurve)' true' Space / 1000) [0]); " is 172.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The length of the statement  "		Result.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius3))' TopRailCurve)' true' Space / 1000) [0]); " is 172.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The length of the statement  "		Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (BaseCurve.PointAtLength (CurrentLength)' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0)); " is 204.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The length of the statement  "		Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (BaseCurve.PointAtLength (Length)' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0)); " is 197.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The length of the statement  "	Parts1 = GeneralHelper.TranslateBreps (GetTowerClaneBasement (UnitCount' Size1' UnitHeight' 30' 150' 100)' new Vector3d (0' 0' -TotalHeight - Elevation)); " is 154.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The length of the statement  "	Brep[] HandrailBase = GetHandrailSimple ((new Rhino.Geometry.Rectangle3d (Plane.WorldXY' new Interval (-Size2 / 2.0 + HandrailRadius' Size2 / 2.0 - HandrailRadius)' new Interval (-Size2 / 2.0 + HandrailRadius' Size2 / 2.0 - HandrailRadius))).ToNurbsCurve ()' 800' new double[] { " is 278.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The length of the statement  "		Brep FloorBasePart = Brep.CreateFromSurface (Surface.CreateExtrusion (Parts3PL.ToNurbsCurve ()' new Vector3d (Size2 / 2.0 + Size3 / 2.0' 0' 0))).CapPlanarHoles (0); " is 164.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The length of the statement  "	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Point3d (-Width / 2.0' 0' 0)' Radius1))' new Vector3d (0' 0' Length))).CapPlanarHoles (0)); " is 197.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The length of the statement  "	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Point3d (+Width / 2.0' 0' 0)' Radius1))' new Vector3d (0' 0' Length))).CapPlanarHoles (0)); " is 197.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The length of the statement  "		Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (-Width / 2.0' 0' CurrentLength)' new Vector3d (1' 0' 0))' Radius2))' new Vector3d (Width' 0' 0))).CapPlanarHoles (0)); " is 244.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The length of the statement  "	Brep Parts1 = Brep.CreateFromSurface (Surface.CreateExtrusion ((BasePL1.ToNurbsCurve ())' new Vector3d (0' 0' UnitHeight * Count))).CapPlanarHoles (0); " is 151.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The length of the statement  "	Brep Parts3 = Brep.CreateFromSurface (Surface.CreateExtrusion ((BasePL3.ToNurbsCurve ())' new Vector3d (0' Thickness' 0))).CapPlanarHoles (0); " is 142.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrel,The length of the statement  "	GetGlassWithSpandrel (WindowWidth' WindowHeight' FrameSize' FrameThickness' GlassThickness' SpandrelHeight' SpandrelSpace' SpandrelSpaceZ' SpandrelThickness' out Frame' out Glass' out Spandrel); " is 194.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrel,The length of the statement  "	Spandrel = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (SpandrelSpace' SpandrelHeight - SpandrelSpace)' new Interval (SpandrelSpace' WindowWidth - SpandrelSpace)' new Interval (SpandrelSpaceZ' SpandrelSpaceZ + SpandrelThickness))); " is 288.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrel,The length of the statement  "	Brep SpandrelFrame = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (SpandrelHeight - FrameSize' SpandrelHeight)' new Interval (FrameSize / 2.0' WindowWidth - FrameSize / 2.0)' new Interval (-FrameThickness' GlassThickness))); " is 280.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrelUpsidedown,The length of the statement  "	GetGlassWithSpandrelUpsidedown (WindowWidth' WindowHeight' FrameSize' FrameThickness' GlassThickness' SpandrelHeight' SpandrelSpace' SpandrelSpaceZ' SpandrelThickness' out Frame' out Glass' out Spandrel); " is 204.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrelUpsidedown,The length of the statement  "	Spandrel = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' WindowHeight - SpandrelHeight)' new Vector3d (0' 1' 0))' new Interval (SpandrelSpace' SpandrelHeight - SpandrelSpace)' new Interval (SpandrelSpace' WindowWidth - SpandrelSpace)' new Interval (SpandrelSpaceZ' SpandrelSpaceZ + SpandrelThickness))); " is 316.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWithSpandrelUpsidedown,The length of the statement  "	Brep SpandrelFrame = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (WindowHeight - SpandrelHeight' WindowHeight - SpandrelHeight + FrameSize)' new Interval (FrameSize / 2.0' WindowWidth - FrameSize / 2.0)' new Interval (-FrameThickness' GlassThickness))); " is 310.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassSimple,The length of the statement  "	Brep FrameBase = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (0' WindowHeight)' new Interval (0' WindowWidth)' new Interval (-FrameThickness' GlassThickness))); " is 217.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassSimple,The length of the statement  "	Brep Splitter = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (FrameSizeY' WindowHeight - FrameSizeY)' new Interval (FrameSizeX' WindowWidth - FrameSizeX)' new Interval (-FrameThickness * 2' GlassThickness * 2))); " is 268.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassSimple,The length of the statement  "	Glass = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (0' 1' 0))' new Interval (FrameSizeY' WindowHeight - FrameSizeY)' new Interval (FrameSizeX' WindowWidth - FrameSizeX)' new Interval (0' GlassThickness))); " is 238.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The length of the statement  "		Frame1 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * i)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (0' FrameSizeY)' new Interval (-GlassThickness' FrameThickness1))); " is 263.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The length of the statement  "		Frame1 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * (i + 1))' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (-FrameSizeY' 0)' new Interval (-GlassThickness' FrameThickness1))); " is 274.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The length of the statement  "		Frame2 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * i' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' FrameSizeX)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2))); " is 263.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The length of the statement  "		Frame2 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * (i + 1)' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (-FrameSizeX' 0)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2))); " is 274.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The length of the statement  "			Glass [i * UnitCountY + j] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * i' 0' UnitSizeY * j)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (FrameSizeX' UnitSizeX - FrameSizeX)' new Interval (FrameSizeY' UnitSizeY - FrameSizeY)' new Interval (-GlassThickness' 0))); " is 303.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsSolid,The length of the statement  "	return Brep.CreateFromSurface (Surface.CreateExtrusion ((pl.ToNurbsCurve ())' new Vector3d (StairWidth' 0' 0))).CapPlanarHoles (0); " is 131.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsSimple,The length of the statement  "		result [i - 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' StairLength2 * (i - 1)' StairHeight * i)' new Vector3d (1' 0' 0)' new Vector3d (0' 1' 0))' new Interval (0' StairWidth)' new Interval (0' StairLength1)' new Interval (-StairThickness' 0))); " is 262.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetStairsBasic,The length of the statement  "	Brep otherSrf1 = Brep.CreateFromSurface (Surface.CreateExtrusion (plc' new Vector3d (-OtherThickness' 0' 0))).CapPlanarHoles (0); " is 129.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The length of the statement  "	Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness))); " is 192.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The length of the statement  "	}' new Point3d (0' 0' BlockThickness)' new Point3d (0' 0' BlockThickness + PointHeight)' LoftType.Straight' false)) [0]; " is 120.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "	Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness))); " is 192.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromArc (new Arc (new Circle (new Point3d (-LineLength / 2.0' 0' 0)' LineWidthBottom / 2.0)' new Interval (Math.PI / 2.0' Math.PI / 2.0 * 3.0)))' " is 162.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromArc (new Arc (new Circle (new Point3d (LineLength / 2.0' 0' 0)' LineWidthBottom / 2.0)' new Interval (-Math.PI / 2.0' Math.PI / 2.0)))' " is 156.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromLine (new Line (new Point3d (-LineLength / 2.0' LineWidthBottom / 2.0' 0)' new Point3d (LineLength / 2.0' LineWidthBottom / 2.0' 0)))' " is 155.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromLine (new Line (new Point3d (-LineLength / 2.0' -LineWidthBottom / 2.0' 0)' new Point3d (LineLength / 2.0' -LineWidthBottom / 2.0' 0))) " is 156.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromArc (new Arc (new Circle (new Point3d (-LineLength / 2.0' 0' 0)' LineWidthTop / 2.0)' new Interval (Math.PI / 2.0' Math.PI / 2.0 * 3.0)))' " is 159.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromArc (new Arc (new Circle (new Point3d (LineLength / 2.0' 0' 0)' LineWidthTop / 2.0)' new Interval (-Math.PI / 2.0' Math.PI / 2.0)))' " is 153.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromLine (new Line (new Point3d (-LineLength / 2.0' LineWidthTop / 2.0' 0)' new Point3d (LineLength / 2.0' LineWidthTop / 2.0' 0)))' " is 149.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The length of the statement  "		NurbsCurve.CreateFromLine (new Line (new Point3d (-LineLength / 2.0' -LineWidthTop / 2.0' 0)' new Point3d (LineLength / 2.0' -LineWidthTop / 2.0' 0))) " is 150.
Long Statement,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The length of the statement  "	Rhino.Geometry.Intersect.CurveIntersections CurveIntersectRet = Rhino.Geometry.Intersect.Intersection.CurveCurve (Origin' Cutter' 1.0' 1.0); " is 140.
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: if (Direction.X == 0) {  	Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  }  else {  	Angle = Math.Atan (Direction.Y / Direction.X);  	if (Direction.X < 0) {  		Angle += Math.PI;  	}  }  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: if (Direction.X == 0) {  	Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  }  else {  	Angle = Math.Atan (Direction.Y / Direction.X);  	if (Direction.X < 0) {  		Angle += Math.PI;  	}  }  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: if (Direction.X == 0) {  	Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  }  else {  	Angle = Math.Atan (Direction.Y / Direction.X);  	if (Direction.X < 0) {  		Angle += Math.PI;  	}  }  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: if (Direction.X == 0) {  	Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  }  else {  	Angle = Math.Atan (Direction.Y / Direction.X);  	if (Direction.X < 0) {  		Angle += Math.PI;  	}  }  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,FitTwoPoint,The following statement contains a magic number: Angle = Direction.Y > 0 ? Math.PI / 2.0 : -Math.PI / 2.0;  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,GetCurveForSweep,The following statement contains a magic number: Shape.Rotate (Math.PI / 2.0' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,GetCurvatureAsAngle,The following statement contains a magic number: if (Curvature.Y == 0) {  	angle = Math.PI / 2.0;  }  else {  	angle = -Math.Atan (Curvature.X / Curvature.Y);  	if (Curvature.X < 0) {  		angle += Math.PI;  	}  }  
Magic Number,RhinoTools,GeneralHelper,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\GeneralHelper.cs,GetCurvatureAsAngle,The following statement contains a magic number: angle = Math.PI / 2.0;  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Rotation (-Math.PI / 2.0' Point3d.Origin));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (0' 0' 1)' Point3d.Origin));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (0' 0' 1)' Point3d.Origin));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (1' 0' 0)' Point3d.Origin));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Rotation (-AngleDifference / 2.0 + Rand.NextDouble () * AngleDifference / 2.0' new Vector3d (1' 0' 0)' Point3d.Origin));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,Pin,The following statement contains a magic number: pin.Transform (Transform.Translation (point.X' -5.0' point.Y));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText3d,The following statement contains a magic number: texts = GeneralHelper.RotateBreps (texts' Math.PI / 2.0' Vector3d.XAxis);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText3d,The following statement contains a magic number: texts = GeneralHelper.RotateBreps (texts' Math.PI / 2.0' Vector3d.XAxis);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddPhoto,The following statement contains a magic number: paper.Translate (point.X' -2.5 + CurrentLayer * 0.1' point.Y);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddPhoto,The following statement contains a magic number: paper.Translate (point.X' -2.5 + CurrentLayer * 0.1' point.Y);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddPhoto,The following statement contains a magic number: this.Pin (point + new Vector2d (0' -10));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTextXml,The following statement contains a magic number: this.AddPhoto (fn' 72 * scale' point);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddText,The following statement contains a magic number: AddTextXml (txt' Rand.Next (0' (int)1e5).ToString ()' point);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The following statement contains a magic number: cv = cv.Rebuild (10' 5' true);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The following statement contains a magic number: cv = cv.Rebuild (10' 5' true);  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The following statement contains a magic number: g.DrawString (text' font' Brushes.Black' new PointF ((float)(scale * height)' (float)((scale * height - font.GetHeight (72)) / 2.0)));  
Magic Number,RhinoTools,PanelBuilder,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\PanelBuilder.cs,AddTag,The following statement contains a magic number: g.DrawString (text' font' Brushes.Black' new PointF ((float)(scale * height)' (float)((scale * height - font.GetHeight (72)) / 2.0)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetThumbtack,The following statement contains a magic number: pl.Add (5' 0' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetThumbtack,The following statement contains a magic number: pl.Add (5' 0' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetThumbtack,The following statement contains a magic number: pl.Add (-7.5' 0' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetThumbtack,The following statement contains a magic number: pl.Add (-7.5' 0' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetThumbtack,The following statement contains a magic number: pl.Add (-10.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeLSystem,The following statement contains a magic number: rp.AddSequence (new LSystem.Sequence () {  	Content = new List<LSystem.Body> () {  		new LSystem.Body (D) {  			Child = new LSystem.Sequence[] {  				new LSystem.Sequence (B' G' L)'  				new LSystem.Sequence (TL' B' TL' B' G)  			}  		}  	}  }' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeLSystem,The following statement contains a magic number: rp.AddSequence (new LSystem.Sequence () {  	Content = new List<LSystem.Body> () {  		new LSystem.Body (D) {  			Child = new LSystem.Sequence[] {  				new LSystem.Sequence (TR' B' G' L)'  				new LSystem.Sequence (TL' B' L' G)  			}  		}  	}  }' 0.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: Result.RotationAngleY = -Math.PI / 2.0;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraph,The following statement contains a magic number: GetTreeGraphBranch (ref Result' EndPath' lsys.Tree' lsys.BodyTypes' Math.PI / 6.0' 1500' 0.8' 60' 0.7' 0' Math.PI / 24.0' Math.PI / 6.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: foreach (LSystem.Body bd in sq.Content) {  	if (bd.BodyType == bodyTypes ["B"]) {  		//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  		GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  		TmpPath.Name = "Branch";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  		TmpNode.RotationAngleX = 0;  		TmpNode.RotationAngleY = TwistAngle;  		TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  		TmpNode.RotationAngleZ = 0;  		TmpNode.RotationAngleZLimitation = new Interval (0' 0);  		TwistAngle = 0;  	}  	else if (bd.BodyType == bodyTypes ["+"]) {  		TwistAngle = TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["-"]) {  		TwistAngle = -TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["L"]) {  		GraphObject.Path TmpPath = new GraphObject.Path () {  			ContentMember = new Brep[] {  				(Brep)LeafBrep.Duplicate ()  			}  		};  		TmpPath.Name = "Leaf";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  	}  	//F省略  	else if (bd.BodyType == bodyTypes ["D"]) {  		foreach (LSystem.Sequence tmpsq in bd.Child) {  			GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: foreach (LSystem.Body bd in sq.Content) {  	if (bd.BodyType == bodyTypes ["B"]) {  		//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  		GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  		TmpPath.Name = "Branch";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  		TmpNode.RotationAngleX = 0;  		TmpNode.RotationAngleY = TwistAngle;  		TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  		TmpNode.RotationAngleZ = 0;  		TmpNode.RotationAngleZLimitation = new Interval (0' 0);  		TwistAngle = 0;  	}  	else if (bd.BodyType == bodyTypes ["+"]) {  		TwistAngle = TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["-"]) {  		TwistAngle = -TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["L"]) {  		GraphObject.Path TmpPath = new GraphObject.Path () {  			ContentMember = new Brep[] {  				(Brep)LeafBrep.Duplicate ()  			}  		};  		TmpPath.Name = "Leaf";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  	}  	//F省略  	else if (bd.BodyType == bodyTypes ["D"]) {  		foreach (LSystem.Sequence tmpsq in bd.Child) {  			GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: foreach (LSystem.Body bd in sq.Content) {  	if (bd.BodyType == bodyTypes ["B"]) {  		//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  		GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  		TmpPath.Name = "Branch";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  		TmpNode.RotationAngleX = 0;  		TmpNode.RotationAngleY = TwistAngle;  		TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  		TmpNode.RotationAngleZ = 0;  		TmpNode.RotationAngleZLimitation = new Interval (0' 0);  		TwistAngle = 0;  	}  	else if (bd.BodyType == bodyTypes ["+"]) {  		TwistAngle = TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["-"]) {  		TwistAngle = -TwistAngleTwisted;  	}  	else if (bd.BodyType == bodyTypes ["L"]) {  		GraphObject.Path TmpPath = new GraphObject.Path () {  			ContentMember = new Brep[] {  				(Brep)LeafBrep.Duplicate ()  			}  		};  		TmpPath.Name = "Leaf";  		var TmpNode = Result.Add (EndPath' TmpPath);  		EndPath = TmpPath;  	}  	//F省略  	else if (bd.BodyType == bodyTypes ["D"]) {  		foreach (LSystem.Sequence tmpsq in bd.Child) {  			GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: if (bd.BodyType == bodyTypes ["B"]) {  	//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  	GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  	TmpPath.Name = "Branch";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  	TmpNode.RotationAngleX = 0;  	TmpNode.RotationAngleY = TwistAngle;  	TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  	TmpNode.RotationAngleZ = 0;  	TmpNode.RotationAngleZLimitation = new Interval (0' 0);  	TwistAngle = 0;  }  else if (bd.BodyType == bodyTypes ["+"]) {  	TwistAngle = TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["-"]) {  	TwistAngle = -TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["L"]) {  	GraphObject.Path TmpPath = new GraphObject.Path () {  		ContentMember = new Brep[] {  			(Brep)LeafBrep.Duplicate ()  		}  	};  	TmpPath.Name = "Leaf";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  }  //F省略  else if (bd.BodyType == bodyTypes ["D"]) {  	foreach (LSystem.Sequence tmpsq in bd.Child) {  		GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: if (bd.BodyType == bodyTypes ["B"]) {  	//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  	GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  	TmpPath.Name = "Branch";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  	TmpNode.RotationAngleX = 0;  	TmpNode.RotationAngleY = TwistAngle;  	TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  	TmpNode.RotationAngleZ = 0;  	TmpNode.RotationAngleZLimitation = new Interval (0' 0);  	TwistAngle = 0;  }  else if (bd.BodyType == bodyTypes ["+"]) {  	TwistAngle = TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["-"]) {  	TwistAngle = -TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["L"]) {  	GraphObject.Path TmpPath = new GraphObject.Path () {  		ContentMember = new Brep[] {  			(Brep)LeafBrep.Duplicate ()  		}  	};  	TmpPath.Name = "Leaf";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  }  //F省略  else if (bd.BodyType == bodyTypes ["D"]) {  	foreach (LSystem.Sequence tmpsq in bd.Child) {  		GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: if (bd.BodyType == bodyTypes ["B"]) {  	//GraphObject.Path TmpPath = GraphObject.Path.CreateFromPipeSimple(new double[] { 0' BaseLength * Math.Pow(LengthRate' bd.Generation) }' new double[] { BaseRad * Math.Pow(RadRate' bd.Generation)' BaseRad * Math.Pow(RadRate' bd.Generation + 1) });  	GraphObject.Path TmpPath = GraphObject.Path.CreateFromRegularPolygonTower (5' BaseRad * Math.Pow (RadRate' bd.Generation)' BaseLength * Math.Pow (LengthRate' bd.Generation));  	TmpPath.Name = "Branch";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  	TmpNode.RotationAngleX = 0;  	TmpNode.RotationAngleY = TwistAngle;  	TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  	TmpNode.RotationAngleZ = 0;  	TmpNode.RotationAngleZLimitation = new Interval (0' 0);  	TwistAngle = 0;  }  else if (bd.BodyType == bodyTypes ["+"]) {  	TwistAngle = TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["-"]) {  	TwistAngle = -TwistAngleTwisted;  }  else if (bd.BodyType == bodyTypes ["L"]) {  	GraphObject.Path TmpPath = new GraphObject.Path () {  		ContentMember = new Brep[] {  			(Brep)LeafBrep.Duplicate ()  		}  	};  	TmpPath.Name = "Leaf";  	var TmpNode = Result.Add (EndPath' TmpPath);  	EndPath = TmpPath;  }  //F省略  else if (bd.BodyType == bodyTypes ["D"]) {  	foreach (LSystem.Sequence tmpsq in bd.Child) {  		GetTreeGraphBranch (ref Result' EndPath' tmpsq' bodyTypes' Angle' BaseLength' LengthRate' BaseRad' RadRate' TwistAngle' TwistAngleRange' TwistAngleTwisted);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTreeGraphBranch,The following statement contains a magic number: TmpNode.RotationAngleYLimitation = new Interval (TwistAngle - (TwistAngleRange / 2.0)' TwistAngle + (TwistAngleRange / 2.0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygon,The following statement contains a magic number: for (int i = 0; i <= c; i++) {  	pl.Add (Math.Cos (Math.PI * (double)i / (double)c * 2.0) * Radius' Math.Sin (Math.PI * (double)i / (double)c * 2.0) * Radius' 0);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygon,The following statement contains a magic number: for (int i = 0; i <= c; i++) {  	pl.Add (Math.Cos (Math.PI * (double)i / (double)c * 2.0) * Radius' Math.Sin (Math.PI * (double)i / (double)c * 2.0) * Radius' 0);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygon,The following statement contains a magic number: pl.Add (Math.Cos (Math.PI * (double)i / (double)c * 2.0) * Radius' Math.Sin (Math.PI * (double)i / (double)c * 2.0) * Radius' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRegularPolygon,The following statement contains a magic number: pl.Add (Math.Cos (Math.PI * (double)i / (double)c * 2.0) * Radius' Math.Sin (Math.PI * (double)i / (double)c * 2.0) * Radius' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetGlassWindowLight,The following statement contains a magic number: Glass = Brep.CreateSolid (GlassBrep' GlassThickness / 100.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: SectionPL.Add (RafterWidth / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: SectionPL.Add (RafterWidth / 2.0' 0' -RafterHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: SectionPL.Add (-RafterWidth / 2.0' 0' -RafterHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: SectionPL.Add (-RafterWidth / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: SectionPL.Add (RafterWidth / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: for (; CurrentPositonBottom <= LengthBottom / 2.0 - RafterSpaceBottom; CurrentPositonBottom += RafterSpaceBottom' CurrentPositonTop += RafterSpaceTop) {  	Point3d PointTop = new Point3d (CurrentPositonTop' 0' -Height);  	Point3d PointBottom = new Point3d (CurrentPositonBottom' -Depth' -Depth * Pitch - Height);  	Curve TempCurve1 = (Curve)SectionBase.Duplicate ();  	TempCurve1.Translate ((Vector3d)PointTop);  	Lafters.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (TempCurve1' PointBottom - PointTop)).CapPlanarHoles (Height / 100.0));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: for (; CurrentPositonBottom <= LengthBottom / 2.0 - RafterSpaceBottom; CurrentPositonBottom += RafterSpaceBottom' CurrentPositonTop += RafterSpaceTop) {  	Point3d PointTop = new Point3d (CurrentPositonTop' 0' -Height);  	Point3d PointBottom = new Point3d (CurrentPositonBottom' -Depth' -Depth * Pitch - Height);  	Curve TempCurve1 = (Curve)SectionBase.Duplicate ();  	TempCurve1.Translate ((Vector3d)PointTop);  	Lafters.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (TempCurve1' PointBottom - PointTop)).CapPlanarHoles (Height / 100.0));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofRafter,The following statement contains a magic number: Lafters.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (TempCurve1' PointBottom - PointTop)).CapPlanarHoles (Height / 100.0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: RoofPL.Add (LengthTop / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: RoofPL.Add (LengthBottom / 2.0' -Depth' -Depth * Pitch);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: RoofPL.Add (-LengthBottom / 2.0' -Depth' -Depth * Pitch);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: RoofPL.Add (-LengthTop / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: RoofPL.Add (LengthTop / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetJapaneseRoofMain,The following statement contains a magic number: return Brep.CreateSolid (ResultRoof' Height / 100.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' 700' 100' 600' 750' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: return GetHandrailGlass (BaseCurve' Height' 100' Height - 100' Space' 50' 25' 37.5' 10' 100' 5.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: Handrail.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius2))' TopRailCurve)' true' Space / 1000) [0]);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: for (double CurrentLength = EndSpace; CurrentLength + Space * EndTreatment + EndSpace < Length; CurrentLength += Space) {  	Point3d Point1 = BaseCurve.PointAtLength (CurrentLength);  	Point3d Point2 = BaseCurve.PointAtLength (CurrentLength + Space);  	if (CurrentLength + Space * (EndTreatment + 1) > Length) {  		Point2 = BaseCurve.PointAtLength (Length - EndSpace);  	}  	Handrail.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (Point1' Radius1))' new Vector3d (0' 0' Height))).CapPlanarHoles (0));  	double GlassLength = (Point2 - Point1).Length;  	if (GlassLength > GlassMarginSide * 2) {  		Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  		Glass.Add (GlassTemp);  		if (FrameWidth > 0) {  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  			{  				Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  				FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  				Frame.Add (FrameTemp);  			}  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (GlassLength > GlassMarginSide * 2) {  	Brep GlassTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide' GlassLength - GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  	GlassTemp = GeneralHelper.FitTwoPoint (GlassTemp' Point1' Point2);  	Glass.Add (GlassTemp);  	if (FrameWidth > 0) {  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  		{  			Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  			FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  			Frame.Add (FrameTemp);  		}  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlass,The following statement contains a magic number: if (FrameWidth > 0) {  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom - FrameWidth' GlassHeightBottom)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (0' GlassLength)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightTop' GlassHeightTop + FrameWidth)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassMarginSide - FrameWidth' GlassMarginSide)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  	{  		Brep FrameTemp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (GlassLength - GlassMarginSide' GlassLength - GlassMarginSide + FrameWidth)' new Interval (-GlassThick / 2.0' GlassThick / 2.0)' new Interval (GlassHeightBottom' GlassHeightTop)));  		FrameTemp = GeneralHelper.FitTwoPoint (FrameTemp' Point1' Point2);  		Frame.Add (FrameTemp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: return GetHandrailGlassSimple (BaseCurve' Height' Space' 10' 10' 50);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: return GetHandrailGlassSimple (BaseCurve' Height' Space' 10' 10' 50);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: return GetHandrailGlassSimple (BaseCurve' Height' Space' 10' 10' 50);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: for (int i = 0; i < (int)(CurveLen / Space); i++) {  	Point3d Point1 = BaseCurve.PointAtLength (SpaceModified * i);  	Point3d Point2 = BaseCurve.PointAtLength (SpaceModified * (i + 1));  	double Dist = Point2.DistanceTo (Point1);  	if (FrameSizeHorizontal != 0) {  		Polyline PL1 = new Polyline (5);  		Polyline PL2 = new Polyline (5);  		PL1.Add (0' 0' 0);  		PL1.Add (Dist' 0' 0);  		PL1.Add (Dist' 0' Height);  		PL1.Add (0' 0' Height);  		PL1.Add (0' 0' 0);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		Brep Temp = Brep.CreatePlanarBreps (new Curve[] {  			PL1.ToNurbsCurve ()'  			PL2.ToNurbsCurve ()  		}) [0];  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Frame.Add (Temp);  	}  	{  		Brep Temp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (FrameSizeHorizontal' Dist - FrameSizeHorizontal)' new Interval (0' 5)' new Interval (FrameSizeBottom' Height - FrameSizeTop)));  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Glass.Add (Temp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: for (int i = 0; i < (int)(CurveLen / Space); i++) {  	Point3d Point1 = BaseCurve.PointAtLength (SpaceModified * i);  	Point3d Point2 = BaseCurve.PointAtLength (SpaceModified * (i + 1));  	double Dist = Point2.DistanceTo (Point1);  	if (FrameSizeHorizontal != 0) {  		Polyline PL1 = new Polyline (5);  		Polyline PL2 = new Polyline (5);  		PL1.Add (0' 0' 0);  		PL1.Add (Dist' 0' 0);  		PL1.Add (Dist' 0' Height);  		PL1.Add (0' 0' Height);  		PL1.Add (0' 0' 0);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		Brep Temp = Brep.CreatePlanarBreps (new Curve[] {  			PL1.ToNurbsCurve ()'  			PL2.ToNurbsCurve ()  		}) [0];  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Frame.Add (Temp);  	}  	{  		Brep Temp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (FrameSizeHorizontal' Dist - FrameSizeHorizontal)' new Interval (0' 5)' new Interval (FrameSizeBottom' Height - FrameSizeTop)));  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Glass.Add (Temp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: for (int i = 0; i < (int)(CurveLen / Space); i++) {  	Point3d Point1 = BaseCurve.PointAtLength (SpaceModified * i);  	Point3d Point2 = BaseCurve.PointAtLength (SpaceModified * (i + 1));  	double Dist = Point2.DistanceTo (Point1);  	if (FrameSizeHorizontal != 0) {  		Polyline PL1 = new Polyline (5);  		Polyline PL2 = new Polyline (5);  		PL1.Add (0' 0' 0);  		PL1.Add (Dist' 0' 0);  		PL1.Add (Dist' 0' Height);  		PL1.Add (0' 0' Height);  		PL1.Add (0' 0' 0);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' FrameSizeBottom);  		PL2.Add (Dist - FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' Height - FrameSizeTop);  		PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  		Brep Temp = Brep.CreatePlanarBreps (new Curve[] {  			PL1.ToNurbsCurve ()'  			PL2.ToNurbsCurve ()  		}) [0];  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Frame.Add (Temp);  	}  	{  		Brep Temp = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (FrameSizeHorizontal' Dist - FrameSizeHorizontal)' new Interval (0' 5)' new Interval (FrameSizeBottom' Height - FrameSizeTop)));  		Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  		Glass.Add (Temp);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: if (FrameSizeHorizontal != 0) {  	Polyline PL1 = new Polyline (5);  	Polyline PL2 = new Polyline (5);  	PL1.Add (0' 0' 0);  	PL1.Add (Dist' 0' 0);  	PL1.Add (Dist' 0' Height);  	PL1.Add (0' 0' Height);  	PL1.Add (0' 0' 0);  	PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  	PL2.Add (Dist - FrameSizeHorizontal' 0' FrameSizeBottom);  	PL2.Add (Dist - FrameSizeHorizontal' 0' Height - FrameSizeTop);  	PL2.Add (FrameSizeHorizontal' 0' Height - FrameSizeTop);  	PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  	Brep Temp = Brep.CreatePlanarBreps (new Curve[] {  		PL1.ToNurbsCurve ()'  		PL2.ToNurbsCurve ()  	}) [0];  	Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  	Frame.Add (Temp);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailGlassSimple,The following statement contains a magic number: if (FrameSizeHorizontal != 0) {  	Polyline PL1 = new Polyline (5);  	Polyline PL2 = new Polyline (5);  	PL1.Add (0' 0' 0);  	PL1.Add (Dist' 0' 0);  	PL1.Add (Dist' 0' Height);  	PL1.Add (0' 0' Height);  	PL1.Add (0' 0' 0);  	PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  	PL2.Add (Dist - FrameSizeHorizontal' 0' FrameSizeBottom);  	PL2.Add (Dist - FrameSizeHorizontal' 0' Height - FrameSizeTop);  	PL2.Add (FrameSizeHorizontal' 0' Height - FrameSizeTop);  	PL2.Add (FrameSizeHorizontal' 0' FrameSizeBottom);  	Brep Temp = Brep.CreatePlanarBreps (new Curve[] {  		PL1.ToNurbsCurve ()'  		PL2.ToNurbsCurve ()  	}) [0];  	Temp = GeneralHelper.FitTwoPoint (Temp' Point1' Point2);  	Frame.Add (Temp);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHeightMap,The following statement contains a magic number: intcrv.Add (Curve.CreateInterpolatedCurve (Points' 3));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetPipeHead,The following statement contains a magic number: intcrv = intcrv.Split (0.5) [0];  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetPipeHead,The following statement contains a magic number: return Brep.CreateFromRevSurface (RevSurface.Create (intcrv' new Line (0' 0' 0' 1' 0' 0)' 0' Math.PI * 2.0)' true' true);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: return GetClock (rd' dt' r' fontname' new Interval (0.75' 0.85)' new Interval (0.9' 1.0)' 0.02' new Interval[] {  	new Interval (-0.0' 0.6)'  	new Interval (-0.1' 0.7)'  	new Interval (-0.2' 0.75)  }' new double[] {  	0.03'  	0.02'  	0.01  }' 5' 2' 2' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	TextEntity TE = new TextEntity ();  	TE.Plane = new Plane (new Point3d (0' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1));  	TE.Justification = TextJustification.MiddleCenter;  	TE.Text = "" + i;  	TE.FontIndex = rd.Fonts.FindOrCreate (TextFontName' false' false);  	TE.TextHeight = TextRad.Length * Radius;  	TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0));  	Texts.AddRange (GeneralHelper.CreateExtrusionCaped (TE.Explode ()' new Vector3d (0' -TextThick' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	TextEntity TE = new TextEntity ();  	TE.Plane = new Plane (new Point3d (0' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1));  	TE.Justification = TextJustification.MiddleCenter;  	TE.Text = "" + i;  	TE.FontIndex = rd.Fonts.FindOrCreate (TextFontName' false' false);  	TE.TextHeight = TextRad.Length * Radius;  	TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0));  	Texts.AddRange (GeneralHelper.CreateExtrusionCaped (TE.Explode ()' new Vector3d (0' -TextThick' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	TextEntity TE = new TextEntity ();  	TE.Plane = new Plane (new Point3d (0' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1));  	TE.Justification = TextJustification.MiddleCenter;  	TE.Text = "" + i;  	TE.FontIndex = rd.Fonts.FindOrCreate (TextFontName' false' false);  	TE.TextHeight = TextRad.Length * Radius;  	TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0));  	Texts.AddRange (GeneralHelper.CreateExtrusionCaped (TE.Explode ()' new Vector3d (0' -TextThick' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: TE.Translate (Radius * TextRad.Mid * Math.Sin (Math.PI * i / 6.0)' -BaseThick' Radius * TextRad.Mid * Math.Cos (Math.PI * i / 6.0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	if (HandsRad [i].Length > 0) {  		Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  		Hands.Add (Brep.CreateFromBox (bx));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: if (HandsRad [i].Length > 0) {  	Box bx = new Box (new Plane (new Point3d (0' 0' 0)' new Vector3d (Math.Sin (Angles [i])' 0' Math.Cos (Angles [i]))' new Vector3d (Math.Sin (Angles [i] + Math.PI / 2.0)' 0' Math.Cos (Angles [i] + Math.PI / 2.0)))' new Interval (HandsRad [i].Min * Radius' HandsRad [i].Max * Radius)' new Interval (-Radius * HandsWidth [i] / 2.0' Radius * HandsWidth [i] / 2.0)' new Interval (-BaseThick - TextThick * 2.0 - HandsThick * (i + 1)' -BaseThick - TextThick * 2.0 - HandsThick * i));  	Hands.Add (Brep.CreateFromBox (bx));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: Result [2] = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (Plane.WorldZX' Radius)' -BaseThick)' true' true)'  	Brep.CreateFromRevSurface (RevSurface.Create (RevCrv' new Line (0' 0' 0' 0' 1' 0))' false' false)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: Result [3] = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Frame.Length * Radius - BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * Frame.Min)' GlassThick)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: Result [4] = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * CenterRad)' -TextThick * 2.0 - HandsThick * 4.0)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: Result [4] = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * CenterRad)' -TextThick * 2.0 - HandsThick * 4.0)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetClock,The following statement contains a magic number: Result [4] = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -BaseThick' 0)' new Vector3d (0' 1' 0))' Radius * CenterRad)' -TextThick * 2.0 - HandsThick * 4.0)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadBallast,The following statement contains a magic number: BallastBasePL.Add (BallastWidthBottom / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadBallast,The following statement contains a magic number: BallastBasePL.Add (BallastWidthTop / 2.0' 0' BallastHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadBallast,The following statement contains a magic number: BallastBasePL.Add (-BallastWidthTop / 2.0' 0' BallastHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadBallast,The following statement contains a magic number: BallastBasePL.Add (-BallastWidthBottom / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadBallast,The following statement contains a magic number: BallastBasePL.Add (BallastWidthBottom / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: return GetRailroadTrackShape (145.0' 65.0' 49.0' 94.9' 30.1' 16.5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (b / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (b / 2.0' 0' f / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (b / 2.0' 0' f / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (g / 2.0' 0' f);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (g / 2.0' 0' f + e);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (c / 2.0' 0' f + e);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (c / 2.0' 0' f + e + d);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-c / 2.0' 0' f + e + d);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-c / 2.0' 0' f + e);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-g / 2.0' 0' f + e);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-g / 2.0' 0' f);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-b / 2.0' 0' f / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-b / 2.0' 0' f / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (-b / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroadTrackShape,The following statement contains a magic number: BallastBasePL.Add (b / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: GetRailroad (RailCurves' TrackShape' TrackGauge' TrackGauge * 2.0' 200' 50' 700' TrackGauge * 2.5' TrackGauge * 3.0' 140' out Railroad' out RailroadTie' out TrackBallast);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: foreach (Curve RailCurve in RailCurves) {  	RailCurve.Domain = new Interval (0' 1.0);  	double RailLength = RailCurve.GetLength ();  	Curve[] OffsetedCurves = new Curve[] {  		(RailCurve.Offset (Plane.WorldXY' TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]'  		(RailCurve.Offset (Plane.WorldXY' -TrackGauge / 2.0' TrackGauge / 100.0' CurveOffsetCornerStyle.Smooth)) [0]  	};  	OffsetedCurves [0].Translate (0' 0' BallastHeight + TieHeight);  	OffsetedCurves [1].Translate (0' 0' BallastHeight + TieHeight);  	for (int i = 0; i <= 1; i++) {  		Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  		OffsetedCurves [i].Domain = new Interval (0' 1);  		TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  		ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  	if (TieHeight > 0 && TieWidth > 0) {  		for (double CurrentLength = TieSpace; CurrentLength < RailLength; CurrentLength += TieSpace) {  			double TempT;  			RailCurve.LengthParameter (CurrentLength' out TempT);  			Brep TempTie = (Brep)TieBase.Duplicate ();  			TempTie.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' TempT)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  			TempTie.Translate ((Vector3d)(RailCurve.PointAt (TempT)) + new Vector3d (0' 0' BallastHeight));  			ResultTie.Add (TempTie);  		}  	}  	if (BallastHeight > 0) {  		Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  		TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  		ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: for (int i = 0; i <= 1; i++) {  	Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  	OffsetedCurves [i].Domain = new Interval (0' 1);  	TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  	ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: for (int i = 0; i <= 1; i++) {  	Curve TempTrackShape = (Curve)TrackShape.Duplicate ();  	OffsetedCurves [i].Domain = new Interval (0' 1);  	TempTrackShape.Rotate (GeneralHelper.GetCurvatureAsAngle (OffsetedCurves [i]' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempTrackShape.Translate ((Vector3d)OffsetedCurves [i].PointAtStart);  	ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: ResultRoad.Add (Brep.CreateFromSweep (OffsetedCurves [i]' TempTrackShape' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: if (BallastHeight > 0) {  	Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  	TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  	ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: if (BallastHeight > 0) {  	Curve TempBallaseBase = (Curve)BallastBase.Duplicate ();  	TempBallaseBase.Rotate (GeneralHelper.GetCurvatureAsAngle (RailCurve' 0)' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempBallaseBase.Translate ((Vector3d)RailCurve.PointAtStart);  	ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetRailroad,The following statement contains a magic number: ResultBallast.Add (Brep.CreateFromSweep (RailCurve' TempBallaseBase' true' TrackGauge / 1e6) [0].CapPlanarHoles (TrackGauge / 1e6));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: Basement = GetTowerClaneBasement (20);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LadderBasement = GeneralHelper.TranslateBreps (GetLadderSimple (20 * 800)' new Point3d (0' 400' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LadderBasement = GeneralHelper.TranslateBreps (GetLadderSimple (20 * 800)' new Point3d (0' 400' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LadderBasement = GeneralHelper.TranslateBreps (GetLadderSimple (20 * 800)' new Point3d (0' 400' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LiftFrame = GeneralHelper.TranslateBreps (GetTowerClaneLiftFrame (1200' 2200)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LiftFrame = GeneralHelper.TranslateBreps (GetTowerClaneLiftFrame (1200' 2200)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LiftFrame = GeneralHelper.TranslateBreps (GetTowerClaneLiftFrame (1200' 2200)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: LiftFrame = GeneralHelper.TranslateBreps (GetTowerClaneLiftFrame (1200' 2200)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: RotationUnit = GeneralHelper.TranslateBreps (GetTowerClaneRotationUnit (600' 2300' 150' 2500)' new Vector3d (0' 0' 20 * 800));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: GetTowerClaneHead (out RetBody' out RetHandrail' out RetWall' out RetGlass' out RetPole' out ClaneWorkSpace' AngleClane' out RedBody' out WhiteBody' out ClaneLadderRed' out ClaneLadderWhite' out ClaneClaneWorkSpace' 20000' out Wire);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseWall = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetWall' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseWall = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetWall' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseWall = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetWall' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseGlass = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetGlass' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseGlass = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetGlass' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHouseGlass = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetGlass' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadBody = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadBody = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadBody = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHandrail = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetHandrail' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHandrail = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetHandrail' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadHandrail = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetHandrail' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPole = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetPole' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPole = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetPole' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPole = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RetPole' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPoleWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPoleWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadPoleWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RedBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RedBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (RedBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (WhiteBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (WhiteBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneBodyWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (WhiteBody' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderRed' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderRed' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderRed = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderRed' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderWhite' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderWhite' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneLadderWhite = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneLadderWhite' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWorkSpace = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (ClaneClaneWorkSpace' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWire = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (Wire' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWire = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (Wire' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClane,The following statement contains a magic number: HeadClaneWire = GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (Wire' new Point3d (0' 0' 20 * 800 + 600))' AngleHead' new Vector3d (0' 0' 1));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: Count = Math.Max (Count' 2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: for (int i = 1; i + 1 < Count; i++) {  	ResultBody [i % 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GetTowerClaneClaneUnit (Width2' Width2' Length' Space' Radius1' Radius2)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: ResultBody [i % 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GetTowerClaneClaneUnit (Width2' Width2' Length' Space' Radius1' Radius2)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: for (int i = 0; i < Count; i++) {  	ResultBody [i % 2 + 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.DuplicateBreps (LadderBase)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: for (int i = 0; i < Count; i++) {  	ResultBody [i % 2 + 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.DuplicateBreps (LadderBase)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: ResultBody [i % 2 + 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.DuplicateBreps (LadderBase)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: ResultBody [i % 2 + 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GeneralHelper.DuplicateBreps (LadderBase)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: ResultBody [i % 2].AddRange (GeneralHelper.RotateBreps (GeneralHelper.TranslateBreps (GetTowerClaneClaneUnit (Width2' Width1' Length' Space' Radius1' Radius2)' new Vector3d (i * Length' 0' 0))' Angle' new Vector3d (0' 1' 0)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: Ladder1 = ResultBody [2].ToArray ();  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClane,The following statement contains a magic number: Ladder2 = ResultBody [3].ToArray ();  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (0' Width1 / 2.0' Width1 / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (0' Width1 / 2.0' Width1 / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (Length' Width2 / 2.0' Width2 / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (Length' Width2 / 2.0' Width2 / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)BaseParts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts1);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)BaseParts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts1);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (double CurrentLength = 0; CurrentLength < Length; CurrentLength += Space) {  	PartsPL = new Polyline (2);  	PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	Brep BaseParts2 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	PartsPL = new Polyline (2);  	PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  	PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  	Brep BaseParts3 = (Brep.CreateFromSweep (PartsPL.ToNurbsCurve ()' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius1))' PartsPL.ToNurbsCurve ())' true' 1.0) [0]);  	for (int i = 0; i < 4; i++) {  		Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  		TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts2);  		Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  		Result.Add (TempParts3);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL = new Polyline (2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add (CurrentLength' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0' (Width1 + (Width2 - Width1) * (CurrentLength / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL = new Polyline (2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space / 2.0)' -(Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space / 2.0) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: PartsPL.Add ((CurrentLength + Space)' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0' (Width1 + (Width2 - Width1) * ((CurrentLength + Space) / Length)) / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  	TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts2);  	Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts3);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  	TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts2);  	Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts3);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts2 = (Brep)BaseParts2.Duplicate ();  	TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts2);  	Brep TempParts3 = (Brep)BaseParts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  	Result.Add (TempParts3);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: TempParts2.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneClaneUnit,The following statement contains a magic number: TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)'  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)'  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: for (double CurrentLength = -Width / 2.0 + Thickness + (Width / 2.0 - Thickness) % (CableRadius * 2); CurrentLength < Width / 2.0 - Thickness; CurrentLength += CableRadius) {  	Curve TempArc = (Curve)BaseArc.Duplicate ();  	TempArc.Translate (new Vector3d (0' CurrentLength' Radius1));  	Arcs.Add (TempArc);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: for (double CurrentLength = -Width / 2.0 + Thickness + (Width / 2.0 - Thickness) % (CableRadius * 2); CurrentLength < Width / 2.0 - Thickness; CurrentLength += CableRadius) {  	Curve TempArc = (Curve)BaseArc.Duplicate ();  	TempArc.Translate (new Vector3d (0' CurrentLength' Radius1));  	Arcs.Add (TempArc);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: for (double CurrentLength = -Width / 2.0 + Thickness + (Width / 2.0 - Thickness) % (CableRadius * 2); CurrentLength < Width / 2.0 - Thickness; CurrentLength += CableRadius) {  	Curve TempArc = (Curve)BaseArc.Duplicate ();  	TempArc.Translate (new Vector3d (0' CurrentLength' Radius1));  	Arcs.Add (TempArc);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: for (double CurrentLength = -Width / 2.0 + Thickness + (Width / 2.0 - Thickness) % (CableRadius * 2); CurrentLength < Width / 2.0 - Thickness; CurrentLength += CableRadius) {  	Curve TempArc = (Curve)BaseArc.Duplicate ();  	TempArc.Translate (new Vector3d (0' CurrentLength' Radius1));  	Arcs.Add (TempArc);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRoller,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)'  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' Thickness)' true' true)'  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' Width / 2.0' Radius2)' new Vector3d (0' 1' 0))' Radius2)' -Thickness)' true' true)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: Cable = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0 + Thickness' Radius2)' new Vector3d (0' 1' 0))' Radius1)' Width - Thickness * 2)' false' false)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: Cable = new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (new Plane (new Point3d (0' -Width / 2.0 + Thickness' Radius2)' new Vector3d (0' 1' 0))' Radius1)' Width - Thickness * 2)' false' false)  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneCableRollerLight,The following statement contains a magic number: CableTarget = new Point3d (Radius1 * Math.Cos (Math.PI * 3.0 / 4.0)' 0' Radius1 * Math.Sin (Math.PI * 3.0 / 4.0) + Radius2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.Add (Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length / 2.0' Length / 2.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (-Thickness' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.Add (Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length / 2.0' Length / 2.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (-Thickness' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.Add (Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length / 2.0' Length / 2.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (-Thickness' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.Add (Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length / 2.0' Length / 2.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (-Thickness' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (-Length / 2.0 + HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: HandrailBase.Add (Length / 2.0 - HRRadius * 2' Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetWorkSpace,The following statement contains a magic number: Result.AddRange (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (0' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Size1' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Size1' -Width / 2.0 + Size1' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (0' -Width / 2.0 + Size1' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (0' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Length' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Length - Size2' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Length - Size2' -Width / 2.0 + Size2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Length' -Width / 2.0 + Size2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: BasePoly.Add (Length' -Width / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: for (double CrtLen = Space; CrtLen < Height; CrtLen += Space) {  	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: for (double CrtLen = Space; CrtLen < Height; CrtLen += Space) {  	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: for (double CrtLen = Space; CrtLen < Height; CrtLen += Space) {  	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClanePole,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (Size1 / 2.0' -Width / 2.0 + Size1' CrtLen)' new Vector3d (0' 1' 0))' Radius))' new Vector3d (0' Width - Size1 * 2' 0))));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneHeadBase (4.5e3' 9e3' 500' out Body' out Handrail' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneHeadBase (4.5e3' 9e3' 500' out Body' out Handrail' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneHeadBase (4.5e3' 9e3' 500' out Body' out Handrail' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: Pole = GeneralHelper.TranslateBreps (GetTowerClanePole (4.5e3 / 3.0 + 500' 9e3 * 2 / 3' 10e3' 400' 400' 80' 2000)' new Vector3d (-9e3 / 2.0' 0' 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WorkSpace = GeneralHelper.TranslateBreps (GetWorkSpace (4.5e3 / 3.0 + 1e3' 1e3' 100)' new Vector3d (-9e3 / 2.0 - (1e3) / 2.0 + 400' 0' 500 + 10e3 + 100));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: GetTowerClaneClane (5' Angle' 500' 1000' 5000' 1000' 25' 10' out ResultClane1' out ResultClane2' out ResultClane3' out ResultClane4' out ResultClane5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: RedBody = GeneralHelper.TranslateBreps (ResultClane1' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: RedBody = GeneralHelper.TranslateBreps (ResultClane1' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WhiteBody = GeneralHelper.TranslateBreps (ResultClane2' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WhiteBody = GeneralHelper.TranslateBreps (ResultClane2' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneLadderRed = GeneralHelper.TranslateBreps (ResultClane3' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneLadderRed = GeneralHelper.TranslateBreps (ResultClane3' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneLadderWhite = GeneralHelper.TranslateBreps (ResultClane4' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneLadderWhite = GeneralHelper.TranslateBreps (ResultClane4' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneWorkSpace = GeneralHelper.TranslateBreps (ResultClane5' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: ClaneWorkSpace = GeneralHelper.TranslateBreps (ResultClane5' new Vector3d (0' 0' 500 + 500));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: RailCurve.Rotate (-Math.PI / 2.0' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireBase.Rotate (Math.PI / 2.0' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' (500 / 2.0)' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' (500 / 2.0)' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' -(500 / 2.0)' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' -(500 / 2.0)' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0 - 1e3' 0' 500);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) - 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add ((-9e3 / 2.0 - 1e3 / 2.0 + 400) + 1e3 / 2.0' 0' 500 + 10e3 + 100 + 400);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WirePL.Add (5 * 5000 * Math.Cos (Angle)' 0' 500 + 500 + 5 * 5000 * Math.Sin (Angle) - WireLength);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: RailCurve.Rotate (-Math.PI / 2.0' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireBase.Rotate (Math.PI / 2.0' new Vector3d (1' 0' 0)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' (500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' (500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' (500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' -(500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' -(500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHead,The following statement contains a magic number: WireTemp.Translate (0' -(500 / 2.0) / 3.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: GetTowerClaneControlUnit (Width / 3.0' Length / 2.0' Length / 2.0 + 500' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Wall = GeneralHelper.TranslateBreps (Wall' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Wall = GeneralHelper.TranslateBreps (Wall' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Wall = GeneralHelper.TranslateBreps (Wall' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Glass = GeneralHelper.TranslateBreps (Glass' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Glass = GeneralHelper.TranslateBreps (Glass' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Glass = GeneralHelper.TranslateBreps (Glass' new Point3d (-Length / 4.0' -Width / 2.0 - 500' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness)))  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness)))  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness)))  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness)))  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Body = new Brep[] {  	Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-Length * 3.0 / 4.0' Length / 4.0)' new Interval (-Width / 2.0' Width / 2.0)' new Interval (0' Thickness)))  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length / 4.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length / 4.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length / 4.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length / 4.0 - HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' -Width / 2.0 + HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (-Length * 3.0 / 4.0 + HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (Length / 4.0 - HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (Length / 4.0 - HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (Length / 4.0 - HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: HandrailBase.Add (Length / 4.0 - HRRadius * 2' +Width / 2.0 - HRRadius * 2' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneHeadBase,The following statement contains a magic number: Handrail = GeneralHelper.TranslateBreps (GetHandrailSimple (HandrailBase.ToNurbsCurve ()' 800' new double[] {  	400'  	600  }' 500' HRRadius' 15' 10)' new Vector3d (0' 0' Thickness));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: GetTowerClaneControlUnit (1.5e3' 5e3' 5.5e3' 1.0e3' 2.5e3' 1.0e3' 150' out Wall' out Glass);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Part1Curve.Translate (0' -Width / 2.0 - FrameWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Part1Curve.Translate (0' -Width / 2.0 - FrameWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Part1Curve.Translate (0' -WallThickness / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Part1Curve.Translate (0' -WallThickness / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Parts1PL.Add (TopLength - WallThickness * 2' 0' Height - WallThickness);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneControlUnit,The following statement contains a magic number: Parts1PL.Add (BottomLength - WallThickness * 2' 0' WallThickness);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The following statement contains a magic number: Result.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius2))' TopRailCurve)' true' Space / 1000) [0]);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The following statement contains a magic number: foreach (double TempHeight in RailHeight) {  	Curve TopRailCurve = (Curve)BaseCurve.Duplicate ();  	TopRailCurve.Translate (0' 0' TempHeight);  	Result.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius3))' TopRailCurve)' true' Space / 1000) [0]);  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetHandrailSimple,The following statement contains a magic number: Result.Add (Brep.CreateFromSweep (TopRailCurve' GeneralHelper.GetCurveForSweep (NurbsCurve.CreateFromCircle (new Circle (Radius3))' TopRailCurve)' true' Space / 1000) [0]);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneRotationUnit,The following statement contains a magic number: return new Brep[] {  	Brep.CreateFromCylinder (new Cylinder (new Circle (Radius1 / 2.0)' Height1)' true' false)'  	Cylinder2  };  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts1 = GeneralHelper.TranslateBreps (GetTowerClaneBasement (UnitCount' Size1' UnitHeight' 30' 150' 100)' new Vector3d (0' 0' -TotalHeight - Elevation));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts1 = GeneralHelper.TranslateBreps (GetTowerClaneBasement (UnitCount' Size1' UnitHeight' 30' 150' 100)' new Vector3d (0' 0' -TotalHeight - Elevation));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts1 = GeneralHelper.TranslateBreps (GetTowerClaneBasement (UnitCount' Size1' UnitHeight' 30' 150' 100)' new Vector3d (0' 0' -TotalHeight - Elevation));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: RetParts2.AddRange (GeneralHelper.TranslateBreps (HandrailBase' new Vector3d (0' 0' -TotalHeight / 2.0 - Elevation)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0 - Parts3Width' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0 - Parts3Width' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0 - Parts3Width' -Parts3Width);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size3 / 2.0 - Parts3Width' -Parts3Width);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0 + Parts3Width' -Parts3Width);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0 + Parts3Width' -Parts3Width);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0 + Parts3Width' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0 + Parts3Width' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' -Parts3Bending);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: Parts3PL.Add (-Size2 / 2.0' -Size2 / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempFloor = (Brep)FloorBasePart.Duplicate ();  	TempFloor.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	FloorBase [i] = TempFloor;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempFloor = (Brep)FloorBasePart.Duplicate ();  	TempFloor.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	FloorBase [i] = TempFloor;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: TempFloor.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneLiftFrame,The following statement contains a magic number: RetParts3.AddRange (GeneralHelper.TranslateBreps (FloorBase' new Vector3d (0' 0' -TotalHeight / 2.0 - Elevation)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: return GetLadderSimple (Length' 300' 400' 25' 15);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: return GetLadderSimple (Length' 300' 400' 25' 15);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: return GetLadderSimple (Length' 300' 400' 25' 15);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: return GetLadderSimple (Length' 300' 400' 25' 15);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Point3d (-Width / 2.0' 0' 0)' Radius1))' new Vector3d (0' 0' Length))).CapPlanarHoles (0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Point3d (+Width / 2.0' 0' 0)' Radius1))' new Vector3d (0' 0' Length))).CapPlanarHoles (0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: for (double CurrentLength = Space; CurrentLength < Length; CurrentLength += Space) {  	Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (-Width / 2.0' 0' CurrentLength)' new Vector3d (1' 0' 0))' Radius2))' new Vector3d (Width' 0' 0))).CapPlanarHoles (0));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetLadderSimple,The following statement contains a magic number: Result.Add (Brep.CreateFromSurface (Surface.CreateExtrusion (NurbsCurve.CreateFromCircle (new Circle (new Plane (new Point3d (-Width / 2.0' 0' CurrentLength)' new Vector3d (1' 0' 0))' Radius2))' new Vector3d (Width' 0' 0))).CapPlanarHoles (0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: return GetTowerClaneBasement (Count' 1000' 800' 30' 150' 100);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: return GetTowerClaneBasement (Count' 1000' 800' 30' 150' 100);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: return GetTowerClaneBasement (Count' 1000' 800' 30' 150' 100);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: return GetTowerClaneBasement (Count' 1000' 800' 30' 150' 100);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: return GetTowerClaneBasement (Count' 1000' 800' 30' 150' 100);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Parts1.Translate (-UnitWidth / 2.0' -UnitWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Parts1.Translate (-UnitWidth / 2.0' -UnitWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (Width1 / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth / 2.0' 0' UnitHeight - Width2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth - Width1 / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth - Width1 / 2.0' 0' Width2 / Tr1 * Tr3);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth / 2.0 + Width2 / Tr2 * Tr3' 0' UnitHeight - Width2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth - Width1 / 2.0' 0' UnitHeight - Width2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth - Width1 / 2.0' 0' UnitHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (Width1 / 2.0' 0' UnitHeight);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (Width1 / 2.0' 0' UnitHeight - Width2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (UnitWidth / 2.0 - Width2 / Tr2 * Tr3' 0' UnitHeight - Width2);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (Width1 / 2.0' 0' Width2 / Tr1 * Tr3);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: BasePL3.Add (Width1 / 2.0' 0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Parts3.Translate (-UnitWidth / 2.0' -UnitWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Parts3.Translate (-UnitWidth / 2.0' -UnitWidth / 2.0' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)Parts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	Result [i] = TempParts1;  	for (int j = 0; j < Count; j++) {  		Brep TempParts3 = (Brep)Parts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempParts3.Translate (0' 0' j * UnitHeight);  		Result [4 + j * 4 + i] = TempParts3;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)Parts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	Result [i] = TempParts1;  	for (int j = 0; j < Count; j++) {  		Brep TempParts3 = (Brep)Parts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempParts3.Translate (0' 0' j * UnitHeight);  		Result [4 + j * 4 + i] = TempParts3;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)Parts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	Result [i] = TempParts1;  	for (int j = 0; j < Count; j++) {  		Brep TempParts3 = (Brep)Parts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempParts3.Translate (0' 0' j * UnitHeight);  		Result [4 + j * 4 + i] = TempParts3;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)Parts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	Result [i] = TempParts1;  	for (int j = 0; j < Count; j++) {  		Brep TempParts3 = (Brep)Parts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempParts3.Translate (0' 0' j * UnitHeight);  		Result [4 + j * 4 + i] = TempParts3;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Brep TempParts1 = (Brep)Parts1.Duplicate ();  	TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	Result [i] = TempParts1;  	for (int j = 0; j < Count; j++) {  		Brep TempParts3 = (Brep)Parts3.Duplicate ();  		TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  		TempParts3.Translate (0' 0' j * UnitHeight);  		Result [4 + j * 4 + i] = TempParts3;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: TempParts1.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int j = 0; j < Count; j++) {  	Brep TempParts3 = (Brep)Parts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempParts3.Translate (0' 0' j * UnitHeight);  	Result [4 + j * 4 + i] = TempParts3;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int j = 0; j < Count; j++) {  	Brep TempParts3 = (Brep)Parts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempParts3.Translate (0' 0' j * UnitHeight);  	Result [4 + j * 4 + i] = TempParts3;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: for (int j = 0; j < Count; j++) {  	Brep TempParts3 = (Brep)Parts3.Duplicate ();  	TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  	TempParts3.Translate (0' 0' j * UnitHeight);  	Result [4 + j * 4 + i] = TempParts3;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: TempParts3.Rotate (Math.PI / 2.0 * i' new Vector3d (0' 0' 1)' new Point3d (0' 0' 0));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Result [4 + j * 4 + i] = TempParts3;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTowerClaneBasement,The following statement contains a magic number: Result [4 + j * 4 + i] = TempParts3;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame1 = new Brep[UnitCountY * 2];  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: for (int i = 0; i < UnitCountY; i++) {  	Frame1 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * i)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (0' FrameSizeY)' new Interval (-GlassThickness' FrameThickness1)));  	Frame1 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * (i + 1))' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (-FrameSizeY' 0)' new Interval (-GlassThickness' FrameThickness1)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: for (int i = 0; i < UnitCountY; i++) {  	Frame1 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * i)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (0' FrameSizeY)' new Interval (-GlassThickness' FrameThickness1)));  	Frame1 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * (i + 1))' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (-FrameSizeY' 0)' new Interval (-GlassThickness' FrameThickness1)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame1 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * i)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (0' FrameSizeY)' new Interval (-GlassThickness' FrameThickness1)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame1 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (0' 0' UnitSizeY * (i + 1))' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' UnitSizeX * UnitCountX)' new Interval (-FrameSizeY' 0)' new Interval (-GlassThickness' FrameThickness1)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame2 = new Brep[UnitCountX * 2];  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: for (int i = 0; i < UnitCountX; i++) {  	Frame2 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * i' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' FrameSizeX)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  	Frame2 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * (i + 1)' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (-FrameSizeX' 0)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: for (int i = 0; i < UnitCountX; i++) {  	Frame2 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * i' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' FrameSizeX)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  	Frame2 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * (i + 1)' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (-FrameSizeX' 0)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame2 [i * 2] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * i' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (0' FrameSizeX)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetIsolatedWindow,The following statement contains a magic number: Frame2 [i * 2 + 1] = Brep.CreateFromBox (new Box (new Plane (new Point3d (UnitSizeX * (i + 1)' 0' 0)' new Vector3d (1' 0' 0)' new Vector3d (0' 0' 1))' new Interval (-FrameSizeX' 0)' new Interval (0' UnitSizeY * UnitCountY)' new Interval (-GlassThickness' FrameThickness2)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurve,The following statement contains a magic number: foreach (Curve cv in Target) {  	double length = cv.GetLength ();  	double t;  	Vector3d Normal;  	cv.Domain = new Interval (0' 1);  	if (length < UnitSize * 3) {  		Normal = cv.CurvatureAt (0);  		cv.LengthParameter (length / 2.0' out t);  		Result.Add (GetTactilePavingAlongCurveHelper1 (TPP' cv' t));  	}  	Result.AddRange (GetTactilePavingAlongCurveHelper2 (TPP' cv' 0' UnitSize));  	double CurrentLen = 0;  	for (CurrentLen = UnitSize; CurrentLen + UnitSize < length; CurrentLen += UnitSize) {  		cv.LengthParameter (CurrentLen' out t);  		Result.Add (GetTactilePavingAlongCurveHelper1 (TPL' cv' t));  	}  	cv.LengthParameter (CurrentLen' out t);  	Result.AddRange (GetTactilePavingAlongCurveHelper2 (TPP' cv' t' UnitSize));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurve,The following statement contains a magic number: foreach (Curve cv in Target) {  	double length = cv.GetLength ();  	double t;  	Vector3d Normal;  	cv.Domain = new Interval (0' 1);  	if (length < UnitSize * 3) {  		Normal = cv.CurvatureAt (0);  		cv.LengthParameter (length / 2.0' out t);  		Result.Add (GetTactilePavingAlongCurveHelper1 (TPP' cv' t));  	}  	Result.AddRange (GetTactilePavingAlongCurveHelper2 (TPP' cv' 0' UnitSize));  	double CurrentLen = 0;  	for (CurrentLen = UnitSize; CurrentLen + UnitSize < length; CurrentLen += UnitSize) {  		cv.LengthParameter (CurrentLen' out t);  		Result.Add (GetTactilePavingAlongCurveHelper1 (TPL' cv' t));  	}  	cv.LengthParameter (CurrentLen' out t);  	Result.AddRange (GetTactilePavingAlongCurveHelper2 (TPP' cv' t' UnitSize));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurve,The following statement contains a magic number: if (length < UnitSize * 3) {  	Normal = cv.CurvatureAt (0);  	cv.LengthParameter (length / 2.0' out t);  	Result.Add (GetTactilePavingAlongCurveHelper1 (TPP' cv' t));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurve,The following statement contains a magic number: if (length < UnitSize * 3) {  	Normal = cv.CurvatureAt (0);  	cv.LengthParameter (length / 2.0' out t);  	Result.Add (GetTactilePavingAlongCurveHelper1 (TPP' cv' t));  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurve,The following statement contains a magic number: cv.LengthParameter (length / 2.0' out t);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingAlongCurveHelper1,The following statement contains a magic number: angle += Math.PI / 2.0;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return GetTactilePavingPoint (300' 5' 12' 22' 5' 60' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: BasicShape.CapPlanarHoles (PointSizeTop / 100.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int i = 0; i < PointCount; i++) {  	for (int j = 0; j < PointCount; j++) {  		Brep TempShape = (Brep)BasicShape.Duplicate ();  		TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  		Result [i * PointCount + j + 1] = TempShape;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int i = 0; i < PointCount; i++) {  	for (int j = 0; j < PointCount; j++) {  		Brep TempShape = (Brep)BasicShape.Duplicate ();  		TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  		Result [i * PointCount + j + 1] = TempShape;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int i = 0; i < PointCount; i++) {  	for (int j = 0; j < PointCount; j++) {  		Brep TempShape = (Brep)BasicShape.Duplicate ();  		TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  		Result [i * PointCount + j + 1] = TempShape;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int i = 0; i < PointCount; i++) {  	for (int j = 0; j < PointCount; j++) {  		Brep TempShape = (Brep)BasicShape.Duplicate ();  		TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  		Result [i * PointCount + j + 1] = TempShape;  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int j = 0; j < PointCount; j++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  	Result [i * PointCount + j + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int j = 0; j < PointCount; j++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  	Result [i * PointCount + j + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int j = 0; j < PointCount; j++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  	Result [i * PointCount + j + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: for (int j = 0; j < PointCount; j++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  	Result [i * PointCount + j + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: TempShape.Translate ((i - PointCount / 2.0 + 0.5) * PointSpace' (j - PointCount / 2.0 + 0.5) * PointSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingPoint,The following statement contains a magic number: return (Brep.CreateBooleanUnion (Result' PointSizeTop / 100.0)) [0];  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return GetTactilePavingLine (300' 4' 17' 27' 270' 5' 75' 5);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: Result [0] = Brep.CreateFromBox (new Box (Plane.WorldXY' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (-BlockSize / 2.0' BlockSize / 2.0)' new Interval (0' BlockThickness)));  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: BottomCurve.Translate (0' 0' BlockThickness / 2.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: BasicShape.CapPlanarHoles (LineWidthTop / 100.0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: for (int i = 0; i < LineCount; i++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate (0' (i - LineCount / 2.0 + 0.5) * LineSpace' 0);  	Result [i + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: for (int i = 0; i < LineCount; i++) {  	Brep TempShape = (Brep)BasicShape.Duplicate ();  	TempShape.Translate (0' (i - LineCount / 2.0 + 0.5) * LineSpace' 0);  	Result [i + 1] = TempShape;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: TempShape.Translate (0' (i - LineCount / 2.0 + 0.5) * LineSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: TempShape.Translate (0' (i - LineCount / 2.0 + 0.5) * LineSpace' 0);  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetTactilePavingLine,The following statement contains a magic number: return (Brep.CreateBooleanUnion (Result' LineWidthTop / 100.0)) [0];  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The following statement contains a magic number: for (int i = 0; i < CurveIntersectRet.Count (); i++) {  	if (CurveIntersectRet [i].ParameterA % 1.0 == 0.0)  		continue;  	if (CurveIntersectRet [i].IsOverlap)  		continue;  	SumLength [cnt % 2] += CurveIntersectRet [i].ParameterA - LastPara;  	LastPara = CurveIntersectRet [i].ParameterA;  	cnt++;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The following statement contains a magic number: SumLength [cnt % 2] += CurveIntersectRet [i].ParameterA - LastPara;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The following statement contains a magic number: for (int i = 0; i < CurveIntersectRet.Count (); i++) {  	if (CurveIntersectRet [i].ParameterA % 1.0 == 0.0)  		continue;  	if (CurveIntersectRet [i].IsOverlap)  		continue;  	if (cnt % 2 == Choice) {  		if (LastPara == 0) {  			Result.Add ((Origin.Split (CurveIntersectRet [i].ParameterA)) [0]);  		}  		else {  			Result.Add ((Origin.Split (new double[] {  				LastPara'  				CurveIntersectRet [i].ParameterA  			})) [1]);  		}  	}  	LastPara = CurveIntersectRet [i].ParameterA;  	cnt++;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The following statement contains a magic number: if (cnt % 2 == Choice) {  	if (LastPara == 0) {  		Result.Add ((Origin.Split (CurveIntersectRet [i].ParameterA)) [0]);  	}  	else {  		Result.Add ((Origin.Split (new double[] {  			LastPara'  			CurveIntersectRet [i].ParameterA  		})) [1]);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,TrimCurveByOutline,The following statement contains a magic number: if (cnt % 2 == Choice) {  	if (LastPara == 0) {  		Result.Add ((Curve)Origin.Duplicate ());  	}  	else {  		Result.Add ((Origin.Split (LastPara)) [1]);  	}  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetCurveWithWidth,The following statement contains a magic number: Width /= 2;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetCurveWithWidthRound,The following statement contains a magic number: Width /= 2;  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetDashedLine,The following statement contains a magic number: for (int i = 0; i <= Count; i++) {  	Curve TempCurve = (Curve)Origin.Duplicate ();  	Point3d a = TempCurve.PointAtLength (i * SegmentLength * 2.0);  	Point3d b = TempCurve.PointAtLength (i * SegmentLength * 2.0 + SegmentLength);  	double at' bt;  	TempCurve.ClosestPoint (a' out at);  	TempCurve.ClosestPoint (b' out bt);  	TempCurve = (TempCurve.Split (new double[] {  		at'  		bt  	})) [i == 0 ? 0 : 1];  	result [i] = TempCurve;  }  
Magic Number,RhinoTools,Providers,C:\repos\kurema_RhinoArchitecturalLibrary\BuildingHelper\Providers.cs,GetDashedLine,The following statement contains a magic number: for (int i = 0; i <= Count; i++) {  	Curve TempCurve = (Curve)Origin.Duplicate ();  	Point3d a = TempCurve.PointAtLength (i * SegmentLength * 2.0);  	Point3d b = TempCurve.PointAtLength (i * SegmentLength * 2.0 + SegmentLength);  	double at' bt;  	TempCurve.ClosestPoint (a' out at);  	TempCurve.ClosestPoint (b' out bt);  	TempCurve = (TempCurve.Split (new double[] {  		at'  		bt  	})) [i == 0 ? 0 : 1];  	result [i] = TempCurve;  }  
