Implementation smell,Namespace,Class,File,Method,Description
Long Method,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The method has 117 lines of code.
Complex Method,BinSend,bitEnc,C:\repos\AyrA_BinSend\BinSend\bitEnc.cs,encode,Cyclomatic complexity of the method is 13
Complex Method,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,Cyclomatic complexity of the method is 36
Complex Method,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,frmBinSend,Cyclomatic complexity of the method is 8
Complex Method,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,getFileParts,Cyclomatic complexity of the method is 8
Complex Method,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,isValid,Cyclomatic complexity of the method is 9
Complex Method,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,Cyclomatic complexity of the method is 12
Complex Method,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,Cyclomatic complexity of the method is 13
Long Parameter List,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,ThreadedSender,The method has 8 parameters.
Long Statement,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Encrypt,The length of the statement  "		cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write); " is 141.
Long Statement,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Decrypt,The length of the statement  "		cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read); " is 137.
Long Statement,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,ToString,The length of the statement  "	return string.Format ("{0};{1};{2};{3};{4};{5};{6}"' JsonConverter.B64enc (Name)' JsonConverter.B64enc (Subject)' JsonConverter.B64enc (Text)' ProposedFormat' ChunkSize' JsonConverter.B64enc (From)' JsonConverter.B64enc (To)); " is 226.
Long Statement,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,t_send,The length of the statement  "	BA.Headers.Add ("Authorization"' "Basic " + JsonConverter.B64enc (string.Format ("{0}:{1}"' QuickSettings.Get ("API-NAME")' QuickSettings.Get ("API-PASS")))); " is 158.
Long Statement,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,t_send,The length of the statement  "	string ackData = BA.sendMessage (ToAddress' FromAddress' JsonConverter.B64enc (Subject)' JsonConverter.B64enc (string.Format (TextTemplate' /*0*/fName' /*1*/index' /*2*/Parts.Count' /*3*/EF.ToString ()' /*4*/encString.Length' /*5*/HashList' /*6*/encString))); " is 259.
Long Statement,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,t_send,The length of the statement  "	while (AMSG == "msgqueued" || AMSG == "broadcastqueued" || AMSG == "doingpubkeypow" || AMSG == "awaitingpubkey" || AMSG == "doingmsgpow" || AMSG == "doingpow" || AMSG == "findingPubkey") { " is 188.
Long Statement,BinSend,frmAPI,C:\repos\AyrA_BinSend\BinSend\frmAPI.cs,btnTest_Click,The length of the statement  "	BA.Headers.Add ("Authorization"' "Basic " + JsonConverter.B64enc (string.Format ("{0}:{1}"' tbUsername.Text' tbPWD.Text))); " is 123.
Long Statement,BinSend,frmAPI,C:\repos\AyrA_BinSend\BinSend\frmAPI.cs,btnTest_Click,The length of the statement  "			MessageBox.Show ("Did not get the expected answer\r\n\r\n==API ANSWER==\r\n" + s' "API check"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 145.
Long Statement,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The length of the statement  "				TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024); " is 371.
Long Statement,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The length of the statement  "			MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 129.
Long Statement,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,TS_chunkSent,The length of the statement  "		lblStatus.Text = string.Format ("Sending {0}/{1}...   Estimated Total: {2:00}:{3:00}:{4:00}   Estimated Time left: {5:00} {6:00} {7:00}"' part' maxParts' TS.Hours' TS.Minutes' TS.Seconds' Left.Hours' Left.Minutes' Left.Seconds); " is 228.
Long Statement,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnEncoding_Click,The length of the statement  "Used for incoming content with an encoding' not known to us."' "Encoding"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 125.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,addFile,The length of the statement  "		if (AllFiles [i].FileName.ToLower () == validPart.FileName.ToLower () && checkHL (AllFiles [i].AllHashes' validPart.Hashes)) { " is 126.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The length of the statement  "			MessageBox.Show ("First part is missing. Cannot verify other parts without it"' "Part missing"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 146.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lvParts_DoubleClick,The length of the statement  "			MessageBox.Show ("This part is missing.\r\nIf it does not arrives soon'\r\nask the sender of the first part to send it again."' "Invalid part description"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 206.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnAssemble_Click,The length of the statement  "		if (MessageBox.Show (string.Format ("This will assemble (not execute!) all existing valid parts into the file '{0}'\r\nNever execute files from untrusted sources' especially DML addresses!\r\nContinue?"' lbFiles.SelectedItem.ToString ())' "Assemble file"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 328.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnAssemble_Click,The length of the statement  "				MessageBox.Show ("Your parts have been assembled to a file. You can delete the parts now."' "File joined"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 157.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnAssemble_Click,The length of the statement  "				MessageBox.Show ("At least one part was missing or invalid.\r\nThe file may be unusable after the first missing part."' "File joined"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 185.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnDelete_Click,The length of the statement  "		if (MessageBox.Show (string.Format ("Delete the file '{0}'?\r\nThis will only remove leftover parts and messages from the inbox and not the assembled file."' lbFiles.SelectedItem.ToString ())' "Delete parts/messages"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 290.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,delMessages,The length of the statement  "		MessageBox.Show ("The first part is missing. Please delete the parts manually in the part list."' "First part missing"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 170.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The length of the statement  "				if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) { " is 121.
Long Statement,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnDelPart_Click,The length of the statement  "		if (MessageBox.Show ("Delete all selected parts?"' "Deleting Parts"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 141.
Long Statement,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,btnSave_Click,The length of the statement  "		MessageBox.Show ("Cannot save template\r\nMake sure its name is a valid file name"' "Error saving template"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 153.
Long Statement,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,The length of the statement  "			tbText.Text = string.Format ("{0}{1}{2}{3}{4}"' tbText.Text.Substring (0' s)' "{"' (int)e.KeyCode - (int)Keys.D0' "}"' tbText.Text.Substring (s)); " is 146.
Long Statement,BinSend,frmTemplates,C:\repos\AyrA_BinSend\BinSend\frmTemplates.cs,btnDelete_Click,The length of the statement  "			MessageBox.Show ("You cannot delete the default template but you may change it.\r\nIf you want to restore *ALL* default templates' either delete the template folder' or default.txt in it."' "Default template"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 260.
Long Statement,BinSend,frmTemplates,C:\repos\AyrA_BinSend\BinSend\frmTemplates.cs,btnDelete_Click,The length of the statement  "			if (MessageBox.Show ("Delete the selected template?"' "Delete template"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 145.
Long Statement,BinSend,frmTemplates,C:\repos\AyrA_BinSend\BinSend\frmTemplates.cs,btnDelete_Click,The length of the statement  "					MessageBox.Show ("Cannot delete the selected template\r\nIts file might be protected or in use.\r\nPlease try again later or delete it manually."' "Delete Template"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 210.
Complex Conditional,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The conditional expression  "data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)"  is complex.
Empty Catch Block,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,getFiles,The method has an empty catch block.
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Encrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  }  catch {  	if (fsCrypt != null) {  		fsCrypt.Close ();  		fsCrypt.Dispose ();  	}  	RMCrypto.Clear ();  	throw new Exception ("Error creating encryptors");  }  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Encrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  }  catch {  	if (fsCrypt != null) {  		fsCrypt.Close ();  		fsCrypt.Dispose ();  	}  	RMCrypto.Clear ();  	throw new Exception ("Error creating encryptors");  }  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Encrypt,The following statement contains a magic number: cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Encrypt,The following statement contains a magic number: cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Decrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  }  catch {  	if (fsIn != null) {  		fsIn.Close ();  		fsIn.Dispose ();  	}  }  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Decrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  }  catch {  	if (fsIn != null) {  		fsIn.Close ();  		fsIn.Dispose ();  	}  }  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Decrypt,The following statement contains a magic number: cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  
Magic Number,BinSend,Crypt,C:\repos\AyrA_BinSend\BinSend\clsCrypt.cs,Decrypt,The following statement contains a magic number: cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: ChunkSize = 100;  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: if (parts.Length != 7) {  	throw new InvalidDataException ("Template lacks required number of parts");  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: try {  	Name = JsonConverter.B64dec (parts [0]);  	Subject = JsonConverter.B64dec (parts [1]);  	Text = JsonConverter.B64dec (parts [2]);  	ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  	if ((ChunkSize = int.Parse (parts [4])) < 0) {  		throw new InvalidDataException ("Size is negative");  	}  	From = JsonConverter.B64dec (parts [5]);  	To = JsonConverter.B64dec (parts [6]);  }  catch (Exception eBase) {  	throw new InvalidDataException ("Parts are not valid base64 data"' eBase);  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: try {  	Name = JsonConverter.B64dec (parts [0]);  	Subject = JsonConverter.B64dec (parts [1]);  	Text = JsonConverter.B64dec (parts [2]);  	ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  	if ((ChunkSize = int.Parse (parts [4])) < 0) {  		throw new InvalidDataException ("Size is negative");  	}  	From = JsonConverter.B64dec (parts [5]);  	To = JsonConverter.B64dec (parts [6]);  }  catch (Exception eBase) {  	throw new InvalidDataException ("Parts are not valid base64 data"' eBase);  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: try {  	Name = JsonConverter.B64dec (parts [0]);  	Subject = JsonConverter.B64dec (parts [1]);  	Text = JsonConverter.B64dec (parts [2]);  	ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  	if ((ChunkSize = int.Parse (parts [4])) < 0) {  		throw new InvalidDataException ("Size is negative");  	}  	From = JsonConverter.B64dec (parts [5]);  	To = JsonConverter.B64dec (parts [6]);  }  catch (Exception eBase) {  	throw new InvalidDataException ("Parts are not valid base64 data"' eBase);  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: try {  	Name = JsonConverter.B64dec (parts [0]);  	Subject = JsonConverter.B64dec (parts [1]);  	Text = JsonConverter.B64dec (parts [2]);  	ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  	if ((ChunkSize = int.Parse (parts [4])) < 0) {  		throw new InvalidDataException ("Size is negative");  	}  	From = JsonConverter.B64dec (parts [5]);  	To = JsonConverter.B64dec (parts [6]);  }  catch (Exception eBase) {  	throw new InvalidDataException ("Parts are not valid base64 data"' eBase);  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: try {  	Name = JsonConverter.B64dec (parts [0]);  	Subject = JsonConverter.B64dec (parts [1]);  	Text = JsonConverter.B64dec (parts [2]);  	ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  	if ((ChunkSize = int.Parse (parts [4])) < 0) {  		throw new InvalidDataException ("Size is negative");  	}  	From = JsonConverter.B64dec (parts [5]);  	To = JsonConverter.B64dec (parts [6]);  }  catch (Exception eBase) {  	throw new InvalidDataException ("Parts are not valid base64 data"' eBase);  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: Text = JsonConverter.B64dec (parts [2]);  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: ProposedFormat = (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' parts [3]);  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: if ((ChunkSize = int.Parse (parts [4])) < 0) {  	throw new InvalidDataException ("Size is negative");  }  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: From = JsonConverter.B64dec (parts [5]);  
Magic Number,BinSend,Template,C:\repos\AyrA_BinSend\BinSend\clsTemplate.cs,Template,The following statement contains a magic number: To = JsonConverter.B64dec (parts [6]);  
Magic Number,BinSend,Templates,C:\repos\AyrA_BinSend\BinSend\clsTemplates.cs,createStructure,The following statement contains a magic number: T.ChunkSize = 100;  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,t_send,The following statement contains a magic number: while (AMSG == "msgqueued" || AMSG == "broadcastqueued" || AMSG == "doingpubkeypow" || AMSG == "awaitingpubkey" || AMSG == "doingmsgpow" || AMSG == "doingpow" || AMSG == "findingPubkey") {  	Thread.Sleep (1000);  	AMSG = BA.getStatus (ackData).ToLower ().Trim ();  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,t_send,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,encode,The following statement contains a magic number: switch (ef) {  case EncodingFormat.Ascii85:  	return new Ascii85 ().Encode (data);  case EncodingFormat.Base64:  	return splitLine (Convert.ToBase64String (data)' 78);  case EncodingFormat.Hex:  	return Hex (data);  //case EncodingFormat.yEnc:  //return Encoding.GetEncoding("IBM437").GetString(yEnc.yEnc.Encode(data));  //case EncodingFormat.BitEnc:  //return bitEnc.encode(data);  case EncodingFormat.Raw:  	return Encoding.UTF8.GetString (data);  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,encode,The following statement contains a magic number: return splitLine (Convert.ToBase64String (data)' 78);  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: if (src.Length % 2 == 0) {  	retVal = new byte[src.Length / 2];  	for (int i = 0; i < src.Length; i += 2) {  		retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  	return retVal;  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: if (src.Length % 2 == 0) {  	retVal = new byte[src.Length / 2];  	for (int i = 0; i < src.Length; i += 2) {  		retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  	return retVal;  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: if (src.Length % 2 == 0) {  	retVal = new byte[src.Length / 2];  	for (int i = 0; i < src.Length; i += 2) {  		retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  	return retVal;  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: if (src.Length % 2 == 0) {  	retVal = new byte[src.Length / 2];  	for (int i = 0; i < src.Length; i += 2) {  		retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  	return retVal;  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: if (src.Length % 2 == 0) {  	retVal = new byte[src.Length / 2];  	for (int i = 0; i < src.Length; i += 2) {  		retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  	return retVal;  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: retVal = new byte[src.Length / 2];  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: for (int i = 0; i < src.Length; i += 2) {  	retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: for (int i = 0; i < src.Length; i += 2) {  	retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: for (int i = 0; i < src.Length; i += 2) {  	retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: i += 2
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Unhex,The following statement contains a magic number: retVal [i / 2] = byte.Parse (src.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Hex,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	SB.Append (data [i].ToString ("X2"));  	if (i % 78 == 0 && i > 0) {  		SB.Append ("\n");  	}  }  
Magic Number,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,Hex,The following statement contains a magic number: if (i % 78 == 0 && i > 0) {  	SB.Append ("\n");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (source.Contains (SEQ_BEGIN)) {  	int temp = 0;  	bool ContentMode = false;  	string encData = string.Empty;  	source = source.Substring (source.IndexOf (SEQ_BEGIN) + SEQ_BEGIN.Length).Trim ();  	foreach (string Line in source.Split ('\n')) {  		if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  			if (ContentMode) {  				encData += Line.Trim ();  			}  			else if (Line.Contains ("=")) {  				switch (Line.Split ('=') [0].ToUpper ()) {  				case "NAME":  					FileName = Line.Split ('=') [1].Trim ();  					break;  				case "SAMEORIGIN":  					SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  					break;  				case "PART":  					if (Line.Split ('=') [1].Split (';').Length == 2) {  						if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  							MaxParts = temp;  						}  						else {  							throw new Exception ("Invalid Part specification");  						}  						if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  							Part = temp;  						}  						else {  							throw new Exception ("Invalid Part specification");  						}  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  					break;  				case "FORMAT":  					switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  					case "YENC":  						//Format = EncodingFormat.yEnc;  						break;  					case "BASE64":  						Format = EncodingFormat.Base64;  						break;  					case "ASCII85":  						Format = EncodingFormat.Ascii85;  						break;  					case "HEX":  						Format = EncodingFormat.Hex;  						break;  					case "BITENC":  						//Format = EncodingFormat.BitEnc;  						break;  					case "":  						throw new Exception ("No format specified");  					default:  						//Format we do not know yet  						Format = EncodingFormat.Unknown;  						break;  					}  					break;  				case "LENGTH":  					if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  						PartLength = temp;  					}  					else {  						throw new Exception ("Invalid Length specification");  					}  					break;  				case "HASHLIST":  					Hashes = Line.Split ('=') [1].Trim ().Split (''');  					for (temp = 0; temp < Hashes.Length; temp++) {  						Hashes [temp] = Hashes [temp].Trim ();  					}  					break;  				case "CONTENT":  					ContentMode = true;  					encData += Line.Split (new char[] {  						'='  					}' 2) [1].Trim ();  					break;  				default:  					//Unsupported value. Ignoring  					break;  				}  			}  			else {  				throw new Exception ("Invalid Line");  			}  		}  	}  	if (MaxParts != Hashes.Length) {  		throw new Exception ("hash count does not matches");  	}  	else {  		CurrentHash = Hashes [Part - 1];  	}  	data = ThreadedSender.decode (encData' Format);  }  else {  	throw new Exception ("No chunked header found");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (source.Contains (SEQ_BEGIN)) {  	int temp = 0;  	bool ContentMode = false;  	string encData = string.Empty;  	source = source.Substring (source.IndexOf (SEQ_BEGIN) + SEQ_BEGIN.Length).Trim ();  	foreach (string Line in source.Split ('\n')) {  		if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  			if (ContentMode) {  				encData += Line.Trim ();  			}  			else if (Line.Contains ("=")) {  				switch (Line.Split ('=') [0].ToUpper ()) {  				case "NAME":  					FileName = Line.Split ('=') [1].Trim ();  					break;  				case "SAMEORIGIN":  					SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  					break;  				case "PART":  					if (Line.Split ('=') [1].Split (';').Length == 2) {  						if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  							MaxParts = temp;  						}  						else {  							throw new Exception ("Invalid Part specification");  						}  						if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  							Part = temp;  						}  						else {  							throw new Exception ("Invalid Part specification");  						}  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  					break;  				case "FORMAT":  					switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  					case "YENC":  						//Format = EncodingFormat.yEnc;  						break;  					case "BASE64":  						Format = EncodingFormat.Base64;  						break;  					case "ASCII85":  						Format = EncodingFormat.Ascii85;  						break;  					case "HEX":  						Format = EncodingFormat.Hex;  						break;  					case "BITENC":  						//Format = EncodingFormat.BitEnc;  						break;  					case "":  						throw new Exception ("No format specified");  					default:  						//Format we do not know yet  						Format = EncodingFormat.Unknown;  						break;  					}  					break;  				case "LENGTH":  					if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  						PartLength = temp;  					}  					else {  						throw new Exception ("Invalid Length specification");  					}  					break;  				case "HASHLIST":  					Hashes = Line.Split ('=') [1].Trim ().Split (''');  					for (temp = 0; temp < Hashes.Length; temp++) {  						Hashes [temp] = Hashes [temp].Trim ();  					}  					break;  				case "CONTENT":  					ContentMode = true;  					encData += Line.Split (new char[] {  						'='  					}' 2) [1].Trim ();  					break;  				default:  					//Unsupported value. Ignoring  					break;  				}  			}  			else {  				throw new Exception ("Invalid Line");  			}  		}  	}  	if (MaxParts != Hashes.Length) {  		throw new Exception ("hash count does not matches");  	}  	else {  		CurrentHash = Hashes [Part - 1];  	}  	data = ThreadedSender.decode (encData' Format);  }  else {  	throw new Exception ("No chunked header found");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: foreach (string Line in source.Split ('\n')) {  	if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  		if (ContentMode) {  			encData += Line.Trim ();  		}  		else if (Line.Contains ("=")) {  			switch (Line.Split ('=') [0].ToUpper ()) {  			case "NAME":  				FileName = Line.Split ('=') [1].Trim ();  				break;  			case "SAMEORIGIN":  				SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  				break;  			case "PART":  				if (Line.Split ('=') [1].Split (';').Length == 2) {  					if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  						MaxParts = temp;  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  					if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  						Part = temp;  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  				break;  			case "FORMAT":  				switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  				case "YENC":  					//Format = EncodingFormat.yEnc;  					break;  				case "BASE64":  					Format = EncodingFormat.Base64;  					break;  				case "ASCII85":  					Format = EncodingFormat.Ascii85;  					break;  				case "HEX":  					Format = EncodingFormat.Hex;  					break;  				case "BITENC":  					//Format = EncodingFormat.BitEnc;  					break;  				case "":  					throw new Exception ("No format specified");  				default:  					//Format we do not know yet  					Format = EncodingFormat.Unknown;  					break;  				}  				break;  			case "LENGTH":  				if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  					PartLength = temp;  				}  				else {  					throw new Exception ("Invalid Length specification");  				}  				break;  			case "HASHLIST":  				Hashes = Line.Split ('=') [1].Trim ().Split (''');  				for (temp = 0; temp < Hashes.Length; temp++) {  					Hashes [temp] = Hashes [temp].Trim ();  				}  				break;  			case "CONTENT":  				ContentMode = true;  				encData += Line.Split (new char[] {  					'='  				}' 2) [1].Trim ();  				break;  			default:  				//Unsupported value. Ignoring  				break;  			}  		}  		else {  			throw new Exception ("Invalid Line");  		}  	}  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: foreach (string Line in source.Split ('\n')) {  	if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  		if (ContentMode) {  			encData += Line.Trim ();  		}  		else if (Line.Contains ("=")) {  			switch (Line.Split ('=') [0].ToUpper ()) {  			case "NAME":  				FileName = Line.Split ('=') [1].Trim ();  				break;  			case "SAMEORIGIN":  				SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  				break;  			case "PART":  				if (Line.Split ('=') [1].Split (';').Length == 2) {  					if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  						MaxParts = temp;  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  					if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  						Part = temp;  					}  					else {  						throw new Exception ("Invalid Part specification");  					}  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  				break;  			case "FORMAT":  				switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  				case "YENC":  					//Format = EncodingFormat.yEnc;  					break;  				case "BASE64":  					Format = EncodingFormat.Base64;  					break;  				case "ASCII85":  					Format = EncodingFormat.Ascii85;  					break;  				case "HEX":  					Format = EncodingFormat.Hex;  					break;  				case "BITENC":  					//Format = EncodingFormat.BitEnc;  					break;  				case "":  					throw new Exception ("No format specified");  				default:  					//Format we do not know yet  					Format = EncodingFormat.Unknown;  					break;  				}  				break;  			case "LENGTH":  				if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  					PartLength = temp;  				}  				else {  					throw new Exception ("Invalid Length specification");  				}  				break;  			case "HASHLIST":  				Hashes = Line.Split ('=') [1].Trim ().Split (''');  				for (temp = 0; temp < Hashes.Length; temp++) {  					Hashes [temp] = Hashes [temp].Trim ();  				}  				break;  			case "CONTENT":  				ContentMode = true;  				encData += Line.Split (new char[] {  					'='  				}' 2) [1].Trim ();  				break;  			default:  				//Unsupported value. Ignoring  				break;  			}  		}  		else {  			throw new Exception ("Invalid Line");  		}  	}  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  	if (ContentMode) {  		encData += Line.Trim ();  	}  	else if (Line.Contains ("=")) {  		switch (Line.Split ('=') [0].ToUpper ()) {  		case "NAME":  			FileName = Line.Split ('=') [1].Trim ();  			break;  		case "SAMEORIGIN":  			SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  			break;  		case "PART":  			if (Line.Split ('=') [1].Split (';').Length == 2) {  				if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  					MaxParts = temp;  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  				if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  					Part = temp;  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			break;  		case "FORMAT":  			switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  			case "YENC":  				//Format = EncodingFormat.yEnc;  				break;  			case "BASE64":  				Format = EncodingFormat.Base64;  				break;  			case "ASCII85":  				Format = EncodingFormat.Ascii85;  				break;  			case "HEX":  				Format = EncodingFormat.Hex;  				break;  			case "BITENC":  				//Format = EncodingFormat.BitEnc;  				break;  			case "":  				throw new Exception ("No format specified");  			default:  				//Format we do not know yet  				Format = EncodingFormat.Unknown;  				break;  			}  			break;  		case "LENGTH":  			if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  				PartLength = temp;  			}  			else {  				throw new Exception ("Invalid Length specification");  			}  			break;  		case "HASHLIST":  			Hashes = Line.Split ('=') [1].Trim ().Split (''');  			for (temp = 0; temp < Hashes.Length; temp++) {  				Hashes [temp] = Hashes [temp].Trim ();  			}  			break;  		case "CONTENT":  			ContentMode = true;  			encData += Line.Split (new char[] {  				'='  			}' 2) [1].Trim ();  			break;  		default:  			//Unsupported value. Ignoring  			break;  		}  	}  	else {  		throw new Exception ("Invalid Line");  	}  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (Line.Length > 0 && (ContentMode || !Line.StartsWith (";"))) {  	if (ContentMode) {  		encData += Line.Trim ();  	}  	else if (Line.Contains ("=")) {  		switch (Line.Split ('=') [0].ToUpper ()) {  		case "NAME":  			FileName = Line.Split ('=') [1].Trim ();  			break;  		case "SAMEORIGIN":  			SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  			break;  		case "PART":  			if (Line.Split ('=') [1].Split (';').Length == 2) {  				if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  					MaxParts = temp;  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  				if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  					Part = temp;  				}  				else {  					throw new Exception ("Invalid Part specification");  				}  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			break;  		case "FORMAT":  			switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  			case "YENC":  				//Format = EncodingFormat.yEnc;  				break;  			case "BASE64":  				Format = EncodingFormat.Base64;  				break;  			case "ASCII85":  				Format = EncodingFormat.Ascii85;  				break;  			case "HEX":  				Format = EncodingFormat.Hex;  				break;  			case "BITENC":  				//Format = EncodingFormat.BitEnc;  				break;  			case "":  				throw new Exception ("No format specified");  			default:  				//Format we do not know yet  				Format = EncodingFormat.Unknown;  				break;  			}  			break;  		case "LENGTH":  			if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  				PartLength = temp;  			}  			else {  				throw new Exception ("Invalid Length specification");  			}  			break;  		case "HASHLIST":  			Hashes = Line.Split ('=') [1].Trim ().Split (''');  			for (temp = 0; temp < Hashes.Length; temp++) {  				Hashes [temp] = Hashes [temp].Trim ();  			}  			break;  		case "CONTENT":  			ContentMode = true;  			encData += Line.Split (new char[] {  				'='  			}' 2) [1].Trim ();  			break;  		default:  			//Unsupported value. Ignoring  			break;  		}  	}  	else {  		throw new Exception ("Invalid Line");  	}  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (ContentMode) {  	encData += Line.Trim ();  }  else if (Line.Contains ("=")) {  	switch (Line.Split ('=') [0].ToUpper ()) {  	case "NAME":  		FileName = Line.Split ('=') [1].Trim ();  		break;  	case "SAMEORIGIN":  		SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  		break;  	case "PART":  		if (Line.Split ('=') [1].Split (';').Length == 2) {  			if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  				MaxParts = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  				Part = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		break;  	case "FORMAT":  		switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  		case "YENC":  			//Format = EncodingFormat.yEnc;  			break;  		case "BASE64":  			Format = EncodingFormat.Base64;  			break;  		case "ASCII85":  			Format = EncodingFormat.Ascii85;  			break;  		case "HEX":  			Format = EncodingFormat.Hex;  			break;  		case "BITENC":  			//Format = EncodingFormat.BitEnc;  			break;  		case "":  			throw new Exception ("No format specified");  		default:  			//Format we do not know yet  			Format = EncodingFormat.Unknown;  			break;  		}  		break;  	case "LENGTH":  		if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  			PartLength = temp;  		}  		else {  			throw new Exception ("Invalid Length specification");  		}  		break;  	case "HASHLIST":  		Hashes = Line.Split ('=') [1].Trim ().Split (''');  		for (temp = 0; temp < Hashes.Length; temp++) {  			Hashes [temp] = Hashes [temp].Trim ();  		}  		break;  	case "CONTENT":  		ContentMode = true;  		encData += Line.Split (new char[] {  			'='  		}' 2) [1].Trim ();  		break;  	default:  		//Unsupported value. Ignoring  		break;  	}  }  else {  	throw new Exception ("Invalid Line");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (ContentMode) {  	encData += Line.Trim ();  }  else if (Line.Contains ("=")) {  	switch (Line.Split ('=') [0].ToUpper ()) {  	case "NAME":  		FileName = Line.Split ('=') [1].Trim ();  		break;  	case "SAMEORIGIN":  		SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  		break;  	case "PART":  		if (Line.Split ('=') [1].Split (';').Length == 2) {  			if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  				MaxParts = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  				Part = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		break;  	case "FORMAT":  		switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  		case "YENC":  			//Format = EncodingFormat.yEnc;  			break;  		case "BASE64":  			Format = EncodingFormat.Base64;  			break;  		case "ASCII85":  			Format = EncodingFormat.Ascii85;  			break;  		case "HEX":  			Format = EncodingFormat.Hex;  			break;  		case "BITENC":  			//Format = EncodingFormat.BitEnc;  			break;  		case "":  			throw new Exception ("No format specified");  		default:  			//Format we do not know yet  			Format = EncodingFormat.Unknown;  			break;  		}  		break;  	case "LENGTH":  		if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  			PartLength = temp;  		}  		else {  			throw new Exception ("Invalid Length specification");  		}  		break;  	case "HASHLIST":  		Hashes = Line.Split ('=') [1].Trim ().Split (''');  		for (temp = 0; temp < Hashes.Length; temp++) {  			Hashes [temp] = Hashes [temp].Trim ();  		}  		break;  	case "CONTENT":  		ContentMode = true;  		encData += Line.Split (new char[] {  			'='  		}' 2) [1].Trim ();  		break;  	default:  		//Unsupported value. Ignoring  		break;  	}  }  else {  	throw new Exception ("Invalid Line");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (Line.Contains ("=")) {  	switch (Line.Split ('=') [0].ToUpper ()) {  	case "NAME":  		FileName = Line.Split ('=') [1].Trim ();  		break;  	case "SAMEORIGIN":  		SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  		break;  	case "PART":  		if (Line.Split ('=') [1].Split (';').Length == 2) {  			if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  				MaxParts = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  				Part = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		break;  	case "FORMAT":  		switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  		case "YENC":  			//Format = EncodingFormat.yEnc;  			break;  		case "BASE64":  			Format = EncodingFormat.Base64;  			break;  		case "ASCII85":  			Format = EncodingFormat.Ascii85;  			break;  		case "HEX":  			Format = EncodingFormat.Hex;  			break;  		case "BITENC":  			//Format = EncodingFormat.BitEnc;  			break;  		case "":  			throw new Exception ("No format specified");  		default:  			//Format we do not know yet  			Format = EncodingFormat.Unknown;  			break;  		}  		break;  	case "LENGTH":  		if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  			PartLength = temp;  		}  		else {  			throw new Exception ("Invalid Length specification");  		}  		break;  	case "HASHLIST":  		Hashes = Line.Split ('=') [1].Trim ().Split (''');  		for (temp = 0; temp < Hashes.Length; temp++) {  			Hashes [temp] = Hashes [temp].Trim ();  		}  		break;  	case "CONTENT":  		ContentMode = true;  		encData += Line.Split (new char[] {  			'='  		}' 2) [1].Trim ();  		break;  	default:  		//Unsupported value. Ignoring  		break;  	}  }  else {  	throw new Exception ("Invalid Line");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (Line.Contains ("=")) {  	switch (Line.Split ('=') [0].ToUpper ()) {  	case "NAME":  		FileName = Line.Split ('=') [1].Trim ();  		break;  	case "SAMEORIGIN":  		SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  		break;  	case "PART":  		if (Line.Split ('=') [1].Split (';').Length == 2) {  			if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  				MaxParts = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  			if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  				Part = temp;  			}  			else {  				throw new Exception ("Invalid Part specification");  			}  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		break;  	case "FORMAT":  		switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  		case "YENC":  			//Format = EncodingFormat.yEnc;  			break;  		case "BASE64":  			Format = EncodingFormat.Base64;  			break;  		case "ASCII85":  			Format = EncodingFormat.Ascii85;  			break;  		case "HEX":  			Format = EncodingFormat.Hex;  			break;  		case "BITENC":  			//Format = EncodingFormat.BitEnc;  			break;  		case "":  			throw new Exception ("No format specified");  		default:  			//Format we do not know yet  			Format = EncodingFormat.Unknown;  			break;  		}  		break;  	case "LENGTH":  		if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  			PartLength = temp;  		}  		else {  			throw new Exception ("Invalid Length specification");  		}  		break;  	case "HASHLIST":  		Hashes = Line.Split ('=') [1].Trim ().Split (''');  		for (temp = 0; temp < Hashes.Length; temp++) {  			Hashes [temp] = Hashes [temp].Trim ();  		}  		break;  	case "CONTENT":  		ContentMode = true;  		encData += Line.Split (new char[] {  			'='  		}' 2) [1].Trim ();  		break;  	default:  		//Unsupported value. Ignoring  		break;  	}  }  else {  	throw new Exception ("Invalid Line");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: switch (Line.Split ('=') [0].ToUpper ()) {  case "NAME":  	FileName = Line.Split ('=') [1].Trim ();  	break;  case "SAMEORIGIN":  	SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  	break;  case "PART":  	if (Line.Split ('=') [1].Split (';').Length == 2) {  		if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  			MaxParts = temp;  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  			Part = temp;  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  	}  	else {  		throw new Exception ("Invalid Part specification");  	}  	break;  case "FORMAT":  	switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  	case "YENC":  		//Format = EncodingFormat.yEnc;  		break;  	case "BASE64":  		Format = EncodingFormat.Base64;  		break;  	case "ASCII85":  		Format = EncodingFormat.Ascii85;  		break;  	case "HEX":  		Format = EncodingFormat.Hex;  		break;  	case "BITENC":  		//Format = EncodingFormat.BitEnc;  		break;  	case "":  		throw new Exception ("No format specified");  	default:  		//Format we do not know yet  		Format = EncodingFormat.Unknown;  		break;  	}  	break;  case "LENGTH":  	if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  		PartLength = temp;  	}  	else {  		throw new Exception ("Invalid Length specification");  	}  	break;  case "HASHLIST":  	Hashes = Line.Split ('=') [1].Trim ().Split (''');  	for (temp = 0; temp < Hashes.Length; temp++) {  		Hashes [temp] = Hashes [temp].Trim ();  	}  	break;  case "CONTENT":  	ContentMode = true;  	encData += Line.Split (new char[] {  		'='  	}' 2) [1].Trim ();  	break;  default:  	//Unsupported value. Ignoring  	break;  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: switch (Line.Split ('=') [0].ToUpper ()) {  case "NAME":  	FileName = Line.Split ('=') [1].Trim ();  	break;  case "SAMEORIGIN":  	SameOrigin = (Line.Split ('=') [1].ToUpper ().Trim () == "YES");  	break;  case "PART":  	if (Line.Split ('=') [1].Split (';').Length == 2) {  		if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  			MaxParts = temp;  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  		if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  			Part = temp;  		}  		else {  			throw new Exception ("Invalid Part specification");  		}  	}  	else {  		throw new Exception ("Invalid Part specification");  	}  	break;  case "FORMAT":  	switch (Line.Split ('=') [1].ToUpper ().Trim ()) {  	case "YENC":  		//Format = EncodingFormat.yEnc;  		break;  	case "BASE64":  		Format = EncodingFormat.Base64;  		break;  	case "ASCII85":  		Format = EncodingFormat.Ascii85;  		break;  	case "HEX":  		Format = EncodingFormat.Hex;  		break;  	case "BITENC":  		//Format = EncodingFormat.BitEnc;  		break;  	case "":  		throw new Exception ("No format specified");  	default:  		//Format we do not know yet  		Format = EncodingFormat.Unknown;  		break;  	}  	break;  case "LENGTH":  	if (int.TryParse (Line.Split ('=') [1].Trim ()' out temp) && temp > 0) {  		PartLength = temp;  	}  	else {  		throw new Exception ("Invalid Length specification");  	}  	break;  case "HASHLIST":  	Hashes = Line.Split ('=') [1].Trim ().Split (''');  	for (temp = 0; temp < Hashes.Length; temp++) {  		Hashes [temp] = Hashes [temp].Trim ();  	}  	break;  case "CONTENT":  	ContentMode = true;  	encData += Line.Split (new char[] {  		'='  	}' 2) [1].Trim ();  	break;  default:  	//Unsupported value. Ignoring  	break;  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: if (Line.Split ('=') [1].Split (';').Length == 2) {  	if (int.TryParse (Line.Split ('=') [1].Split (';') [1].Trim ()' out temp) && temp > 0) {  		MaxParts = temp;  	}  	else {  		throw new Exception ("Invalid Part specification");  	}  	if (int.TryParse (Line.Split ('=') [1].Split (';') [0].Trim ()' out temp) && temp > 0 && temp <= MaxParts) {  		Part = temp;  	}  	else {  		throw new Exception ("Invalid Part specification");  	}  }  else {  	throw new Exception ("Invalid Part specification");  }  
Magic Number,BinSend,ValidPart,C:\repos\AyrA_BinSend\BinSend\clsValidPart.cs,ValidPart,The following statement contains a magic number: encData += Line.Split (new char[] {  	'='  }' 2) [1].Trim ();  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (TS == null) {  	if (cbTo.Text.Length > 0) {  		if (OFD.ShowDialog () == DialogResult.OK) {  			TimeToSend = 0;  			lblStatus.Text = "Sending first part and calculate time...";  			TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  			TS.chunkSent += new chunkSentHandler (TS_chunkSent);  			TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  			TS.send ();  			btnFile.Enabled = false;  		}  	}  	else {  		MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		cbTo.Select ();  	}  }  else {  	MessageBox.Show ("Please wait. I am still sending");  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (TS == null) {  	if (cbTo.Text.Length > 0) {  		if (OFD.ShowDialog () == DialogResult.OK) {  			TimeToSend = 0;  			lblStatus.Text = "Sending first part and calculate time...";  			TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  			TS.chunkSent += new chunkSentHandler (TS_chunkSent);  			TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  			TS.send ();  			btnFile.Enabled = false;  		}  	}  	else {  		MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		cbTo.Select ();  	}  }  else {  	MessageBox.Show ("Please wait. I am still sending");  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (TS == null) {  	if (cbTo.Text.Length > 0) {  		if (OFD.ShowDialog () == DialogResult.OK) {  			TimeToSend = 0;  			lblStatus.Text = "Sending first part and calculate time...";  			TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  			TS.chunkSent += new chunkSentHandler (TS_chunkSent);  			TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  			TS.send ();  			btnFile.Enabled = false;  		}  	}  	else {  		MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		cbTo.Select ();  	}  }  else {  	MessageBox.Show ("Please wait. I am still sending");  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (TS == null) {  	if (cbTo.Text.Length > 0) {  		if (OFD.ShowDialog () == DialogResult.OK) {  			TimeToSend = 0;  			lblStatus.Text = "Sending first part and calculate time...";  			TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  			TS.chunkSent += new chunkSentHandler (TS_chunkSent);  			TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  			TS.send ();  			btnFile.Enabled = false;  		}  	}  	else {  		MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		cbTo.Select ();  	}  }  else {  	MessageBox.Show ("Please wait. I am still sending");  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (cbTo.Text.Length > 0) {  	if (OFD.ShowDialog () == DialogResult.OK) {  		TimeToSend = 0;  		lblStatus.Text = "Sending first part and calculate time...";  		TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  		TS.chunkSent += new chunkSentHandler (TS_chunkSent);  		TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  		TS.send ();  		btnFile.Enabled = false;  	}  }  else {  	MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	cbTo.Select ();  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (cbTo.Text.Length > 0) {  	if (OFD.ShowDialog () == DialogResult.OK) {  		TimeToSend = 0;  		lblStatus.Text = "Sending first part and calculate time...";  		TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  		TS.chunkSent += new chunkSentHandler (TS_chunkSent);  		TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  		TS.send ();  		btnFile.Enabled = false;  	}  }  else {  	MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	cbTo.Select ();  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (cbTo.Text.Length > 0) {  	if (OFD.ShowDialog () == DialogResult.OK) {  		TimeToSend = 0;  		lblStatus.Text = "Sending first part and calculate time...";  		TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  		TS.chunkSent += new chunkSentHandler (TS_chunkSent);  		TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  		TS.send ();  		btnFile.Enabled = false;  	}  }  else {  	MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	cbTo.Select ();  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (cbTo.Text.Length > 0) {  	if (OFD.ShowDialog () == DialogResult.OK) {  		TimeToSend = 0;  		lblStatus.Text = "Sending first part and calculate time...";  		TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  		TS.chunkSent += new chunkSentHandler (TS_chunkSent);  		TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  		TS.send ();  		btnFile.Enabled = false;  	}  }  else {  	MessageBox.Show ("Please enter an address into the 'To' Field"' "No receiver"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	cbTo.Select ();  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (OFD.ShowDialog () == DialogResult.OK) {  	TimeToSend = 0;  	lblStatus.Text = "Sending first part and calculate time...";  	TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  	TS.chunkSent += new chunkSentHandler (TS_chunkSent);  	TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  	TS.send ();  	btnFile.Enabled = false;  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (OFD.ShowDialog () == DialogResult.OK) {  	TimeToSend = 0;  	lblStatus.Text = "Sending first part and calculate time...";  	TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  	TS.chunkSent += new chunkSentHandler (TS_chunkSent);  	TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  	TS.send ();  	btnFile.Enabled = false;  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (OFD.ShowDialog () == DialogResult.OK) {  	TimeToSend = 0;  	lblStatus.Text = "Sending first part and calculate time...";  	TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  	TS.chunkSent += new chunkSentHandler (TS_chunkSent);  	TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  	TS.send ();  	btnFile.Enabled = false;  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: if (OFD.ShowDialog () == DialogResult.OK) {  	TimeToSend = 0;  	lblStatus.Text = "Sending first part and calculate time...";  	TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  	TS.chunkSent += new chunkSentHandler (TS_chunkSent);  	TS.taskFinished += new taskFinishedHandler (TS_taskFinished);  	TS.send ();  	btnFile.Enabled = false;  }  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  
Magic Number,BinSend,frmBinSend,C:\repos\AyrA_BinSend\BinSend\frmBinSend.cs,btnFile_Click,The following statement contains a magic number: TS = new ThreadedSender (OFD.SafeFileName' (EncodingFormat)Enum.Parse (typeof(EncodingFormat)' cbFormat.SelectedItem.ToString ())' cbFrom.SelectedItem.ToString ().Split (' ') [cbFrom.SelectedItem.ToString ().Split (' ').Length - 1]' cbTo.Text' tbSubject.Text' tbText.Text' File.ReadAllBytes (OFD.FileName)' nudKB.Value == 0 ? 180 * 1000 * 1000 : (int)nudKB.Value * 1024);  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The following statement contains a magic number: if (lbFiles.SelectedIndex >= 0) {  	lvParts.Items.Clear ();  	ValidPart[] FileParts = getFileParts (AllFiles [lbFiles.SelectedIndex]);  	if (FileParts.Length > 0) {  		foreach (ValidPart P in FileParts) {  			if (P != null) {  				var LVI = lvParts.Items.Add (P.FileName);  				LVI.SubItems.Add (string.Format ("{0:00} / {1:00}"' P.Part' P.MaxParts));  				LVI.SubItems.Add (P.CurrentHash);  				LVI.SubItems.Add (string.Format ("{0}"' P.PartLength / 1024));  				LVI.SubItems.Add (isValid (P' FileParts [0]) ? "Yes" : "No");  				LVI.BackColor = (isValid (P' FileParts [0]) ? G : R);  			}  			else {  				var LVI = lvParts.Items.Add ("--MISSING--");  				LVI.SubItems.Add ("? / ?");  				LVI.SubItems.Add ("Part not yet received");  				LVI.SubItems.Add ("0");  				LVI.SubItems.Add ("No");  				LVI.BackColor = R;  			}  		}  	}  	else {  		MessageBox.Show ("First part is missing. Cannot verify other parts without it"' "Part missing"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The following statement contains a magic number: if (FileParts.Length > 0) {  	foreach (ValidPart P in FileParts) {  		if (P != null) {  			var LVI = lvParts.Items.Add (P.FileName);  			LVI.SubItems.Add (string.Format ("{0:00} / {1:00}"' P.Part' P.MaxParts));  			LVI.SubItems.Add (P.CurrentHash);  			LVI.SubItems.Add (string.Format ("{0}"' P.PartLength / 1024));  			LVI.SubItems.Add (isValid (P' FileParts [0]) ? "Yes" : "No");  			LVI.BackColor = (isValid (P' FileParts [0]) ? G : R);  		}  		else {  			var LVI = lvParts.Items.Add ("--MISSING--");  			LVI.SubItems.Add ("? / ?");  			LVI.SubItems.Add ("Part not yet received");  			LVI.SubItems.Add ("0");  			LVI.SubItems.Add ("No");  			LVI.BackColor = R;  		}  	}  }  else {  	MessageBox.Show ("First part is missing. Cannot verify other parts without it"' "Part missing"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The following statement contains a magic number: foreach (ValidPart P in FileParts) {  	if (P != null) {  		var LVI = lvParts.Items.Add (P.FileName);  		LVI.SubItems.Add (string.Format ("{0:00} / {1:00}"' P.Part' P.MaxParts));  		LVI.SubItems.Add (P.CurrentHash);  		LVI.SubItems.Add (string.Format ("{0}"' P.PartLength / 1024));  		LVI.SubItems.Add (isValid (P' FileParts [0]) ? "Yes" : "No");  		LVI.BackColor = (isValid (P' FileParts [0]) ? G : R);  	}  	else {  		var LVI = lvParts.Items.Add ("--MISSING--");  		LVI.SubItems.Add ("? / ?");  		LVI.SubItems.Add ("Part not yet received");  		LVI.SubItems.Add ("0");  		LVI.SubItems.Add ("No");  		LVI.BackColor = R;  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The following statement contains a magic number: if (P != null) {  	var LVI = lvParts.Items.Add (P.FileName);  	LVI.SubItems.Add (string.Format ("{0:00} / {1:00}"' P.Part' P.MaxParts));  	LVI.SubItems.Add (P.CurrentHash);  	LVI.SubItems.Add (string.Format ("{0}"' P.PartLength / 1024));  	LVI.SubItems.Add (isValid (P' FileParts [0]) ? "Yes" : "No");  	LVI.BackColor = (isValid (P' FileParts [0]) ? G : R);  }  else {  	var LVI = lvParts.Items.Add ("--MISSING--");  	LVI.SubItems.Add ("? / ?");  	LVI.SubItems.Add ("Part not yet received");  	LVI.SubItems.Add ("0");  	LVI.SubItems.Add ("No");  	LVI.BackColor = R;  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lbFiles_SelectedIndexChanged,The following statement contains a magic number: LVI.SubItems.Add (string.Format ("{0}"' P.PartLength / 1024));  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,lvParts_DoubleClick,The following statement contains a magic number: if (lvParts.SelectedItems.Count > 0) {  	ValidPart P = getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text);  	if (P != null) {  		if (P.Tag != null) {  			MessageBox.Show (P.Tag.ToString ()' "Invalid part description"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  		}  		else {  			previewPart (P);  		}  	}  	else {  		MessageBox.Show ("This part is missing.\r\nIf it does not arrives soon'\r\nask the sender of the first part to send it again."' "Invalid part description"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnPreview_Click,The following statement contains a magic number: if (lvParts.SelectedItems.Count > 0) {  	previewPart (getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text));  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnPreview_Click,The following statement contains a magic number: previewPart (getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text));  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (i = 0; i < data.Length; i += 16) {  	line = string.Empty;  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			line += data [i + j].ToString ("X2") + " ";  		}  		else {  			//Fill up empty Space  			line += "   ";  		}  	}  	line = line + "\t";  	for (j = 0; j < 16; j++) {  		if (i + j < data.Length) {  			//Filter some Invalid chars  			if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  				line += (char)data [i + j];  			}  			else {  				line += ".";  			}  		}  		else {  			//Fill up empty Space  			line += " ";  		}  	}  	retValue += line + "\r\n";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: i += 16
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (j = 0; j < 16; j++) {  	if (i + j < data.Length) {  		line += data [i + j].ToString ("X2") + " ";  	}  	else {  		//Fill up empty Space  		line += "   ";  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (j = 0; j < 16; j++) {  	if (i + j < data.Length) {  		//Filter some Invalid chars  		if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  			line += (char)data [i + j];  		}  		else {  			line += ".";  		}  	}  	else {  		//Fill up empty Space  		line += " ";  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (j = 0; j < 16; j++) {  	if (i + j < data.Length) {  		//Filter some Invalid chars  		if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  			line += (char)data [i + j];  		}  		else {  			line += ".";  		}  	}  	else {  		//Fill up empty Space  		line += " ";  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (j = 0; j < 16; j++) {  	if (i + j < data.Length) {  		//Filter some Invalid chars  		if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  			line += (char)data [i + j];  		}  		else {  			line += ".";  		}  	}  	else {  		//Fill up empty Space  		line += " ";  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: for (j = 0; j < 16; j++) {  	if (i + j < data.Length) {  		//Filter some Invalid chars  		if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  			line += (char)data [i + j];  		}  		else {  			line += ".";  		}  	}  	else {  		//Fill up empty Space  		line += " ";  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (i + j < data.Length) {  	//Filter some Invalid chars  	if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  		line += (char)data [i + j];  	}  	else {  		line += ".";  	}  }  else {  	//Fill up empty Space  	line += " ";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (i + j < data.Length) {  	//Filter some Invalid chars  	if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  		line += (char)data [i + j];  	}  	else {  		line += ".";  	}  }  else {  	//Fill up empty Space  	line += " ";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (i + j < data.Length) {  	//Filter some Invalid chars  	if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  		line += (char)data [i + j];  	}  	else {  		line += ".";  	}  }  else {  	//Fill up empty Space  	line += " ";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  	line += (char)data [i + j];  }  else {  	line += ".";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  	line += (char)data [i + j];  }  else {  	line += ".";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,HexView,The following statement contains a magic number: if (data [i + j] >= 32 && data [i + j] != 127 && data [i + j] != 128 && (data [i + j] <= 0x80 || data [i + j] >= 0xA0)) {  	line += (char)data [i + j];  }  else {  	line += ".";  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnDelPart_Click,The following statement contains a magic number: if (lvParts.SelectedItems.Count > 0) {  	if (MessageBox.Show ("Delete all selected parts?"' "Deleting Parts"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  		lvParts.SuspendLayout ();  		while (lvParts.SelectedItems.Count > 0) {  			ValidPart P = getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text);  			if (P != null) {  				BA.trashMessage (P.ID);  				if (File.Exists (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part))) {  					File.Delete (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part));  				}  				lvParts.SelectedItems [0].Remove ();  			}  		}  		lvParts.ResumeLayout ();  	}  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnDelPart_Click,The following statement contains a magic number: if (MessageBox.Show ("Delete all selected parts?"' "Deleting Parts"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) {  	lvParts.SuspendLayout ();  	while (lvParts.SelectedItems.Count > 0) {  		ValidPart P = getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text);  		if (P != null) {  			BA.trashMessage (P.ID);  			if (File.Exists (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part))) {  				File.Delete (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part));  			}  			lvParts.SelectedItems [0].Remove ();  		}  	}  	lvParts.ResumeLayout ();  }  
Magic Number,BinSend,frmPartCollector,C:\repos\AyrA_BinSend\BinSend\frmPartCollector.cs,btnDelPart_Click,The following statement contains a magic number: while (lvParts.SelectedItems.Count > 0) {  	ValidPart P = getPartByHash (lvParts.SelectedItems [0].SubItems [2].Text);  	if (P != null) {  		BA.trashMessage (P.ID);  		if (File.Exists (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part))) {  			File.Delete (string.Format (@"PARTS\{0}.{1}"' P.FileName' P.Part));  		}  		lvParts.SelectedItems [0].Remove ();  	}  }  
Magic Number,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,The following statement contains a magic number: if (e.Alt) {  	switch (e.KeyCode) {  	case Keys.D0:  	case Keys.D1:  	case Keys.D2:  	case Keys.D3:  	case Keys.D4:  	case Keys.D5:  	case Keys.D6:  		int s = tbText.SelectionStart;  		tbText.Text = string.Format ("{0}{1}{2}{3}{4}"' tbText.Text.Substring (0' s)' "{"' (int)e.KeyCode - (int)Keys.D0' "}"' tbText.Text.Substring (s));  		tbText.SelectionStart = s + 3;  		break;  	}  }  
Magic Number,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.D0:  case Keys.D1:  case Keys.D2:  case Keys.D3:  case Keys.D4:  case Keys.D5:  case Keys.D6:  	int s = tbText.SelectionStart;  	tbText.Text = string.Format ("{0}{1}{2}{3}{4}"' tbText.Text.Substring (0' s)' "{"' (int)e.KeyCode - (int)Keys.D0' "}"' tbText.Text.Substring (s));  	tbText.SelectionStart = s + 3;  	break;  }  
Magic Number,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,The following statement contains a magic number: tbText.SelectionStart = s + 3;  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,encode,The following statement contains a magic number: foreach (byte b in src) {  	if (b < 128) {  		MS.WriteByte (b);  	}  	else {  		MS.WriteByte ((byte)(0xC0 | ((b & 0xC0) >> 6)));  		//leftmost 2 bits + Header  		MS.WriteByte ((byte)(0x80 | (b & 0x3F)));  		//rightmost 6 bits + cont value  	}  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,encode,The following statement contains a magic number: foreach (byte b in src) {  	if (b < 128) {  		MS.WriteByte (b);  	}  	else {  		MS.WriteByte ((byte)(0xC0 | ((b & 0xC0) >> 6)));  		//leftmost 2 bits + Header  		MS.WriteByte ((byte)(0x80 | (b & 0x3F)));  		//rightmost 6 bits + cont value  	}  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,encode,The following statement contains a magic number: if (b < 128) {  	MS.WriteByte (b);  }  else {  	MS.WriteByte ((byte)(0xC0 | ((b & 0xC0) >> 6)));  	//leftmost 2 bits + Header  	MS.WriteByte ((byte)(0x80 | (b & 0x3F)));  	//rightmost 6 bits + cont value  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,encode,The following statement contains a magic number: if (b < 128) {  	MS.WriteByte (b);  }  else {  	MS.WriteByte ((byte)(0xC0 | ((b & 0xC0) >> 6)));  	//leftmost 2 bits + Header  	MS.WriteByte ((byte)(0x80 | (b & 0x3F)));  	//rightmost 6 bits + cont value  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,encode,The following statement contains a magic number: MS.WriteByte ((byte)(0xC0 | ((b & 0xC0) >> 6)));  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,decode,The following statement contains a magic number: for (int i = 0; i < source.Length; i++) {  	//checks for header  	if ((source [i] & 0xC0) == 0xC0) {  		//grab 2 bits from header  		//grab 6 continuation bits and put it into the left  		byte b = (byte)(((source [i] & 0x03) << 6) | (source [i + 1] & 0x3F));  		MS.WriteByte (b);  		i++;  	}  	else {  		MS.WriteByte (source [i]);  	}  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,decode,The following statement contains a magic number: if ((source [i] & 0xC0) == 0xC0) {  	//grab 2 bits from header  	//grab 6 continuation bits and put it into the left  	byte b = (byte)(((source [i] & 0x03) << 6) | (source [i + 1] & 0x3F));  	MS.WriteByte (b);  	i++;  }  else {  	MS.WriteByte (source [i]);  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,test,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	b [i] = (byte)(i % 256);  }  
Magic Number,BinSend,utfEnc,C:\repos\AyrA_BinSend\BinSend\utfEnc.cs,test,The following statement contains a magic number: b [i] = (byte)(i % 256);  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	byte nb = (byte)((Source [Start + i] + 42) % 256);  	switch (nb) {  	case 0:  	case 9:  	case 10:  	case 13:  	case 32:  	case 46:  	case 61:  		MS.Write (new byte[] {  			(byte)'=''  			(byte)((nb + 64) % 256)  		}' 0' 2);  		break;  	default:  		MS.WriteByte (nb);  		break;  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: switch (nb) {  case 0:  case 9:  case 10:  case 13:  case 32:  case 46:  case 61:  	MS.Write (new byte[] {  		(byte)'=''  		(byte)((nb + 64) % 256)  	}' 0' 2);  	break;  default:  	MS.WriteByte (nb);  	break;  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: MS.Write (new byte[] {  	(byte)'=''  	(byte)((nb + 64) % 256)  }' 0' 2);  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: MS.Write (new byte[] {  	(byte)'=''  	(byte)((nb + 64) % 256)  }' 0' 2);  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Encode,The following statement contains a magic number: MS.Write (new byte[] {  	(byte)'=''  	(byte)((nb + 64) % 256)  }' 0' 2);  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: for (int i = 0; i < Length; i++) {  	if (Source [Index + i] == 61) {  		escape = true;  	}  	else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  		byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  		if (escape) {  			escape = false;  			MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  		}  		else {  			MS.WriteByte (nb);  		}  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] == 61) {  	escape = true;  }  else if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (Source [Index + i] != 13 && Source [Index + i] != 10) {  	byte nb = (byte)((Source [Index + i] + (256 - 42)) % 256);  	if (escape) {  		escape = false;  		MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  	}  	else {  		MS.WriteByte (nb);  	}  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (escape) {  	escape = false;  	MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  }  else {  	MS.WriteByte (nb);  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (escape) {  	escape = false;  	MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  }  else {  	MS.WriteByte (nb);  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: if (escape) {  	escape = false;  	MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  }  else {  	MS.WriteByte (nb);  }  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  
Magic Number,yEnc,yEnc,C:\repos\AyrA_BinSend\BinSend\yEnc.cs,Decode,The following statement contains a magic number: MS.WriteByte ((byte)((nb + (256 - 64)) % 256));  
Missing Default,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,encode,The following switch statement is missing a default case: switch (ef) {  case EncodingFormat.Ascii85:  	return new Ascii85 ().Encode (data);  case EncodingFormat.Base64:  	return splitLine (Convert.ToBase64String (data)' 78);  case EncodingFormat.Hex:  	return Hex (data);  //case EncodingFormat.yEnc:  //return Encoding.GetEncoding("IBM437").GetString(yEnc.yEnc.Encode(data));  //case EncodingFormat.BitEnc:  //return bitEnc.encode(data);  case EncodingFormat.Raw:  	return Encoding.UTF8.GetString (data);  }  
Missing Default,BinSend,ThreadedSender,C:\repos\AyrA_BinSend\BinSend\clsThreadedSender.cs,decode,The following switch statement is missing a default case: switch (ef) {  case EncodingFormat.Ascii85:  	return new Ascii85 ().Decode (data);  case EncodingFormat.Base64:  	return Convert.FromBase64String (data);  case EncodingFormat.Hex:  	return Unhex (data);  //case EncodingFormat.yEnc:  //return yEnc.yEnc.Decode(Encoding.GetEncoding("IBM437").GetBytes(data));  //case EncodingFormat.BitEnc:  //return bitEnc.decode(data);  case EncodingFormat.Raw:  	return Encoding.UTF8.GetBytes (data);  }  
Missing Default,BinSend,frmTemplateEditor,C:\repos\AyrA_BinSend\BinSend\frmTemplateEditor.cs,tbText_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.D0:  case Keys.D1:  case Keys.D2:  case Keys.D3:  case Keys.D4:  case Keys.D5:  case Keys.D6:  	int s = tbText.SelectionStart;  	tbText.Text = string.Format ("{0}{1}{2}{3}{4}"' tbText.Text.Substring (0' s)' "{"' (int)e.KeyCode - (int)Keys.D0' "}"' tbText.Text.Substring (s));  	tbText.SelectionStart = s + 3;  	break;  }  
